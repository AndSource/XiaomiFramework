package android.view;

import android.util.SparseArray;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.InspectionCompanion.UninitializedPropertyMapException;
import android.view.inspector.IntFlagMapping;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.util.Objects;

public final class View$InspectionCompanion
  implements InspectionCompanion<View>
{
  private int mAccessibilityFocusedId;
  private int mAccessibilityHeadingId;
  private int mAccessibilityLiveRegionId;
  private int mAccessibilityPaneTitleId;
  private int mAccessibilityTraversalAfterId;
  private int mAccessibilityTraversalBeforeId;
  private int mActivatedId;
  private int mAlphaId;
  private int mAutofillHintsId;
  private int mBackgroundId;
  private int mBackgroundTintId;
  private int mBackgroundTintModeId;
  private int mBaselineId;
  private int mClickableId;
  private int mContentDescriptionId;
  private int mContextClickableId;
  private int mDefaultFocusHighlightEnabledId;
  private int mDrawingCacheQualityId;
  private int mDuplicateParentStateId;
  private int mElevationId;
  private int mEnabledId;
  private int mFadingEdgeLengthId;
  private int mFilterTouchesWhenObscuredId;
  private int mFitsSystemWindowsId;
  private int mFocusableId;
  private int mFocusableInTouchModeId;
  private int mFocusedByDefaultId;
  private int mFocusedId;
  private int mForceDarkAllowedId;
  private int mForegroundGravityId;
  private int mForegroundId;
  private int mForegroundTintId;
  private int mForegroundTintModeId;
  private int mHapticFeedbackEnabledId;
  private int mIdId;
  private int mImportantForAccessibilityId;
  private int mImportantForAutofillId;
  private int mIsScrollContainerId;
  private int mKeepScreenOnId;
  private int mKeyboardNavigationClusterId;
  private int mLabelForId;
  private int mLayerTypeId;
  private int mLayoutDirectionId;
  private int mLongClickableId;
  private int mMinHeightId;
  private int mMinWidthId;
  private int mNestedScrollingEnabledId;
  private int mNextClusterForwardId;
  private int mNextFocusDownId;
  private int mNextFocusForwardId;
  private int mNextFocusLeftId;
  private int mNextFocusRightId;
  private int mNextFocusUpId;
  private int mOutlineAmbientShadowColorId;
  private int mOutlineProviderId;
  private int mOutlineSpotShadowColorId;
  private int mOverScrollModeId;
  private int mPaddingBottomId;
  private int mPaddingLeftId;
  private int mPaddingRightId;
  private int mPaddingTopId;
  private int mPointerIconId;
  private int mPressedId;
  private boolean mPropertiesMapped = false;
  private int mRawLayoutDirectionId;
  private int mRawTextAlignmentId;
  private int mRawTextDirectionId;
  private int mRequiresFadingEdgeId;
  private int mRotationId;
  private int mRotationXId;
  private int mRotationYId;
  private int mSaveEnabledId;
  private int mScaleXId;
  private int mScaleYId;
  private int mScreenReaderFocusableId;
  private int mScrollIndicatorsId;
  private int mScrollXId;
  private int mScrollYId;
  private int mScrollbarDefaultDelayBeforeFadeId;
  private int mScrollbarFadeDurationId;
  private int mScrollbarSizeId;
  private int mScrollbarStyleId;
  private int mSelectedId;
  private int mSolidColorId;
  private int mSoundEffectsEnabledId;
  private int mStateListAnimatorId;
  private int mTagId;
  private int mTextAlignmentId;
  private int mTextDirectionId;
  private int mTooltipTextId;
  private int mTransformPivotXId;
  private int mTransformPivotYId;
  private int mTransitionNameId;
  private int mTranslationXId;
  private int mTranslationYId;
  private int mTranslationZId;
  private int mVisibilityId;
  
  public void mapProperties(PropertyMapper paramPropertyMapper)
  {
    this.mAccessibilityFocusedId = paramPropertyMapper.mapBoolean("accessibilityFocused", 0);
    this.mAccessibilityHeadingId = paramPropertyMapper.mapBoolean("accessibilityHeading", 16844160);
    Object localObject = new SparseArray();
    ((SparseArray)localObject).put(0, "none");
    ((SparseArray)localObject).put(1, "polite");
    ((SparseArray)localObject).put(2, "assertive");
    Objects.requireNonNull(localObject);
    this.mAccessibilityLiveRegionId = paramPropertyMapper.mapIntEnum("accessibilityLiveRegion", 16843758, new _..Lambda.QY3N4tzLteuFdjRnyJFCbR1ajSI((SparseArray)localObject));
    this.mAccessibilityPaneTitleId = paramPropertyMapper.mapObject("accessibilityPaneTitle", 16844156);
    this.mAccessibilityTraversalAfterId = paramPropertyMapper.mapResourceId("accessibilityTraversalAfter", 16843986);
    this.mAccessibilityTraversalBeforeId = paramPropertyMapper.mapResourceId("accessibilityTraversalBefore", 16843985);
    this.mActivatedId = paramPropertyMapper.mapBoolean("activated", 0);
    this.mAlphaId = paramPropertyMapper.mapFloat("alpha", 16843551);
    this.mAutofillHintsId = paramPropertyMapper.mapObject("autofillHints", 16844118);
    this.mBackgroundId = paramPropertyMapper.mapObject("background", 16842964);
    this.mBackgroundTintId = paramPropertyMapper.mapObject("backgroundTint", 16843883);
    this.mBackgroundTintModeId = paramPropertyMapper.mapObject("backgroundTintMode", 16843884);
    this.mBaselineId = paramPropertyMapper.mapInt("baseline", 16843548);
    this.mClickableId = paramPropertyMapper.mapBoolean("clickable", 16842981);
    this.mContentDescriptionId = paramPropertyMapper.mapObject("contentDescription", 16843379);
    this.mContextClickableId = paramPropertyMapper.mapBoolean("contextClickable", 16844007);
    this.mDefaultFocusHighlightEnabledId = paramPropertyMapper.mapBoolean("defaultFocusHighlightEnabled", 16844130);
    localObject = new SparseArray();
    ((SparseArray)localObject).put(0, "auto");
    ((SparseArray)localObject).put(524288, "low");
    ((SparseArray)localObject).put(1048576, "high");
    Objects.requireNonNull(localObject);
    this.mDrawingCacheQualityId = paramPropertyMapper.mapIntEnum("drawingCacheQuality", 16842984, new _..Lambda.QY3N4tzLteuFdjRnyJFCbR1ajSI((SparseArray)localObject));
    this.mDuplicateParentStateId = paramPropertyMapper.mapBoolean("duplicateParentState", 16842985);
    this.mElevationId = paramPropertyMapper.mapFloat("elevation", 16843840);
    this.mEnabledId = paramPropertyMapper.mapBoolean("enabled", 16842766);
    this.mFadingEdgeLengthId = paramPropertyMapper.mapInt("fadingEdgeLength", 16842976);
    this.mFilterTouchesWhenObscuredId = paramPropertyMapper.mapBoolean("filterTouchesWhenObscured", 16843460);
    this.mFitsSystemWindowsId = paramPropertyMapper.mapBoolean("fitsSystemWindows", 16842973);
    localObject = new SparseArray();
    ((SparseArray)localObject).put(0, "false");
    ((SparseArray)localObject).put(1, "true");
    ((SparseArray)localObject).put(16, "auto");
    Objects.requireNonNull(localObject);
    this.mFocusableId = paramPropertyMapper.mapIntEnum("focusable", 16842970, new _..Lambda.QY3N4tzLteuFdjRnyJFCbR1ajSI((SparseArray)localObject));
    this.mFocusableInTouchModeId = paramPropertyMapper.mapBoolean("focusableInTouchMode", 16842971);
    this.mFocusedId = paramPropertyMapper.mapBoolean("focused", 0);
    this.mFocusedByDefaultId = paramPropertyMapper.mapBoolean("focusedByDefault", 16844100);
    this.mForceDarkAllowedId = paramPropertyMapper.mapBoolean("forceDarkAllowed", 16844172);
    this.mForegroundId = paramPropertyMapper.mapObject("foreground", 16843017);
    this.mForegroundGravityId = paramPropertyMapper.mapGravity("foregroundGravity", 16843264);
    this.mForegroundTintId = paramPropertyMapper.mapObject("foregroundTint", 16843885);
    this.mForegroundTintModeId = paramPropertyMapper.mapObject("foregroundTintMode", 16843886);
    this.mHapticFeedbackEnabledId = paramPropertyMapper.mapBoolean("hapticFeedbackEnabled", 16843358);
    this.mIdId = paramPropertyMapper.mapResourceId("id", 16842960);
    localObject = new SparseArray();
    ((SparseArray)localObject).put(0, "auto");
    ((SparseArray)localObject).put(1, "yes");
    ((SparseArray)localObject).put(2, "no");
    ((SparseArray)localObject).put(4, "noHideDescendants");
    Objects.requireNonNull(localObject);
    this.mImportantForAccessibilityId = paramPropertyMapper.mapIntEnum("importantForAccessibility", 16843690, new _..Lambda.QY3N4tzLteuFdjRnyJFCbR1ajSI((SparseArray)localObject));
    localObject = new SparseArray();
    ((SparseArray)localObject).put(0, "auto");
    ((SparseArray)localObject).put(1, "yes");
    ((SparseArray)localObject).put(2, "no");
    ((SparseArray)localObject).put(4, "yesExcludeDescendants");
    ((SparseArray)localObject).put(8, "noExcludeDescendants");
    Objects.requireNonNull(localObject);
    this.mImportantForAutofillId = paramPropertyMapper.mapIntEnum("importantForAutofill", 16844120, new _..Lambda.QY3N4tzLteuFdjRnyJFCbR1ajSI((SparseArray)localObject));
    this.mIsScrollContainerId = paramPropertyMapper.mapBoolean("isScrollContainer", 16843342);
    this.mKeepScreenOnId = paramPropertyMapper.mapBoolean("keepScreenOn", 16843286);
    this.mKeyboardNavigationClusterId = paramPropertyMapper.mapBoolean("keyboardNavigationCluster", 16844096);
    this.mLabelForId = paramPropertyMapper.mapResourceId("labelFor", 16843718);
    localObject = new SparseArray();
    ((SparseArray)localObject).put(0, "none");
    ((SparseArray)localObject).put(1, "software");
    ((SparseArray)localObject).put(2, "hardware");
    Objects.requireNonNull(localObject);
    this.mLayerTypeId = paramPropertyMapper.mapIntEnum("layerType", 16843604, new _..Lambda.QY3N4tzLteuFdjRnyJFCbR1ajSI((SparseArray)localObject));
    localObject = new SparseArray();
    ((SparseArray)localObject).put(0, "ltr");
    ((SparseArray)localObject).put(1, "rtl");
    Objects.requireNonNull(localObject);
    this.mLayoutDirectionId = paramPropertyMapper.mapIntEnum("layoutDirection", 16843698, new _..Lambda.QY3N4tzLteuFdjRnyJFCbR1ajSI((SparseArray)localObject));
    this.mLongClickableId = paramPropertyMapper.mapBoolean("longClickable", 16842982);
    this.mMinHeightId = paramPropertyMapper.mapInt("minHeight", 16843072);
    this.mMinWidthId = paramPropertyMapper.mapInt("minWidth", 16843071);
    this.mNestedScrollingEnabledId = paramPropertyMapper.mapBoolean("nestedScrollingEnabled", 16843830);
    this.mNextClusterForwardId = paramPropertyMapper.mapResourceId("nextClusterForward", 16844098);
    this.mNextFocusDownId = paramPropertyMapper.mapResourceId("nextFocusDown", 16842980);
    this.mNextFocusForwardId = paramPropertyMapper.mapResourceId("nextFocusForward", 16843580);
    this.mNextFocusLeftId = paramPropertyMapper.mapResourceId("nextFocusLeft", 16842977);
    this.mNextFocusRightId = paramPropertyMapper.mapResourceId("nextFocusRight", 16842978);
    this.mNextFocusUpId = paramPropertyMapper.mapResourceId("nextFocusUp", 16842979);
    this.mOutlineAmbientShadowColorId = paramPropertyMapper.mapColor("outlineAmbientShadowColor", 16844162);
    this.mOutlineProviderId = paramPropertyMapper.mapObject("outlineProvider", 16843960);
    this.mOutlineSpotShadowColorId = paramPropertyMapper.mapColor("outlineSpotShadowColor", 16844161);
    localObject = new SparseArray();
    ((SparseArray)localObject).put(0, "always");
    ((SparseArray)localObject).put(1, "ifContentScrolls");
    ((SparseArray)localObject).put(2, "never");
    Objects.requireNonNull(localObject);
    this.mOverScrollModeId = paramPropertyMapper.mapIntEnum("overScrollMode", 16843457, new _..Lambda.QY3N4tzLteuFdjRnyJFCbR1ajSI((SparseArray)localObject));
    this.mPaddingBottomId = paramPropertyMapper.mapInt("paddingBottom", 16842969);
    this.mPaddingLeftId = paramPropertyMapper.mapInt("paddingLeft", 16842966);
    this.mPaddingRightId = paramPropertyMapper.mapInt("paddingRight", 16842968);
    this.mPaddingTopId = paramPropertyMapper.mapInt("paddingTop", 16842967);
    this.mPointerIconId = paramPropertyMapper.mapObject("pointerIcon", 16844041);
    this.mPressedId = paramPropertyMapper.mapBoolean("pressed", 0);
    localObject = new SparseArray();
    ((SparseArray)localObject).put(0, "ltr");
    ((SparseArray)localObject).put(1, "rtl");
    ((SparseArray)localObject).put(2, "inherit");
    ((SparseArray)localObject).put(3, "locale");
    Objects.requireNonNull(localObject);
    this.mRawLayoutDirectionId = paramPropertyMapper.mapIntEnum("rawLayoutDirection", 0, new _..Lambda.QY3N4tzLteuFdjRnyJFCbR1ajSI((SparseArray)localObject));
    localObject = new SparseArray();
    ((SparseArray)localObject).put(0, "inherit");
    ((SparseArray)localObject).put(1, "gravity");
    ((SparseArray)localObject).put(2, "textStart");
    ((SparseArray)localObject).put(3, "textEnd");
    ((SparseArray)localObject).put(4, "center");
    ((SparseArray)localObject).put(5, "viewStart");
    ((SparseArray)localObject).put(6, "viewEnd");
    Objects.requireNonNull(localObject);
    this.mRawTextAlignmentId = paramPropertyMapper.mapIntEnum("rawTextAlignment", 0, new _..Lambda.QY3N4tzLteuFdjRnyJFCbR1ajSI((SparseArray)localObject));
    localObject = new SparseArray();
    ((SparseArray)localObject).put(0, "inherit");
    ((SparseArray)localObject).put(1, "firstStrong");
    ((SparseArray)localObject).put(2, "anyRtl");
    ((SparseArray)localObject).put(3, "ltr");
    ((SparseArray)localObject).put(4, "rtl");
    ((SparseArray)localObject).put(5, "locale");
    ((SparseArray)localObject).put(6, "firstStrongLtr");
    ((SparseArray)localObject).put(7, "firstStrongRtl");
    Objects.requireNonNull(localObject);
    this.mRawTextDirectionId = paramPropertyMapper.mapIntEnum("rawTextDirection", 0, new _..Lambda.QY3N4tzLteuFdjRnyJFCbR1ajSI((SparseArray)localObject));
    localObject = new IntFlagMapping();
    ((IntFlagMapping)localObject).add(4096, 4096, "horizontal");
    ((IntFlagMapping)localObject).add(12288, 0, "none");
    ((IntFlagMapping)localObject).add(8192, 8192, "vertical");
    Objects.requireNonNull(localObject);
    this.mRequiresFadingEdgeId = paramPropertyMapper.mapIntFlag("requiresFadingEdge", 16843685, new _..Lambda.gFNlJIKfxqleu304aRWP5R5v1yY((IntFlagMapping)localObject));
    this.mRotationId = paramPropertyMapper.mapFloat("rotation", 16843558);
    this.mRotationXId = paramPropertyMapper.mapFloat("rotationX", 16843559);
    this.mRotationYId = paramPropertyMapper.mapFloat("rotationY", 16843560);
    this.mSaveEnabledId = paramPropertyMapper.mapBoolean("saveEnabled", 16842983);
    this.mScaleXId = paramPropertyMapper.mapFloat("scaleX", 16843556);
    this.mScaleYId = paramPropertyMapper.mapFloat("scaleY", 16843557);
    this.mScreenReaderFocusableId = paramPropertyMapper.mapBoolean("screenReaderFocusable", 16844148);
    localObject = new IntFlagMapping();
    ((IntFlagMapping)localObject).add(2, 2, "bottom");
    ((IntFlagMapping)localObject).add(32, 32, "end");
    ((IntFlagMapping)localObject).add(4, 4, "left");
    ((IntFlagMapping)localObject).add(-1, 0, "none");
    ((IntFlagMapping)localObject).add(8, 8, "right");
    ((IntFlagMapping)localObject).add(16, 16, "start");
    ((IntFlagMapping)localObject).add(1, 1, "top");
    Objects.requireNonNull(localObject);
    this.mScrollIndicatorsId = paramPropertyMapper.mapIntFlag("scrollIndicators", 16844006, new _..Lambda.gFNlJIKfxqleu304aRWP5R5v1yY((IntFlagMapping)localObject));
    this.mScrollXId = paramPropertyMapper.mapInt("scrollX", 16842962);
    this.mScrollYId = paramPropertyMapper.mapInt("scrollY", 16842963);
    this.mScrollbarDefaultDelayBeforeFadeId = paramPropertyMapper.mapInt("scrollbarDefaultDelayBeforeFade", 16843433);
    this.mScrollbarFadeDurationId = paramPropertyMapper.mapInt("scrollbarFadeDuration", 16843432);
    this.mScrollbarSizeId = paramPropertyMapper.mapInt("scrollbarSize", 16842851);
    localObject = new SparseArray();
    ((SparseArray)localObject).put(0, "insideOverlay");
    ((SparseArray)localObject).put(16777216, "insideInset");
    ((SparseArray)localObject).put(33554432, "outsideOverlay");
    ((SparseArray)localObject).put(50331648, "outsideInset");
    Objects.requireNonNull(localObject);
    this.mScrollbarStyleId = paramPropertyMapper.mapIntEnum("scrollbarStyle", 16842879, new _..Lambda.QY3N4tzLteuFdjRnyJFCbR1ajSI((SparseArray)localObject));
    this.mSelectedId = paramPropertyMapper.mapBoolean("selected", 0);
    this.mSolidColorId = paramPropertyMapper.mapColor("solidColor", 16843594);
    this.mSoundEffectsEnabledId = paramPropertyMapper.mapBoolean("soundEffectsEnabled", 16843285);
    this.mStateListAnimatorId = paramPropertyMapper.mapObject("stateListAnimator", 16843848);
    this.mTagId = paramPropertyMapper.mapObject("tag", 16842961);
    localObject = new SparseArray();
    ((SparseArray)localObject).put(1, "gravity");
    ((SparseArray)localObject).put(2, "textStart");
    ((SparseArray)localObject).put(3, "textEnd");
    ((SparseArray)localObject).put(4, "center");
    ((SparseArray)localObject).put(5, "viewStart");
    ((SparseArray)localObject).put(6, "viewEnd");
    Objects.requireNonNull(localObject);
    this.mTextAlignmentId = paramPropertyMapper.mapIntEnum("textAlignment", 16843697, new _..Lambda.QY3N4tzLteuFdjRnyJFCbR1ajSI((SparseArray)localObject));
    localObject = new SparseArray();
    ((SparseArray)localObject).put(1, "firstStrong");
    ((SparseArray)localObject).put(2, "anyRtl");
    ((SparseArray)localObject).put(3, "ltr");
    ((SparseArray)localObject).put(4, "rtl");
    ((SparseArray)localObject).put(5, "locale");
    ((SparseArray)localObject).put(6, "firstStrongLtr");
    ((SparseArray)localObject).put(7, "firstStrongRtl");
    Objects.requireNonNull(localObject);
    this.mTextDirectionId = paramPropertyMapper.mapIntEnum("textDirection", 0, new _..Lambda.QY3N4tzLteuFdjRnyJFCbR1ajSI((SparseArray)localObject));
    this.mTooltipTextId = paramPropertyMapper.mapObject("tooltipText", 16844084);
    this.mTransformPivotXId = paramPropertyMapper.mapFloat("transformPivotX", 16843552);
    this.mTransformPivotYId = paramPropertyMapper.mapFloat("transformPivotY", 16843553);
    this.mTransitionNameId = paramPropertyMapper.mapObject("transitionName", 16843776);
    this.mTranslationXId = paramPropertyMapper.mapFloat("translationX", 16843554);
    this.mTranslationYId = paramPropertyMapper.mapFloat("translationY", 16843555);
    this.mTranslationZId = paramPropertyMapper.mapFloat("translationZ", 16843770);
    localObject = new SparseArray();
    ((SparseArray)localObject).put(0, "visible");
    ((SparseArray)localObject).put(4, "invisible");
    ((SparseArray)localObject).put(8, "gone");
    Objects.requireNonNull(localObject);
    this.mVisibilityId = paramPropertyMapper.mapIntEnum("visibility", 16842972, new _..Lambda.QY3N4tzLteuFdjRnyJFCbR1ajSI((SparseArray)localObject));
    this.mPropertiesMapped = true;
  }
  
  public void readProperties(View paramView, PropertyReader paramPropertyReader)
  {
    if (this.mPropertiesMapped)
    {
      paramPropertyReader.readBoolean(this.mAccessibilityFocusedId, paramView.isAccessibilityFocused());
      paramPropertyReader.readBoolean(this.mAccessibilityHeadingId, paramView.isAccessibilityHeading());
      paramPropertyReader.readIntEnum(this.mAccessibilityLiveRegionId, paramView.getAccessibilityLiveRegion());
      paramPropertyReader.readObject(this.mAccessibilityPaneTitleId, paramView.getAccessibilityPaneTitle());
      paramPropertyReader.readResourceId(this.mAccessibilityTraversalAfterId, paramView.getAccessibilityTraversalAfter());
      paramPropertyReader.readResourceId(this.mAccessibilityTraversalBeforeId, paramView.getAccessibilityTraversalBefore());
      paramPropertyReader.readBoolean(this.mActivatedId, paramView.isActivated());
      paramPropertyReader.readFloat(this.mAlphaId, paramView.getAlpha());
      paramPropertyReader.readObject(this.mAutofillHintsId, paramView.getAutofillHints());
      paramPropertyReader.readObject(this.mBackgroundId, paramView.getBackground());
      paramPropertyReader.readObject(this.mBackgroundTintId, paramView.getBackgroundTintList());
      paramPropertyReader.readObject(this.mBackgroundTintModeId, paramView.getBackgroundTintMode());
      paramPropertyReader.readInt(this.mBaselineId, paramView.getBaseline());
      paramPropertyReader.readBoolean(this.mClickableId, paramView.isClickable());
      paramPropertyReader.readObject(this.mContentDescriptionId, paramView.getContentDescription());
      paramPropertyReader.readBoolean(this.mContextClickableId, paramView.isContextClickable());
      paramPropertyReader.readBoolean(this.mDefaultFocusHighlightEnabledId, paramView.getDefaultFocusHighlightEnabled());
      paramPropertyReader.readIntEnum(this.mDrawingCacheQualityId, paramView.getDrawingCacheQuality());
      paramPropertyReader.readBoolean(this.mDuplicateParentStateId, paramView.isDuplicateParentStateEnabled());
      paramPropertyReader.readFloat(this.mElevationId, paramView.getElevation());
      paramPropertyReader.readBoolean(this.mEnabledId, paramView.isEnabled());
      paramPropertyReader.readInt(this.mFadingEdgeLengthId, paramView.getFadingEdgeLength());
      paramPropertyReader.readBoolean(this.mFilterTouchesWhenObscuredId, paramView.getFilterTouchesWhenObscured());
      paramPropertyReader.readBoolean(this.mFitsSystemWindowsId, paramView.getFitsSystemWindows());
      paramPropertyReader.readIntEnum(this.mFocusableId, paramView.getFocusable());
      paramPropertyReader.readBoolean(this.mFocusableInTouchModeId, paramView.isFocusableInTouchMode());
      paramPropertyReader.readBoolean(this.mFocusedId, paramView.isFocused());
      paramPropertyReader.readBoolean(this.mFocusedByDefaultId, paramView.isFocusedByDefault());
      paramPropertyReader.readBoolean(this.mForceDarkAllowedId, paramView.isForceDarkAllowed());
      paramPropertyReader.readObject(this.mForegroundId, paramView.getForeground());
      paramPropertyReader.readGravity(this.mForegroundGravityId, paramView.getForegroundGravity());
      paramPropertyReader.readObject(this.mForegroundTintId, paramView.getForegroundTintList());
      paramPropertyReader.readObject(this.mForegroundTintModeId, paramView.getForegroundTintMode());
      paramPropertyReader.readBoolean(this.mHapticFeedbackEnabledId, paramView.isHapticFeedbackEnabled());
      paramPropertyReader.readResourceId(this.mIdId, paramView.getId());
      paramPropertyReader.readIntEnum(this.mImportantForAccessibilityId, paramView.getImportantForAccessibility());
      paramPropertyReader.readIntEnum(this.mImportantForAutofillId, paramView.getImportantForAutofill());
      paramPropertyReader.readBoolean(this.mIsScrollContainerId, paramView.isScrollContainer());
      paramPropertyReader.readBoolean(this.mKeepScreenOnId, paramView.getKeepScreenOn());
      paramPropertyReader.readBoolean(this.mKeyboardNavigationClusterId, paramView.isKeyboardNavigationCluster());
      paramPropertyReader.readResourceId(this.mLabelForId, paramView.getLabelFor());
      paramPropertyReader.readIntEnum(this.mLayerTypeId, paramView.getLayerType());
      paramPropertyReader.readIntEnum(this.mLayoutDirectionId, paramView.getLayoutDirection());
      paramPropertyReader.readBoolean(this.mLongClickableId, paramView.isLongClickable());
      paramPropertyReader.readInt(this.mMinHeightId, paramView.getMinimumHeight());
      paramPropertyReader.readInt(this.mMinWidthId, paramView.getMinimumWidth());
      paramPropertyReader.readBoolean(this.mNestedScrollingEnabledId, paramView.isNestedScrollingEnabled());
      paramPropertyReader.readResourceId(this.mNextClusterForwardId, paramView.getNextClusterForwardId());
      paramPropertyReader.readResourceId(this.mNextFocusDownId, paramView.getNextFocusDownId());
      paramPropertyReader.readResourceId(this.mNextFocusForwardId, paramView.getNextFocusForwardId());
      paramPropertyReader.readResourceId(this.mNextFocusLeftId, paramView.getNextFocusLeftId());
      paramPropertyReader.readResourceId(this.mNextFocusRightId, paramView.getNextFocusRightId());
      paramPropertyReader.readResourceId(this.mNextFocusUpId, paramView.getNextFocusUpId());
      paramPropertyReader.readColor(this.mOutlineAmbientShadowColorId, paramView.getOutlineAmbientShadowColor());
      paramPropertyReader.readObject(this.mOutlineProviderId, paramView.getOutlineProvider());
      paramPropertyReader.readColor(this.mOutlineSpotShadowColorId, paramView.getOutlineSpotShadowColor());
      paramPropertyReader.readIntEnum(this.mOverScrollModeId, paramView.getOverScrollMode());
      paramPropertyReader.readInt(this.mPaddingBottomId, paramView.getPaddingBottom());
      paramPropertyReader.readInt(this.mPaddingLeftId, paramView.getPaddingLeft());
      paramPropertyReader.readInt(this.mPaddingRightId, paramView.getPaddingRight());
      paramPropertyReader.readInt(this.mPaddingTopId, paramView.getPaddingTop());
      paramPropertyReader.readObject(this.mPointerIconId, paramView.getPointerIcon());
      paramPropertyReader.readBoolean(this.mPressedId, paramView.isPressed());
      paramPropertyReader.readIntEnum(this.mRawLayoutDirectionId, paramView.getRawLayoutDirection());
      paramPropertyReader.readIntEnum(this.mRawTextAlignmentId, paramView.getRawTextAlignment());
      paramPropertyReader.readIntEnum(this.mRawTextDirectionId, paramView.getRawTextDirection());
      paramPropertyReader.readIntFlag(this.mRequiresFadingEdgeId, paramView.getFadingEdge());
      paramPropertyReader.readFloat(this.mRotationId, paramView.getRotation());
      paramPropertyReader.readFloat(this.mRotationXId, paramView.getRotationX());
      paramPropertyReader.readFloat(this.mRotationYId, paramView.getRotationY());
      paramPropertyReader.readBoolean(this.mSaveEnabledId, paramView.isSaveEnabled());
      paramPropertyReader.readFloat(this.mScaleXId, paramView.getScaleX());
      paramPropertyReader.readFloat(this.mScaleYId, paramView.getScaleY());
      paramPropertyReader.readBoolean(this.mScreenReaderFocusableId, paramView.isScreenReaderFocusable());
      paramPropertyReader.readIntFlag(this.mScrollIndicatorsId, paramView.getScrollIndicators());
      paramPropertyReader.readInt(this.mScrollXId, paramView.getScrollX());
      paramPropertyReader.readInt(this.mScrollYId, paramView.getScrollY());
      paramPropertyReader.readInt(this.mScrollbarDefaultDelayBeforeFadeId, paramView.getScrollBarDefaultDelayBeforeFade());
      paramPropertyReader.readInt(this.mScrollbarFadeDurationId, paramView.getScrollBarFadeDuration());
      paramPropertyReader.readInt(this.mScrollbarSizeId, paramView.getScrollBarSize());
      paramPropertyReader.readIntEnum(this.mScrollbarStyleId, paramView.getScrollBarStyle());
      paramPropertyReader.readBoolean(this.mSelectedId, paramView.isSelected());
      paramPropertyReader.readColor(this.mSolidColorId, paramView.getSolidColor());
      paramPropertyReader.readBoolean(this.mSoundEffectsEnabledId, paramView.isSoundEffectsEnabled());
      paramPropertyReader.readObject(this.mStateListAnimatorId, paramView.getStateListAnimator());
      paramPropertyReader.readObject(this.mTagId, paramView.getTag());
      paramPropertyReader.readIntEnum(this.mTextAlignmentId, paramView.getTextAlignment());
      paramPropertyReader.readIntEnum(this.mTextDirectionId, paramView.getTextDirection());
      paramPropertyReader.readObject(this.mTooltipTextId, paramView.getTooltipText());
      paramPropertyReader.readFloat(this.mTransformPivotXId, paramView.getPivotX());
      paramPropertyReader.readFloat(this.mTransformPivotYId, paramView.getPivotY());
      paramPropertyReader.readObject(this.mTransitionNameId, paramView.getTransitionName());
      paramPropertyReader.readFloat(this.mTranslationXId, paramView.getTranslationX());
      paramPropertyReader.readFloat(this.mTranslationYId, paramView.getTranslationY());
      paramPropertyReader.readFloat(this.mTranslationZId, paramView.getTranslationZ());
      paramPropertyReader.readIntEnum(this.mVisibilityId, paramView.getVisibility());
      return;
    }
    throw new InspectionCompanion.UninitializedPropertyMapException();
  }
}


/* Location:              /Users/sanbo/Desktop/framework/miui/framework/classes3-dex2jar.jar!/android/view/View$InspectionCompanion.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */