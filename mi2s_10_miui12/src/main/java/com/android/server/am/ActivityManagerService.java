package com.android.server.am;

import android.app.ActivityManager;
import android.app.ActivityManagerInternal;
import android.app.ActivityThread;
import android.app.AppGlobals;
import android.app.AppOpsManager;
import android.app.AppOpsManagerInternal;
import android.app.ApplicationErrorReport;
import android.app.ContentProviderHolder;
import android.app.Dialog;
import android.app.IActivityController;
import android.app.IActivityManager;
import android.app.IApplicationThread;
import android.app.IAssistDataReceiver;
import android.app.IInstrumentationWatcher;
import android.app.IMiuiActivityObserver;
import android.app.IProcessObserver;
import android.app.IServiceConnection;
import android.app.IStopUserCallback;
import android.app.ITaskStackListener;
import android.app.IUiAutomationConnection;
import android.app.IUidObserver;
import android.app.IUserSwitchObserver;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.ProcessMemoryState;
import android.app.ProfilerInfo;
import android.app.WaitResult;
import android.app.WindowConfiguration;
import android.app.backup.IBackupManager;
import android.app.usage.UsageStatsManagerInternal;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.Context;
import android.content.IIntentReceiver;
import android.content.IIntentSender;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.ActivityPresentationInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.IPackageManager;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManagerInternal;
import android.content.pm.PackageParser;
import android.content.pm.ParceledListSlice;
import android.content.pm.PathPermission;
import android.content.pm.ProviderInfo;
import android.content.pm.ResolveInfo;
import android.content.pm.UserInfo;
import android.content.res.CompatibilityInfo;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.database.ContentObserver;
import android.graphics.Rect;
import android.hardware.display.DisplayManagerInternal;
import android.net.NetworkPolicyManager;
import android.net.Uri;
import android.os.AppZygote;
import android.os.Binder;
import android.os.BinderProxy;
import android.os.Build;
import android.os.Bundle;
import android.os.Debug;
import android.os.DropBoxManager;
import android.os.FactoryTest;
import android.os.FileUtils;
import android.os.Handler;
import android.os.IBinder;
import android.os.ICancellationSignal;
import android.os.IPermissionController;
import android.os.IProcessInfoService;
import android.os.IProgressListener;
import android.os.Looper;
import android.os.Message;
import android.os.Parcel;
import android.os.ParcelFileDescriptor;
import android.os.PowerManagerInternal;
import android.os.PowerSaveState;
import android.os.Process;
import android.os.RemoteCallback;
import android.os.RemoteCallbackList;
import android.os.RemoteException;
import android.os.ServiceManager;
import android.os.StrictMode;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.os.Trace;
import android.os.TransactionTooLargeException;
import android.os.UserHandle;
import android.os.WorkSource;
import android.provider.DeviceConfig;
import android.provider.Settings;
import android.server.am.SplitScreenReporter;
import android.text.TextUtils;
import android.util.ArrayMap;
import android.util.ArraySet;
import android.util.BoostFramework;
import android.util.DebugUtils;
import android.util.EventLog;
import android.util.Log;
import android.util.Pair;
import android.util.PrintWriterPrinter;
import android.util.Slog;
import android.util.SparseArray;
import android.util.SparseIntArray;
import android.util.StatsLog;
import android.util.TimeUtils;
import android.util.proto.ProtoOutputStream;
import android.util.proto.ProtoUtils;
import android.view.IRecentsAnimationRunner;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import com.android.internal.annotations.GuardedBy;
import com.android.internal.annotations.VisibleForTesting;
import com.android.internal.app.ActivityTrigger;
import com.android.internal.app.DumpHeapActivity;
import com.android.internal.app.IAppOpsCallback;
import com.android.internal.app.IAppOpsService;
import com.android.internal.app.ProcessMap;
import com.android.internal.notification.SystemNotificationChannels;
import com.android.internal.os.BackgroundThread;
import com.android.internal.os.BatteryStatsImpl;
import com.android.internal.os.BinderInternal;
import com.android.internal.os.IResultReceiver;
import com.android.internal.os.ProcessCpuTracker;
import com.android.internal.os.TransferPipe;
import com.android.internal.util.ArrayUtils;
import com.android.internal.util.DumpUtils;
import com.android.internal.util.FastPrintWriter;
import com.android.internal.util.Preconditions;
import com.android.internal.util.function.QuadFunction;
import com.android.internal.util.function.TriFunction;
import com.android.server.BatteryService;
import com.android.server.DeviceIdleController;
import com.android.server.DisplayThread;
import com.android.server.GraphicsStatsService;
import com.android.server.IntentResolver;
import com.android.server.IoThread;
import com.android.server.LocalServices;
import com.android.server.LockGuard;
import com.android.server.NetworkManagementInternal;
import com.android.server.PackageWatchdog;
import com.android.server.RescueParty;
import com.android.server.ServiceThread;
import com.android.server.SystemConfig;
import com.android.server.SystemService;
import com.android.server.SystemServiceManager;
import com.android.server.ThreadPriorityBooster;
import com.android.server.UiModeManagerService;
import com.android.server.UiThread;
import com.android.server.Watchdog;
import com.android.server.am.ProcessList;
import com.android.server.am.UidRecord;
import com.android.server.am.UserState;
import com.android.server.appop.AppOpsService;
import com.android.server.backup.BackupAgentTimeoutParameters;
import com.android.server.contentcapture.ContentCaptureManagerInternal;
import com.android.server.display.color.DisplayTransformManager;
import com.android.server.firewall.IntentFirewall;
import com.android.server.inputmethod.MiuiSecurityInputMethodHelper;
import com.android.server.job.JobSchedulerInternal;
import com.android.server.job.JobSchedulerShellCommand;
import com.android.server.job.controllers.JobStatus;
import com.android.server.notification.NotificationShellCmd;
import com.android.server.pm.DumpState;
import com.android.server.pm.Installer;
import com.android.server.pm.PackageManagerService;
import com.android.server.policy.PhoneWindowManager;
import com.android.server.policy.WindowManagerPolicy;
import com.android.server.slice.SliceClientPermissions;
import com.android.server.uri.GrantUri;
import com.android.server.uri.UriGrantsManagerInternal;
import com.android.server.uri.UriPermissionOwner;
import com.android.server.utils.PriorityDump;
import com.android.server.vr.VrManagerInternal;
import com.android.server.wm.ActivityMetricsLaunchObserver;
import com.android.server.wm.ActivityServiceConnectionsHolder;
import com.android.server.wm.ActivityStackSupervisor;
import com.android.server.wm.ActivityTaskManagerInternal;
import com.android.server.wm.ActivityTaskManagerService;
import com.android.server.wm.ActivityTaskManagerServiceInjector;
import com.android.server.wm.WindowManagerService;
import com.android.server.wm.WindowProcessController;
import com.miui.internal.transition.IMiuiAppTransitionAnimationHelper;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executor;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import miui.securityspace.CrossUserUtils;

public class ActivityManagerService extends IActivityManager.Stub implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback {
    public static final String ACTION_TRIGGER_IDLE = "com.android.server.ACTION_TRIGGER_IDLE";
    private static final String ACTIVITY_START_PSS_DEFER_CONFIG = "activity_start_pss_defer";
    public static final String ANR_TRACE_DIR = "/data/anr";
    static final long BATTERY_STATS_TIME = 1800000;
    private static final int BINDER_PROXY_HIGH_WATERMARK = 6000;
    private static final int BINDER_PROXY_LOW_WATERMARK = 5500;
    static final int BROADCAST_BG_TIMEOUT = 60000;
    static final int BROADCAST_FG_TIMEOUT = 10000;
    private static final int CAST_MODE_ENTER = 1;
    private static final int CAST_MODE_EXIT = 0;
    static final int CHECK_EXCESSIVE_POWER_USE_MSG = 27;
    static final int CLEAR_DNS_CACHE_MSG = 28;
    static final int COLLECT_PSS_BG_MSG = 1;
    static final int CONTENT_PROVIDER_PUBLISH_TIMEOUT = 10000;
    static final int CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG = 57;
    static final int CONTENT_PROVIDER_WAIT_TIMEOUT = 20000;
    static final int DEFER_PSS_MSG = 2;
    static final int DELETE_DUMPHEAP_MSG = 51;
    static final int DISPATCH_OOM_ADJ_OBSERVER_MSG = 70;
    static final int DISPATCH_PROCESSES_CHANGED_UI_MSG = 31;
    static final int DISPATCH_PROCESS_DIED_UI_MSG = 32;
    static final int DISPATCH_UIDS_CHANGED_UI_MSG = 53;
    static final int DROPBOX_MAX_SIZE = 196608;
    static final long[] DUMP_MEM_BUCKETS = {5120, 7168, 10240, 15360, 20480, 30720, 40960, 81920, 122880, 163840, 204800, 256000, 307200, 358400, 409600, 512000, 614400, 819200, 1048576, 2097152, 5242880, 10485760, 20971520};
    static final int[] DUMP_MEM_OOM_ADJ = {JobSchedulerShellCommand.CMD_ERR_NO_PACKAGE, AppUsageStatsManager.ADJ_FOREGROUND, -800, -700, 0, 100, 200, ScreenRotationAnimationInjector.COVER_OFFSET, DisplayTransformManager.LEVEL_COLOR_MATRIX_INVERT_COLOR, 400, 500, SystemService.PHASE_THIRD_PARTY_APPS_CAN_START, 700, ScreenRotationAnimationInjector.COVER_EGE, 900};
    static final String[] DUMP_MEM_OOM_COMPACT_LABEL = {"native", "sys", "pers", "persvc", "fore", "vis", "percept", "perceptl", "heavy", BatteryService.HealthServiceWrapper.INSTANCE_HEALTHD, "servicea", "home", "prev", "serviceb", "cached"};
    static final String[] DUMP_MEM_OOM_LABEL = {"Native", "System", "Persistent", "Persistent Service", "Foreground", "Visible", "Perceptible", "Perceptible Low", "Heavy Weight", "Backup", "A Services", "Home", "Previous", "B Services", "Cached"};
    static final String[] EMPTY_STRING_ARRAY = new String[0];
    static final int FIRST_BROADCAST_QUEUE_MSG = 200;
    static final int GC_BACKGROUND_PROCESSES_MSG = 5;
    static final int HANDLE_TRUST_STORAGE_UPDATE_MSG = 63;
    static final int IDLE_UIDS_MSG = 58;
    private static final String INTENT_REMOTE_BUGREPORT_FINISHED = "com.android.internal.intent.action.REMOTE_BUGREPORT_FINISHED";
    private static final int JAVA_DUMP_MINIMUM_SIZE = 100;
    static final int KILL_APPLICATION_MSG = 22;
    static final int KILL_APP_ZYGOTE_DELAY_MS = 5000;
    static final int KILL_APP_ZYGOTE_MSG = 71;
    private static final int KSM_SHARED = 0;
    private static final int KSM_SHARING = 1;
    private static final int KSM_UNSHARED = 2;
    private static final int KSM_VOLATILE = 3;
    private static final int MAX_BUGREPORT_TITLE_SIZE = 50;
    private static final int MAX_DUP_SUPPRESSED_STACKS = 5000;
    private static final int MAX_RECEIVERS_ALLOWED_PER_APP = 1000;
    private static final int MEMINFO_COMPACT_VERSION = 1;
    private static final int MINIMUM_MEMORY_GROWTH_THRESHOLD = 10000;
    static final long MONITOR_CPU_MAX_TIME = 268435455;
    static final long MONITOR_CPU_MIN_TIME = 5000;
    static final boolean MONITOR_CPU_USAGE = true;
    static final boolean MONITOR_THREAD_CPU_USAGE = false;
    public static final int MY_PID = Process.myPid();
    private static final int NATIVE_DUMP_TIMEOUT_MS = 2000;
    private static final long NETWORK_ACCESS_TIMEOUT_DEFAULT_MS = 200;
    @VisibleForTesting
    static final int NETWORK_STATE_BLOCK = 1;
    @VisibleForTesting
    static final int NETWORK_STATE_NO_CHANGE = 0;
    @VisibleForTesting
    static final int NETWORK_STATE_UNBLOCK = 2;
    static final int NOTIFY_CLEARTEXT_NETWORK_MSG = 49;
    static final int PERSISTENT_MASK = 9;
    static final int POST_DUMP_HEAP_NOTIFICATION_MSG = 50;
    private static final int[] PROCESS_STATE_STATS_FORMAT = {32, 544, 10272};
    static final int PROC_START_TIMEOUT = 10000;
    static final int PROC_START_TIMEOUT_MSG = 20;
    static final int PROC_START_TIMEOUT_WITH_WRAPPER = 1200000;
    static final int PUSH_TEMP_WHITELIST_UI_MSG = 68;
    static final int REPORT_MEM_USAGE_MSG = 33;
    static final int RESERVED_BYTES_PER_LOGCAT_LINE = 100;
    static final int SERVICE_FOREGROUND_CRASH_MSG = 69;
    static final int SERVICE_FOREGROUND_TIMEOUT_MSG = 66;
    static final String SERVICE_RECORD_KEY = "servicerecord";
    static final int SERVICE_TIMEOUT_MSG = 12;
    static final int SHOW_ERROR_UI_MSG = 1;
    static final int SHOW_NOT_RESPONDING_UI_MSG = 2;
    static final int SHOW_STRICT_MODE_VIOLATION_UI_MSG = 26;
    static final int SHUTDOWN_UI_AUTOMATION_CONNECTION_MSG = 56;
    private static final int SLOW_UID_OBSERVER_THRESHOLD_MS = 20;
    public static final int STOCK_PM_FLAGS = 1024;
    static final int STOP_DEFERRING_PSS_MSG = 3;
    static final String SYSTEM_DEBUGGABLE = "ro.debuggable";
    private static final String SYSTEM_PROPERTY_DEVICE_PROVISIONED = "persist.sys.device_provisioned";
    static final String TAG = "ActivityManager";
    static final String TAG_BACKUP = "ActivityManager";
    private static final String TAG_BROADCAST = "ActivityManager";
    private static final String TAG_CLEANUP = "ActivityManager";
    private static final String TAG_CONFIGURATION = "ActivityManager";
    private static final String TAG_LOCKTASK = "ActivityManager";
    static final String TAG_LRU = "ActivityManager";
    private static final String TAG_MU = "ActivityManager_MU";
    private static final String TAG_NETWORK = "ActivityManager_Network";
    static final String TAG_OOM_ADJ = "ActivityManager";
    private static final String TAG_POWER = "ActivityManager";
    static final String TAG_PROCESSES = "ActivityManager";
    static final String TAG_PROCESS_OBSERVERS = "ActivityManager";
    private static final String TAG_PROVIDER = "ActivityManager";
    static final String TAG_PSS = "ActivityManager";
    private static final String TAG_SERVICE = "ActivityManager";
    private static final String TAG_SWITCH = "ActivityManager";
    static final String TAG_UID_OBSERVERS = "ActivityManager";
    public static final int TOP_APP_PRIORITY_BOOST = -10;
    static final boolean TRACK_PROCSTATS_ASSOCIATIONS = true;
    static final int UPDATE_HTTP_PROXY_MSG = 29;
    static final int UPDATE_TIME_PREFERENCE_MSG = 41;
    static final int UPDATE_TIME_ZONE = 13;
    static final boolean VALIDATE_UID_STATES = true;
    static final int WAIT_FOR_DEBUGGER_UI_MSG = 6;
    static final ActivityTrigger mActivityTrigger = new ActivityTrigger();
    public static boolean mForceStopKill = false;
    public static BoostFramework mPerfServiceStartHint = null;
    public static BoostFramework mUxPerf = new BoostFramework();
    @GuardedBy({"ActivityManagerService.class"})
    private static SimpleDateFormat sAnrFileDateFormat;
    private static final ThreadLocal<Identity> sCallerIdentity = new ThreadLocal<>();
    static final HostingRecord sNullHostingRecord = new HostingRecord((String) null);
    private static String sTheRealBuildSerial = UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN;
    private static ThreadPriorityBooster sThreadPriorityBooster = new ThreadPriorityBooster(-2, 6);
    final ArrayList<ActiveInstrumentation> mActiveInstrumentation;
    ProcessChangeItem[] mActiveProcessChanges;
    UidRecord.ChangeItem[] mActiveUidChanges;
    private final ActivityMetricsLaunchObserver mActivityLaunchObserver;
    /* access modifiers changed from: private */
    public final AtomicInteger mActivityStartingNesting;
    @VisibleForTesting
    public ActivityTaskManagerService mActivityTaskManager;
    boolean mAllowLowerMemLevel;
    ArrayMap<String, PackageAssociationInfo> mAllowedAssociations;
    private final HashSet<Integer> mAlreadyLoggedViolatedStacks;
    boolean mAlwaysFinishActivities;
    private Map<String, String> mAppAgentMap;
    ArrayMap<String, IBinder> mAppBindArgs;
    final AppErrors mAppErrors;
    final AppOpsService mAppOpsService;
    final SparseArray<ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>>> mAssociations;
    @VisibleForTesting
    public ActivityTaskManagerInternal mAtmInternal;
    final ArrayList<ProcessChangeItem> mAvailProcessChanges;
    final ArrayList<UidRecord.ChangeItem> mAvailUidChanges;
    int[] mBackgroundAppIdWhitelist;
    ArraySet<String> mBackgroundLaunchBroadcasts;
    @GuardedBy({"this"})
    final SparseArray<BackupRecord> mBackupTargets;
    final BatteryStatsService mBatteryStatsService;
    BroadcastQueue mBgBroadcastQueue;
    final Handler mBgHandler;
    private boolean mBinderTransactionTrackingEnabled;
    @GuardedBy({"this"})
    boolean mBootAnimationComplete;
    int mBootPhase;
    volatile boolean mBooted;
    volatile boolean mBooting;
    final BroadcastQueue[] mBroadcastQueues;
    @GuardedBy({"this"})
    boolean mCallFinishBooting;
    private int mCastPid;
    ActivityManagerConstants mConstants;
    ContentCaptureManagerInternal mContentCaptureService;
    final Context mContext;
    CoreSettingsObserver mCoreSettingsObserver;
    BroadcastStats mCurBroadcastStats;
    OomAdjObserver mCurOomAdjObserver;
    int mCurOomAdjUid;
    private String mCurResumedPackage;
    private int mCurResumedUid;
    String mDebugApp;
    boolean mDebugTransient;
    DevelopmentSettingsObserver mDevelopmentSettingsObserver;
    int[] mDeviceIdleExceptIdleWhitelist;
    int[] mDeviceIdleTempWhitelist;
    int[] mDeviceIdleWhitelist;
    String mDeviceOwnerName;
    boolean mEnableOffloadQueue;
    boolean mEnableProcessGroupCgroupFollow;
    final int mFactoryTest;
    BroadcastQueue mFgBroadcastQueue;
    boolean mForceBackgroundCheck;
    final ProcessMap<ArrayList<ProcessRecord>> mForegroundPackages;
    boolean mFullPssPending;
    final MainHandler mHandler;
    @VisibleForTesting
    public final ServiceThread mHandlerThread;
    final HiddenApiSettings mHiddenApiBlacklist;
    final SparseArray<ImportanceToken> mImportantProcesses;
    private final Injector mInjector;
    private Installer mInstaller;
    final InstrumentationReporter mInstrumentationReporter;
    public final IntentFirewall mIntentFirewall;
    ArrayMap<String, IBinder> mIsolatedAppBindArgs;
    BroadcastStats mLastBroadcastStats;
    final AtomicLong mLastCpuTime;
    long mLastFullPssTime;
    long mLastIdleTime;
    long mLastMemUsageReportTime;
    int mLastMemoryLevel;
    int mLastNumProcesses;
    long mLastPowerCheckUptime;
    long mLastWriteTime;
    final ArrayList<ContentProviderRecord> mLaunchingProviders;
    private ParcelFileDescriptor[] mLifeMonitorFds;
    DeviceIdleController.LocalService mLocalDeviceIdleController;
    PowerManagerInternal mLocalPowerManager;
    final LowMemDetector mLowMemDetector;
    long mLowRamStartTime;
    long mLowRamTimeSinceLastIdle;
    String mMemWatchDumpFile;
    int mMemWatchDumpPid;
    String mMemWatchDumpProcName;
    int mMemWatchDumpUid;
    /* access modifiers changed from: private */
    public boolean mMemWatchIsUserInitiated;
    final ProcessMap<Pair<Long, String>> mMemWatchProcesses;
    String mNativeDebuggingApp;
    BroadcastQueue mOffloadBroadcastQueue;
    volatile boolean mOnBattery;
    public OomAdjProfiler mOomAdjProfiler;
    OomAdjuster mOomAdjuster;
    String mOrigDebugApp;
    boolean mOrigWaitForDebugger;
    PackageManagerInternal mPackageManagerInt;
    final PackageWatchdog mPackageWatchdog;
    @VisibleForTesting
    public final PendingIntentController mPendingIntentController;
    final ArrayList<ProcessChangeItem> mPendingProcessChanges;
    final ArrayList<ProcessRecord> mPendingPssProcesses;
    final PendingTempWhitelists mPendingTempWhitelist;
    final ArrayList<UidRecord.ChangeItem> mPendingUidChanges;
    final ArrayList<ProcessRecord> mPersistentStartingProcesses;
    final PidMap mPidsSelfLocked;
    private final PriorityDump.PriorityDumper mPriorityDumper;
    final Handler mProcStartHandler;
    final ServiceThread mProcStartHandlerThread;
    final CountDownLatch mProcessCpuInitLatch;
    final AtomicBoolean mProcessCpuMutexFree;
    final Thread mProcessCpuThread;
    final ProcessCpuTracker mProcessCpuTracker;
    final ProcessList mProcessList;
    final RemoteCallbackList<IProcessObserver> mProcessObservers;
    private final long[] mProcessStateStatsLongs;
    final ProcessStatsService mProcessStats;
    final ArrayList<ProcessRecord> mProcessesOnHold;
    volatile boolean mProcessesReady;
    final ArrayList<ProcessRecord> mProcessesToGc;
    final ProfileData mProfileData;
    int mProfileType;
    final ProviderMap mProviderMap;
    /* access modifiers changed from: private */
    public volatile long mPssDeferralTime;
    private final DeviceConfig.OnPropertiesChangedListener mPssDelayConfigListener;
    final IntentResolver<BroadcastFilter, BroadcastFilter> mReceiverResolver;
    final HashMap<IBinder, ReceiverList> mRegisteredReceivers;
    boolean mSafeMode;
    final ActiveServices mServices;
    ActivityStackSupervisor mStackSupervisor;
    final SparseArray<ArrayMap<String, ArrayList<Intent>>> mStickyBroadcasts;
    final StringBuilder mStringBuilder;
    volatile boolean mSystemMainLooperReady;
    boolean mSystemProvidersInstalled;
    volatile boolean mSystemReady;
    SystemServiceManager mSystemServiceManager;
    final ActivityThread mSystemThread;
    boolean mTestPssMode;
    String mTrackAllocationApp;
    boolean mTrackingAssociations;
    @VisibleForTesting
    public UriGrantsManagerInternal mUgmInternal;
    final Context mUiContext;
    final Handler mUiHandler;
    int mUidChangeDispatchCount;
    final RemoteCallbackList<IUidObserver> mUidObservers;
    UsageStatsManagerInternal mUsageStatsService;
    boolean mUseFifoUiScheduling;
    final UserController mUserController;
    /* access modifiers changed from: private */
    public boolean mUserIsMonkey;
    final ActiveUids mValidateUids;
    boolean mWaitForDebugger;
    @VisibleForTesting
    long mWaitForNetworkTimeoutMs;
    int mWakefulness;
    @VisibleForTesting
    public WindowManagerService mWindowManager;
    private volatile int mWtfClusterCount;
    private volatile long mWtfClusterStart;

    interface OomAdjObserver {
        void onOomAdjMessage(String str);
    }

    /* access modifiers changed from: package-private */
    public BroadcastQueue broadcastQueueForIntent(Intent intent) {
        if (isOnOffloadQueue(intent.getFlags())) {
            return this.mOffloadBroadcastQueue;
        }
        return (intent.getFlags() & 268435456) != 0 ? this.mFgBroadcastQueue : this.mBgBroadcastQueue;
    }

    static void boostPriorityForLockedSection() {
        sThreadPriorityBooster.boost();
    }

    static void resetPriorityAfterLockedSection() {
        sThreadPriorityBooster.reset();
    }

    private final class PackageAssociationInfo {
        private final ArraySet<String> mAllowedPackageAssociations;
        private boolean mIsDebuggable;
        private final String mSourcePackage;

        PackageAssociationInfo(String sourcePackage, ArraySet<String> allowedPackages, boolean isDebuggable) {
            this.mSourcePackage = sourcePackage;
            this.mAllowedPackageAssociations = allowedPackages;
            this.mIsDebuggable = isDebuggable;
        }

        /* access modifiers changed from: package-private */
        public boolean isPackageAssociationAllowed(String targetPackage) {
            return this.mIsDebuggable || this.mAllowedPackageAssociations.contains(targetPackage);
        }

        /* access modifiers changed from: package-private */
        public boolean isDebuggable() {
            return this.mIsDebuggable;
        }

        /* access modifiers changed from: package-private */
        public void setDebuggable(boolean isDebuggable) {
            this.mIsDebuggable = isDebuggable;
        }

        /* access modifiers changed from: package-private */
        public ArraySet<String> getAllowedPackageAssociations() {
            return this.mAllowedPackageAssociations;
        }
    }

    final class PidMap {
        private final SparseArray<ProcessRecord> mPidMap = new SparseArray<>();

        PidMap() {
        }

        /* access modifiers changed from: package-private */
        public void put(ProcessRecord app) {
            synchronized (this) {
                this.mPidMap.put(app.pid, app);
            }
            ActivityManagerService.this.mAtmInternal.onProcessMapped(app.pid, app.getWindowProcessController());
        }

        /* access modifiers changed from: package-private */
        public void remove(ProcessRecord app) {
            boolean removed = false;
            synchronized (this) {
                ProcessRecord existingApp = this.mPidMap.get(app.pid);
                if (existingApp != null && existingApp.startSeq == app.startSeq) {
                    this.mPidMap.remove(app.pid);
                    removed = true;
                }
            }
            if (removed) {
                ActivityManagerService.this.mAtmInternal.onProcessUnMapped(app.pid);
            }
        }

        /* access modifiers changed from: package-private */
        public boolean removeIfNoThread(ProcessRecord app) {
            boolean removed = false;
            synchronized (this) {
                ProcessRecord existingApp = get(app.pid);
                if (existingApp != null && existingApp.startSeq == app.startSeq && app.thread == null) {
                    this.mPidMap.remove(app.pid);
                    removed = true;
                }
            }
            if (removed) {
                ActivityManagerService.this.mAtmInternal.onProcessUnMapped(app.pid);
            }
            return removed;
        }

        /* access modifiers changed from: package-private */
        public ProcessRecord get(int pid) {
            return this.mPidMap.get(pid);
        }

        /* access modifiers changed from: package-private */
        public int size() {
            return this.mPidMap.size();
        }

        /* access modifiers changed from: package-private */
        public ProcessRecord valueAt(int index) {
            return this.mPidMap.valueAt(index);
        }

        /* access modifiers changed from: package-private */
        public int keyAt(int index) {
            return this.mPidMap.keyAt(index);
        }

        /* access modifiers changed from: package-private */
        public int indexOfKey(int key) {
            return this.mPidMap.indexOfKey(key);
        }
    }

    abstract class ImportanceToken implements IBinder.DeathRecipient {
        final int pid;
        final String reason;
        final IBinder token;

        ImportanceToken(int _pid, IBinder _token, String _reason) {
            this.pid = _pid;
            this.token = _token;
            this.reason = _reason;
        }

        public String toString() {
            return "ImportanceToken { " + Integer.toHexString(System.identityHashCode(this)) + " " + this.reason + " " + this.pid + " " + this.token + " }";
        }

        /* access modifiers changed from: package-private */
        public void writeToProto(ProtoOutputStream proto, long fieldId) {
            long pToken = proto.start(fieldId);
            proto.write(1120986464257L, this.pid);
            IBinder iBinder = this.token;
            if (iBinder != null) {
                proto.write(1138166333442L, iBinder.toString());
            }
            proto.write(1138166333443L, this.reason);
            proto.end(pToken);
        }
    }

    static final class Association {
        int mCount;
        int mLastState = 22;
        long mLastStateUptime;
        int mNesting;
        final String mSourceProcess;
        final int mSourceUid;
        long mStartTime;
        long[] mStateTimes = new long[22];
        final ComponentName mTargetComponent;
        final String mTargetProcess;
        final int mTargetUid;
        long mTime;

        Association(int sourceUid, String sourceProcess, int targetUid, ComponentName targetComponent, String targetProcess) {
            this.mSourceUid = sourceUid;
            this.mSourceProcess = sourceProcess;
            this.mTargetUid = targetUid;
            this.mTargetComponent = targetComponent;
            this.mTargetProcess = targetProcess;
        }
    }

    private final class DevelopmentSettingsObserver extends ContentObserver {
        private final ComponentName mBugreportStorageProvider = new ComponentName(NotificationShellCmd.NOTIFICATION_PACKAGE, "com.android.shell.BugreportStorageProvider");
        private final Uri mUri = Settings.Global.getUriFor("development_settings_enabled");

        public DevelopmentSettingsObserver() {
            super(ActivityManagerService.this.mHandler);
            ActivityManagerService.this.mContext.getContentResolver().registerContentObserver(this.mUri, false, this, -1);
            onChange();
        }

        public void onChange(boolean selfChange, Uri uri, int userId) {
            if (this.mUri.equals(uri)) {
                onChange();
            }
        }

        public void onChange() {
            int i = 1;
            boolean enabled = Settings.Global.getInt(ActivityManagerService.this.mContext.getContentResolver(), "development_settings_enabled", Build.IS_ENG ? 1 : 0) != 0;
            PackageManager packageManager = ActivityManagerService.this.mContext.getPackageManager();
            ComponentName componentName = this.mBugreportStorageProvider;
            if (!enabled) {
                i = 0;
            }
            packageManager.setComponentEnabledSetting(componentName, i, 0);
        }
    }

    private class Identity {
        public final int pid;
        public final IBinder token;
        public final int uid;

        Identity(IBinder _token, int _pid, int _uid) {
            this.token = _token;
            this.pid = _pid;
            this.uid = _uid;
        }
    }

    static final class PendingTempWhitelist {
        final long duration;
        final String tag;
        final int targetUid;

        PendingTempWhitelist(int _targetUid, long _duration, String _tag) {
            this.targetUid = _targetUid;
            this.duration = _duration;
            this.tag = _tag;
        }

        /* access modifiers changed from: package-private */
        public void writeToProto(ProtoOutputStream proto, long fieldId) {
            long token = proto.start(fieldId);
            proto.write(1120986464257L, this.targetUid);
            proto.write(1112396529666L, this.duration);
            proto.write(1138166333443L, this.tag);
            proto.end(token);
        }
    }

    class ProfileData {
        private String mProfileApp = null;
        private ProcessRecord mProfileProc = null;
        private ProfilerInfo mProfilerInfo = null;

        ProfileData() {
        }

        /* access modifiers changed from: package-private */
        public void setProfileApp(String profileApp) {
            this.mProfileApp = profileApp;
            if (ActivityManagerService.this.mAtmInternal != null) {
                ActivityManagerService.this.mAtmInternal.setProfileApp(profileApp);
            }
        }

        /* access modifiers changed from: package-private */
        public String getProfileApp() {
            return this.mProfileApp;
        }

        /* access modifiers changed from: package-private */
        public void setProfileProc(ProcessRecord profileProc) {
            WindowProcessController windowProcessController;
            this.mProfileProc = profileProc;
            if (ActivityManagerService.this.mAtmInternal != null) {
                ActivityTaskManagerInternal activityTaskManagerInternal = ActivityManagerService.this.mAtmInternal;
                if (profileProc == null) {
                    windowProcessController = null;
                } else {
                    windowProcessController = profileProc.getWindowProcessController();
                }
                activityTaskManagerInternal.setProfileProc(windowProcessController);
            }
        }

        /* access modifiers changed from: package-private */
        public ProcessRecord getProfileProc() {
            return this.mProfileProc;
        }

        /* access modifiers changed from: package-private */
        public void setProfilerInfo(ProfilerInfo profilerInfo) {
            this.mProfilerInfo = profilerInfo;
            if (ActivityManagerService.this.mAtmInternal != null) {
                ActivityManagerService.this.mAtmInternal.setProfilerInfo(profilerInfo);
            }
        }

        /* access modifiers changed from: package-private */
        public ProfilerInfo getProfilerInfo() {
            return this.mProfilerInfo;
        }
    }

    static final class ProcessChangeItem {
        static final int CHANGE_ACTIVITIES = 1;
        static final int CHANGE_FOREGROUND_SERVICES = 2;
        int changes;
        boolean foregroundActivities;
        int foregroundServiceTypes;
        int pid;
        int processState;
        int uid;

        ProcessChangeItem() {
        }
    }

    static final class UidObserverRegistration {
        private static int[] ORIG_ENUMS = {4, 8, 2, 1};
        private static int[] PROTO_ENUMS = {3, 4, 2, 1};
        final int cutpoint;
        final SparseIntArray lastProcStates;
        int mMaxDispatchTime;
        int mSlowDispatchCount;
        final String pkg;
        final int uid;
        final int which;

        UidObserverRegistration(int _uid, String _pkg, int _which, int _cutpoint) {
            this.uid = _uid;
            this.pkg = _pkg;
            this.which = _which;
            this.cutpoint = _cutpoint;
            if (this.cutpoint >= 0) {
                this.lastProcStates = new SparseIntArray();
            } else {
                this.lastProcStates = null;
            }
        }

        /* access modifiers changed from: package-private */
        public void writeToProto(ProtoOutputStream proto, long fieldId) {
            ProtoOutputStream protoOutputStream = proto;
            long token = proto.start(fieldId);
            proto.write(1120986464257L, this.uid);
            proto.write(1138166333442L, this.pkg);
            ProtoUtils.writeBitWiseFlagsToProtoEnum(proto, 2259152797699L, this.which, ORIG_ENUMS, PROTO_ENUMS);
            proto.write(1120986464260L, this.cutpoint);
            SparseIntArray sparseIntArray = this.lastProcStates;
            if (sparseIntArray != null) {
                int NI = sparseIntArray.size();
                for (int i = 0; i < NI; i++) {
                    long pToken = proto.start(2246267895813L);
                    proto.write(1120986464257L, this.lastProcStates.keyAt(i));
                    proto.write(1120986464258L, this.lastProcStates.valueAt(i));
                    proto.end(pToken);
                }
            }
            proto.end(token);
        }
    }

    private final class AppDeathRecipient implements IBinder.DeathRecipient {
        final ProcessRecord mApp;
        final IApplicationThread mAppThread;
        final int mPid;

        AppDeathRecipient(ProcessRecord app, int pid, IApplicationThread thread) {
            this.mApp = app;
            this.mPid = pid;
            this.mAppThread = thread;
        }

        public void binderDied() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.appDiedLocked(this.mApp, this.mPid, this.mAppThread, true);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }
    }

    final class UiHandler extends Handler {
        public UiHandler() {
            super(UiThread.get().getLooper(), (Handler.Callback) null, true);
        }

        /* JADX WARNING: type inference failed for: r3v2, types: [com.android.server.am.AppWaitingForDebuggerDialog, android.app.Dialog] */
        /* JADX WARNING: type inference failed for: r4v5, types: [com.android.server.am.StrictModeViolationDialog, android.app.Dialog] */
        /* JADX WARNING: Code restructure failed: missing block: B:45:0x00b9, code lost:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            r7.this$0.ensureBootCompleted();
         */
        /* JADX WARNING: Code restructure failed: missing block: B:85:?, code lost:
            return;
         */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public void handleMessage(android.os.Message r8) {
            /*
                r7 = this;
                int r0 = r8.what
                r1 = 1
                if (r0 == r1) goto L_0x0111
                r2 = 2
                if (r0 == r2) goto L_0x0104
                r2 = 6
                if (r0 == r2) goto L_0x00c8
                r1 = 26
                if (r0 == r1) goto L_0x0050
                r1 = 53
                if (r0 == r1) goto L_0x0049
                r1 = 68
                if (r0 == r1) goto L_0x0042
                r1 = 70
                if (r0 == r1) goto L_0x0037
                r1 = 31
                if (r0 == r1) goto L_0x0030
                r1 = 32
                if (r0 == r1) goto L_0x0025
                goto L_0x011e
            L_0x0025:
                int r0 = r8.arg1
                int r1 = r8.arg2
                com.android.server.am.ActivityManagerService r2 = com.android.server.am.ActivityManagerService.this
                r2.dispatchProcessDied(r0, r1)
                goto L_0x011e
            L_0x0030:
                com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this
                r0.dispatchProcessesChanged()
                goto L_0x011e
            L_0x0037:
                com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this
                java.lang.Object r1 = r8.obj
                java.lang.String r1 = (java.lang.String) r1
                r0.dispatchOomAdjObserver(r1)
                goto L_0x011e
            L_0x0042:
                com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this
                r0.pushTempWhitelist()
                goto L_0x011e
            L_0x0049:
                com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this
                r0.dispatchUidsChanged()
                goto L_0x011e
            L_0x0050:
                java.lang.Object r0 = r8.obj
                java.util.HashMap r0 = (java.util.HashMap) r0
                com.android.server.am.ActivityManagerService r2 = com.android.server.am.ActivityManagerService.this
                monitor-enter(r2)
                com.android.server.am.ActivityManagerService.boostPriorityForLockedSection()     // Catch:{ all -> 0x00c2 }
                java.lang.String r1 = "app"
                java.lang.Object r1 = r0.get(r1)     // Catch:{ all -> 0x00c2 }
                com.android.server.am.ProcessRecord r1 = (com.android.server.am.ProcessRecord) r1     // Catch:{ all -> 0x00c2 }
                if (r1 != 0) goto L_0x0071
                java.lang.String r3 = "ActivityManager"
                java.lang.String r4 = "App not found when showing strict mode dialog."
                android.util.Slog.e(r3, r4)     // Catch:{ all -> 0x00c2 }
                monitor-exit(r2)     // Catch:{ all -> 0x00c2 }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                goto L_0x011e
            L_0x0071:
                android.app.Dialog r3 = r1.crashDialog     // Catch:{ all -> 0x00c2 }
                if (r3 == 0) goto L_0x0090
                java.lang.String r3 = "ActivityManager"
                java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x00c2 }
                r4.<init>()     // Catch:{ all -> 0x00c2 }
                java.lang.String r5 = "App already has strict mode dialog: "
                r4.append(r5)     // Catch:{ all -> 0x00c2 }
                r4.append(r1)     // Catch:{ all -> 0x00c2 }
                java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x00c2 }
                android.util.Slog.e(r3, r4)     // Catch:{ all -> 0x00c2 }
                monitor-exit(r2)     // Catch:{ all -> 0x00c2 }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                return
            L_0x0090:
                java.lang.String r3 = "result"
                java.lang.Object r3 = r0.get(r3)     // Catch:{ all -> 0x00c2 }
                com.android.server.am.AppErrorResult r3 = (com.android.server.am.AppErrorResult) r3     // Catch:{ all -> 0x00c2 }
                com.android.server.am.ActivityManagerService r4 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x00c2 }
                com.android.server.wm.ActivityTaskManagerInternal r4 = r4.mAtmInternal     // Catch:{ all -> 0x00c2 }
                boolean r4 = r4.showStrictModeViolationDialog()     // Catch:{ all -> 0x00c2 }
                if (r4 == 0) goto L_0x00b4
                com.android.server.am.StrictModeViolationDialog r4 = new com.android.server.am.StrictModeViolationDialog     // Catch:{ all -> 0x00c2 }
                com.android.server.am.ActivityManagerService r5 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x00c2 }
                android.content.Context r5 = r5.mUiContext     // Catch:{ all -> 0x00c2 }
                com.android.server.am.ActivityManagerService r6 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x00c2 }
                r4.<init>(r5, r6, r3, r1)     // Catch:{ all -> 0x00c2 }
                r4.show()     // Catch:{ all -> 0x00c2 }
                r1.crashDialog = r4     // Catch:{ all -> 0x00c2 }
                goto L_0x00b8
            L_0x00b4:
                r4 = 0
                r3.set(r4)     // Catch:{ all -> 0x00c2 }
            L_0x00b8:
                monitor-exit(r2)     // Catch:{ all -> 0x00c2 }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                com.android.server.am.ActivityManagerService r1 = com.android.server.am.ActivityManagerService.this
                r1.ensureBootCompleted()
                goto L_0x011e
            L_0x00c2:
                r1 = move-exception
                monitor-exit(r2)     // Catch:{ all -> 0x00c2 }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                throw r1
            L_0x00c8:
                com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this
                monitor-enter(r0)
                com.android.server.am.ActivityManagerService.boostPriorityForLockedSection()     // Catch:{ all -> 0x00fe }
                java.lang.Object r2 = r8.obj     // Catch:{ all -> 0x00fe }
                com.android.server.am.ProcessRecord r2 = (com.android.server.am.ProcessRecord) r2     // Catch:{ all -> 0x00fe }
                int r3 = r8.arg1     // Catch:{ all -> 0x00fe }
                if (r3 == 0) goto L_0x00ed
                boolean r3 = r2.waitedForDebugger     // Catch:{ all -> 0x00fe }
                if (r3 != 0) goto L_0x00f9
                com.android.server.am.AppWaitingForDebuggerDialog r3 = new com.android.server.am.AppWaitingForDebuggerDialog     // Catch:{ all -> 0x00fe }
                com.android.server.am.ActivityManagerService r4 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x00fe }
                com.android.server.am.ActivityManagerService r5 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x00fe }
                android.content.Context r5 = r5.mUiContext     // Catch:{ all -> 0x00fe }
                r3.<init>(r4, r5, r2)     // Catch:{ all -> 0x00fe }
                r2.waitDialog = r3     // Catch:{ all -> 0x00fe }
                r2.waitedForDebugger = r1     // Catch:{ all -> 0x00fe }
                r3.show()     // Catch:{ all -> 0x00fe }
                goto L_0x00f9
            L_0x00ed:
                android.app.Dialog r1 = r2.waitDialog     // Catch:{ all -> 0x00fe }
                if (r1 == 0) goto L_0x00f9
                android.app.Dialog r1 = r2.waitDialog     // Catch:{ all -> 0x00fe }
                r1.dismiss()     // Catch:{ all -> 0x00fe }
                r1 = 0
                r2.waitDialog = r1     // Catch:{ all -> 0x00fe }
            L_0x00f9:
                monitor-exit(r0)     // Catch:{ all -> 0x00fe }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                goto L_0x011e
            L_0x00fe:
                r1 = move-exception
                monitor-exit(r0)     // Catch:{ all -> 0x00fe }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                throw r1
            L_0x0104:
                com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this
                com.android.server.am.AppErrors r0 = r0.mAppErrors
                r0.handleShowAnrUi(r8)
                com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this
                r0.ensureBootCompleted()
                goto L_0x011e
            L_0x0111:
                com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this
                com.android.server.am.AppErrors r0 = r0.mAppErrors
                r0.handleShowAppErrorUi(r8)
                com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this
                r0.ensureBootCompleted()
            L_0x011e:
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.UiHandler.handleMessage(android.os.Message):void");
        }
    }

    final class MainHandler extends Handler {
        public MainHandler(Looper looper) {
            super(looper, (Handler.Callback) null, true);
        }

        public void handleMessage(Message msg) {
            ProcessRecord r;
            int uid;
            String procName;
            long memLimit;
            boolean isUserInitiated;
            Intent inm;
            Message message = msg;
            int i = message.what;
            if (i == 5) {
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ActivityManagerService.this.performAppGcsIfAppropriateLocked();
                    } catch (Throwable th) {
                        while (true) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
            } else if (i == 20) {
                ProcessRecord app = (ProcessRecord) message.obj;
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ActivityManagerService.this.processStartTimedOutLocked(app);
                    } catch (Throwable th2) {
                        while (true) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw th2;
                        }
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
            } else if (i == 22) {
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        int appId = message.arg1;
                        int userId = message.arg2;
                        Bundle bundle = (Bundle) message.obj;
                        ActivityManagerService.this.forceStopPackageLocked(bundle.getString(SplitScreenReporter.STR_PKG), appId, false, false, true, false, false, userId, bundle.getString(PhoneWindowManager.SYSTEM_DIALOG_REASON_KEY));
                    } catch (Throwable th3) {
                        while (true) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw th3;
                        }
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
            } else if (i == 33) {
                final ArrayList<ProcessMemInfo> memInfos = (ArrayList) message.obj;
                new Thread() {
                    public void run() {
                        ActivityManagerService.this.reportMemUsage(memInfos);
                    }
                }.start();
            } else if (i == 41) {
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ActivityManagerService.this.mProcessList.updateAllTimePrefsLocked(message.arg1);
                    } catch (Throwable th4) {
                        while (true) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw th4;
                        }
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
            } else if (i == ActivityManagerService.HANDLE_TRUST_STORAGE_UPDATE_MSG) {
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ActivityManagerService.this.mProcessList.handleAllTrustStorageUpdateLocked();
                    } catch (Throwable th5) {
                        while (true) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw th5;
                        }
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
            } else if (i == 66) {
                ActivityManagerService.this.mServices.serviceForegroundTimeout((ServiceRecord) message.obj);
            } else if (i == 69) {
                ActivityManagerService.this.mServices.serviceForegroundCrash((ProcessRecord) message.obj, msg.getData().getCharSequence(ActivityManagerService.SERVICE_RECORD_KEY));
            } else if (i == 71) {
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ActivityManagerService.this.mProcessList.killAppZygoteIfNeededLocked((AppZygote) message.obj);
                    } catch (Throwable th6) {
                        while (true) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw th6;
                        }
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
            } else if (i != 12) {
                if (i != 13) {
                    switch (i) {
                        case ActivityManagerService.CHECK_EXCESSIVE_POWER_USE_MSG /*27*/:
                            synchronized (ActivityManagerService.this) {
                                try {
                                    ActivityManagerService.boostPriorityForLockedSection();
                                    ActivityManagerService.this.checkExcessivePowerUsageLocked();
                                    removeMessages(ActivityManagerService.CHECK_EXCESSIVE_POWER_USE_MSG);
                                    sendMessageDelayed(obtainMessage(ActivityManagerService.CHECK_EXCESSIVE_POWER_USE_MSG), ActivityManagerService.this.mConstants.POWER_CHECK_INTERVAL);
                                } catch (Throwable th7) {
                                    while (true) {
                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                        throw th7;
                                        break;
                                    }
                                }
                            }
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            return;
                        case 28:
                            synchronized (ActivityManagerService.this) {
                                try {
                                    ActivityManagerService.boostPriorityForLockedSection();
                                    ActivityManagerService.this.mProcessList.clearAllDnsCacheLocked();
                                } catch (Throwable th8) {
                                    while (true) {
                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                        throw th8;
                                        break;
                                    }
                                }
                            }
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            return;
                        case 29:
                            ActivityManagerService.this.mProcessList.setAllHttpProxy();
                            return;
                        default:
                            String reportPackage = null;
                            switch (i) {
                                case 49:
                                    int uid2 = message.arg1;
                                    byte[] firstPacket = (byte[]) message.obj;
                                    synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                                        for (int i2 = 0; i2 < ActivityManagerService.this.mPidsSelfLocked.size(); i2++) {
                                            ProcessRecord p = ActivityManagerService.this.mPidsSelfLocked.valueAt(i2);
                                            if (p.uid == uid2 && p.thread != null) {
                                                try {
                                                    p.thread.notifyCleartextNetwork(firstPacket);
                                                } catch (RemoteException e) {
                                                }
                                            }
                                        }
                                    }
                                    return;
                                case HdmiCecKeycode.CEC_KEYCODE_PREVIOUS_CHANNEL /*50*/:
                                    synchronized (ActivityManagerService.this) {
                                        try {
                                            ActivityManagerService.boostPriorityForLockedSection();
                                            uid = ActivityManagerService.this.mMemWatchDumpUid;
                                            if (uid == 1000) {
                                                procName = ActivityManagerService.this.mContext.getString(17039504);
                                            } else {
                                                procName = ActivityManagerService.this.mMemWatchDumpProcName;
                                            }
                                            Pair<Long, String> val = (Pair) ActivityManagerService.this.mMemWatchProcesses.get(procName, uid);
                                            if (val == null) {
                                                val = (Pair) ActivityManagerService.this.mMemWatchProcesses.get(procName, 0);
                                            }
                                            if (val != null) {
                                                memLimit = ((Long) val.first).longValue();
                                                reportPackage = (String) val.second;
                                            } else {
                                                memLimit = 0;
                                            }
                                            isUserInitiated = ActivityManagerService.this.mMemWatchIsUserInitiated;
                                        } catch (Throwable th9) {
                                            while (true) {
                                                ActivityManagerService.resetPriorityAfterLockedSection();
                                                throw th9;
                                                break;
                                            }
                                        }
                                    }
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    if (procName != null && (inm = NotificationManager.getService()) != null) {
                                        int titleId = isUserInitiated ? 17039915 : 17039913;
                                        String text = ActivityManagerService.this.mContext.getString(titleId, new Object[]{procName});
                                        Intent deleteIntent = new Intent();
                                        deleteIntent.setAction("com.android.server.am.DELETE_DUMPHEAP");
                                        Intent intent = new Intent();
                                        intent.setClassName(PackageManagerService.PLATFORM_PACKAGE_NAME, DumpHeapActivity.class.getName());
                                        intent.putExtra("process", procName);
                                        intent.putExtra("size", memLimit);
                                        intent.putExtra("is_user_initiated", isUserInitiated);
                                        intent.putExtra("is_system_process", uid == 1000);
                                        if (reportPackage != null) {
                                            intent.putExtra("direct_launch", reportPackage);
                                        }
                                        int userId2 = UserHandle.getUserId(uid);
                                        String str = reportPackage;
                                        int i3 = uid;
                                        Intent intent2 = intent;
                                        Intent intent3 = deleteIntent;
                                        String str2 = text;
                                        int i4 = titleId;
                                        try {
                                            inm.enqueueNotificationWithTag(PackageManagerService.PLATFORM_PACKAGE_NAME, PackageManagerService.PLATFORM_PACKAGE_NAME, (String) null, 12, new Notification.Builder(ActivityManagerService.this.mContext, SystemNotificationChannels.DEVELOPER).setSmallIcon(17303570).setAutoCancel(true).setTicker(text).setColor(ActivityManagerService.this.mContext.getColor(17170460)).setContentTitle(text).setContentText(ActivityManagerService.this.mContext.getText(17039914)).setContentIntent(PendingIntent.getActivityAsUser(ActivityManagerService.this.mContext, 0, intent, 268435456, (Bundle) null, new UserHandle(userId2))).setDeleteIntent(PendingIntent.getBroadcastAsUser(ActivityManagerService.this.mContext, 0, deleteIntent, 0, UserHandle.SYSTEM)).build(), userId2);
                                            return;
                                        } catch (RuntimeException e2) {
                                            Slog.w("ActivityManager", "Error showing notification for dump heap", e2);
                                            return;
                                        } catch (RemoteException e3) {
                                            return;
                                        }
                                    } else {
                                        return;
                                    }
                                case 51:
                                    ActivityManagerService.this.revokeUriPermission(ActivityThread.currentActivityThread().getApplicationThread(), (String) null, DumpHeapActivity.JAVA_URI, 3, UserHandle.myUserId());
                                    synchronized (ActivityManagerService.this) {
                                        try {
                                            ActivityManagerService.boostPriorityForLockedSection();
                                            ActivityManagerService.this.mMemWatchDumpFile = null;
                                            ActivityManagerService.this.mMemWatchDumpProcName = null;
                                            ActivityManagerService.this.mMemWatchDumpPid = -1;
                                            ActivityManagerService.this.mMemWatchDumpUid = -1;
                                        } catch (Throwable th10) {
                                            while (true) {
                                                ActivityManagerService.resetPriorityAfterLockedSection();
                                                throw th10;
                                                break;
                                            }
                                        }
                                    }
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    return;
                                default:
                                    switch (i) {
                                        case 56:
                                            try {
                                                ((IUiAutomationConnection) message.obj).shutdown();
                                            } catch (RemoteException e4) {
                                                RemoteException remoteException = e4;
                                                Slog.w("ActivityManager", "Error shutting down UiAutomationConnection");
                                            }
                                            boolean unused = ActivityManagerService.this.mUserIsMonkey = false;
                                            return;
                                        case ActivityManagerService.CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG /*57*/:
                                            ProcessRecord app2 = (ProcessRecord) message.obj;
                                            synchronized (ActivityManagerService.this) {
                                                try {
                                                    ActivityManagerService.boostPriorityForLockedSection();
                                                    ActivityManagerService.this.processContentProviderPublishTimedOutLocked(app2);
                                                } catch (Throwable th11) {
                                                    while (true) {
                                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                                        throw th11;
                                                        break;
                                                    }
                                                }
                                            }
                                            ActivityManagerService.resetPriorityAfterLockedSection();
                                            return;
                                        case 58:
                                            ActivityManagerService.this.idleUids();
                                            return;
                                        default:
                                            return;
                                    }
                            }
                    }
                } else {
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            for (int i5 = ActivityManagerService.this.mProcessList.mLruProcesses.size() - 1; i5 >= 0; i5--) {
                                r = ActivityManagerService.this.mProcessList.mLruProcesses.get(i5);
                                if (r.thread != null) {
                                    r.thread.updateTimeZone();
                                }
                            }
                        } catch (RemoteException e5) {
                            Slog.w("ActivityManager", "Failed to update time zone for: " + r.info.processName);
                        } catch (Throwable th12) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th12;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            } else if (message.arg1 == 1) {
                Message nmsg = ActivityManagerService.this.mHandler.obtainMessage(12);
                nmsg.obj = message.obj;
                nmsg.arg1 = ActivityManagerService.this.mSystemMainLooperReady ^ true ? 1 : 0;
                Slog.w("ActivityManager", "start service in system too early, now mSystemMainLooperReady = " + ActivityManagerService.this.mSystemMainLooperReady);
                ActivityManagerService.this.mHandler.sendMessageDelayed(nmsg, ActivityManagerServiceInjector.KEEP_FOREGROUND_DURATION);
            } else {
                ActivityManagerService.this.mServices.serviceTimeout((ProcessRecord) message.obj);
            }
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 11 */
    /* JADX WARNING: type inference failed for: r1v2, types: [com.android.server.am.ProcessStatsService, android.os.IBinder] */
    /* JADX WARNING: type inference failed for: r1v7, types: [com.android.server.am.ActivityManagerService$PermissionController, android.os.IBinder] */
    /* JADX WARNING: type inference failed for: r1v8, types: [android.os.IBinder, com.android.server.am.ActivityManagerService$ProcessInfoService] */
    public void setSystemProcess() {
        try {
            ServiceManager.addService("activity", this, true, 21);
            ServiceManager.addService("procstats", this.mProcessStats);
            ServiceManager.addService("meminfo", new MemBinder(this), false, 2);
            ServiceManager.addService("gfxinfo", new GraphicsBinder(this));
            ServiceManager.addService("dbinfo", new DbBinder(this));
            ServiceManager.addService("cpuinfo", new CpuBinder(this), false, 1);
            ServiceManager.addService("permission", new PermissionController(this));
            ServiceManager.addService("processinfo", new ProcessInfoService(this));
            ApplicationInfo info = this.mContext.getPackageManager().getApplicationInfo(PackageManagerService.PLATFORM_PACKAGE_NAME, 1049600);
            this.mSystemThread.installSystemApplicationInfo(info, getClass().getClassLoader());
            synchronized (this) {
                boostPriorityForLockedSection();
                ProcessRecord app = this.mProcessList.newProcessRecordLocked(info, info.processName, false, 0, new HostingRecord("system"));
                app.setPersistent(true);
                app.pid = MY_PID;
                app.getWindowProcessController().setPid(MY_PID);
                app.maxAdj = AppUsageStatsManager.ADJ_FOREGROUND;
                app.makeActive(this.mSystemThread.getApplicationThread(), this.mProcessStats);
                this.mPidsSelfLocked.put(app);
                this.mProcessList.updateLruProcessLocked(app, false, (ProcessRecord) null);
                updateOomAdjLocked("updateOomAdj_meh");
            }
            resetPriorityAfterLockedSection();
            this.mAppOpsService.startWatchingMode(HANDLE_TRUST_STORAGE_UPDATE_MSG, (String) null, new IAppOpsCallback.Stub() {
                public void opChanged(int op, int uid, String packageName) {
                    if (op == ActivityManagerService.HANDLE_TRUST_STORAGE_UPDATE_MSG && packageName != null && ActivityManagerService.this.mAppOpsService.checkOperation(op, uid, packageName) != 0) {
                        ActivityManagerService.this.runInBackgroundDisabled(uid);
                    }
                }
            });
        } catch (PackageManager.NameNotFoundException e) {
            throw new RuntimeException("Unable to find android system package", e);
        } catch (Throwable th) {
            while (true) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void setWindowManager(WindowManagerService wm) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mWindowManager = wm;
                this.mActivityTaskManager.setWindowManager(wm);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager) {
        this.mUsageStatsService = usageStatsManager;
        this.mActivityTaskManager.setUsageStatsManager(usageStatsManager);
    }

    public void setContentCaptureManager(ContentCaptureManagerInternal contentCaptureManager) {
        this.mContentCaptureService = contentCaptureManager;
    }

    public void startObservingNativeCrashes() {
        new NativeCrashListener(this).start();
    }

    public IAppOpsService getAppOpsService() {
        return this.mAppOpsService;
    }

    static class MemBinder extends Binder {
        ActivityManagerService mActivityManagerService;
        private final PriorityDump.PriorityDumper mPriorityDumper = new PriorityDump.PriorityDumper() {
            public void dumpHigh(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                dump(fd, pw, new String[]{"-a"}, asProto);
            }

            public void dump(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                MemBinder.this.mActivityManagerService.dumpApplicationMemoryUsage(fd, pw, "  ", args, false, (PrintWriter) null, asProto);
            }
        };

        MemBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        /* access modifiers changed from: protected */
        public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "meminfo", pw)) {
                PriorityDump.dump(this.mPriorityDumper, fd, pw, args);
            }
        }
    }

    static class GraphicsBinder extends Binder {
        ActivityManagerService mActivityManagerService;

        GraphicsBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        /* access modifiers changed from: protected */
        public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "gfxinfo", pw)) {
                this.mActivityManagerService.dumpGraphicsHardwareUsage(fd, pw, args);
            }
        }
    }

    static class DbBinder extends Binder {
        ActivityManagerService mActivityManagerService;

        DbBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        /* access modifiers changed from: protected */
        public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "dbinfo", pw)) {
                this.mActivityManagerService.dumpDbInfo(fd, pw, args);
            }
        }
    }

    static class CpuBinder extends Binder {
        ActivityManagerService mActivityManagerService;
        private final PriorityDump.PriorityDumper mPriorityDumper = new PriorityDump.PriorityDumper() {
            public void dumpCritical(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                if (!asProto && DumpUtils.checkDumpAndUsageStatsPermission(CpuBinder.this.mActivityManagerService.mContext, "cpuinfo", pw)) {
                    synchronized (CpuBinder.this.mActivityManagerService.mProcessCpuTracker) {
                        pw.print(CpuBinder.this.mActivityManagerService.mProcessCpuTracker.printCurrentLoad());
                        pw.print(CpuBinder.this.mActivityManagerService.mProcessCpuTracker.printCurrentState(SystemClock.uptimeMillis()));
                    }
                }
            }
        };

        CpuBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        /* access modifiers changed from: protected */
        public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            PriorityDump.dump(this.mPriorityDumper, fd, pw, args);
        }
    }

    public static final class Lifecycle extends SystemService {
        private static ActivityTaskManagerService sAtm;
        private final ActivityManagerService mService;

        public Lifecycle(Context context) {
            super(context);
            this.mService = new ActivityManagerService(context, sAtm);
        }

        public static ActivityManagerService startService(SystemServiceManager ssm, ActivityTaskManagerService atm) {
            sAtm = atm;
            return ((Lifecycle) ssm.startService(Lifecycle.class)).getService();
        }

        public void onStart() {
            this.mService.start();
        }

        public void onBootPhase(int phase) {
            ActivityManagerService activityManagerService = this.mService;
            activityManagerService.mBootPhase = phase;
            if (phase == 500) {
                activityManagerService.mBatteryStatsService.systemServicesReady();
                this.mService.mServices.systemServicesReady();
            } else if (phase == 550) {
                activityManagerService.startBroadcastObservers();
            } else if (phase == 600) {
                activityManagerService.mPackageWatchdog.onPackagesReady();
            }
        }

        public void onCleanupUser(int userId) {
            this.mService.mBatteryStatsService.onCleanupUser(userId);
        }

        public ActivityManagerService getService() {
            return this.mService;
        }
    }

    static class HiddenApiSettings extends ContentObserver implements DeviceConfig.OnPropertiesChangedListener {
        public static final String HIDDEN_API_ACCESS_LOG_SAMPLING_RATE = "hidden_api_access_log_sampling_rate";
        public static final String HIDDEN_API_ACCESS_STATSLOG_SAMPLING_RATE = "hidden_api_access_statslog_sampling_rate";
        private boolean mBlacklistDisabled;
        private final Context mContext;
        private List<String> mExemptions = Collections.emptyList();
        private String mExemptionsStr;
        private int mLogSampleRate = -1;
        private int mPolicy = -1;
        private int mStatslogSampleRate = -1;

        public void onPropertiesChanged(DeviceConfig.Properties properties) {
            setSampleRates(properties.getInt(HIDDEN_API_ACCESS_LOG_SAMPLING_RATE, this.mLogSampleRate), properties.getInt(HIDDEN_API_ACCESS_STATSLOG_SAMPLING_RATE, this.mStatslogSampleRate));
        }

        private void setSampleRates(int logSampleRate, int statslogSampleRate) {
            if (logSampleRate >= 0 && logSampleRate <= 65536 && logSampleRate != this.mLogSampleRate) {
                this.mLogSampleRate = logSampleRate;
                Process.ZYGOTE_PROCESS.setHiddenApiAccessLogSampleRate(this.mLogSampleRate);
            }
            if (statslogSampleRate >= 0 && statslogSampleRate <= 65536 && statslogSampleRate != this.mStatslogSampleRate) {
                this.mStatslogSampleRate = statslogSampleRate;
                Process.ZYGOTE_PROCESS.setHiddenApiAccessStatslogSampleRate(this.mStatslogSampleRate);
            }
        }

        private void initializeSampleRates() {
            setSampleRates(DeviceConfig.getInt("app_compat", HIDDEN_API_ACCESS_LOG_SAMPLING_RATE, 0), DeviceConfig.getInt("app_compat", HIDDEN_API_ACCESS_STATSLOG_SAMPLING_RATE, 0));
        }

        public HiddenApiSettings(Handler handler, Context context) {
            super(handler);
            this.mContext = context;
        }

        public void registerObserver() {
            this.mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor("hidden_api_blacklist_exemptions"), false, this);
            this.mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor("hidden_api_policy"), false, this);
            initializeSampleRates();
            DeviceConfig.addOnPropertiesChangedListener("app_compat", this.mContext.getMainExecutor(), this);
            update();
        }

        private void update() {
            List<String> list;
            String exemptions = Settings.Global.getString(this.mContext.getContentResolver(), "hidden_api_blacklist_exemptions");
            if (!TextUtils.equals(exemptions, this.mExemptionsStr)) {
                this.mExemptionsStr = exemptions;
                if ("*".equals(exemptions)) {
                    this.mBlacklistDisabled = true;
                    this.mExemptions = Collections.emptyList();
                } else {
                    this.mBlacklistDisabled = false;
                    if (TextUtils.isEmpty(exemptions)) {
                        list = Collections.emptyList();
                    } else {
                        list = Arrays.asList(exemptions.split(","));
                    }
                    this.mExemptions = list;
                }
                if (!Process.ZYGOTE_PROCESS.setApiBlacklistExemptions(this.mExemptions)) {
                    Slog.e("ActivityManager", "Failed to set API blacklist exemptions!");
                    this.mExemptions = Collections.emptyList();
                }
            }
            this.mPolicy = getValidEnforcementPolicy("hidden_api_policy");
        }

        private int getValidEnforcementPolicy(String settingsKey) {
            int policy = Settings.Global.getInt(this.mContext.getContentResolver(), settingsKey, -1);
            if (ApplicationInfo.isValidHiddenApiEnforcementPolicy(policy)) {
                return policy;
            }
            return -1;
        }

        /* access modifiers changed from: package-private */
        public boolean isDisabled() {
            return this.mBlacklistDisabled;
        }

        /* access modifiers changed from: package-private */
        public int getPolicy() {
            return this.mPolicy;
        }

        public void onChange(boolean selfChange) {
            update();
        }
    }

    @VisibleForTesting
    public ActivityManagerService(Injector injector) {
        this(injector, (ServiceThread) null);
    }

    @VisibleForTesting
    public ActivityManagerService(Injector injector, ServiceThread handlerThread) {
        this.mInstrumentationReporter = new InstrumentationReporter();
        this.mActiveInstrumentation = new ArrayList<>();
        this.mOomAdjProfiler = new OomAdjProfiler();
        this.mUseFifoUiScheduling = false;
        this.mBroadcastQueues = new BroadcastQueue[3];
        this.mPriorityDumper = new PriorityDump.PriorityDumper() {
            public void dumpCritical(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                if (!asProto) {
                    ActivityManagerService.this.doDump(fd, pw, new String[]{ActivityTaskManagerService.DUMP_ACTIVITIES_CMD}, asProto);
                    ActivityManagerService.this.doDump(fd, pw, new String[]{"service", "all-platform-critical"}, asProto);
                }
            }

            public void dumpNormal(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, new String[]{"-a", "--normal-priority"}, asProto);
            }

            public void dump(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, args, asProto);
            }
        };
        this.mProcessList = new ProcessList();
        boolean hasHandlerThread = true;
        this.mBackgroundAppIdWhitelist = new int[]{1002};
        this.mPidsSelfLocked = new PidMap();
        this.mImportantProcesses = new SparseArray<>();
        this.mProcessesOnHold = new ArrayList<>();
        this.mPersistentStartingProcesses = new ArrayList<>();
        this.mProcessesToGc = new ArrayList<>();
        this.mPendingPssProcesses = new ArrayList<>();
        this.mActivityStartingNesting = new AtomicInteger(0);
        this.mActivityLaunchObserver = new ActivityMetricsLaunchObserver() {
            public void onActivityLaunched(byte[] activity, int temperature) {
                if (ActivityManagerService.this.mPssDeferralTime > 0) {
                    ActivityManagerService.this.mBgHandler.sendMessageAtFrontOfQueue(ActivityManagerService.this.mBgHandler.obtainMessage(2));
                }
            }

            public void onIntentStarted(Intent intent) {
            }

            public void onIntentFailed() {
            }

            public void onActivityLaunchCancelled(byte[] abortingActivity) {
            }

            public void onActivityLaunchFinished(byte[] finalActivity) {
            }
        };
        this.mPssDeferralTime = 0;
        this.mBinderTransactionTrackingEnabled = false;
        this.mLastFullPssTime = SystemClock.uptimeMillis();
        this.mFullPssPending = false;
        this.mPssDelayConfigListener = new DeviceConfig.OnPropertiesChangedListener() {
            public void onPropertiesChanged(DeviceConfig.Properties properties) {
                long unused = ActivityManagerService.this.mPssDeferralTime = properties.getLong(ActivityManagerService.ACTIVITY_START_PSS_DEFER_CONFIG, 0);
            }
        };
        this.mValidateUids = new ActiveUids(this, false);
        this.mAlreadyLoggedViolatedStacks = new HashSet<>();
        this.mRegisteredReceivers = new HashMap<>();
        this.mReceiverResolver = new IntentResolver<BroadcastFilter, BroadcastFilter>() {
            /* access modifiers changed from: protected */
            public boolean allowFilterResult(BroadcastFilter filter, List<BroadcastFilter> dest) {
                IBinder target = filter.receiverList.receiver.asBinder();
                for (int i = dest.size() - 1; i >= 0; i--) {
                    if (dest.get(i).receiverList.receiver.asBinder() == target) {
                        return false;
                    }
                }
                return true;
            }

            /* access modifiers changed from: protected */
            public BroadcastFilter newResult(BroadcastFilter filter, int match, int userId) {
                if (userId == -1 || filter.owningUserId == -1 || userId == filter.owningUserId) {
                    return (BroadcastFilter) super.newResult(filter, match, userId);
                }
                return null;
            }

            /* access modifiers changed from: protected */
            public BroadcastFilter[] newArray(int size) {
                return new BroadcastFilter[size];
            }

            /* access modifiers changed from: protected */
            public boolean isPackageForFilter(String packageName, BroadcastFilter filter) {
                return packageName.equals(filter.packageName);
            }
        };
        this.mStickyBroadcasts = new SparseArray<>();
        this.mAssociations = new SparseArray<>();
        this.mBackupTargets = new SparseArray<>();
        this.mLaunchingProviders = new ArrayList<>();
        this.mDeviceIdleWhitelist = new int[0];
        this.mDeviceIdleExceptIdleWhitelist = new int[0];
        this.mDeviceIdleTempWhitelist = new int[0];
        this.mPendingTempWhitelist = new PendingTempWhitelists(this);
        this.mStringBuilder = new StringBuilder(256);
        this.mProcessesReady = false;
        this.mSystemReady = false;
        this.mSystemMainLooperReady = false;
        this.mOnBattery = false;
        this.mBooting = false;
        this.mCallFinishBooting = false;
        this.mBootAnimationComplete = false;
        this.mWakefulness = 1;
        this.mAllowLowerMemLevel = false;
        this.mLastMemoryLevel = 0;
        this.mLastIdleTime = SystemClock.uptimeMillis();
        this.mLowRamTimeSinceLastIdle = 0;
        this.mLowRamStartTime = 0;
        this.mCurResumedPackage = null;
        this.mCurResumedUid = -1;
        this.mForegroundPackages = new ProcessMap<>();
        this.mTestPssMode = false;
        this.mDebugApp = null;
        this.mWaitForDebugger = false;
        this.mDebugTransient = false;
        this.mOrigDebugApp = null;
        this.mOrigWaitForDebugger = false;
        this.mAlwaysFinishActivities = false;
        this.mProfileData = new ProfileData();
        this.mAppAgentMap = null;
        this.mProfileType = 0;
        this.mMemWatchProcesses = new ProcessMap<>();
        this.mTrackAllocationApp = null;
        this.mNativeDebuggingApp = null;
        this.mProcessObservers = new RemoteCallbackList<>();
        this.mActiveProcessChanges = new ProcessChangeItem[5];
        this.mPendingProcessChanges = new ArrayList<>();
        this.mAvailProcessChanges = new ArrayList<>();
        this.mUidObservers = new RemoteCallbackList<>();
        this.mActiveUidChanges = new UidRecord.ChangeItem[5];
        this.mPendingUidChanges = new ArrayList<>();
        this.mAvailUidChanges = new ArrayList<>();
        this.mProcessCpuTracker = new ProcessCpuTracker(false);
        this.mLastCpuTime = new AtomicLong(0);
        this.mProcessCpuMutexFree = new AtomicBoolean(true);
        this.mProcessCpuInitLatch = new CountDownLatch(1);
        this.mLastWriteTime = 0;
        this.mBooted = false;
        this.mLastMemUsageReportTime = 0;
        this.mEnableProcessGroupCgroupFollow = SystemProperties.getBoolean("ro.vendor.qti.cgroup_follow.enable", false);
        this.mBgHandler = new Handler(BackgroundThread.getHandler().getLooper()) {
            /* JADX WARNING: Code restructure failed: missing block: B:100:0x01d6, code lost:
                r1 = r44;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:101:0x01d9, code lost:
                r0 = 0;
                r31 = 2;
                r32 = true;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:102:0x01de, code lost:
                com.android.server.am.ProcessList.abortNextPssTime(r13.procStateMemTracker);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:103:0x01e3, code lost:
                monitor-exit(r10);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:104:0x01e4, code lost:
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
             */
            /* JADX WARNING: Code restructure failed: missing block: B:105:0x01e8, code lost:
                r0 = th;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:107:?, code lost:
                monitor-exit(r10);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:108:0x01ea, code lost:
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
             */
            /* JADX WARNING: Code restructure failed: missing block: B:109:0x01ed, code lost:
                throw r0;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:110:0x01ee, code lost:
                r0 = 0;
                r31 = 2;
                r32 = true;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:78:0x0178, code lost:
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
             */
            /* JADX WARNING: Code restructure failed: missing block: B:79:0x017b, code lost:
                if (r13 == null) goto L_0x01ee;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:80:0x017d, code lost:
                r34 = android.os.SystemClock.currentThreadTimeMillis();
                r36 = android.os.Debug.getPss(r9, r3, r0);
                r38 = android.os.SystemClock.currentThreadTimeMillis();
                r10 = r1.this$0;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:81:0x018b, code lost:
                monitor-enter(r10);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:83:?, code lost:
                com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
             */
            /* JADX WARNING: Code restructure failed: missing block: B:84:0x0193, code lost:
                if (r36 == 0) goto L_0x01d9;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:86:0x0197, code lost:
                if (r13.thread == null) goto L_0x01d9;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:88:0x019b, code lost:
                if (r13.setProcState != r14) goto L_0x01d9;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:90:0x019f, code lost:
                if (r13.pid != r9) goto L_0x01d9;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:93:0x01a5, code lost:
                if (r13.lastPssTime != r4) goto L_0x01cd;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:94:0x01a7, code lost:
                r11 = r11 + 1;
                com.android.server.am.ProcessList.commitNextPssTime(r13.procStateMemTracker);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:95:0x01ae, code lost:
                r1 = r44;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:97:?, code lost:
                r0 = 0;
                r32 = true;
                r31 = 2;
                r1.this$0.recordPssSampleLocked(r13, r14, r36, r3[0], r3[1], r3[2], r26, r38 - r34, android.os.SystemClock.uptimeMillis());
             */
            /* JADX WARNING: Code restructure failed: missing block: B:98:0x01cd, code lost:
                r0 = 0;
                r31 = 2;
                r32 = true;
                r1 = r44;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:99:0x01d5, code lost:
                r0 = th;
             */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void handleMessage(android.os.Message r45) {
                /*
                    r44 = this;
                    r1 = r44
                    r2 = r45
                    int r0 = r2.what
                    r3 = 3
                    r4 = 2
                    r5 = 1
                    if (r0 == r5) goto L_0x0036
                    if (r0 == r4) goto L_0x002f
                    if (r0 == r3) goto L_0x0010
                    goto L_0x0035
                L_0x0010:
                    com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this
                    java.util.concurrent.atomic.AtomicInteger r0 = r0.mActivityStartingNesting
                    int r0 = r0.decrementAndGet()
                    if (r0 > 0) goto L_0x0035
                    if (r0 >= 0) goto L_0x0035
                    java.lang.String r3 = "ActivityManager"
                    java.lang.String r4 = "Activity start nesting undercount!"
                    android.util.Slog.wtf(r3, r4)
                    com.android.server.am.ActivityManagerService r3 = com.android.server.am.ActivityManagerService.this
                    java.util.concurrent.atomic.AtomicInteger r3 = r3.mActivityStartingNesting
                    r3.incrementAndGet()
                    goto L_0x0035
                L_0x002f:
                    com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this
                    r0.deferPssForActivityStart()
                L_0x0035:
                    return
                L_0x0036:
                    long r6 = android.os.SystemClock.uptimeMillis()
                    r8 = 0
                    com.android.server.am.ActivityManagerService r9 = com.android.server.am.ActivityManagerService.this
                    monitor-enter(r9)
                    com.android.server.am.ActivityManagerService.boostPriorityForLockedSection()     // Catch:{ all -> 0x0201 }
                    com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x0201 }
                    boolean r0 = r0.mFullPssPending     // Catch:{ all -> 0x0201 }
                    r10 = 0
                    if (r0 == 0) goto L_0x0052
                    com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x0201 }
                    r0.mFullPssPending = r10     // Catch:{ all -> 0x0201 }
                    com.android.internal.util.MemInfoReader r0 = new com.android.internal.util.MemInfoReader     // Catch:{ all -> 0x0201 }
                    r0.<init>()     // Catch:{ all -> 0x0201 }
                    r8 = r0
                L_0x0052:
                    monitor-exit(r9)     // Catch:{ all -> 0x0201 }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    r0 = 0
                    if (r8 == 0) goto L_0x00f4
                    com.android.server.am.ActivityManagerService r9 = com.android.server.am.ActivityManagerService.this
                    r9.updateCpuStatsNow()
                    r11 = 0
                    com.android.server.am.ActivityManagerService r9 = com.android.server.am.ActivityManagerService.this
                    com.android.internal.os.ProcessCpuTracker r9 = r9.mProcessCpuTracker
                    monitor-enter(r9)
                    com.android.server.am.ActivityManagerService r13 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x00f1 }
                    com.android.internal.os.ProcessCpuTracker r13 = r13.mProcessCpuTracker     // Catch:{ all -> 0x00f1 }
                    com.android.server.am.-$$Lambda$ActivityManagerService$5$BegFiGFfKLYS7VRmiWluczgOC5k r14 = com.android.server.am.$$Lambda$ActivityManagerService$5$BegFiGFfKLYS7VRmiWluczgOC5k.INSTANCE     // Catch:{ all -> 0x00f1 }
                    java.util.List r13 = r13.getStats(r14)     // Catch:{ all -> 0x00f1 }
                    monitor-exit(r9)     // Catch:{ all -> 0x00f1 }
                    int r14 = r13.size()
                    r9 = 0
                    r26 = r11
                L_0x0077:
                    if (r9 >= r14) goto L_0x00a7
                    com.android.server.am.ActivityManagerService r11 = com.android.server.am.ActivityManagerService.this
                    com.android.server.am.ActivityManagerService$PidMap r11 = r11.mPidsSelfLocked
                    monitor-enter(r11)
                    com.android.server.am.ActivityManagerService r12 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x00a4 }
                    com.android.server.am.ActivityManagerService$PidMap r12 = r12.mPidsSelfLocked     // Catch:{ all -> 0x00a4 }
                    java.lang.Object r15 = r13.get(r9)     // Catch:{ all -> 0x00a4 }
                    com.android.internal.os.ProcessCpuTracker$Stats r15 = (com.android.internal.os.ProcessCpuTracker.Stats) r15     // Catch:{ all -> 0x00a4 }
                    int r15 = r15.pid     // Catch:{ all -> 0x00a4 }
                    int r12 = r12.indexOfKey(r15)     // Catch:{ all -> 0x00a4 }
                    if (r12 < 0) goto L_0x0092
                    monitor-exit(r11)     // Catch:{ all -> 0x00a4 }
                    goto L_0x00a1
                L_0x0092:
                    monitor-exit(r11)     // Catch:{ all -> 0x00a4 }
                    java.lang.Object r11 = r13.get(r9)
                    com.android.internal.os.ProcessCpuTracker$Stats r11 = (com.android.internal.os.ProcessCpuTracker.Stats) r11
                    int r11 = r11.pid
                    long r11 = android.os.Debug.getPss(r11, r0, r0)
                    long r26 = r26 + r11
                L_0x00a1:
                    int r9 = r9 + 1
                    goto L_0x0077
                L_0x00a4:
                    r0 = move-exception
                    monitor-exit(r11)     // Catch:{ all -> 0x00a4 }
                    throw r0
                L_0x00a7:
                    r8.readMemInfo()
                    com.android.server.am.ActivityManagerService r9 = com.android.server.am.ActivityManagerService.this
                    monitor-enter(r9)
                    com.android.server.am.ActivityManagerService.boostPriorityForLockedSection()     // Catch:{ all -> 0x00eb }
                    long r11 = r8.getCachedSizeKb()     // Catch:{ all -> 0x00eb }
                    long r15 = r8.getFreeSizeKb()     // Catch:{ all -> 0x00eb }
                    r28 = r15
                    long r15 = r8.getZramTotalSizeKb()     // Catch:{ all -> 0x00eb }
                    r30 = r15
                    long r15 = r8.getKernelUsedSizeKb()     // Catch:{ all -> 0x00eb }
                    r32 = r15
                    r15 = 1024(0x400, double:5.06E-321)
                    long r34 = r11 * r15
                    long r36 = r28 * r15
                    long r38 = r30 * r15
                    long r40 = r32 * r15
                    long r42 = r26 * r15
                    com.android.server.am.EventLogTags.writeAmMeminfo(r34, r36, r38, r40, r42)     // Catch:{ all -> 0x00eb }
                    com.android.server.am.ActivityManagerService r15 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x00eb }
                    com.android.server.am.ProcessStatsService r15 = r15.mProcessStats     // Catch:{ all -> 0x00eb }
                    r16 = r11
                    r18 = r28
                    r20 = r30
                    r22 = r32
                    r24 = r26
                    r15.addSysMemUsageLocked(r16, r18, r20, r22, r24)     // Catch:{ all -> 0x00eb }
                    monitor-exit(r9)     // Catch:{ all -> 0x00eb }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    goto L_0x00f4
                L_0x00eb:
                    r0 = move-exception
                    monitor-exit(r9)     // Catch:{ all -> 0x00eb }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    throw r0
                L_0x00f1:
                    r0 = move-exception
                    monitor-exit(r9)     // Catch:{ all -> 0x00f1 }
                    throw r0
                L_0x00f4:
                    r9 = 0
                    long[] r3 = new long[r3]
                    r11 = r9
                L_0x00f8:
                    r9 = -1
                    com.android.server.am.ActivityManagerService r12 = com.android.server.am.ActivityManagerService.this
                    monitor-enter(r12)
                    com.android.server.am.ActivityManagerService.boostPriorityForLockedSection()     // Catch:{ all -> 0x01fb }
                    com.android.server.am.ActivityManagerService r13 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x01fb }
                    java.util.ArrayList<com.android.server.am.ProcessRecord> r13 = r13.mPendingPssProcesses     // Catch:{ all -> 0x01fb }
                    int r13 = r13.size()     // Catch:{ all -> 0x01fb }
                    if (r13 > 0) goto L_0x0146
                    com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x01fb }
                    boolean r0 = r0.mTestPssMode     // Catch:{ all -> 0x01fb }
                    if (r0 != 0) goto L_0x0110
                L_0x010f:
                    goto L_0x013a
                L_0x0110:
                    java.lang.String r0 = "ActivityManager"
                    java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x01fb }
                    r4.<init>()     // Catch:{ all -> 0x01fb }
                    java.lang.String r5 = "Collected pss of "
                    r4.append(r5)     // Catch:{ all -> 0x01fb }
                    r4.append(r11)     // Catch:{ all -> 0x01fb }
                    java.lang.String r5 = " processes in "
                    r4.append(r5)     // Catch:{ all -> 0x01fb }
                    long r13 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x01fb }
                    long r13 = r13 - r6
                    r4.append(r13)     // Catch:{ all -> 0x01fb }
                    java.lang.String r5 = "ms"
                    r4.append(r5)     // Catch:{ all -> 0x01fb }
                    java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x01fb }
                    android.util.Slog.d(r0, r4)     // Catch:{ all -> 0x01fb }
                    goto L_0x010f
                L_0x013a:
                    com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x01fb }
                    java.util.ArrayList<com.android.server.am.ProcessRecord> r0 = r0.mPendingPssProcesses     // Catch:{ all -> 0x01fb }
                    r0.clear()     // Catch:{ all -> 0x01fb }
                    monitor-exit(r12)     // Catch:{ all -> 0x01fb }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    return
                L_0x0146:
                    com.android.server.am.ActivityManagerService r13 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x01fb }
                    java.util.ArrayList<com.android.server.am.ProcessRecord> r13 = r13.mPendingPssProcesses     // Catch:{ all -> 0x01fb }
                    java.lang.Object r13 = r13.remove(r10)     // Catch:{ all -> 0x01fb }
                    com.android.server.am.ProcessRecord r13 = (com.android.server.am.ProcessRecord) r13     // Catch:{ all -> 0x01fb }
                    int r14 = r13.pssProcState     // Catch:{ all -> 0x01fb }
                    int r15 = r13.pssStatType     // Catch:{ all -> 0x01fb }
                    r26 = r15
                    long r4 = r13.lastPssTime     // Catch:{ all -> 0x01fb }
                    long r15 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x01fb }
                    android.app.IApplicationThread r10 = r13.thread     // Catch:{ all -> 0x01fb }
                    if (r10 == 0) goto L_0x0170
                    int r10 = r13.setProcState     // Catch:{ all -> 0x01fb }
                    if (r14 != r10) goto L_0x0170
                    r17 = 1000(0x3e8, double:4.94E-321)
                    long r17 = r4 + r17
                    int r10 = (r17 > r15 ? 1 : (r17 == r15 ? 0 : -1))
                    if (r10 >= 0) goto L_0x0170
                    int r10 = r13.pid     // Catch:{ all -> 0x01fb }
                    r9 = r10
                    goto L_0x0177
                L_0x0170:
                    com.android.server.am.ProcessList$ProcStateMemTracker r10 = r13.procStateMemTracker     // Catch:{ all -> 0x01fb }
                    com.android.server.am.ProcessList.abortNextPssTime(r10)     // Catch:{ all -> 0x01fb }
                    r13 = 0
                    r9 = 0
                L_0x0177:
                    monitor-exit(r12)     // Catch:{ all -> 0x01fb }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    if (r13 == 0) goto L_0x01ee
                    long r34 = android.os.SystemClock.currentThreadTimeMillis()
                    long r36 = android.os.Debug.getPss(r9, r3, r0)
                    long r38 = android.os.SystemClock.currentThreadTimeMillis()
                    com.android.server.am.ActivityManagerService r10 = com.android.server.am.ActivityManagerService.this
                    monitor-enter(r10)
                    com.android.server.am.ActivityManagerService.boostPriorityForLockedSection()     // Catch:{ all -> 0x01e8 }
                    r15 = 0
                    int r12 = (r36 > r15 ? 1 : (r36 == r15 ? 0 : -1))
                    if (r12 == 0) goto L_0x01d9
                    android.app.IApplicationThread r12 = r13.thread     // Catch:{ all -> 0x01e8 }
                    if (r12 == 0) goto L_0x01d9
                    int r12 = r13.setProcState     // Catch:{ all -> 0x01e8 }
                    if (r12 != r14) goto L_0x01d9
                    int r12 = r13.pid     // Catch:{ all -> 0x01e8 }
                    if (r12 != r9) goto L_0x01d9
                    long r0 = r13.lastPssTime     // Catch:{ all -> 0x01d5 }
                    int r0 = (r0 > r4 ? 1 : (r0 == r4 ? 0 : -1))
                    if (r0 != 0) goto L_0x01cd
                    int r11 = r11 + 1
                    com.android.server.am.ProcessList$ProcStateMemTracker r0 = r13.procStateMemTracker     // Catch:{ all -> 0x01d5 }
                    com.android.server.am.ProcessList.commitNextPssTime(r0)     // Catch:{ all -> 0x01d5 }
                    r1 = r44
                    com.android.server.am.ActivityManagerService r15 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x01e8 }
                    r0 = 0
                    r20 = r3[r0]     // Catch:{ all -> 0x01e8 }
                    r32 = 1
                    r22 = r3[r32]     // Catch:{ all -> 0x01e8 }
                    r31 = 2
                    r24 = r3[r31]     // Catch:{ all -> 0x01e8 }
                    long r27 = r38 - r34
                    long r29 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x01e8 }
                    r16 = r13
                    r17 = r14
                    r18 = r36
                    r15.recordPssSampleLocked(r16, r17, r18, r20, r22, r24, r26, r27, r29)     // Catch:{ all -> 0x01e8 }
                    goto L_0x01e3
                L_0x01cd:
                    r0 = 0
                    r31 = 2
                    r32 = 1
                    r1 = r44
                    goto L_0x01de
                L_0x01d5:
                    r0 = move-exception
                    r1 = r44
                    goto L_0x01e9
                L_0x01d9:
                    r0 = 0
                    r31 = 2
                    r32 = 1
                L_0x01de:
                    com.android.server.am.ProcessList$ProcStateMemTracker r12 = r13.procStateMemTracker     // Catch:{ all -> 0x01e8 }
                    com.android.server.am.ProcessList.abortNextPssTime(r12)     // Catch:{ all -> 0x01e8 }
                L_0x01e3:
                    monitor-exit(r10)     // Catch:{ all -> 0x01e8 }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    goto L_0x01f3
                L_0x01e8:
                    r0 = move-exception
                L_0x01e9:
                    monitor-exit(r10)     // Catch:{ all -> 0x01e8 }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    throw r0
                L_0x01ee:
                    r0 = 0
                    r31 = 2
                    r32 = 1
                L_0x01f3:
                    r10 = r0
                    r4 = r31
                    r5 = r32
                    r0 = 0
                    goto L_0x00f8
                L_0x01fb:
                    r0 = move-exception
                    monitor-exit(r12)     // Catch:{ all -> 0x01fb }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    throw r0
                L_0x0201:
                    r0 = move-exception
                    monitor-exit(r9)     // Catch:{ all -> 0x0201 }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    throw r0
                */
                throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.AnonymousClass5.handleMessage(android.os.Message):void");
            }

            static /* synthetic */ boolean lambda$handleMessage$0(ProcessCpuTracker.Stats st) {
                return st.vsize > 0 && st.uid < 10000;
            }
        };
        this.mProcessStateStatsLongs = new long[1];
        hasHandlerThread = handlerThread == null ? false : hasHandlerThread;
        this.mInjector = injector;
        this.mContext = this.mInjector.getContext();
        this.mUiContext = null;
        this.mAppErrors = null;
        this.mPackageWatchdog = null;
        this.mAppOpsService = this.mInjector.getAppOpsService((File) null, (Handler) null);
        this.mBatteryStatsService = null;
        this.mHandler = hasHandlerThread ? new MainHandler(handlerThread.getLooper()) : null;
        this.mHandlerThread = handlerThread;
        this.mConstants = hasHandlerThread ? new ActivityManagerConstants(this.mContext, this, this.mHandler) : null;
        ActiveUids activeUids = new ActiveUids(this, false);
        this.mProcessList.init(this, activeUids);
        this.mLowMemDetector = null;
        this.mOomAdjuster = new OomAdjuster(this, this.mProcessList, activeUids);
        this.mIntentFirewall = hasHandlerThread ? new IntentFirewall(new IntentFirewallInterface(), this.mHandler) : null;
        this.mProcessCpuThread = null;
        this.mProcessStats = null;
        this.mProviderMap = null;
        this.mServices = hasHandlerThread ? new ActiveServices(this) : null;
        this.mSystemThread = null;
        this.mUiHandler = injector.getUiHandler((ActivityManagerService) null);
        this.mUserController = hasHandlerThread ? new UserController(this) : null;
        this.mPendingIntentController = hasHandlerThread ? new PendingIntentController(handlerThread.getLooper(), this.mUserController) : null;
        this.mProcStartHandlerThread = null;
        this.mProcStartHandler = null;
        this.mHiddenApiBlacklist = null;
        this.mFactoryTest = 0;
    }

    public ActivityManagerService(Context systemContext, ActivityTaskManagerService atm) {
        Context context = systemContext;
        this.mInstrumentationReporter = new InstrumentationReporter();
        this.mActiveInstrumentation = new ArrayList<>();
        this.mOomAdjProfiler = new OomAdjProfiler();
        this.mUseFifoUiScheduling = false;
        this.mBroadcastQueues = new BroadcastQueue[3];
        this.mPriorityDumper = new PriorityDump.PriorityDumper() {
            public void dumpCritical(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                if (!asProto) {
                    ActivityManagerService.this.doDump(fd, pw, new String[]{ActivityTaskManagerService.DUMP_ACTIVITIES_CMD}, asProto);
                    ActivityManagerService.this.doDump(fd, pw, new String[]{"service", "all-platform-critical"}, asProto);
                }
            }

            public void dumpNormal(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, new String[]{"-a", "--normal-priority"}, asProto);
            }

            public void dump(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, args, asProto);
            }
        };
        this.mProcessList = new ProcessList();
        this.mBackgroundAppIdWhitelist = new int[]{1002};
        this.mPidsSelfLocked = new PidMap();
        this.mImportantProcesses = new SparseArray<>();
        this.mProcessesOnHold = new ArrayList<>();
        this.mPersistentStartingProcesses = new ArrayList<>();
        this.mProcessesToGc = new ArrayList<>();
        this.mPendingPssProcesses = new ArrayList<>();
        this.mActivityStartingNesting = new AtomicInteger(0);
        this.mActivityLaunchObserver = new ActivityMetricsLaunchObserver() {
            public void onActivityLaunched(byte[] activity, int temperature) {
                if (ActivityManagerService.this.mPssDeferralTime > 0) {
                    ActivityManagerService.this.mBgHandler.sendMessageAtFrontOfQueue(ActivityManagerService.this.mBgHandler.obtainMessage(2));
                }
            }

            public void onIntentStarted(Intent intent) {
            }

            public void onIntentFailed() {
            }

            public void onActivityLaunchCancelled(byte[] abortingActivity) {
            }

            public void onActivityLaunchFinished(byte[] finalActivity) {
            }
        };
        this.mPssDeferralTime = 0;
        this.mBinderTransactionTrackingEnabled = false;
        this.mLastFullPssTime = SystemClock.uptimeMillis();
        this.mFullPssPending = false;
        this.mPssDelayConfigListener = new DeviceConfig.OnPropertiesChangedListener() {
            public void onPropertiesChanged(DeviceConfig.Properties properties) {
                long unused = ActivityManagerService.this.mPssDeferralTime = properties.getLong(ActivityManagerService.ACTIVITY_START_PSS_DEFER_CONFIG, 0);
            }
        };
        this.mValidateUids = new ActiveUids(this, false);
        this.mAlreadyLoggedViolatedStacks = new HashSet<>();
        this.mRegisteredReceivers = new HashMap<>();
        this.mReceiverResolver = new IntentResolver<BroadcastFilter, BroadcastFilter>() {
            /* access modifiers changed from: protected */
            public boolean allowFilterResult(BroadcastFilter filter, List<BroadcastFilter> dest) {
                IBinder target = filter.receiverList.receiver.asBinder();
                for (int i = dest.size() - 1; i >= 0; i--) {
                    if (dest.get(i).receiverList.receiver.asBinder() == target) {
                        return false;
                    }
                }
                return true;
            }

            /* access modifiers changed from: protected */
            public BroadcastFilter newResult(BroadcastFilter filter, int match, int userId) {
                if (userId == -1 || filter.owningUserId == -1 || userId == filter.owningUserId) {
                    return (BroadcastFilter) super.newResult(filter, match, userId);
                }
                return null;
            }

            /* access modifiers changed from: protected */
            public BroadcastFilter[] newArray(int size) {
                return new BroadcastFilter[size];
            }

            /* access modifiers changed from: protected */
            public boolean isPackageForFilter(String packageName, BroadcastFilter filter) {
                return packageName.equals(filter.packageName);
            }
        };
        this.mStickyBroadcasts = new SparseArray<>();
        this.mAssociations = new SparseArray<>();
        this.mBackupTargets = new SparseArray<>();
        this.mLaunchingProviders = new ArrayList<>();
        this.mDeviceIdleWhitelist = new int[0];
        this.mDeviceIdleExceptIdleWhitelist = new int[0];
        this.mDeviceIdleTempWhitelist = new int[0];
        this.mPendingTempWhitelist = new PendingTempWhitelists(this);
        this.mStringBuilder = new StringBuilder(256);
        this.mProcessesReady = false;
        this.mSystemReady = false;
        this.mSystemMainLooperReady = false;
        this.mOnBattery = false;
        this.mBooting = false;
        this.mCallFinishBooting = false;
        this.mBootAnimationComplete = false;
        this.mWakefulness = 1;
        this.mAllowLowerMemLevel = false;
        this.mLastMemoryLevel = 0;
        this.mLastIdleTime = SystemClock.uptimeMillis();
        this.mLowRamTimeSinceLastIdle = 0;
        this.mLowRamStartTime = 0;
        this.mCurResumedPackage = null;
        this.mCurResumedUid = -1;
        this.mForegroundPackages = new ProcessMap<>();
        this.mTestPssMode = false;
        this.mDebugApp = null;
        this.mWaitForDebugger = false;
        this.mDebugTransient = false;
        this.mOrigDebugApp = null;
        this.mOrigWaitForDebugger = false;
        this.mAlwaysFinishActivities = false;
        this.mProfileData = new ProfileData();
        this.mAppAgentMap = null;
        this.mProfileType = 0;
        this.mMemWatchProcesses = new ProcessMap<>();
        this.mTrackAllocationApp = null;
        this.mNativeDebuggingApp = null;
        this.mProcessObservers = new RemoteCallbackList<>();
        this.mActiveProcessChanges = new ProcessChangeItem[5];
        this.mPendingProcessChanges = new ArrayList<>();
        this.mAvailProcessChanges = new ArrayList<>();
        this.mUidObservers = new RemoteCallbackList<>();
        this.mActiveUidChanges = new UidRecord.ChangeItem[5];
        this.mPendingUidChanges = new ArrayList<>();
        this.mAvailUidChanges = new ArrayList<>();
        this.mProcessCpuTracker = new ProcessCpuTracker(false);
        this.mLastCpuTime = new AtomicLong(0);
        this.mProcessCpuMutexFree = new AtomicBoolean(true);
        this.mProcessCpuInitLatch = new CountDownLatch(1);
        this.mLastWriteTime = 0;
        this.mBooted = false;
        this.mLastMemUsageReportTime = 0;
        this.mEnableProcessGroupCgroupFollow = SystemProperties.getBoolean("ro.vendor.qti.cgroup_follow.enable", false);
        this.mBgHandler = new Handler(BackgroundThread.getHandler().getLooper()) {
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void handleMessage(android.os.Message r45) {
                /*
                    r44 = this;
                    r1 = r44
                    r2 = r45
                    int r0 = r2.what
                    r3 = 3
                    r4 = 2
                    r5 = 1
                    if (r0 == r5) goto L_0x0036
                    if (r0 == r4) goto L_0x002f
                    if (r0 == r3) goto L_0x0010
                    goto L_0x0035
                L_0x0010:
                    com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this
                    java.util.concurrent.atomic.AtomicInteger r0 = r0.mActivityStartingNesting
                    int r0 = r0.decrementAndGet()
                    if (r0 > 0) goto L_0x0035
                    if (r0 >= 0) goto L_0x0035
                    java.lang.String r3 = "ActivityManager"
                    java.lang.String r4 = "Activity start nesting undercount!"
                    android.util.Slog.wtf(r3, r4)
                    com.android.server.am.ActivityManagerService r3 = com.android.server.am.ActivityManagerService.this
                    java.util.concurrent.atomic.AtomicInteger r3 = r3.mActivityStartingNesting
                    r3.incrementAndGet()
                    goto L_0x0035
                L_0x002f:
                    com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this
                    r0.deferPssForActivityStart()
                L_0x0035:
                    return
                L_0x0036:
                    long r6 = android.os.SystemClock.uptimeMillis()
                    r8 = 0
                    com.android.server.am.ActivityManagerService r9 = com.android.server.am.ActivityManagerService.this
                    monitor-enter(r9)
                    com.android.server.am.ActivityManagerService.boostPriorityForLockedSection()     // Catch:{ all -> 0x0201 }
                    com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x0201 }
                    boolean r0 = r0.mFullPssPending     // Catch:{ all -> 0x0201 }
                    r10 = 0
                    if (r0 == 0) goto L_0x0052
                    com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x0201 }
                    r0.mFullPssPending = r10     // Catch:{ all -> 0x0201 }
                    com.android.internal.util.MemInfoReader r0 = new com.android.internal.util.MemInfoReader     // Catch:{ all -> 0x0201 }
                    r0.<init>()     // Catch:{ all -> 0x0201 }
                    r8 = r0
                L_0x0052:
                    monitor-exit(r9)     // Catch:{ all -> 0x0201 }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    r0 = 0
                    if (r8 == 0) goto L_0x00f4
                    com.android.server.am.ActivityManagerService r9 = com.android.server.am.ActivityManagerService.this
                    r9.updateCpuStatsNow()
                    r11 = 0
                    com.android.server.am.ActivityManagerService r9 = com.android.server.am.ActivityManagerService.this
                    com.android.internal.os.ProcessCpuTracker r9 = r9.mProcessCpuTracker
                    monitor-enter(r9)
                    com.android.server.am.ActivityManagerService r13 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x00f1 }
                    com.android.internal.os.ProcessCpuTracker r13 = r13.mProcessCpuTracker     // Catch:{ all -> 0x00f1 }
                    com.android.server.am.-$$Lambda$ActivityManagerService$5$BegFiGFfKLYS7VRmiWluczgOC5k r14 = com.android.server.am.$$Lambda$ActivityManagerService$5$BegFiGFfKLYS7VRmiWluczgOC5k.INSTANCE     // Catch:{ all -> 0x00f1 }
                    java.util.List r13 = r13.getStats(r14)     // Catch:{ all -> 0x00f1 }
                    monitor-exit(r9)     // Catch:{ all -> 0x00f1 }
                    int r14 = r13.size()
                    r9 = 0
                    r26 = r11
                L_0x0077:
                    if (r9 >= r14) goto L_0x00a7
                    com.android.server.am.ActivityManagerService r11 = com.android.server.am.ActivityManagerService.this
                    com.android.server.am.ActivityManagerService$PidMap r11 = r11.mPidsSelfLocked
                    monitor-enter(r11)
                    com.android.server.am.ActivityManagerService r12 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x00a4 }
                    com.android.server.am.ActivityManagerService$PidMap r12 = r12.mPidsSelfLocked     // Catch:{ all -> 0x00a4 }
                    java.lang.Object r15 = r13.get(r9)     // Catch:{ all -> 0x00a4 }
                    com.android.internal.os.ProcessCpuTracker$Stats r15 = (com.android.internal.os.ProcessCpuTracker.Stats) r15     // Catch:{ all -> 0x00a4 }
                    int r15 = r15.pid     // Catch:{ all -> 0x00a4 }
                    int r12 = r12.indexOfKey(r15)     // Catch:{ all -> 0x00a4 }
                    if (r12 < 0) goto L_0x0092
                    monitor-exit(r11)     // Catch:{ all -> 0x00a4 }
                    goto L_0x00a1
                L_0x0092:
                    monitor-exit(r11)     // Catch:{ all -> 0x00a4 }
                    java.lang.Object r11 = r13.get(r9)
                    com.android.internal.os.ProcessCpuTracker$Stats r11 = (com.android.internal.os.ProcessCpuTracker.Stats) r11
                    int r11 = r11.pid
                    long r11 = android.os.Debug.getPss(r11, r0, r0)
                    long r26 = r26 + r11
                L_0x00a1:
                    int r9 = r9 + 1
                    goto L_0x0077
                L_0x00a4:
                    r0 = move-exception
                    monitor-exit(r11)     // Catch:{ all -> 0x00a4 }
                    throw r0
                L_0x00a7:
                    r8.readMemInfo()
                    com.android.server.am.ActivityManagerService r9 = com.android.server.am.ActivityManagerService.this
                    monitor-enter(r9)
                    com.android.server.am.ActivityManagerService.boostPriorityForLockedSection()     // Catch:{ all -> 0x00eb }
                    long r11 = r8.getCachedSizeKb()     // Catch:{ all -> 0x00eb }
                    long r15 = r8.getFreeSizeKb()     // Catch:{ all -> 0x00eb }
                    r28 = r15
                    long r15 = r8.getZramTotalSizeKb()     // Catch:{ all -> 0x00eb }
                    r30 = r15
                    long r15 = r8.getKernelUsedSizeKb()     // Catch:{ all -> 0x00eb }
                    r32 = r15
                    r15 = 1024(0x400, double:5.06E-321)
                    long r34 = r11 * r15
                    long r36 = r28 * r15
                    long r38 = r30 * r15
                    long r40 = r32 * r15
                    long r42 = r26 * r15
                    com.android.server.am.EventLogTags.writeAmMeminfo(r34, r36, r38, r40, r42)     // Catch:{ all -> 0x00eb }
                    com.android.server.am.ActivityManagerService r15 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x00eb }
                    com.android.server.am.ProcessStatsService r15 = r15.mProcessStats     // Catch:{ all -> 0x00eb }
                    r16 = r11
                    r18 = r28
                    r20 = r30
                    r22 = r32
                    r24 = r26
                    r15.addSysMemUsageLocked(r16, r18, r20, r22, r24)     // Catch:{ all -> 0x00eb }
                    monitor-exit(r9)     // Catch:{ all -> 0x00eb }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    goto L_0x00f4
                L_0x00eb:
                    r0 = move-exception
                    monitor-exit(r9)     // Catch:{ all -> 0x00eb }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    throw r0
                L_0x00f1:
                    r0 = move-exception
                    monitor-exit(r9)     // Catch:{ all -> 0x00f1 }
                    throw r0
                L_0x00f4:
                    r9 = 0
                    long[] r3 = new long[r3]
                    r11 = r9
                L_0x00f8:
                    r9 = -1
                    com.android.server.am.ActivityManagerService r12 = com.android.server.am.ActivityManagerService.this
                    monitor-enter(r12)
                    com.android.server.am.ActivityManagerService.boostPriorityForLockedSection()     // Catch:{ all -> 0x01fb }
                    com.android.server.am.ActivityManagerService r13 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x01fb }
                    java.util.ArrayList<com.android.server.am.ProcessRecord> r13 = r13.mPendingPssProcesses     // Catch:{ all -> 0x01fb }
                    int r13 = r13.size()     // Catch:{ all -> 0x01fb }
                    if (r13 > 0) goto L_0x0146
                    com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x01fb }
                    boolean r0 = r0.mTestPssMode     // Catch:{ all -> 0x01fb }
                    if (r0 != 0) goto L_0x0110
                L_0x010f:
                    goto L_0x013a
                L_0x0110:
                    java.lang.String r0 = "ActivityManager"
                    java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x01fb }
                    r4.<init>()     // Catch:{ all -> 0x01fb }
                    java.lang.String r5 = "Collected pss of "
                    r4.append(r5)     // Catch:{ all -> 0x01fb }
                    r4.append(r11)     // Catch:{ all -> 0x01fb }
                    java.lang.String r5 = " processes in "
                    r4.append(r5)     // Catch:{ all -> 0x01fb }
                    long r13 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x01fb }
                    long r13 = r13 - r6
                    r4.append(r13)     // Catch:{ all -> 0x01fb }
                    java.lang.String r5 = "ms"
                    r4.append(r5)     // Catch:{ all -> 0x01fb }
                    java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x01fb }
                    android.util.Slog.d(r0, r4)     // Catch:{ all -> 0x01fb }
                    goto L_0x010f
                L_0x013a:
                    com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x01fb }
                    java.util.ArrayList<com.android.server.am.ProcessRecord> r0 = r0.mPendingPssProcesses     // Catch:{ all -> 0x01fb }
                    r0.clear()     // Catch:{ all -> 0x01fb }
                    monitor-exit(r12)     // Catch:{ all -> 0x01fb }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    return
                L_0x0146:
                    com.android.server.am.ActivityManagerService r13 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x01fb }
                    java.util.ArrayList<com.android.server.am.ProcessRecord> r13 = r13.mPendingPssProcesses     // Catch:{ all -> 0x01fb }
                    java.lang.Object r13 = r13.remove(r10)     // Catch:{ all -> 0x01fb }
                    com.android.server.am.ProcessRecord r13 = (com.android.server.am.ProcessRecord) r13     // Catch:{ all -> 0x01fb }
                    int r14 = r13.pssProcState     // Catch:{ all -> 0x01fb }
                    int r15 = r13.pssStatType     // Catch:{ all -> 0x01fb }
                    r26 = r15
                    long r4 = r13.lastPssTime     // Catch:{ all -> 0x01fb }
                    long r15 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x01fb }
                    android.app.IApplicationThread r10 = r13.thread     // Catch:{ all -> 0x01fb }
                    if (r10 == 0) goto L_0x0170
                    int r10 = r13.setProcState     // Catch:{ all -> 0x01fb }
                    if (r14 != r10) goto L_0x0170
                    r17 = 1000(0x3e8, double:4.94E-321)
                    long r17 = r4 + r17
                    int r10 = (r17 > r15 ? 1 : (r17 == r15 ? 0 : -1))
                    if (r10 >= 0) goto L_0x0170
                    int r10 = r13.pid     // Catch:{ all -> 0x01fb }
                    r9 = r10
                    goto L_0x0177
                L_0x0170:
                    com.android.server.am.ProcessList$ProcStateMemTracker r10 = r13.procStateMemTracker     // Catch:{ all -> 0x01fb }
                    com.android.server.am.ProcessList.abortNextPssTime(r10)     // Catch:{ all -> 0x01fb }
                    r13 = 0
                    r9 = 0
                L_0x0177:
                    monitor-exit(r12)     // Catch:{ all -> 0x01fb }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    if (r13 == 0) goto L_0x01ee
                    long r34 = android.os.SystemClock.currentThreadTimeMillis()
                    long r36 = android.os.Debug.getPss(r9, r3, r0)
                    long r38 = android.os.SystemClock.currentThreadTimeMillis()
                    com.android.server.am.ActivityManagerService r10 = com.android.server.am.ActivityManagerService.this
                    monitor-enter(r10)
                    com.android.server.am.ActivityManagerService.boostPriorityForLockedSection()     // Catch:{ all -> 0x01e8 }
                    r15 = 0
                    int r12 = (r36 > r15 ? 1 : (r36 == r15 ? 0 : -1))
                    if (r12 == 0) goto L_0x01d9
                    android.app.IApplicationThread r12 = r13.thread     // Catch:{ all -> 0x01e8 }
                    if (r12 == 0) goto L_0x01d9
                    int r12 = r13.setProcState     // Catch:{ all -> 0x01e8 }
                    if (r12 != r14) goto L_0x01d9
                    int r12 = r13.pid     // Catch:{ all -> 0x01e8 }
                    if (r12 != r9) goto L_0x01d9
                    long r0 = r13.lastPssTime     // Catch:{ all -> 0x01d5 }
                    int r0 = (r0 > r4 ? 1 : (r0 == r4 ? 0 : -1))
                    if (r0 != 0) goto L_0x01cd
                    int r11 = r11 + 1
                    com.android.server.am.ProcessList$ProcStateMemTracker r0 = r13.procStateMemTracker     // Catch:{ all -> 0x01d5 }
                    com.android.server.am.ProcessList.commitNextPssTime(r0)     // Catch:{ all -> 0x01d5 }
                    r1 = r44
                    com.android.server.am.ActivityManagerService r15 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x01e8 }
                    r0 = 0
                    r20 = r3[r0]     // Catch:{ all -> 0x01e8 }
                    r32 = 1
                    r22 = r3[r32]     // Catch:{ all -> 0x01e8 }
                    r31 = 2
                    r24 = r3[r31]     // Catch:{ all -> 0x01e8 }
                    long r27 = r38 - r34
                    long r29 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x01e8 }
                    r16 = r13
                    r17 = r14
                    r18 = r36
                    r15.recordPssSampleLocked(r16, r17, r18, r20, r22, r24, r26, r27, r29)     // Catch:{ all -> 0x01e8 }
                    goto L_0x01e3
                L_0x01cd:
                    r0 = 0
                    r31 = 2
                    r32 = 1
                    r1 = r44
                    goto L_0x01de
                L_0x01d5:
                    r0 = move-exception
                    r1 = r44
                    goto L_0x01e9
                L_0x01d9:
                    r0 = 0
                    r31 = 2
                    r32 = 1
                L_0x01de:
                    com.android.server.am.ProcessList$ProcStateMemTracker r12 = r13.procStateMemTracker     // Catch:{ all -> 0x01e8 }
                    com.android.server.am.ProcessList.abortNextPssTime(r12)     // Catch:{ all -> 0x01e8 }
                L_0x01e3:
                    monitor-exit(r10)     // Catch:{ all -> 0x01e8 }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    goto L_0x01f3
                L_0x01e8:
                    r0 = move-exception
                L_0x01e9:
                    monitor-exit(r10)     // Catch:{ all -> 0x01e8 }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    throw r0
                L_0x01ee:
                    r0 = 0
                    r31 = 2
                    r32 = 1
                L_0x01f3:
                    r10 = r0
                    r4 = r31
                    r5 = r32
                    r0 = 0
                    goto L_0x00f8
                L_0x01fb:
                    r0 = move-exception
                    monitor-exit(r12)     // Catch:{ all -> 0x01fb }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    throw r0
                L_0x0201:
                    r0 = move-exception
                    monitor-exit(r9)     // Catch:{ all -> 0x0201 }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                    throw r0
                */
                throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.AnonymousClass5.handleMessage(android.os.Message):void");
            }

            static /* synthetic */ boolean lambda$handleMessage$0(ProcessCpuTracker.Stats st) {
                return st.vsize > 0 && st.uid < 10000;
            }
        };
        this.mProcessStateStatsLongs = new long[1];
        LockGuard.installLock((Object) this, 6);
        this.mInjector = new Injector();
        this.mContext = context;
        this.mFactoryTest = FactoryTest.getMode();
        this.mSystemThread = ActivityThread.currentActivityThread();
        this.mUiContext = this.mSystemThread.getSystemUiContext();
        Slog.i("ActivityManager", "Memory class: " + ActivityManager.staticGetMemoryClass());
        this.mHandlerThread = new ServiceThread("ActivityManager", -2, false);
        this.mHandlerThread.start();
        this.mHandler = new MainHandler(this.mHandlerThread.getLooper());
        this.mUiHandler = this.mInjector.getUiHandler(this);
        this.mProcStartHandlerThread = new ServiceThread("ActivityManager:procStart", -2, false);
        this.mProcStartHandlerThread.start();
        this.mProcStartHandler = new Handler(this.mProcStartHandlerThread.getLooper());
        this.mConstants = new ActivityManagerConstants(this.mContext, this, this.mHandler);
        ActiveUids activeUids = new ActiveUids(this, true);
        this.mProcessList.init(this, activeUids);
        this.mLowMemDetector = new LowMemDetector(this);
        this.mOomAdjuster = new OomAdjuster(this, this.mProcessList, activeUids);
        BroadcastConstants foreConstants = new BroadcastConstants("bcast_fg_constants");
        foreConstants.TIMEOUT = JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY;
        BroadcastConstants backConstants = new BroadcastConstants("bcast_bg_constants");
        backConstants.TIMEOUT = 60000;
        BroadcastConstants offloadConstants = new BroadcastConstants("bcast_offload_constants");
        offloadConstants.TIMEOUT = 60000;
        offloadConstants.SLOW_TIME = 2147483647L;
        this.mEnableOffloadQueue = SystemProperties.getBoolean("persist.device_config.activity_manager_native_boot.offload_queue_enabled", false);
        this.mFgBroadcastQueue = new BroadcastQueue(this, this.mHandler, "foreground", foreConstants, false);
        this.mBgBroadcastQueue = new BroadcastQueue(this, this.mHandler, "background", backConstants, true);
        this.mOffloadBroadcastQueue = new BroadcastQueue(this, this.mHandler, "offload", offloadConstants, true);
        BroadcastQueue[] broadcastQueueArr = this.mBroadcastQueues;
        broadcastQueueArr[0] = this.mFgBroadcastQueue;
        broadcastQueueArr[1] = this.mBgBroadcastQueue;
        broadcastQueueArr[2] = this.mOffloadBroadcastQueue;
        this.mServices = new ActiveServices(this);
        this.mProviderMap = new ProviderMap(this);
        this.mPackageWatchdog = PackageWatchdog.getInstance(this.mUiContext);
        this.mAppErrors = new AppErrors(this.mUiContext, this, this.mPackageWatchdog);
        File systemDir = SystemServiceManager.ensureSystemDir();
        ActivityManagerServiceInjector.init(this.mContext);
        BackgroundThread.get();
        this.mBatteryStatsService = new BatteryStatsService(context, systemDir, BackgroundThread.getHandler());
        this.mBatteryStatsService.getActiveStatistics().readLocked();
        this.mBatteryStatsService.scheduleWriteToDisk();
        this.mOnBattery = this.mBatteryStatsService.getActiveStatistics().getIsOnBattery();
        this.mBatteryStatsService.getActiveStatistics().setCallback(this);
        this.mOomAdjProfiler.batteryPowerChanged(this.mOnBattery);
        this.mProcessStats = new ProcessStatsService(this, new File(systemDir, "procstats"));
        this.mAppOpsService = this.mInjector.getAppOpsService(new File(systemDir, "appops.xml"), this.mHandler);
        this.mUgmInternal = (UriGrantsManagerInternal) LocalServices.getService(UriGrantsManagerInternal.class);
        this.mUserController = new UserController(this);
        this.mPendingIntentController = new PendingIntentController(this.mHandlerThread.getLooper(), this.mUserController);
        if (SystemProperties.getInt("sys.use_fifo_ui", 0) != 0) {
            this.mUseFifoUiScheduling = true;
        }
        this.mTrackingAssociations = SplitScreenReporter.ACTION_ENTER_SPLIT.equals(SystemProperties.get("debug.track-associations"));
        this.mIntentFirewall = new IntentFirewall(new IntentFirewallInterface(), this.mHandler);
        this.mActivityTaskManager = atm;
        this.mActivityTaskManager.initialize(this.mIntentFirewall, this.mPendingIntentController, DisplayThread.get().getLooper());
        this.mAtmInternal = (ActivityTaskManagerInternal) LocalServices.getService(ActivityTaskManagerInternal.class);
        this.mStackSupervisor = this.mActivityTaskManager.mStackSupervisor;
        this.mProcessCpuThread = new Thread("CpuTracker") {
            /* Debug info: failed to restart local var, previous not found, register: 8 */
            /* JADX WARNING: Code restructure failed: missing block: B:29:0x005e, code lost:
                r1 = th;
             */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void run() {
                /*
                    r8 = this;
                    com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this
                    com.android.internal.os.ProcessCpuTracker r0 = r0.mProcessCpuTracker
                    monitor-enter(r0)
                    com.android.server.am.ActivityManagerService r1 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x005b }
                    java.util.concurrent.CountDownLatch r1 = r1.mProcessCpuInitLatch     // Catch:{ all -> 0x005b }
                    r1.countDown()     // Catch:{ all -> 0x005b }
                    com.android.server.am.ActivityManagerService r1 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x005b }
                    com.android.internal.os.ProcessCpuTracker r1 = r1.mProcessCpuTracker     // Catch:{ all -> 0x005b }
                    r1.init()     // Catch:{ all -> 0x005b }
                    monitor-exit(r0)     // Catch:{ all -> 0x005b }
                L_0x0014:
                    monitor-enter(r8)     // Catch:{ InterruptedException -> 0x004c }
                    long r0 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x0047 }
                    com.android.server.am.ActivityManagerService r2 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x0047 }
                    java.util.concurrent.atomic.AtomicLong r2 = r2.mLastCpuTime     // Catch:{ all -> 0x0047 }
                    long r2 = r2.get()     // Catch:{ all -> 0x0047 }
                    r4 = 268435455(0xfffffff, double:1.326247364E-315)
                    long r2 = r2 + r4
                    long r2 = r2 - r0
                    com.android.server.am.ActivityManagerService r4 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x0047 }
                    long r4 = r4.mLastWriteTime     // Catch:{ all -> 0x0047 }
                    r6 = 1800000(0x1b7740, double:8.89318E-318)
                    long r4 = r4 + r6
                    long r4 = r4 - r0
                    int r6 = (r4 > r2 ? 1 : (r4 == r2 ? 0 : -1))
                    if (r6 >= 0) goto L_0x0034
                    r2 = r4
                L_0x0034:
                    r6 = 0
                    int r6 = (r2 > r6 ? 1 : (r2 == r6 ? 0 : -1))
                    if (r6 <= 0) goto L_0x0045
                    com.android.server.am.ActivityManagerService r6 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x0047 }
                    java.util.concurrent.atomic.AtomicBoolean r6 = r6.mProcessCpuMutexFree     // Catch:{ all -> 0x0047 }
                    r7 = 1
                    r6.set(r7)     // Catch:{ all -> 0x0047 }
                    r8.wait(r2)     // Catch:{ all -> 0x0047 }
                L_0x0045:
                    monitor-exit(r8)     // Catch:{ all -> 0x0047 }
                    goto L_0x004d
                L_0x0047:
                    r0 = move-exception
                    monitor-exit(r8)     // Catch:{ all -> 0x0047 }
                    throw r0     // Catch:{ InterruptedException -> 0x004c }
                L_0x004a:
                    r0 = move-exception
                    goto L_0x0053
                L_0x004c:
                    r0 = move-exception
                L_0x004d:
                    com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this     // Catch:{ Exception -> 0x004a }
                    r0.updateCpuStatsNow()     // Catch:{ Exception -> 0x004a }
                    goto L_0x005a
                L_0x0053:
                    java.lang.String r1 = "ActivityManager"
                    java.lang.String r2 = "Unexpected exception collecting process stats"
                    android.util.Slog.e(r1, r2, r0)
                L_0x005a:
                    goto L_0x0014
                L_0x005b:
                    r1 = move-exception
                L_0x005c:
                    monitor-exit(r0)     // Catch:{ all -> 0x005e }
                    throw r1
                L_0x005e:
                    r1 = move-exception
                    goto L_0x005c
                */
                throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.AnonymousClass7.run():void");
            }
        };
        this.mHiddenApiBlacklist = new HiddenApiSettings(this.mHandler, this.mContext);
        Watchdog.getInstance().addMonitor(this);
        Watchdog.getInstance().addThread(this.mHandler);
        updateOomAdjLocked("updateOomAdj_meh");
        try {
            Process.setThreadGroupAndCpuset(BackgroundThread.get().getThreadId(), 2);
            Process.setThreadGroupAndCpuset(this.mOomAdjuster.mAppCompact.mCompactionThread.getThreadId(), 2);
        } catch (Exception e) {
            Slog.w("ActivityManager", "Setting background thread cpuset failed");
        }
    }

    public void setSystemServiceManager(SystemServiceManager mgr) {
        this.mSystemServiceManager = mgr;
    }

    public void setInstaller(Installer installer) {
        this.mInstaller = installer;
    }

    /* access modifiers changed from: private */
    public void start() {
        Process.removeAllProcessGroups();
        this.mProcessCpuThread.start();
        this.mBatteryStatsService.publish();
        this.mAppOpsService.publish(this.mContext);
        Slog.d("AppOps", "AppOpsService published");
        LocalServices.addService(ActivityManagerInternal.class, new LocalService());
        this.mActivityTaskManager.onActivityManagerInternalAdded();
        this.mUgmInternal.onActivityManagerInternalAdded();
        this.mPendingIntentController.onActivityManagerInternalAdded();
        try {
            this.mProcessCpuInitLatch.await();
        } catch (InterruptedException e) {
            Slog.wtf("ActivityManager", "Interrupted wait during start", e);
            Thread.currentThread().interrupt();
            throw new IllegalStateException("Interrupted wait during start");
        }
    }

    public void initPowerManagement() {
        this.mActivityTaskManager.onInitPowerManagement();
        this.mBatteryStatsService.initPowerManagement();
        this.mLocalPowerManager = (PowerManagerInternal) LocalServices.getService(PowerManagerInternal.class);
    }

    private ArraySet<String> getBackgroundLaunchBroadcasts() {
        if (this.mBackgroundLaunchBroadcasts == null) {
            this.mBackgroundLaunchBroadcasts = SystemConfig.getInstance().getAllowImplicitBroadcasts();
        }
        return this.mBackgroundLaunchBroadcasts;
    }

    /* access modifiers changed from: package-private */
    public void requireAllowedAssociationsLocked(String packageName) {
        ensureAllowedAssociations();
        if (this.mAllowedAssociations.get(packageName) == null) {
            this.mAllowedAssociations.put(packageName, new PackageAssociationInfo(packageName, new ArraySet(), false));
        }
    }

    /* access modifiers changed from: package-private */
    public boolean validateAssociationAllowedLocked(String pkg1, int uid1, String pkg2, int uid2) {
        ensureAllowedAssociations();
        if (uid1 == uid2 || UserHandle.getAppId(uid1) == 1000 || UserHandle.getAppId(uid2) == 1000) {
            return true;
        }
        PackageAssociationInfo pai = this.mAllowedAssociations.get(pkg1);
        if (pai != null && !pai.isPackageAssociationAllowed(pkg2)) {
            return false;
        }
        PackageAssociationInfo pai2 = this.mAllowedAssociations.get(pkg2);
        if (pai2 == null || pai2.isPackageAssociationAllowed(pkg1)) {
            return true;
        }
        return false;
    }

    private void ensureAllowedAssociations() {
        if (this.mAllowedAssociations == null) {
            ArrayMap<String, ArraySet<String>> allowedAssociations = SystemConfig.getInstance().getAllowedAssociations();
            this.mAllowedAssociations = new ArrayMap<>(allowedAssociations.size());
            PackageManagerInternal packageManagerInternalLocked = getPackageManagerInternalLocked();
            for (int i = 0; i < allowedAssociations.size(); i++) {
                String pkg = allowedAssociations.keyAt(i);
                ArraySet<String> asc = allowedAssociations.valueAt(i);
                boolean isDebuggable = false;
                try {
                    boolean z = false;
                    ApplicationInfo ai = AppGlobals.getPackageManager().getApplicationInfo(pkg, 131072, 0);
                    if (ai != null) {
                        if ((ai.flags & 2) != 0) {
                            z = true;
                        }
                        isDebuggable = z;
                    }
                } catch (RemoteException e) {
                }
                this.mAllowedAssociations.put(pkg, new PackageAssociationInfo(pkg, asc, isDebuggable));
            }
        }
    }

    private void updateAssociationForApp(ApplicationInfo appInfo) {
        ensureAllowedAssociations();
        PackageAssociationInfo pai = this.mAllowedAssociations.get(appInfo.packageName);
        if (pai != null) {
            pai.setDebuggable((appInfo.flags & 2) != 0);
        }
    }

    public boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
        if (code == 1599295570) {
            ArrayList<IBinder> procs = new ArrayList<>();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int NP = this.mProcessList.mProcessNames.getMap().size();
                    for (int ip = 0; ip < NP; ip++) {
                        SparseArray<ProcessRecord> apps = (SparseArray) this.mProcessList.mProcessNames.getMap().valueAt(ip);
                        int NA = apps.size();
                        for (int ia = 0; ia < NA; ia++) {
                            ProcessRecord app = apps.valueAt(ia);
                            if (app.thread != null) {
                                procs.add(app.thread.asBinder());
                            }
                        }
                    }
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            int N = procs.size();
            for (int i = 0; i < N; i++) {
                Parcel data2 = Parcel.obtain();
                try {
                    procs.get(i).transact(1599295570, data2, (Parcel) null, 1);
                } catch (RemoteException e) {
                }
                data2.recycle();
            }
        }
        try {
            if (ActivityManagerServiceInjector.onTransact(this, code, data, reply, flags)) {
                return true;
            }
            return ActivityManagerService.super.onTransact(code, data, reply, flags);
        } catch (RuntimeException e2) {
            if (!(e2 instanceof SecurityException) && !(e2 instanceof IllegalArgumentException) && !(e2 instanceof IllegalStateException)) {
                Slog.wtf("ActivityManager", "Activity Manager Crash. UID:" + Binder.getCallingUid() + " PID:" + Binder.getCallingPid() + " TRANS:" + code, e2);
            }
            throw e2;
        }
    }

    /* access modifiers changed from: package-private */
    public void updateCpuStats() {
        if (this.mLastCpuTime.get() < SystemClock.uptimeMillis() - MONITOR_CPU_MIN_TIME && this.mProcessCpuMutexFree.compareAndSet(true, false)) {
            synchronized (this.mProcessCpuThread) {
                this.mProcessCpuThread.notify();
            }
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 20 */
    /*  JADX ERROR: IndexOutOfBoundsException in pass: RegionMakerVisitor
        java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
        	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
        	at java.util.ArrayList.get(ArrayList.java:433)
        	at jadx.core.dex.nodes.InsnNode.getArg(InsnNode.java:101)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:611)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:561)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:598)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:598)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:49)
        */
    void updateCpuStatsNow() {
        /*
            r20 = this;
            r1 = r20
            com.android.internal.os.ProcessCpuTracker r2 = r1.mProcessCpuTracker
            monitor-enter(r2)
            java.util.concurrent.atomic.AtomicBoolean r0 = r1.mProcessCpuMutexFree     // Catch:{ all -> 0x01ba }
            r3 = 0
            r0.set(r3)     // Catch:{ all -> 0x01ba }
            long r4 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x01ba }
            r0 = 0
            java.util.concurrent.atomic.AtomicLong r6 = r1.mLastCpuTime     // Catch:{ all -> 0x01ba }
            long r6 = r6.get()     // Catch:{ all -> 0x01ba }
            r8 = 5000(0x1388, double:2.4703E-320)
            long r8 = r4 - r8
            int r6 = (r6 > r8 ? 1 : (r6 == r8 ? 0 : -1))
            if (r6 >= 0) goto L_0x00b5
            java.util.concurrent.atomic.AtomicLong r6 = r1.mLastCpuTime     // Catch:{ all -> 0x01ba }
            r6.set(r4)     // Catch:{ all -> 0x01ba }
            com.android.internal.os.ProcessCpuTracker r6 = r1.mProcessCpuTracker     // Catch:{ all -> 0x01ba }
            r6.update()     // Catch:{ all -> 0x01ba }
            com.android.internal.os.ProcessCpuTracker r6 = r1.mProcessCpuTracker     // Catch:{ all -> 0x01ba }
            boolean r6 = r6.hasGoodLastStats()     // Catch:{ all -> 0x01ba }
            if (r6 == 0) goto L_0x00b5
            r0 = 1
            java.lang.String r6 = "true"
            java.lang.String r7 = "events.cpu"
            java.lang.String r7 = android.os.SystemProperties.get(r7)     // Catch:{ all -> 0x01ba }
            boolean r6 = r6.equals(r7)     // Catch:{ all -> 0x01ba }
            if (r6 == 0) goto L_0x00b5
            com.android.internal.os.ProcessCpuTracker r6 = r1.mProcessCpuTracker     // Catch:{ all -> 0x01ba }
            int r6 = r6.getLastUserTime()     // Catch:{ all -> 0x01ba }
            com.android.internal.os.ProcessCpuTracker r7 = r1.mProcessCpuTracker     // Catch:{ all -> 0x01ba }
            int r7 = r7.getLastSystemTime()     // Catch:{ all -> 0x01ba }
            com.android.internal.os.ProcessCpuTracker r8 = r1.mProcessCpuTracker     // Catch:{ all -> 0x01ba }
            int r8 = r8.getLastIoWaitTime()     // Catch:{ all -> 0x01ba }
            com.android.internal.os.ProcessCpuTracker r9 = r1.mProcessCpuTracker     // Catch:{ all -> 0x01ba }
            int r9 = r9.getLastIrqTime()     // Catch:{ all -> 0x01ba }
            com.android.internal.os.ProcessCpuTracker r10 = r1.mProcessCpuTracker     // Catch:{ all -> 0x01ba }
            int r10 = r10.getLastSoftIrqTime()     // Catch:{ all -> 0x01ba }
            com.android.internal.os.ProcessCpuTracker r11 = r1.mProcessCpuTracker     // Catch:{ all -> 0x01ba }
            int r11 = r11.getLastIdleTime()     // Catch:{ all -> 0x01ba }
            int r12 = r6 + r7
            int r12 = r12 + r8
            int r12 = r12 + r9
            int r12 = r12 + r10
            int r12 = r12 + r11
            if (r12 != 0) goto L_0x006d
            r12 = 1
        L_0x006d:
            r13 = 2721(0xaa1, float:3.813E-42)
            r14 = 6
            java.lang.Object[] r14 = new java.lang.Object[r14]     // Catch:{ all -> 0x01ba }
            int r15 = r6 + r7
            int r15 = r15 + r8
            int r15 = r15 + r9
            int r15 = r15 + r10
            int r15 = r15 * 100
            int r15 = r15 / r12
            java.lang.Integer r15 = java.lang.Integer.valueOf(r15)     // Catch:{ all -> 0x01ba }
            r14[r3] = r15     // Catch:{ all -> 0x01ba }
            int r3 = r6 * 100
            int r3 = r3 / r12
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ all -> 0x01ba }
            r15 = 1
            r14[r15] = r3     // Catch:{ all -> 0x01ba }
            r3 = 2
            int r15 = r7 * 100
            int r15 = r15 / r12
            java.lang.Integer r15 = java.lang.Integer.valueOf(r15)     // Catch:{ all -> 0x01ba }
            r14[r3] = r15     // Catch:{ all -> 0x01ba }
            r3 = 3
            int r15 = r8 * 100
            int r15 = r15 / r12
            java.lang.Integer r15 = java.lang.Integer.valueOf(r15)     // Catch:{ all -> 0x01ba }
            r14[r3] = r15     // Catch:{ all -> 0x01ba }
            r3 = 4
            int r15 = r9 * 100
            int r15 = r15 / r12
            java.lang.Integer r15 = java.lang.Integer.valueOf(r15)     // Catch:{ all -> 0x01ba }
            r14[r3] = r15     // Catch:{ all -> 0x01ba }
            r3 = 5
            int r15 = r10 * 100
            int r15 = r15 / r12
            java.lang.Integer r15 = java.lang.Integer.valueOf(r15)     // Catch:{ all -> 0x01ba }
            r14[r3] = r15     // Catch:{ all -> 0x01ba }
            android.util.EventLog.writeEvent(r13, r14)     // Catch:{ all -> 0x01ba }
        L_0x00b5:
            r3 = r0
            com.android.server.am.BatteryStatsService r0 = r1.mBatteryStatsService     // Catch:{ all -> 0x01ba }
            com.android.internal.os.BatteryStatsImpl r0 = r0.getActiveStatistics()     // Catch:{ all -> 0x01ba }
            r15 = r0
            monitor-enter(r15)     // Catch:{ all -> 0x01ba }
            com.android.server.am.ActivityManagerService$PidMap r8 = r1.mPidsSelfLocked     // Catch:{ all -> 0x01b7 }
            monitor-enter(r8)     // Catch:{ all -> 0x01b7 }
            if (r3 == 0) goto L_0x019c
            boolean r0 = r15.startAddingCpuLocked()     // Catch:{ all -> 0x0198 }
            if (r0 == 0) goto L_0x0195
            r0 = 0
            r6 = 0
            com.android.internal.os.ProcessCpuTracker r7 = r1.mProcessCpuTracker     // Catch:{ all -> 0x0198 }
            int r7 = r7.countStats()     // Catch:{ all -> 0x0198 }
            r9 = 0
            r16 = r6
        L_0x00d4:
            if (r9 >= r7) goto L_0x0163
            com.android.internal.os.ProcessCpuTracker r6 = r1.mProcessCpuTracker     // Catch:{ all -> 0x0198 }
            com.android.internal.os.ProcessCpuTracker$Stats r6 = r6.getStats(r9)     // Catch:{ all -> 0x0198 }
            boolean r10 = r6.working     // Catch:{ all -> 0x0198 }
            if (r10 != 0) goto L_0x00e6
            r19 = r7
            r18 = r8
            goto L_0x015b
        L_0x00e6:
            com.android.server.am.ActivityManagerService$PidMap r10 = r1.mPidsSelfLocked     // Catch:{ all -> 0x0198 }
            int r11 = r6.pid     // Catch:{ all -> 0x0198 }
            com.android.server.am.ProcessRecord r10 = r10.get(r11)     // Catch:{ all -> 0x0198 }
            int r11 = r6.rel_utime     // Catch:{ all -> 0x0198 }
            int r0 = r0 + r11
            int r11 = r6.rel_stime     // Catch:{ all -> 0x0198 }
            int r16 = r16 + r11
            if (r10 == 0) goto L_0x0133
            com.android.internal.os.BatteryStatsImpl$Uid$Proc r11 = r10.curProcBatteryStats     // Catch:{ all -> 0x0198 }
            if (r11 == 0) goto L_0x0101
            boolean r12 = r11.isActive()     // Catch:{ all -> 0x0198 }
            if (r12 != 0) goto L_0x010e
        L_0x0101:
            android.content.pm.ApplicationInfo r12 = r10.info     // Catch:{ all -> 0x0198 }
            int r12 = r12.uid     // Catch:{ all -> 0x0198 }
            java.lang.String r13 = r10.processName     // Catch:{ all -> 0x0198 }
            com.android.internal.os.BatteryStatsImpl$Uid$Proc r12 = r15.getProcessStatsLocked(r12, r13)     // Catch:{ all -> 0x0198 }
            r11 = r12
            r10.curProcBatteryStats = r12     // Catch:{ all -> 0x0198 }
        L_0x010e:
            int r12 = r6.rel_utime     // Catch:{ all -> 0x0198 }
            int r13 = r6.rel_stime     // Catch:{ all -> 0x0198 }
            r11.addCpuTimeLocked(r12, r13)     // Catch:{ all -> 0x0198 }
            long r12 = r10.curCpuTime     // Catch:{ all -> 0x0198 }
            int r14 = r6.rel_utime     // Catch:{ all -> 0x0198 }
            r17 = r0
            int r0 = r6.rel_stime     // Catch:{ all -> 0x0198 }
            int r14 = r14 + r0
            r19 = r7
            r18 = r8
            long r7 = (long) r14
            long r12 = r12 + r7
            r10.curCpuTime = r12     // Catch:{ all -> 0x01b4 }
            long r7 = r10.lastCpuTime     // Catch:{ all -> 0x01b4 }
            r12 = 0
            int r0 = (r7 > r12 ? 1 : (r7 == r12 ? 0 : -1))
            if (r0 != 0) goto L_0x0132
            long r7 = r10.curCpuTime     // Catch:{ all -> 0x01b4 }
            r10.lastCpuTime = r7     // Catch:{ all -> 0x01b4 }
        L_0x0132:
            goto L_0x0159
        L_0x0133:
            r17 = r0
            r19 = r7
            r18 = r8
            com.android.internal.os.BatteryStatsImpl$Uid$Proc r0 = r6.batteryStats     // Catch:{ all -> 0x01b4 }
            if (r0 == 0) goto L_0x0143
            boolean r7 = r0.isActive()     // Catch:{ all -> 0x01b4 }
            if (r7 != 0) goto L_0x0152
        L_0x0143:
            int r7 = r6.uid     // Catch:{ all -> 0x01b4 }
            int r7 = r15.mapUid(r7)     // Catch:{ all -> 0x01b4 }
            java.lang.String r8 = r6.name     // Catch:{ all -> 0x01b4 }
            com.android.internal.os.BatteryStatsImpl$Uid$Proc r7 = r15.getProcessStatsLocked(r7, r8)     // Catch:{ all -> 0x01b4 }
            r0 = r7
            r6.batteryStats = r7     // Catch:{ all -> 0x01b4 }
        L_0x0152:
            int r7 = r6.rel_utime     // Catch:{ all -> 0x01b4 }
            int r8 = r6.rel_stime     // Catch:{ all -> 0x01b4 }
            r0.addCpuTimeLocked(r7, r8)     // Catch:{ all -> 0x01b4 }
        L_0x0159:
            r0 = r17
        L_0x015b:
            int r9 = r9 + 1
            r8 = r18
            r7 = r19
            goto L_0x00d4
        L_0x0163:
            r19 = r7
            r18 = r8
            com.android.internal.os.ProcessCpuTracker r6 = r1.mProcessCpuTracker     // Catch:{ all -> 0x01b4 }
            int r9 = r6.getLastUserTime()     // Catch:{ all -> 0x01b4 }
            com.android.internal.os.ProcessCpuTracker r6 = r1.mProcessCpuTracker     // Catch:{ all -> 0x01b4 }
            int r10 = r6.getLastSystemTime()     // Catch:{ all -> 0x01b4 }
            com.android.internal.os.ProcessCpuTracker r6 = r1.mProcessCpuTracker     // Catch:{ all -> 0x01b4 }
            int r11 = r6.getLastIoWaitTime()     // Catch:{ all -> 0x01b4 }
            com.android.internal.os.ProcessCpuTracker r6 = r1.mProcessCpuTracker     // Catch:{ all -> 0x01b4 }
            int r12 = r6.getLastIrqTime()     // Catch:{ all -> 0x01b4 }
            com.android.internal.os.ProcessCpuTracker r6 = r1.mProcessCpuTracker     // Catch:{ all -> 0x01b4 }
            int r13 = r6.getLastSoftIrqTime()     // Catch:{ all -> 0x01b4 }
            com.android.internal.os.ProcessCpuTracker r6 = r1.mProcessCpuTracker     // Catch:{ all -> 0x01b4 }
            int r14 = r6.getLastIdleTime()     // Catch:{ all -> 0x01b4 }
            r6 = r15
            r17 = r19
            r7 = r0
            r8 = r16
            r6.finishAddingCpuLocked(r7, r8, r9, r10, r11, r12, r13, r14)     // Catch:{ all -> 0x01b4 }
            goto L_0x019e
        L_0x0195:
            r18 = r8
            goto L_0x019e
        L_0x0198:
            r0 = move-exception
            r18 = r8
            goto L_0x01b5
        L_0x019c:
            r18 = r8
        L_0x019e:
            monitor-exit(r18)     // Catch:{ all -> 0x01b4 }
            long r6 = r1.mLastWriteTime     // Catch:{ all -> 0x01b7 }
            r8 = 1800000(0x1b7740, double:8.89318E-318)
            long r8 = r4 - r8
            int r0 = (r6 > r8 ? 1 : (r6 == r8 ? 0 : -1))
            if (r0 >= 0) goto L_0x01b1
            r1.mLastWriteTime = r4     // Catch:{ all -> 0x01b7 }
            com.android.server.am.BatteryStatsService r0 = r1.mBatteryStatsService     // Catch:{ all -> 0x01b7 }
            r0.scheduleWriteToDisk()     // Catch:{ all -> 0x01b7 }
        L_0x01b1:
            monitor-exit(r15)     // Catch:{ all -> 0x01b7 }
            monitor-exit(r2)     // Catch:{ all -> 0x01ba }
            return
        L_0x01b4:
            r0 = move-exception
        L_0x01b5:
            monitor-exit(r18)     // Catch:{ all -> 0x01b4 }
            throw r0     // Catch:{ all -> 0x01b7 }
        L_0x01b7:
            r0 = move-exception
            monitor-exit(r15)     // Catch:{ all -> 0x01b7 }
            throw r0     // Catch:{ all -> 0x01ba }
        L_0x01ba:
            r0 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x01ba }
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.updateCpuStatsNow():void");
    }

    public void batteryNeedsCpuUpdate() {
        updateCpuStatsNow();
    }

    /* Debug info: failed to restart local var, previous not found, register: 2 */
    public void batteryPowerChanged(boolean onBattery) {
        updateCpuStatsNow();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    this.mOnBattery = onBattery;
                }
                this.mOomAdjProfiler.batteryPowerChanged(onBattery);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void batteryStatsReset() {
        this.mOomAdjProfiler.reset();
    }

    public void batterySendBroadcast(Intent intent) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                broadcastIntentLocked((ProcessRecord) null, (String) null, intent, (String) null, (IIntentReceiver) null, 0, (String) null, (Bundle) null, (String[]) null, -1, (Bundle) null, false, false, -1, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    private ArrayMap<String, IBinder> getCommonServicesLocked(boolean isolated) {
        if (isolated) {
            if (this.mIsolatedAppBindArgs == null) {
                this.mIsolatedAppBindArgs = new ArrayMap<>(1);
                addServiceToMap(this.mIsolatedAppBindArgs, com.android.server.pm.Settings.ATTR_PACKAGE);
            }
            return this.mIsolatedAppBindArgs;
        }
        if (this.mAppBindArgs == null) {
            this.mAppBindArgs = new ArrayMap<>();
            addServiceToMap(this.mAppBindArgs, com.android.server.pm.Settings.ATTR_PACKAGE);
            addServiceToMap(this.mAppBindArgs, "window");
            addServiceToMap(this.mAppBindArgs, "alarm");
            addServiceToMap(this.mAppBindArgs, "display");
            addServiceToMap(this.mAppBindArgs, "network_management");
            addServiceToMap(this.mAppBindArgs, "connectivity");
            addServiceToMap(this.mAppBindArgs, "accessibility");
            addServiceToMap(this.mAppBindArgs, "input_method");
            addServiceToMap(this.mAppBindArgs, "input");
            addServiceToMap(this.mAppBindArgs, GraphicsStatsService.GRAPHICS_STATS_SERVICE);
            addServiceToMap(this.mAppBindArgs, "appops");
            addServiceToMap(this.mAppBindArgs, ActivityTaskManagerInternal.ASSIST_KEY_CONTENT);
            addServiceToMap(this.mAppBindArgs, "jobscheduler");
            addServiceToMap(this.mAppBindArgs, "notification");
            addServiceToMap(this.mAppBindArgs, "vibrator");
            addServiceToMap(this.mAppBindArgs, "account");
            addServiceToMap(this.mAppBindArgs, "power");
            addServiceToMap(this.mAppBindArgs, "user");
            addServiceToMap(this.mAppBindArgs, "mount");
        }
        return this.mAppBindArgs;
    }

    private static void addServiceToMap(ArrayMap<String, IBinder> map, String name) {
        IBinder service = ServiceManager.getService(name);
        if (service != null) {
            map.put(name, service);
        }
    }

    public void setFocusedStack(int stackId) {
        this.mActivityTaskManager.setFocusedStack(stackId);
    }

    public void registerTaskStackListener(ITaskStackListener listener) {
        this.mActivityTaskManager.registerTaskStackListener(listener);
    }

    public void unregisterTaskStackListener(ITaskStackListener listener) {
        this.mActivityTaskManager.unregisterTaskStackListener(listener);
    }

    /* access modifiers changed from: package-private */
    public final void updateLruProcessLocked(ProcessRecord app, boolean activityChange, ProcessRecord client) {
        this.mProcessList.updateLruProcessLocked(app, activityChange, client);
    }

    /* access modifiers changed from: package-private */
    public final void removeLruProcessLocked(ProcessRecord app) {
        this.mProcessList.removeLruProcessLocked(app);
    }

    /* access modifiers changed from: package-private */
    public final ProcessRecord getProcessRecordLocked(String processName, int uid, boolean keepIfLarge) {
        return this.mProcessList.getProcessRecordLocked(processName, uid, keepIfLarge);
    }

    /* access modifiers changed from: package-private */
    public final ProcessMap<ProcessRecord> getProcessNames() {
        return this.mProcessList.mProcessNames;
    }

    /* access modifiers changed from: package-private */
    public void notifyPackageUse(String packageName, int reason) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                getPackageManagerInternalLocked().notifyPackageUse(packageName, reason);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public boolean startIsolatedProcess(String entryPoint, String[] entryPointArgs, String processName, String abiOverride, int uid, Runnable crashHandler) {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ApplicationInfo info = new ApplicationInfo();
                info.uid = 1000;
                info.processName = processName;
                info.className = entryPoint;
                info.packageName = PackageManagerService.PLATFORM_PACKAGE_NAME;
                info.seInfoUser = ":complete";
                info.targetSdkVersion = Build.VERSION.SDK_INT;
                z = this.mProcessList.startProcessLocked(processName, info, false, 0, sNullHostingRecord, true, true, uid, true, abiOverride, entryPoint, entryPointArgs, crashHandler, "Webview") != null;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return z;
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final ProcessRecord startProcessLocked(String processName, ApplicationInfo info, boolean knownToBeDead, int intentFlags, HostingRecord hostingRecord, boolean allowWhileBooting, boolean isolated, boolean keepIfLarge, String callerPackage) {
        return this.mProcessList.startProcessLocked(processName, info, knownToBeDead, intentFlags, hostingRecord, allowWhileBooting, isolated, 0, keepIfLarge, (String) null, (String) null, (String[]) null, (Runnable) null, callerPackage);
    }

    /* access modifiers changed from: package-private */
    public boolean isAllowedWhileBooting(ApplicationInfo ai) {
        return (ai.flags & 8) != 0;
    }

    /* access modifiers changed from: package-private */
    public void updateBatteryStats(ComponentName activity, int uid, int userId, boolean resumed) {
        int i;
        BatteryStatsImpl stats = this.mBatteryStatsService.getActiveStatistics();
        String packageName = activity.getPackageName();
        String shortClassName = activity.getShortClassName();
        if (resumed) {
            i = 1;
        } else {
            i = 0;
        }
        StatsLog.write(42, uid, packageName, shortClassName, i);
        synchronized (stats) {
            if (resumed) {
                stats.noteActivityResumedLocked(uid);
            } else {
                stats.noteActivityPausedLocked(uid);
            }
        }
    }

    public void updateActivityUsageStats(ComponentName activity, int userId, int event, IBinder appToken, ComponentName taskRoot) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mUsageStatsService != null) {
                    this.mUsageStatsService.reportEvent(activity, userId, event, appToken.hashCode(), taskRoot);
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        if (this.mContentCaptureService == null) {
            return;
        }
        if (event == 2 || event == 1 || event == 23 || event == 24) {
            this.mContentCaptureService.notifyActivityEvent(userId, activity, event);
        }
    }

    public void updateActivityUsageStats(String packageName, int userId, int event) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mUsageStatsService != null) {
                    this.mUsageStatsService.reportEvent(packageName, userId, event);
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void updateForegroundServiceUsageStats(ComponentName service, int userId, boolean started) {
        int i;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mUsageStatsService != null) {
                    UsageStatsManagerInternal usageStatsManagerInternal = this.mUsageStatsService;
                    if (started) {
                        i = 19;
                    } else {
                        i = 20;
                    }
                    usageStatsManagerInternal.reportEvent(service, userId, i, 0, (ComponentName) null);
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public CompatibilityInfo compatibilityInfoForPackage(ApplicationInfo ai) {
        return this.mAtmInternal.compatibilityInfoForPackage(ai);
    }

    private void enforceNotIsolatedCaller(String caller) {
        if (UserHandle.isIsolated(Binder.getCallingUid())) {
            throw new SecurityException("Isolated process not allowed to call " + caller);
        }
    }

    public void setPackageScreenCompatMode(String packageName, int mode) {
        this.mActivityTaskManager.setPackageScreenCompatMode(packageName, mode);
    }

    private boolean hasUsageStatsPermission(String callingPackage) {
        int mode = this.mAppOpsService.noteOperation(43, Binder.getCallingUid(), callingPackage);
        if (mode == 3) {
            if (checkCallingPermission("android.permission.PACKAGE_USAGE_STATS") == 0) {
                return true;
            }
            return false;
        } else if (mode == 0) {
            return true;
        } else {
            return false;
        }
    }

    public int getPackageProcessState(String packageName, String callingPackage) {
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getPackageProcessState");
        }
        int procState = 21;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (int i = this.mProcessList.mLruProcesses.size() - 1; i >= 0; i--) {
                    ProcessRecord proc = this.mProcessList.mLruProcesses.get(i);
                    if (procState > proc.setProcState && (proc.pkgList.containsKey(packageName) || (proc.pkgDeps != null && proc.pkgDeps.contains(packageName)))) {
                        procState = proc.setProcState;
                    }
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return procState;
    }

    /* Debug info: failed to restart local var, previous not found, register: 4 */
    public boolean setProcessMemoryTrimLevel(String process, int userId, int level) throws RemoteException {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord app = findProcessLocked(process, userId, "setProcessMemoryTrimLevel");
                if (app == null) {
                    throw new IllegalArgumentException("Unknown process: " + process);
                } else if (app.thread == null) {
                    throw new IllegalArgumentException("Process has no app thread");
                } else if (app.trimMemoryLevel < level) {
                    if (level >= 20) {
                        if (app.getCurProcState() <= 7) {
                            throw new IllegalArgumentException("Unable to set a background trim level on a foreground process");
                        }
                    }
                    app.thread.scheduleTrimMemory(level);
                    app.trimMemoryLevel = level;
                } else {
                    throw new IllegalArgumentException("Unable to set a higher trim level than current level");
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return true;
    }

    /* access modifiers changed from: private */
    public void dispatchProcessesChanged() {
        int N;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                N = this.mPendingProcessChanges.size();
                if (this.mActiveProcessChanges.length < N) {
                    this.mActiveProcessChanges = new ProcessChangeItem[N];
                }
                this.mPendingProcessChanges.toArray(this.mActiveProcessChanges);
                this.mPendingProcessChanges.clear();
            } finally {
                while (true) {
                    resetPriorityAfterLockedSection();
                }
            }
        }
        resetPriorityAfterLockedSection();
        int i = this.mProcessObservers.beginBroadcast();
        while (i > 0) {
            i--;
            IProcessObserver observer = this.mProcessObservers.getBroadcastItem(i);
            if (observer != null) {
                int j = 0;
                while (j < N) {
                    try {
                        ProcessChangeItem item = this.mActiveProcessChanges[j];
                        if ((item.changes & 1) != 0) {
                            observer.onForegroundActivitiesChanged(item.pid, item.uid, item.foregroundActivities);
                        }
                        if ((item.changes & 2) != 0) {
                            observer.onForegroundServicesChanged(item.pid, item.uid, item.foregroundServiceTypes);
                        }
                        j++;
                    } catch (RemoteException e) {
                    }
                }
            }
        }
        this.mProcessObservers.finishBroadcast();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (int j2 = 0; j2 < N; j2++) {
                    this.mAvailProcessChanges.add(this.mActiveProcessChanges[j2]);
                }
            } catch (Throwable th) {
                while (true) {
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public ProcessChangeItem enqueueProcessChangeItemLocked(int pid, int uid) {
        ProcessChangeItem item;
        int i = this.mPendingProcessChanges.size() - 1;
        ProcessChangeItem item2 = null;
        while (i >= 0) {
            item2 = this.mPendingProcessChanges.get(i);
            if (item2.pid == pid) {
                break;
            }
            i--;
        }
        if (i < 0) {
            int NA = this.mAvailProcessChanges.size();
            if (NA > 0) {
                item = this.mAvailProcessChanges.remove(NA - 1);
            } else {
                item = new ProcessChangeItem();
            }
            item.changes = 0;
            item.pid = pid;
            item.uid = uid;
            if (this.mPendingProcessChanges.size() == 0) {
                this.mUiHandler.obtainMessage(31).sendToTarget();
            }
            this.mPendingProcessChanges.add(item);
        }
        return item;
    }

    /* access modifiers changed from: private */
    public void dispatchProcessDied(int pid, int uid) {
        int i = this.mProcessObservers.beginBroadcast();
        while (i > 0) {
            i--;
            IProcessObserver observer = this.mProcessObservers.getBroadcastItem(i);
            if (observer != null) {
                try {
                    observer.onProcessDied(pid, uid);
                } catch (RemoteException e) {
                }
            }
        }
        this.mProcessObservers.finishBroadcast();
    }

    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public void dispatchUidsChanged() {
        int N;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                N = this.mPendingUidChanges.size();
                if (this.mActiveUidChanges.length < N) {
                    this.mActiveUidChanges = new UidRecord.ChangeItem[N];
                }
                for (int i = 0; i < N; i++) {
                    UidRecord.ChangeItem change = this.mPendingUidChanges.get(i);
                    this.mActiveUidChanges[i] = change;
                    if (change.uidRecord != null) {
                        change.uidRecord.pendingChange = null;
                        change.uidRecord = null;
                    }
                }
                this.mPendingUidChanges.clear();
            } finally {
                while (true) {
                    resetPriorityAfterLockedSection();
                }
            }
        }
        resetPriorityAfterLockedSection();
        this.mUidChangeDispatchCount += N;
        int i2 = this.mUidObservers.beginBroadcast();
        while (i2 > 0) {
            i2--;
            dispatchUidsChangedForObserver(this.mUidObservers.getBroadcastItem(i2), (UidObserverRegistration) this.mUidObservers.getBroadcastCookie(i2), N);
        }
        this.mUidObservers.finishBroadcast();
        if (this.mUidObservers.getRegisteredCallbackCount() > 0) {
            for (int j = 0; j < N; j++) {
                UidRecord.ChangeItem item = this.mActiveUidChanges[j];
                if ((item.change & 1) != 0) {
                    this.mValidateUids.remove(item.uid);
                } else {
                    UidRecord validateUid = this.mValidateUids.get(item.uid);
                    if (validateUid == null) {
                        validateUid = new UidRecord(item.uid);
                        this.mValidateUids.put(item.uid, validateUid);
                    }
                    if ((item.change & 2) != 0) {
                        validateUid.idle = true;
                    } else if ((item.change & 4) != 0) {
                        validateUid.idle = false;
                    }
                    int i3 = item.processState;
                    validateUid.setProcState = i3;
                    validateUid.setCurProcState(i3);
                    validateUid.lastDispatchedProcStateSeq = item.procStateSeq;
                }
            }
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (int j2 = 0; j2 < N; j2++) {
                    this.mAvailUidChanges.add(this.mActiveUidChanges[j2]);
                }
            } catch (Throwable th) {
                while (true) {
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    private void dispatchUidsChangedForObserver(IUidObserver observer, UidObserverRegistration reg, int changesSize) {
        if (observer != null) {
            int j = 0;
            while (j < changesSize) {
                try {
                    UidRecord.ChangeItem item = this.mActiveUidChanges[j];
                    int change = item.change;
                    if (change != 0 || (reg.which & 1) != 0) {
                        long start = SystemClock.uptimeMillis();
                        if ((change & 2) != 0) {
                            if ((reg.which & 4) != 0) {
                                observer.onUidIdle(item.uid, item.ephemeral);
                            }
                        } else if (!((change & 4) == 0 || (reg.which & 8) == 0)) {
                            observer.onUidActive(item.uid);
                        }
                        boolean z = false;
                        if ((reg.which & 16) != 0) {
                            if ((change & 8) != 0) {
                                observer.onUidCachedChanged(item.uid, true);
                            } else if ((change & 16) != 0) {
                                observer.onUidCachedChanged(item.uid, false);
                            }
                        }
                        if ((change & 1) != 0) {
                            if ((reg.which & 2) != 0) {
                                observer.onUidGone(item.uid, item.ephemeral);
                            }
                            if (reg.lastProcStates != null) {
                                reg.lastProcStates.delete(item.uid);
                            }
                        } else if ((reg.which & 1) != 0) {
                            boolean doReport = true;
                            if (reg.cutpoint >= 0) {
                                int lastState = reg.lastProcStates.get(item.uid, -1);
                                if (lastState != -1) {
                                    if ((lastState <= reg.cutpoint) != (item.processState <= reg.cutpoint)) {
                                        z = true;
                                    }
                                    doReport = z;
                                } else {
                                    if (item.processState != 21) {
                                        z = true;
                                    }
                                    doReport = z;
                                }
                            }
                            if (doReport) {
                                if (reg.lastProcStates != null) {
                                    reg.lastProcStates.put(item.uid, item.processState);
                                }
                                observer.onUidStateChanged(item.uid, item.processState, item.procStateSeq);
                            }
                        }
                        int duration = (int) (SystemClock.uptimeMillis() - start);
                        if (reg.mMaxDispatchTime < duration) {
                            reg.mMaxDispatchTime = duration;
                        }
                        if (duration >= 20) {
                            reg.mSlowDispatchCount++;
                        }
                    }
                    j++;
                } catch (RemoteException e) {
                    return;
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void dispatchOomAdjObserver(String msg) {
        OomAdjObserver observer;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                observer = this.mCurOomAdjObserver;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        if (observer != null) {
            observer.onOomAdjMessage(msg);
        }
    }

    /* access modifiers changed from: package-private */
    public void setOomAdjObserver(int uid, OomAdjObserver observer) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mCurOomAdjUid = uid;
                this.mCurOomAdjObserver = observer;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void clearOomAdjObserver() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mCurOomAdjUid = -1;
                this.mCurOomAdjObserver = null;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void reportOomAdjMessageLocked(String tag, String msg) {
        Slog.d(tag, msg);
        if (this.mCurOomAdjObserver != null) {
            this.mUiHandler.obtainMessage(70, msg).sendToTarget();
        }
    }

    /* access modifiers changed from: package-private */
    public void reportUidInfoMessageLocked(String tag, String msg, int uid) {
        Slog.i("ActivityManager", msg);
        if (this.mCurOomAdjObserver != null && uid == this.mCurOomAdjUid) {
            this.mUiHandler.obtainMessage(70, msg).sendToTarget();
        }
    }

    public int startActivity(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions) {
        return this.mActivityTaskManager.startActivity(caller, callingPackage, intent, resolvedType, resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions);
    }

    public final int startActivityAsUser(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {
        return this.mActivityTaskManager.startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions, userId);
    }

    /* access modifiers changed from: package-private */
    public WaitResult startActivityAndWait(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {
        return this.mActivityTaskManager.startActivityAndWait(caller, callingPackage, intent, resolvedType, resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions, userId);
    }

    public final int startActivityFromRecents(int taskId, Bundle bOptions) {
        return this.mActivityTaskManager.startActivityFromRecents(taskId, bOptions);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:19:0x0041, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x0059, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x0094, code lost:
        resetPriorityAfterLockedSection();
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public int startActivityAsUserEmpty(android.os.Bundle r22) {
        /*
            r21 = this;
            r11 = r21
            java.lang.String r12 = "start_empty_apps"
            java.lang.String r0 = "start_empty_apps"
            r13 = r22
            java.util.ArrayList r14 = r13.getStringArrayList(r0)
            r15 = 1
            if (r14 == 0) goto L_0x00a2
            int r0 = r14.size()
            if (r0 <= 0) goto L_0x00a2
            java.util.Iterator r16 = r14.iterator()
        L_0x001b:
            boolean r0 = r16.hasNext()
            if (r0 == 0) goto L_0x00a2
            r17 = 0
            java.lang.Object r0 = r16.next()
            r10 = r0
            java.lang.String r10 = (java.lang.String) r10
            if (r10 != 0) goto L_0x002d
            goto L_0x001b
        L_0x002d:
            monitor-enter(r21)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0098 }
            r1 = 0
            android.content.Context r0 = r11.mContext     // Catch:{ Exception -> 0x008e }
            android.content.pm.PackageManager r0 = r0.getPackageManager()     // Catch:{ Exception -> 0x008e }
            android.content.Intent r0 = r0.getLaunchIntentForPackage(r10)     // Catch:{ Exception -> 0x008e }
            r18 = r0
            if (r18 != 0) goto L_0x0049
            monitor-exit(r21)     // Catch:{ all -> 0x0045 }
            resetPriorityAfterLockedSection()
            goto L_0x001b
        L_0x0045:
            r0 = move-exception
            r20 = r10
            goto L_0x009b
        L_0x0049:
            com.android.server.wm.ActivityStackSupervisor r2 = r11.mStackSupervisor     // Catch:{ Exception -> 0x008a }
            r4 = 0
            r5 = 0
            r6 = 0
            r7 = 0
            r8 = 0
            r3 = r18
            android.content.pm.ActivityInfo r0 = r2.resolveActivity(r3, r4, r5, r6, r7, r8)     // Catch:{ Exception -> 0x008a }
            if (r0 != 0) goto L_0x005d
            monitor-exit(r21)     // Catch:{ all -> 0x0045 }
            resetPriorityAfterLockedSection()
            goto L_0x001b
        L_0x005d:
            android.content.pm.ApplicationInfo r3 = r0.applicationInfo     // Catch:{ Exception -> 0x008a }
            r4 = 0
            r5 = 0
            com.android.server.am.HostingRecord r6 = sNullHostingRecord     // Catch:{ Exception -> 0x008a }
            r7 = 0
            r8 = 0
            r9 = 1
            java.lang.String r19 = "start_empty_apps"
            r1 = r21
            r2 = r10
            r20 = r10
            r10 = r19
            com.android.server.am.ProcessRecord r1 = r1.startProcessLocked(r2, r3, r4, r5, r6, r7, r8, r9, r10)     // Catch:{ Exception -> 0x0088 }
            if (r1 == 0) goto L_0x0085
            java.lang.String r2 = "updateOomAdj_meh"
            r11.updateOomAdjLocked(r1, r15, r2)     // Catch:{ Exception -> 0x0081, all -> 0x007d }
            goto L_0x0085
        L_0x007d:
            r0 = move-exception
            r17 = r1
            goto L_0x009b
        L_0x0081:
            r0 = move-exception
            r17 = r1
            goto L_0x0093
        L_0x0085:
            r17 = r1
            goto L_0x0093
        L_0x0088:
            r0 = move-exception
            goto L_0x0093
        L_0x008a:
            r0 = move-exception
            r20 = r10
            goto L_0x0093
        L_0x008e:
            r0 = move-exception
            r20 = r10
            r18 = r1
        L_0x0093:
            monitor-exit(r21)     // Catch:{ all -> 0x00a0 }
            resetPriorityAfterLockedSection()
            goto L_0x001b
        L_0x0098:
            r0 = move-exception
            r20 = r10
        L_0x009b:
            monitor-exit(r21)     // Catch:{ all -> 0x00a0 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x00a0:
            r0 = move-exception
            goto L_0x009b
        L_0x00a2:
            return r15
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.startActivityAsUserEmpty(android.os.Bundle):int");
    }

    public void startRecentsActivity(Intent intent, IAssistDataReceiver assistDataReceiver, IRecentsAnimationRunner recentsAnimationRunner) {
        this.mActivityTaskManager.startRecentsActivity(intent, assistDataReceiver, recentsAnimationRunner);
    }

    public void cancelRecentsAnimation(boolean restoreHomeStackPosition) {
        this.mActivityTaskManager.cancelRecentsAnimation(restoreHomeStackPosition);
    }

    public final boolean finishActivity(IBinder token, int resultCode, Intent resultData, int finishTask) {
        return this.mActivityTaskManager.finishActivity(token, resultCode, resultData, finishTask);
    }

    public void setRequestedOrientation(IBinder token, int requestedOrientation) {
        this.mActivityTaskManager.setRequestedOrientation(token, requestedOrientation);
    }

    public final void finishHeavyWeightApp() {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") == 0) {
            this.mAtmInternal.finishHeavyWeightApp();
            return;
        }
        String msg = "Permission Denial: finishHeavyWeightApp() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.FORCE_STOP_PACKAGES";
        Slog.w("ActivityManager", msg);
        throw new SecurityException(msg);
    }

    public void crashApplication(int uid, int initialPid, String packageName, int userId, String message) {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mAppErrors.scheduleAppCrashLocked(uid, initialPid, packageName, userId, message);
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        String msg = "Permission Denial: crashApplication() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.FORCE_STOP_PACKAGES";
        Slog.w("ActivityManager", msg);
        throw new SecurityException(msg);
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void handleAppDiedLocked(ProcessRecord app, boolean restarting, boolean allowRestart) {
        int pid = app.pid;
        if (!cleanUpApplicationRecordLocked(app, restarting, allowRestart, -1, false) && !restarting) {
            removeLruProcessLocked(app);
            if (pid > 0) {
                ProcessList.remove(pid);
            }
        }
        if (pid == this.mCastPid && this.mActivityTaskManager.mCastActivity != null) {
            ActivityTaskManagerService activityTaskManagerService = this.mActivityTaskManager;
            activityTaskManagerService.setCurrentCastModeState(activityTaskManagerService.mCastActivity.packageName, 0);
            this.mActivityTaskManager.mCastActivity = null;
        }
        if (this.mProfileData.getProfileProc() == app) {
            clearProfilerLocked();
        }
        this.mAtmInternal.handleAppDied(app.getWindowProcessController(), restarting, new Runnable(app) {
            private final /* synthetic */ ProcessRecord f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                ActivityManagerService.this.lambda$handleAppDiedLocked$0$ActivityManagerService(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$handleAppDiedLocked$0$ActivityManagerService(ProcessRecord app) {
        Slog.w("ActivityManager", "Crash of app " + app.processName + " running instrumentation " + app.getActiveInstrumentation().mClass);
        Bundle info = new Bundle();
        info.putString("shortMsg", "Process crashed.");
        finishInstrumentationLocked(app, 0, info);
    }

    /* access modifiers changed from: package-private */
    public ProcessRecord getRecordForAppLocked(IApplicationThread thread) {
        if (thread == null) {
            return null;
        }
        ProcessRecord record = this.mProcessList.getLRURecordForAppLocked(thread);
        if (record != null) {
            return record;
        }
        IBinder threadBinder = thread.asBinder();
        ArrayMap<String, SparseArray<ProcessRecord>> pmap = this.mProcessList.mProcessNames.getMap();
        for (int i = pmap.size() - 1; i >= 0; i--) {
            SparseArray<ProcessRecord> procs = pmap.valueAt(i);
            int j = procs.size() - 1;
            while (j >= 0) {
                ProcessRecord proc = procs.valueAt(j);
                if (proc.thread == null || proc.thread.asBinder() != threadBinder) {
                    j--;
                } else {
                    Slog.wtf("ActivityManager", "getRecordForApp: exists in name list but not in LRU list: " + proc);
                    return proc;
                }
            }
        }
        return null;
    }

    /* access modifiers changed from: package-private */
    public final void doLowMemReportIfNeededLocked(ProcessRecord dyingProc) {
        ArrayList<ProcessMemInfo> memInfos;
        if (!this.mProcessList.haveBackgroundProcessLocked()) {
            boolean doReport = SplitScreenReporter.ACTION_ENTER_SPLIT.equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"));
            if (doReport) {
                long now = SystemClock.uptimeMillis();
                if (now < this.mLastMemUsageReportTime + BackupAgentTimeoutParameters.DEFAULT_FULL_BACKUP_AGENT_TIMEOUT_MILLIS) {
                    doReport = false;
                } else {
                    this.mLastMemUsageReportTime = now;
                }
            }
            if (doReport) {
                memInfos = new ArrayList<>(this.mProcessList.getLruSizeLocked());
            } else {
                memInfos = null;
            }
            EventLog.writeEvent(EventLogTags.AM_LOW_MEMORY, this.mProcessList.getLruSizeLocked());
            long now2 = SystemClock.uptimeMillis();
            for (int i = this.mProcessList.mLruProcesses.size() - 1; i >= 0; i--) {
                ProcessRecord rec = this.mProcessList.mLruProcesses.get(i);
                if (!(rec == dyingProc || rec.thread == null)) {
                    if (doReport) {
                        memInfos.add(new ProcessMemInfo(rec.processName, rec.pid, rec.setAdj, rec.setProcState, rec.adjType, rec.makeAdjReason()));
                    }
                    if (rec.lastLowMemory + this.mConstants.GC_MIN_INTERVAL <= now2) {
                        if (rec.setAdj <= 400) {
                            rec.lastRequestedGc = 0;
                        } else {
                            rec.lastRequestedGc = rec.lastLowMemory;
                        }
                        rec.reportLowMemory = true;
                        rec.lastLowMemory = now2;
                        this.mProcessesToGc.remove(rec);
                        addProcessToGcListLocked(rec);
                    }
                }
            }
            ProcessRecord processRecord = dyingProc;
            if (doReport) {
                this.mHandler.sendMessage(this.mHandler.obtainMessage(33, memInfos));
            }
            scheduleAppGcsLocked();
            return;
        }
        ProcessRecord processRecord2 = dyingProc;
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void appDiedLocked(ProcessRecord app) {
        appDiedLocked(app, app.pid, app.thread, false);
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:10:0x0042, code lost:
        monitor-enter(r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:12:?, code lost:
        r6.noteProcessDiedLocked(r2.info.uid, r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:13:0x004a, code lost:
        monitor-exit(r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x004e, code lost:
        if (r2.killed != false) goto L_0x0061;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x0050, code lost:
        if (r4 != false) goto L_0x005a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:17:0x0052, code lost:
        com.android.server.am.ProcessRecordInjector.reportKillProcessEvent(r2, "appDiedLocked, not fromBinderDied");
        android.os.Process.killProcessQuiet(r18);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:18:0x005a, code lost:
        com.android.server.am.ProcessList.killProcessGroup(r2.uid, r3);
        r2.killed = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x0068, code lost:
        if (r2.pid != r3) goto L_0x0130;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:0x006c, code lost:
        if (r2.thread == null) goto L_0x0130;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x0078, code lost:
        if (r2.thread.asBinder() != r19.asBinder()) goto L_0x0130;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x007e, code lost:
        if (r17.getActiveInstrumentation() != null) goto L_0x0082;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x0080, code lost:
        r0 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:0x0082, code lost:
        r0 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:0x0083, code lost:
        r13 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:30:0x0086, code lost:
        if (r2.killedByAm != false) goto L_0x00cb;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x0088, code lost:
        reportUidInfoMessageLocked("ActivityManager", "Process " + r2.processName + " (pid " + r3 + ") has died: " + com.android.server.am.ProcessList.makeOomAdjString(r2.setAdj, true) + " " + com.android.server.am.ProcessList.makeProcStateString(r2.setProcState), r2.info.uid);
        r1.mAllowLowerMemLevel = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:32:0x00cb, code lost:
        r1.mAllowLowerMemLevel = false;
        r0 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x00ce, code lost:
        r10 = mUxPerf;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x00d0, code lost:
        if (r10 == null) goto L_0x00e4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:36:0x00d4, code lost:
        if (mForceStopKill != false) goto L_0x00e4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:37:0x00d6, code lost:
        r10.perfUXEngine_events(4, 0, r2.processName, 0);
        mUxPerf.perfHint(4243, r2.processName, r3, 0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x00e4, code lost:
        com.android.server.am.ProcessRecordInjector.reportBinderDied(r17);
        android.util.EventLog.writeEvent(com.android.server.am.EventLogTags.AM_PROC_DIED, new java.lang.Object[]{java.lang.Integer.valueOf(r2.userId), java.lang.Integer.valueOf(r2.pid), r2.processName, java.lang.Integer.valueOf(r2.setAdj), java.lang.Integer.valueOf(r2.setProcState)});
        handleAppDiedLocked(r2, false, com.android.server.am.ActivityManagerServiceInjector.restartDiedAppOrNot(r2, r17.getWindowProcessController().isHomeProcess(), true, r4));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:0x0122, code lost:
        if (r13 == false) goto L_0x012a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x0124, code lost:
        updateOomAdjLocked("updateOomAdj_processEnd");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x012a, code lost:
        if (r0 == false) goto L_0x0196;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x012c, code lost:
        doLowMemReportIfNeededLocked(r17);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:0x0132, code lost:
        if (r2.pid == r3) goto L_0x0196;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:0x0134, code lost:
        reportUidInfoMessageLocked("ActivityManager", "Process " + r2.processName + " (pid " + r3 + ") has died and restarted (pid " + r2.pid + ").", r2.info.uid);
        android.util.EventLog.writeEvent(com.android.server.am.EventLogTags.AM_PROC_DIED, new java.lang.Object[]{java.lang.Integer.valueOf(r2.userId), java.lang.Integer.valueOf(r2.pid), r2.processName, java.lang.Integer.valueOf(r2.curAdj), java.lang.Integer.valueOf(r17.getCurProcState())});
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:0x019a, code lost:
        if (com.android.server.am.MemoryStatUtil.hasMemcg() != false) goto L_?;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:48:0x019c, code lost:
        android.util.StatsLog.write(65, android.os.SystemClock.elapsedRealtime());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:63:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:64:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x003c, code lost:
        r6 = r1.mBatteryStatsService.getActiveStatistics();
     */
    @com.android.internal.annotations.GuardedBy({"this"})
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void appDiedLocked(com.android.server.am.ProcessRecord r17, int r18, android.app.IApplicationThread r19, boolean r20) {
        /*
            r16 = this;
            r1 = r16
            r2 = r17
            r3 = r18
            r4 = r20
            com.android.server.am.ActivityManagerService$PidMap r5 = r1.mPidsSelfLocked
            monitor-enter(r5)
            com.android.server.am.ActivityManagerService$PidMap r0 = r1.mPidsSelfLocked     // Catch:{ all -> 0x01a9 }
            com.android.server.am.ProcessRecord r0 = r0.get(r3)     // Catch:{ all -> 0x01a9 }
            if (r0 == r2) goto L_0x003b
            java.lang.String r6 = "ActivityManager"
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x01a9 }
            r7.<init>()     // Catch:{ all -> 0x01a9 }
            java.lang.String r8 = "Spurious death for "
            r7.append(r8)     // Catch:{ all -> 0x01a9 }
            r7.append(r2)     // Catch:{ all -> 0x01a9 }
            java.lang.String r8 = ", curProc for "
            r7.append(r8)     // Catch:{ all -> 0x01a9 }
            r7.append(r3)     // Catch:{ all -> 0x01a9 }
            java.lang.String r8 = ": "
            r7.append(r8)     // Catch:{ all -> 0x01a9 }
            r7.append(r0)     // Catch:{ all -> 0x01a9 }
            java.lang.String r7 = r7.toString()     // Catch:{ all -> 0x01a9 }
            android.util.Slog.w(r6, r7)     // Catch:{ all -> 0x01a9 }
            monitor-exit(r5)     // Catch:{ all -> 0x01a9 }
            return
        L_0x003b:
            monitor-exit(r5)     // Catch:{ all -> 0x01a9 }
            com.android.server.am.BatteryStatsService r0 = r1.mBatteryStatsService
            com.android.internal.os.BatteryStatsImpl r6 = r0.getActiveStatistics()
            monitor-enter(r6)
            android.content.pm.ApplicationInfo r0 = r2.info     // Catch:{ all -> 0x01a6 }
            int r0 = r0.uid     // Catch:{ all -> 0x01a6 }
            r6.noteProcessDiedLocked(r0, r3)     // Catch:{ all -> 0x01a6 }
            monitor-exit(r6)     // Catch:{ all -> 0x01a6 }
            boolean r0 = r2.killed
            r5 = 1
            if (r0 != 0) goto L_0x0061
            if (r4 != 0) goto L_0x005a
            java.lang.String r0 = "appDiedLocked, not fromBinderDied"
            com.android.server.am.ProcessRecordInjector.reportKillProcessEvent(r2, r0)
            android.os.Process.killProcessQuiet(r18)
        L_0x005a:
            int r0 = r2.uid
            com.android.server.am.ProcessList.killProcessGroup(r0, r3)
            r2.killed = r5
        L_0x0061:
            int r0 = r2.pid
            r7 = 3
            r8 = 2
            r9 = 5
            r11 = 4
            r12 = 0
            if (r0 != r3) goto L_0x0130
            android.app.IApplicationThread r0 = r2.thread
            if (r0 == 0) goto L_0x0130
            android.app.IApplicationThread r0 = r2.thread
            android.os.IBinder r0 = r0.asBinder()
            android.os.IBinder r13 = r19.asBinder()
            if (r0 != r13) goto L_0x0130
            com.android.server.am.ActiveInstrumentation r0 = r17.getActiveInstrumentation()
            if (r0 != 0) goto L_0x0082
            r0 = r5
            goto L_0x0083
        L_0x0082:
            r0 = r12
        L_0x0083:
            r13 = r0
            boolean r14 = r2.killedByAm
            if (r14 != 0) goto L_0x00cb
            java.lang.StringBuilder r14 = new java.lang.StringBuilder
            r14.<init>()
            java.lang.String r15 = "Process "
            r14.append(r15)
            java.lang.String r15 = r2.processName
            r14.append(r15)
            java.lang.String r15 = " (pid "
            r14.append(r15)
            r14.append(r3)
            java.lang.String r15 = ") has died: "
            r14.append(r15)
            int r15 = r2.setAdj
            java.lang.String r15 = com.android.server.am.ProcessList.makeOomAdjString(r15, r5)
            r14.append(r15)
            java.lang.String r15 = " "
            r14.append(r15)
            int r15 = r2.setProcState
            java.lang.String r15 = com.android.server.am.ProcessList.makeProcStateString(r15)
            r14.append(r15)
            java.lang.String r14 = r14.toString()
            android.content.pm.ApplicationInfo r15 = r2.info
            int r15 = r15.uid
            java.lang.String r10 = "ActivityManager"
            r1.reportUidInfoMessageLocked(r10, r14, r15)
            r1.mAllowLowerMemLevel = r5
            goto L_0x00ce
        L_0x00cb:
            r1.mAllowLowerMemLevel = r12
            r0 = 0
        L_0x00ce:
            android.util.BoostFramework r10 = mUxPerf
            if (r10 == 0) goto L_0x00e4
            boolean r14 = mForceStopKill
            if (r14 != 0) goto L_0x00e4
            java.lang.String r14 = r2.processName
            r10.perfUXEngine_events(r11, r12, r14, r12)
            android.util.BoostFramework r10 = mUxPerf
            r14 = 4243(0x1093, float:5.946E-42)
            java.lang.String r15 = r2.processName
            r10.perfHint(r14, r15, r3, r12)
        L_0x00e4:
            com.android.server.am.ProcessRecordInjector.reportBinderDied(r17)
            java.lang.Object[] r9 = new java.lang.Object[r9]
            int r10 = r2.userId
            java.lang.Integer r10 = java.lang.Integer.valueOf(r10)
            r9[r12] = r10
            int r10 = r2.pid
            java.lang.Integer r10 = java.lang.Integer.valueOf(r10)
            r9[r5] = r10
            java.lang.String r10 = r2.processName
            r9[r8] = r10
            int r8 = r2.setAdj
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)
            r9[r7] = r8
            int r7 = r2.setProcState
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)
            r9[r11] = r7
            r7 = 30011(0x753b, float:4.2054E-41)
            android.util.EventLog.writeEvent(r7, r9)
            com.android.server.wm.WindowProcessController r7 = r17.getWindowProcessController()
            boolean r7 = r7.isHomeProcess()
            boolean r5 = com.android.server.am.ActivityManagerServiceInjector.restartDiedAppOrNot(r2, r7, r5, r4)
            r1.handleAppDiedLocked(r2, r12, r5)
            if (r13 == 0) goto L_0x012a
            java.lang.String r5 = "updateOomAdj_processEnd"
            r1.updateOomAdjLocked(r5)
        L_0x012a:
            if (r0 == 0) goto L_0x0195
            r16.doLowMemReportIfNeededLocked(r17)
            goto L_0x0195
        L_0x0130:
            int r0 = r2.pid
            if (r0 == r3) goto L_0x0195
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r10 = "Process "
            r0.append(r10)
            java.lang.String r10 = r2.processName
            r0.append(r10)
            java.lang.String r10 = " (pid "
            r0.append(r10)
            r0.append(r3)
            java.lang.String r10 = ") has died and restarted (pid "
            r0.append(r10)
            int r10 = r2.pid
            r0.append(r10)
            java.lang.String r10 = ")."
            r0.append(r10)
            java.lang.String r0 = r0.toString()
            android.content.pm.ApplicationInfo r10 = r2.info
            int r10 = r10.uid
            java.lang.String r13 = "ActivityManager"
            r1.reportUidInfoMessageLocked(r13, r0, r10)
            java.lang.Object[] r0 = new java.lang.Object[r9]
            int r9 = r2.userId
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)
            r0[r12] = r9
            int r9 = r2.pid
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)
            r0[r5] = r9
            java.lang.String r5 = r2.processName
            r0[r8] = r5
            int r5 = r2.curAdj
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            r0[r7] = r5
            int r5 = r17.getCurProcState()
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            r0[r11] = r5
            r5 = 30011(0x753b, float:4.2054E-41)
            android.util.EventLog.writeEvent(r5, r0)
            goto L_0x0196
        L_0x0195:
        L_0x0196:
            boolean r0 = com.android.server.am.MemoryStatUtil.hasMemcg()
            if (r0 != 0) goto L_0x01a5
            r0 = 65
            long r7 = android.os.SystemClock.elapsedRealtime()
            android.util.StatsLog.write(r0, r7)
        L_0x01a5:
            return
        L_0x01a6:
            r0 = move-exception
            monitor-exit(r6)     // Catch:{ all -> 0x01a6 }
            throw r0
        L_0x01a9:
            r0 = move-exception
            monitor-exit(r5)     // Catch:{ all -> 0x01a9 }
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.appDiedLocked(com.android.server.am.ProcessRecord, int, android.app.IApplicationThread, boolean):void");
    }

    public static File dumpStackTraces(ArrayList<Integer> firstPids, ProcessCpuTracker processCpuTracker, SparseArray<Boolean> lastPids, ArrayList<Integer> nativePids) {
        ArrayList<Integer> extraPids = null;
        Slog.i("ActivityManager", "dumpStackTraces pids=" + lastPids + " nativepids=" + nativePids);
        if (processCpuTracker != null) {
            processCpuTracker.init();
            try {
                Thread.sleep(NETWORK_ACCESS_TIMEOUT_DEFAULT_MS);
            } catch (InterruptedException e) {
            }
            processCpuTracker.update();
            int N = processCpuTracker.countWorkingStats();
            extraPids = new ArrayList<>();
            for (int i = 0; i < N && extraPids.size() < 5; i++) {
                ProcessCpuTracker.Stats stats = processCpuTracker.getWorkingStats(i);
                if (lastPids.indexOfKey(stats.pid) >= 0) {
                    extraPids.add(Integer.valueOf(stats.pid));
                } else {
                    Slog.i("ActivityManager", "Skipping next CPU consuming process, not a java proc: " + stats.pid);
                }
            }
        }
        File tracesDir = new File(ANR_TRACE_DIR);
        maybePruneOldTraces(tracesDir);
        File tracesFile = createAnrDumpFile(tracesDir);
        if (tracesFile == null) {
            return null;
        }
        dumpStackTraces(tracesFile.getAbsolutePath(), firstPids, nativePids, extraPids);
        return tracesFile;
    }

    private static synchronized File createAnrDumpFile(File tracesDir) {
        synchronized (ActivityManagerService.class) {
            boostPriorityForLockedSection();
            if (sAnrFileDateFormat == null) {
                sAnrFileDateFormat = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");
            }
            String formattedDate = sAnrFileDateFormat.format(new Date());
            File anrFile = new File(tracesDir, "anr_" + formattedDate);
            try {
                if (anrFile.createNewFile()) {
                    FileUtils.setPermissions(anrFile.getAbsolutePath(), 384, -1, -1);
                    resetPriorityAfterLockedSection();
                    return anrFile;
                }
                Slog.w("ActivityManager", "Unable to create ANR dump file: createNewFile failed");
                resetPriorityAfterLockedSection();
                return null;
            } catch (IOException ioe) {
                Slog.w("ActivityManager", "Exception creating ANR dump file:", ioe);
            }
        }
    }

    private static void maybePruneOldTraces(File tracesDir) {
        File[] files = tracesDir.listFiles();
        if (files != null) {
            int max = SystemProperties.getInt("tombstoned.max_anr_count", 64);
            long now = System.currentTimeMillis();
            Arrays.sort(files, Comparator.comparingLong($$Lambda$yk1Ms9fVlF6PvprMwF2rrudw4Q.INSTANCE).reversed());
            for (int i = 0; i < files.length; i++) {
                if ((i > max || now - files[i].lastModified() > 86400000) && !files[i].delete()) {
                    Slog.w("ActivityManager", "Unable to prune stale trace file: " + files[i]);
                }
            }
        }
    }

    private static long dumpJavaTracesTombstoned(int pid, String fileName, long timeoutMs) {
        long timeStart = SystemClock.elapsedRealtime();
        boolean javaSuccess = Debug.dumpJavaBacktraceToFileTimeout(pid, fileName, (int) (timeoutMs / 1000));
        if (javaSuccess) {
            try {
                if (new File(fileName).length() < 100) {
                    Slog.w("ActivityManager", "Successfully created Java ANR file is empty!");
                    javaSuccess = false;
                }
            } catch (Exception e) {
                Slog.w("ActivityManager", "Unable to get ANR file size", e);
                javaSuccess = false;
            }
        }
        if (!javaSuccess) {
            Slog.w("ActivityManager", "Dumping Java threads failed, initiating native stack dump.");
            if (!Debug.dumpNativeBacktraceToFileTimeout(pid, fileName, 2)) {
                Slog.w("ActivityManager", "Native stack dump failed!");
            }
        }
        return SystemClock.elapsedRealtime() - timeStart;
    }

    public static void dumpStackTraces(String tracesFile, ArrayList<Integer> firstPids, ArrayList<Integer> nativePids, ArrayList<Integer> extraPids) {
        String str = tracesFile;
        ArrayList<Integer> arrayList = firstPids;
        Slog.i("ActivityManager", "Dumping to " + str);
        long remainingTime = ActivityManagerServiceInjector.KEEP_FOREGROUND_DURATION;
        if (arrayList != null) {
            int num = firstPids.size();
            for (int i = 0; i < num; i++) {
                Slog.i("ActivityManager", "Collecting stacks for pid " + arrayList.get(i));
                remainingTime -= dumpJavaTracesTombstoned(arrayList.get(i).intValue(), str, remainingTime);
                if (remainingTime <= 0) {
                    Slog.e("ActivityManager", "Aborting stack trace dump (current firstPid=" + arrayList.get(i) + "); deadline exceeded.");
                    return;
                }
            }
        }
        if (nativePids != null) {
            Iterator<Integer> it = nativePids.iterator();
            while (it.hasNext()) {
                int pid = it.next().intValue();
                Slog.i("ActivityManager", "Collecting stacks for native pid " + pid);
                long nativeDumpTimeoutMs = Math.min(2000, remainingTime);
                long start = SystemClock.elapsedRealtime();
                Debug.dumpNativeBacktraceToFileTimeout(pid, str, (int) (nativeDumpTimeoutMs / 1000));
                remainingTime -= SystemClock.elapsedRealtime() - start;
                if (remainingTime <= 0) {
                    Slog.e("ActivityManager", "Aborting stack trace dump (current native pid=" + pid + "); deadline exceeded.");
                    return;
                }
            }
        }
        if (extraPids != null) {
            Iterator<Integer> it2 = extraPids.iterator();
            while (it2.hasNext()) {
                int pid2 = it2.next().intValue();
                Slog.i("ActivityManager", "Collecting stacks for extra pid " + pid2);
                remainingTime -= dumpJavaTracesTombstoned(pid2, str, remainingTime);
                if (remainingTime <= 0) {
                    Slog.e("ActivityManager", "Aborting stack trace dump (current extra pid=" + pid2 + "); deadline exceeded.");
                    return;
                }
            }
        }
        Slog.i("ActivityManager", "Done dumping");
    }

    /* Debug info: failed to restart local var, previous not found, register: 19 */
    /* JADX WARNING: Code restructure failed: missing block: B:37:0x00a0, code lost:
        if (r7.isInstantApp() == false) goto L_0x00a2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:58:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:59:0x00d6, code lost:
        r1 = r1;
        r3 = r7;
        r4 = r14;
        r5 = r17;
        r6 = r12;
        r11 = r7;
        r7 = r13;
        r18 = r13;
        r13 = r8;
        r8 = r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:61:?, code lost:
        r1 = new com.android.server.am.ActivityManagerService.AnonymousClass8(r19);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:64:?, code lost:
        r13.clearApplicationUserData(r10, r1, r14);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:65:0x00ee, code lost:
        if (r11 == null) goto L_0x0125;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:66:0x00f0, code lost:
        if (r21 != false) goto L_0x0107;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:67:0x00f2, code lost:
        r5 = false;
        r9.mUgmInternal.removeUriPermissionsForPackage(r10, r14, true, false);
        r0 = android.app.NotificationManager.getService();
        r2 = r11.uid;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:68:0x0101, code lost:
        if (r12 != r11.uid) goto L_0x0104;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:69:0x0103, code lost:
        r5 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:70:0x0104, code lost:
        r0.clearData(r10, r2, r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:71:0x0107, code lost:
        ((com.android.server.job.JobSchedulerInternal) com.android.server.LocalServices.getService(com.android.server.job.JobSchedulerInternal.class)).cancelJobsForUid(r11.uid, "clear data");
        ((com.android.server.AlarmManagerInternal) com.android.server.LocalServices.getService(com.android.server.AlarmManagerInternal.class)).removeAlarmsForUid(r11.uid);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:75:0x012b, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:76:0x012c, code lost:
        r5 = r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:77:0x0130, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:78:0x0131, code lost:
        r18 = r13;
        r5 = r22;
     */
    /* JADX WARNING: Removed duplicated region for block: B:23:0x0059 A[Catch:{ all -> 0x0042 }] */
    /* JADX WARNING: Removed duplicated region for block: B:35:0x009c A[SYNTHETIC, Splitter:B:35:0x009c] */
    /* JADX WARNING: Removed duplicated region for block: B:40:0x00a7  */
    /* JADX WARNING: Removed duplicated region for block: B:45:0x00b1  */
    /* JADX WARNING: Removed duplicated region for block: B:46:0x00b3  */
    /* JADX WARNING: Removed duplicated region for block: B:49:0x00b7  */
    /* JADX WARNING: Removed duplicated region for block: B:81:0x013e  */
    /* JADX WARNING: Removed duplicated region for block: B:87:0x015e A[SYNTHETIC, Splitter:B:87:0x015e] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean clearApplicationUserData(java.lang.String r20, boolean r21, android.content.pm.IPackageDataObserver r22, int r23) {
        /*
            r19 = this;
            r9 = r19
            r10 = r20
            r11 = r22
            java.lang.String r0 = "clearApplicationUserData"
            r9.enforceNotIsolatedCaller(r0)
            int r12 = android.os.Binder.getCallingUid()
            int r13 = android.os.Binder.getCallingPid()
            com.android.server.am.UserController r1 = r9.mUserController
            r5 = 0
            r6 = 2
            java.lang.String r7 = "clearApplicationUserData"
            r8 = 0
            r2 = r13
            r3 = r12
            r4 = r23
            int r14 = r1.handleIncomingUser(r2, r3, r4, r5, r6, r7, r8)
            long r15 = android.os.Binder.clearCallingIdentity()
            android.content.pm.IPackageManager r0 = android.app.AppGlobals.getPackageManager()     // Catch:{ all -> 0x01a2 }
            r8 = r0
            monitor-enter(r19)     // Catch:{ all -> 0x01a2 }
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0194 }
            android.content.pm.PackageManagerInternal r0 = r19.getPackageManagerInternalLocked()     // Catch:{ all -> 0x0194 }
            boolean r0 = r0.isPackageDataProtected(r14, r10)     // Catch:{ all -> 0x0194 }
            if (r0 != 0) goto L_0x0179
            r1 = 0
            r0 = 8192(0x2000, float:1.14794E-41)
            android.content.pm.ApplicationInfo r0 = r8.getApplicationInfo(r10, r0, r14)     // Catch:{ RemoteException -> 0x0049 }
            r1 = r0
            goto L_0x004a
        L_0x0042:
            r0 = move-exception
            r5 = r11
            r18 = r13
            r13 = r8
            goto L_0x0199
        L_0x0049:
            r0 = move-exception
        L_0x004a:
            r7 = r1
            r5 = 1
            if (r7 == 0) goto L_0x0054
            int r0 = r7.uid     // Catch:{ all -> 0x0042 }
            if (r0 != r12) goto L_0x0054
            r0 = r5
            goto L_0x0055
        L_0x0054:
            r0 = 0
        L_0x0055:
            r2 = r0
            r0 = -1
            if (r2 != 0) goto L_0x008b
            java.lang.String r3 = "android.permission.CLEAR_APP_USER_DATA"
            int r3 = checkComponentPermission(r3, r13, r12, r0, r5)     // Catch:{ all -> 0x0042 }
            if (r3 != 0) goto L_0x0062
            goto L_0x008b
        L_0x0062:
            java.lang.SecurityException r0 = new java.lang.SecurityException     // Catch:{ all -> 0x0042 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x0042 }
            r3.<init>()     // Catch:{ all -> 0x0042 }
            java.lang.String r4 = "PID "
            r3.append(r4)     // Catch:{ all -> 0x0042 }
            r3.append(r13)     // Catch:{ all -> 0x0042 }
            java.lang.String r4 = " does not have permission "
            r3.append(r4)     // Catch:{ all -> 0x0042 }
            java.lang.String r4 = "android.permission.CLEAR_APP_USER_DATA"
            r3.append(r4)     // Catch:{ all -> 0x0042 }
            java.lang.String r4 = " to clear data of package "
            r3.append(r4)     // Catch:{ all -> 0x0042 }
            r3.append(r10)     // Catch:{ all -> 0x0042 }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x0042 }
            r0.<init>(r3)     // Catch:{ all -> 0x0042 }
            throw r0     // Catch:{ all -> 0x0042 }
        L_0x008b:
            android.content.pm.PackageManagerInternal r3 = r19.getPackageManagerInternalLocked()     // Catch:{ all -> 0x0194 }
            boolean r3 = r3.hasInstantApplicationMetadata(r10, r14)     // Catch:{ all -> 0x0194 }
            if (r7 != 0) goto L_0x0099
            if (r3 != 0) goto L_0x0099
            r4 = r5
            goto L_0x009a
        L_0x0099:
            r4 = 0
        L_0x009a:
            if (r7 == 0) goto L_0x00a2
            boolean r17 = r7.isInstantApp()     // Catch:{ all -> 0x0042 }
            if (r17 != 0) goto L_0x00a4
        L_0x00a2:
            if (r3 == 0) goto L_0x00a7
        L_0x00a4:
            r17 = r5
            goto L_0x00a9
        L_0x00a7:
            r17 = 0
        L_0x00a9:
            java.lang.String r6 = "android.permission.ACCESS_INSTANT_APPS"
            int r0 = checkComponentPermission(r6, r13, r12, r0, r5)     // Catch:{ all -> 0x0194 }
            if (r0 != 0) goto L_0x00b3
            r0 = r5
            goto L_0x00b4
        L_0x00b3:
            r0 = 0
        L_0x00b4:
            r6 = r0
            if (r4 != 0) goto L_0x013e
            if (r17 == 0) goto L_0x00c2
            if (r6 != 0) goto L_0x00c2
            r11 = r7
            r18 = r13
            r5 = 0
            r13 = r8
            goto L_0x0143
        L_0x00c2:
            if (r7 == 0) goto L_0x00d0
            int r0 = r7.uid     // Catch:{ all -> 0x0042 }
            java.lang.String r5 = "clear data"
            r9.forceStopPackageLocked(r10, r0, r5)     // Catch:{ all -> 0x0042 }
            com.android.server.wm.ActivityTaskManagerInternal r0 = r9.mAtmInternal     // Catch:{ all -> 0x0042 }
            r0.removeRecentTasksByPackageName(r10, r14)     // Catch:{ all -> 0x0042 }
        L_0x00d0:
            monitor-exit(r19)     // Catch:{ all -> 0x0137 }
            resetPriorityAfterLockedSection()     // Catch:{ all -> 0x0130 }
            com.android.server.am.ActivityManagerService$8 r0 = new com.android.server.am.ActivityManagerService$8     // Catch:{ all -> 0x0130 }
            r1 = r0
            r2 = r19
            r3 = r7
            r4 = r14
            r6 = 1
            r5 = r17
            r11 = r6
            r6 = r12
            r11 = r7
            r7 = r13
            r18 = r13
            r13 = r8
            r8 = r22
            r1.<init>(r3, r4, r5, r6, r7, r8)     // Catch:{ all -> 0x012b }
            r1 = r0
            r13.clearApplicationUserData(r10, r1, r14)     // Catch:{ RemoteException -> 0x0124 }
            if (r11 == 0) goto L_0x0123
            if (r21 != 0) goto L_0x0107
            com.android.server.uri.UriGrantsManagerInternal r0 = r9.mUgmInternal     // Catch:{ RemoteException -> 0x0124 }
            r2 = 1
            r5 = 0
            r0.removeUriPermissionsForPackage(r10, r14, r2, r5)     // Catch:{ RemoteException -> 0x0124 }
            android.app.INotificationManager r0 = android.app.NotificationManager.getService()     // Catch:{ RemoteException -> 0x0124 }
            int r2 = r11.uid     // Catch:{ RemoteException -> 0x0124 }
            int r3 = r11.uid     // Catch:{ RemoteException -> 0x0124 }
            if (r12 != r3) goto L_0x0104
            r5 = 1
        L_0x0104:
            r0.clearData(r10, r2, r5)     // Catch:{ RemoteException -> 0x0124 }
        L_0x0107:
            java.lang.Class<com.android.server.job.JobSchedulerInternal> r0 = com.android.server.job.JobSchedulerInternal.class
            java.lang.Object r0 = com.android.server.LocalServices.getService(r0)     // Catch:{ RemoteException -> 0x0124 }
            com.android.server.job.JobSchedulerInternal r0 = (com.android.server.job.JobSchedulerInternal) r0     // Catch:{ RemoteException -> 0x0124 }
            int r2 = r11.uid     // Catch:{ RemoteException -> 0x0124 }
            java.lang.String r3 = "clear data"
            r0.cancelJobsForUid(r2, r3)     // Catch:{ RemoteException -> 0x0124 }
            java.lang.Class<com.android.server.AlarmManagerInternal> r2 = com.android.server.AlarmManagerInternal.class
            java.lang.Object r2 = com.android.server.LocalServices.getService(r2)     // Catch:{ RemoteException -> 0x0124 }
            com.android.server.AlarmManagerInternal r2 = (com.android.server.AlarmManagerInternal) r2     // Catch:{ RemoteException -> 0x0124 }
            int r3 = r11.uid     // Catch:{ RemoteException -> 0x0124 }
            r2.removeAlarmsForUid(r3)     // Catch:{ RemoteException -> 0x0124 }
        L_0x0123:
            goto L_0x0125
        L_0x0124:
            r0 = move-exception
        L_0x0125:
            android.os.Binder.restoreCallingIdentity(r15)
            r1 = 1
            return r1
        L_0x012b:
            r0 = move-exception
            r5 = r22
            goto L_0x01a6
        L_0x0130:
            r0 = move-exception
            r18 = r13
            r5 = r22
            goto L_0x01a6
        L_0x0137:
            r0 = move-exception
            r18 = r13
            r13 = r8
            r5 = r22
            goto L_0x0199
        L_0x013e:
            r11 = r7
            r18 = r13
            r5 = 0
            r13 = r8
        L_0x0143:
            java.lang.String r0 = "ActivityManager"
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x0175 }
            r7.<init>()     // Catch:{ all -> 0x0175 }
            java.lang.String r8 = "Invalid packageName: "
            r7.append(r8)     // Catch:{ all -> 0x0175 }
            r7.append(r10)     // Catch:{ all -> 0x0175 }
            java.lang.String r7 = r7.toString()     // Catch:{ all -> 0x0175 }
            android.util.Slog.w(r0, r7)     // Catch:{ all -> 0x0175 }
            r7 = r5
            r5 = r22
            if (r5 == 0) goto L_0x016c
            r5.onRemoveCompleted(r10, r7)     // Catch:{ RemoteException -> 0x0162 }
            goto L_0x016c
        L_0x0162:
            r0 = move-exception
            r8 = r0
            r0 = r8
            java.lang.String r8 = "ActivityManager"
            java.lang.String r7 = "Observer no longer exists."
            android.util.Slog.i(r8, r7)     // Catch:{ all -> 0x01a0 }
        L_0x016c:
            monitor-exit(r19)     // Catch:{ all -> 0x01a0 }
            resetPriorityAfterLockedSection()
            android.os.Binder.restoreCallingIdentity(r15)
            r7 = 0
            return r7
        L_0x0175:
            r0 = move-exception
            r5 = r22
            goto L_0x0199
        L_0x0179:
            r5 = r11
            r18 = r13
            r13 = r8
            java.lang.SecurityException r0 = new java.lang.SecurityException     // Catch:{ all -> 0x01a0 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x01a0 }
            r1.<init>()     // Catch:{ all -> 0x01a0 }
            java.lang.String r2 = "Cannot clear data for a protected package: "
            r1.append(r2)     // Catch:{ all -> 0x01a0 }
            r1.append(r10)     // Catch:{ all -> 0x01a0 }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x01a0 }
            r0.<init>(r1)     // Catch:{ all -> 0x01a0 }
            throw r0     // Catch:{ all -> 0x01a0 }
        L_0x0194:
            r0 = move-exception
            r5 = r11
            r18 = r13
            r13 = r8
        L_0x0199:
            monitor-exit(r19)     // Catch:{ all -> 0x01a0 }
            resetPriorityAfterLockedSection()     // Catch:{ all -> 0x019e }
            throw r0     // Catch:{ all -> 0x019e }
        L_0x019e:
            r0 = move-exception
            goto L_0x01a6
        L_0x01a0:
            r0 = move-exception
            goto L_0x0199
        L_0x01a2:
            r0 = move-exception
            r5 = r11
            r18 = r13
        L_0x01a6:
            android.os.Binder.restoreCallingIdentity(r15)
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.clearApplicationUserData(java.lang.String, boolean, android.content.pm.IPackageDataObserver, int):boolean");
    }

    public void killBackgroundProcesses(String packageName, int userId) {
        killBackgroundProcesses(packageName, userId, "kill background from process:" + ExtraActivityManagerService.getProcessNameByPid(Binder.getCallingPid()));
    }

    /* Debug info: failed to restart local var, previous not found, register: 18 */
    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:33:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x00bf, code lost:
        r15 = r15 + 1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void killBackgroundProcesses(java.lang.String r19, int r20, java.lang.String r21) {
        /*
            r18 = this;
            r1 = r18
            r8 = r19
            java.lang.String r0 = "android.permission.KILL_BACKGROUND_PROCESSES"
            int r0 = r1.checkCallingPermission(r0)
            if (r0 == 0) goto L_0x004b
            java.lang.String r0 = "android.permission.RESTART_PACKAGES"
            int r0 = r1.checkCallingPermission(r0)
            if (r0 != 0) goto L_0x0015
            goto L_0x004b
        L_0x0015:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r2 = "Permission Denial: killBackgroundProcesses() from pid="
            r0.append(r2)
            int r2 = android.os.Binder.getCallingPid()
            r0.append(r2)
            java.lang.String r2 = ", uid="
            r0.append(r2)
            int r2 = android.os.Binder.getCallingUid()
            r0.append(r2)
            java.lang.String r2 = " requires "
            r0.append(r2)
            java.lang.String r2 = "android.permission.KILL_BACKGROUND_PROCESSES"
            r0.append(r2)
            java.lang.String r0 = r0.toString()
            java.lang.String r2 = "ActivityManager"
            android.util.Slog.w(r2, r0)
            java.lang.SecurityException r2 = new java.lang.SecurityException
            r2.<init>(r0)
            throw r2
        L_0x004b:
            com.android.server.am.UserController r9 = r1.mUserController
            int r10 = android.os.Binder.getCallingPid()
            int r11 = android.os.Binder.getCallingUid()
            r13 = 1
            r14 = 2
            r16 = 0
            java.lang.String r15 = "killBackgroundProcesses"
            r12 = r20
            int r9 = r9.handleIncomingUser(r10, r11, r12, r13, r14, r15, r16)
            com.android.server.am.UserController r0 = r1.mUserController
            int[] r10 = r0.expandUserId(r9)
            long r11 = android.os.Binder.clearCallingIdentity()
            android.content.pm.IPackageManager r0 = android.app.AppGlobals.getPackageManager()     // Catch:{ all -> 0x00d3 }
            r13 = r0
            int r14 = r10.length     // Catch:{ all -> 0x00d3 }
            r0 = 0
            r15 = r0
        L_0x0074:
            if (r15 >= r14) goto L_0x00ce
            r0 = r10[r15]     // Catch:{ all -> 0x00d3 }
            r7 = r0
            r2 = -1
            r0 = 268435456(0x10000000, float:2.5243549E-29)
            int r0 = r13.getPackageUid(r8, r0, r7)     // Catch:{ RemoteException -> 0x0086 }
            int r0 = android.os.UserHandle.getAppId(r0)     // Catch:{ RemoteException -> 0x0086 }
            r6 = r0
            goto L_0x0088
        L_0x0086:
            r0 = move-exception
            r6 = r2
        L_0x0088:
            r0 = -1
            if (r6 != r0) goto L_0x00a5
            java.lang.String r0 = "ActivityManager"
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x00d3 }
            r2.<init>()     // Catch:{ all -> 0x00d3 }
            java.lang.String r3 = "Invalid packageName: "
            r2.append(r3)     // Catch:{ all -> 0x00d3 }
            r2.append(r8)     // Catch:{ all -> 0x00d3 }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x00d3 }
            android.util.Slog.w(r0, r2)     // Catch:{ all -> 0x00d3 }
            android.os.Binder.restoreCallingIdentity(r11)
            return
        L_0x00a5:
            monitor-enter(r18)     // Catch:{ all -> 0x00d3 }
            boostPriorityForLockedSection()     // Catch:{ all -> 0x00c2 }
            com.android.server.am.ProcessList r2 = r1.mProcessList     // Catch:{ all -> 0x00c2 }
            r0 = 500(0x1f4, float:7.0E-43)
            r3 = r19
            r4 = r6
            r5 = r7
            r16 = r6
            r6 = r0
            r17 = r7
            r7 = r21
            r2.killPackageProcessesLocked(r3, r4, r5, r6, r7)     // Catch:{ all -> 0x00cc }
            monitor-exit(r18)     // Catch:{ all -> 0x00cc }
            resetPriorityAfterLockedSection()     // Catch:{ all -> 0x00d3 }
            int r15 = r15 + 1
            goto L_0x0074
        L_0x00c2:
            r0 = move-exception
            r16 = r6
            r17 = r7
        L_0x00c7:
            monitor-exit(r18)     // Catch:{ all -> 0x00cc }
            resetPriorityAfterLockedSection()     // Catch:{ all -> 0x00d3 }
            throw r0     // Catch:{ all -> 0x00d3 }
        L_0x00cc:
            r0 = move-exception
            goto L_0x00c7
        L_0x00ce:
            android.os.Binder.restoreCallingIdentity(r11)
            return
        L_0x00d3:
            r0 = move-exception
            android.os.Binder.restoreCallingIdentity(r11)
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.killBackgroundProcesses(java.lang.String, int, java.lang.String):void");
    }

    /* Debug info: failed to restart local var, previous not found, register: 10 */
    public void killAllBackgroundProcesses() {
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") == 0) {
            String str = "kill all background from process:" + ExtraActivityManagerService.getProcessNameByPid(Binder.getCallingPid());
            long callingId = Binder.clearCallingIdentity();
            try {
                synchronized (this) {
                    boostPriorityForLockedSection();
                    this.mAllowLowerMemLevel = true;
                    this.mProcessList.killPackageProcessesLocked((String) null, -1, -1, 900, "kill all background");
                    doLowMemReportIfNeededLocked((ProcessRecord) null);
                }
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(callingId);
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(callingId);
                throw th;
            }
        } else {
            String msg = "Permission Denial: killAllBackgroundProcesses() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.KILL_BACKGROUND_PROCESSES";
            Slog.w("ActivityManager", msg);
            throw new SecurityException(msg);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 3 */
    /* access modifiers changed from: package-private */
    public void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState) {
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") == 0) {
            long callingId = Binder.clearCallingIdentity();
            try {
                synchronized (this) {
                    boostPriorityForLockedSection();
                    this.mProcessList.killAllBackgroundProcessesExceptLocked(minTargetSdk, maxProcState);
                }
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(callingId);
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(callingId);
                throw th;
            }
        } else {
            String msg = "Permission Denial: killAllBackgroundProcessesExcept() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.KILL_BACKGROUND_PROCESSES";
            Slog.w("ActivityManager", msg);
            throw new SecurityException(msg);
        }
    }

    public void forceStopPackage(String packageName, int userId) {
        forceStopPackage(packageName, userId, "from process:" + ExtraActivityManagerService.getProcessNameByPid(Binder.getCallingPid()));
    }

    /* Debug info: failed to restart local var, previous not found, register: 16 */
    /* access modifiers changed from: package-private */
    public void forceStopPackage(String packageName, int userId, String reason) {
        boolean z;
        String str = packageName;
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") == 0) {
            int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 2, "forceStopPackage", (String) null);
            long callingId = Binder.clearCallingIdentity();
            if (ProcessPolicyManager.isImportantProcess(str, userId2)) {
                Slog.i("ActivityManager", "don't stop important process " + str);
                return;
            }
            try {
                IPackageManager pm = AppGlobals.getPackageManager();
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        int i = -1;
                        boolean z2 = true;
                        int[] users = userId2 == -1 ? this.mUserController.getUsers() : new int[]{userId2};
                        int length = users.length;
                        int i2 = 0;
                        while (i2 < length) {
                            int user = users[i2];
                            if (getPackageManagerInternalLocked().isPackageStateProtected(str, user)) {
                                Slog.w("ActivityManager", "Ignoring request to force stop protected package " + str + " u" + user);
                                resetPriorityAfterLockedSection();
                                Binder.restoreCallingIdentity(callingId);
                                return;
                            }
                            int pkgUid = -1;
                            try {
                                pkgUid = pm.getPackageUid(str, 268435456, user);
                            } catch (RemoteException e) {
                            }
                            if (pkgUid == i) {
                                Slog.w("ActivityManager", "Invalid packageName: " + str);
                                String str2 = reason;
                                z = false;
                            } else {
                                pm.setPackageStoppedState(str, z2, user);
                                z = false;
                                if (this.mUserController.isUserRunning(user, 0)) {
                                    try {
                                        forceStopPackageLocked(str, pkgUid, reason);
                                        finishForceStopPackageLocked(str, pkgUid);
                                    } catch (Throwable th) {
                                        th = th;
                                        resetPriorityAfterLockedSection();
                                        throw th;
                                    }
                                } else {
                                    String str3 = reason;
                                }
                            }
                            i2++;
                            boolean z3 = z;
                            i = -1;
                            z2 = true;
                        }
                        String str4 = reason;
                    } catch (RemoteException e2) {
                    } catch (IllegalArgumentException e3) {
                        Slog.w("ActivityManager", "Failed trying to unstop package " + str + ": " + e3);
                    } catch (Throwable th2) {
                        th = th2;
                        String str5 = reason;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                    try {
                        resetPriorityAfterLockedSection();
                        Binder.restoreCallingIdentity(callingId);
                    } catch (Throwable th3) {
                        th = th3;
                        Binder.restoreCallingIdentity(callingId);
                        throw th;
                    }
                }
            } catch (Throwable th4) {
                th = th4;
                String str6 = reason;
                Binder.restoreCallingIdentity(callingId);
                throw th;
            }
        } else {
            String str7 = reason;
            String msg = "Permission Denial: forceStopPackage() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.FORCE_STOP_PACKAGES";
            Slog.w("ActivityManager", msg);
            throw new SecurityException(msg);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 4 */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x0035, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:21:0x0038, code lost:
        return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void addPackageDependency(java.lang.String r5) {
        /*
            r4 = this;
            monitor-enter(r4)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x003c }
            int r0 = android.os.Binder.getCallingPid()     // Catch:{ all -> 0x003c }
            int r1 = android.os.Process.myPid()     // Catch:{ all -> 0x003c }
            if (r0 != r1) goto L_0x0013
            monitor-exit(r4)     // Catch:{ all -> 0x003c }
            resetPriorityAfterLockedSection()
            return
        L_0x0013:
            com.android.server.am.ActivityManagerService$PidMap r1 = r4.mPidsSelfLocked     // Catch:{ all -> 0x003c }
            monitor-enter(r1)     // Catch:{ all -> 0x003c }
            com.android.server.am.ActivityManagerService$PidMap r2 = r4.mPidsSelfLocked     // Catch:{ all -> 0x0039 }
            int r3 = android.os.Binder.getCallingPid()     // Catch:{ all -> 0x0039 }
            com.android.server.am.ProcessRecord r2 = r2.get(r3)     // Catch:{ all -> 0x0039 }
            monitor-exit(r1)     // Catch:{ all -> 0x0039 }
            if (r2 == 0) goto L_0x0034
            android.util.ArraySet<java.lang.String> r1 = r2.pkgDeps     // Catch:{ all -> 0x003c }
            if (r1 != 0) goto L_0x002f
            android.util.ArraySet r1 = new android.util.ArraySet     // Catch:{ all -> 0x003c }
            r3 = 1
            r1.<init>(r3)     // Catch:{ all -> 0x003c }
            r2.pkgDeps = r1     // Catch:{ all -> 0x003c }
        L_0x002f:
            android.util.ArraySet<java.lang.String> r1 = r2.pkgDeps     // Catch:{ all -> 0x003c }
            r1.add(r5)     // Catch:{ all -> 0x003c }
        L_0x0034:
            monitor-exit(r4)     // Catch:{ all -> 0x003c }
            resetPriorityAfterLockedSection()
            return
        L_0x0039:
            r2 = move-exception
            monitor-exit(r1)     // Catch:{ all -> 0x0039 }
            throw r2     // Catch:{ all -> 0x003c }
        L_0x003c:
            r0 = move-exception
            monitor-exit(r4)     // Catch:{ all -> 0x003c }
            resetPriorityAfterLockedSection()
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.addPackageDependency(java.lang.String):void");
    }

    public void killApplication(String pkg, int appId, int userId, String reason) {
        if (pkg != null) {
            if (appId < 0) {
                Slog.w("ActivityManager", "Invalid appid specified for pkg : " + pkg);
                return;
            }
            int callerUid = Binder.getCallingUid();
            if (UserHandle.getAppId(callerUid) == 1000) {
                Message msg = this.mHandler.obtainMessage(22);
                msg.arg1 = appId;
                msg.arg2 = userId;
                Bundle bundle = new Bundle();
                bundle.putString(SplitScreenReporter.STR_PKG, pkg);
                bundle.putString(PhoneWindowManager.SYSTEM_DIALOG_REASON_KEY, reason);
                msg.obj = bundle;
                this.mHandler.sendMessage(msg);
                return;
            }
            throw new SecurityException(callerUid + " cannot kill pkg: " + pkg);
        }
    }

    public void closeSystemDialogs(String reason) {
        this.mAtmInternal.closeSystemDialogs(reason);
    }

    /* Debug info: failed to restart local var, previous not found, register: 57 */
    /*  JADX ERROR: IndexOutOfBoundsException in pass: RegionMakerVisitor
        java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
        	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
        	at java.util.ArrayList.get(ArrayList.java:433)
        	at jadx.core.dex.nodes.InsnNode.getArg(InsnNode.java:101)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:611)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:561)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:598)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processLoop(RegionMaker.java:225)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:106)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:49)
        */
    public android.os.Debug.MemoryInfo[] getProcessMemoryInfo(int[] r58) {
        /*
            r57 = this;
            r1 = r57
            r2 = r58
            java.lang.String r0 = "getProcessMemoryInfo"
            r1.enforceNotIsolatedCaller(r0)
            long r3 = android.os.SystemClock.uptimeMillis()
            com.android.server.am.ActivityManagerConstants r0 = r1.mConstants
            long r5 = r0.MEMORY_INFO_THROTTLE_TIME
            long r5 = r3 - r5
            int r7 = android.os.Binder.getCallingPid()
            int r8 = android.os.Binder.getCallingUid()
            int r9 = android.os.UserHandle.getUserId(r8)
            java.lang.String r0 = "android.permission.INTERACT_ACROSS_USERS_FULL"
            int r0 = android.app.ActivityManager.checkUidPermission(r0, r8)
            r11 = 1
            if (r0 != 0) goto L_0x002a
            r0 = r11
            goto L_0x002b
        L_0x002a:
            r0 = 0
        L_0x002b:
            r12 = r0
            com.android.server.wm.ActivityTaskManagerInternal r0 = r1.mAtmInternal
            java.lang.String r13 = "getProcessMemoryInfo"
            boolean r13 = r0.isGetTasksAllowed(r13, r7, r8)
            int r0 = r2.length
            android.os.Debug$MemoryInfo[] r14 = new android.os.Debug.MemoryInfo[r0]
            int r0 = r2.length
            int r0 = r0 - r11
            r15 = r0
        L_0x003a:
            if (r15 < 0) goto L_0x027b
            android.os.Debug$MemoryInfo r0 = new android.os.Debug$MemoryInfo
            r0.<init>()
            r14[r15] = r0
            monitor-enter(r57)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0267 }
            com.android.server.am.ActivityManagerService$PidMap r10 = r1.mPidsSelfLocked     // Catch:{ all -> 0x0267 }
            monitor-enter(r10)     // Catch:{ all -> 0x0267 }
            com.android.server.am.ActivityManagerService$PidMap r0 = r1.mPidsSelfLocked     // Catch:{ all -> 0x0256 }
            r11 = r2[r15]     // Catch:{ all -> 0x0256 }
            com.android.server.am.ProcessRecord r0 = r0.get(r11)     // Catch:{ all -> 0x0256 }
            r11 = r0
            if (r11 == 0) goto L_0x0067
            int r0 = r11.setAdj     // Catch:{ all -> 0x0058 }
            goto L_0x0068
        L_0x0058:
            r0 = move-exception
            r19 = r3
            r23 = r5
            r38 = r7
            r39 = r8
            r40 = r9
            r16 = r12
            goto L_0x0263
        L_0x0067:
            r0 = 0
        L_0x0068:
            r17 = r0
            monitor-exit(r10)     // Catch:{ all -> 0x0256 }
            monitor-exit(r57)     // Catch:{ all -> 0x0267 }
            resetPriorityAfterLockedSection()
            r0 = -1
            if (r11 == 0) goto L_0x0075
            int r10 = r11.uid
            goto L_0x0076
        L_0x0075:
            r10 = r0
        L_0x0076:
            if (r11 == 0) goto L_0x007c
            int r0 = android.os.UserHandle.getUserId(r10)
        L_0x007c:
            r18 = r0
            if (r8 == r10) goto L_0x00a9
            if (r13 != 0) goto L_0x0090
            r19 = r3
            r23 = r5
            r38 = r7
            r39 = r8
            r40 = r9
            r16 = r12
            goto L_0x0243
        L_0x0090:
            if (r12 != 0) goto L_0x00a4
            r19 = r3
            r3 = r18
            if (r3 == r9) goto L_0x00ad
            r23 = r5
            r38 = r7
            r39 = r8
            r40 = r9
            r16 = r12
            goto L_0x0243
        L_0x00a4:
            r19 = r3
            r3 = r18
            goto L_0x00ad
        L_0x00a9:
            r19 = r3
            r3 = r18
        L_0x00ad:
            if (r11 == 0) goto L_0x00ce
            r18 = r3
            long r3 = r11.lastMemInfoTime
            int r0 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1))
            if (r0 < 0) goto L_0x00d0
            android.os.Debug$MemoryInfo r0 = r11.lastMemInfo
            if (r0 == 0) goto L_0x00d0
            r0 = r14[r15]
            android.os.Debug$MemoryInfo r3 = r11.lastMemInfo
            r0.set(r3)
            r23 = r5
            r38 = r7
            r39 = r8
            r40 = r9
            r16 = r12
            goto L_0x0243
        L_0x00ce:
            r18 = r3
        L_0x00d0:
            long r3 = android.os.SystemClock.currentThreadTimeMillis()
            android.os.Debug$MemoryInfo r0 = new android.os.Debug$MemoryInfo
            r0.<init>()
            r21 = r0
            r0 = r2[r15]
            r2 = r21
            android.os.Debug.getMemoryInfo(r0, r2)
            long r21 = android.os.SystemClock.currentThreadTimeMillis()
            r0 = r14[r15]
            r0.set(r2)
            if (r11 == 0) goto L_0x0231
            monitor-enter(r57)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0217 }
            r11.lastMemInfo = r2     // Catch:{ all -> 0x0217 }
            r23 = r5
            long r5 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x0205 }
            r11.lastMemInfoTime = r5     // Catch:{ all -> 0x0205 }
            android.app.IApplicationThread r0 = r11.thread     // Catch:{ all -> 0x0205 }
            if (r0 == 0) goto L_0x01f0
            int r0 = r11.setAdj     // Catch:{ all -> 0x0205 }
            r5 = r17
            if (r0 != r5) goto L_0x01dd
            com.android.internal.app.procstats.ProcessState r0 = r11.baseProcessTracker     // Catch:{ all -> 0x01c9 }
            r6 = r14[r15]     // Catch:{ all -> 0x01c9 }
            int r6 = r6.getTotalPss()     // Catch:{ all -> 0x01c9 }
            r17 = r5
            long r5 = (long) r6
            r25 = r14[r15]     // Catch:{ all -> 0x0205 }
            r37 = r2
            int r2 = r25.getTotalUss()     // Catch:{ all -> 0x01b8 }
            r38 = r7
            r39 = r8
            long r7 = (long) r2
            r2 = r14[r15]     // Catch:{ all -> 0x01ab }
            int r2 = r2.getTotalRss()     // Catch:{ all -> 0x01ab }
            r40 = r9
            r41 = r10
            long r9 = (long) r2
            r32 = 0
            r33 = 4
            long r34 = r21 - r3
            com.android.server.am.ProcessRecord$PackageList r2 = r11.pkgList     // Catch:{ all -> 0x01a2 }
            android.util.ArrayMap<java.lang.String, com.android.internal.app.procstats.ProcessStats$ProcessStateHolder> r2 = r2.mPkgList     // Catch:{ all -> 0x01a2 }
            r25 = r0
            r26 = r5
            r28 = r7
            r30 = r9
            r36 = r2
            r25.addPss(r26, r28, r30, r32, r33, r34, r36)     // Catch:{ all -> 0x01a2 }
            com.android.server.am.ProcessRecord$PackageList r0 = r11.pkgList     // Catch:{ all -> 0x01a2 }
            int r0 = r0.size()     // Catch:{ all -> 0x01a2 }
            r2 = 1
            int r0 = r0 - r2
        L_0x0147:
            if (r0 < 0) goto L_0x019a
            com.android.server.am.ProcessRecord$PackageList r5 = r11.pkgList     // Catch:{ all -> 0x01a2 }
            com.android.internal.app.procstats.ProcessStats$ProcessStateHolder r5 = r5.valueAt(r0)     // Catch:{ all -> 0x01a2 }
            r42 = 18
            android.content.pm.ApplicationInfo r6 = r11.info     // Catch:{ all -> 0x01a2 }
            int r6 = r6.uid     // Catch:{ all -> 0x01a2 }
            com.android.internal.app.procstats.ProcessState r7 = r5.state     // Catch:{ all -> 0x01a2 }
            java.lang.String r44 = r7.getName()     // Catch:{ all -> 0x01a2 }
            com.android.internal.app.procstats.ProcessState r7 = r5.state     // Catch:{ all -> 0x01a2 }
            java.lang.String r45 = r7.getPackage()     // Catch:{ all -> 0x01a2 }
            r7 = r14[r15]     // Catch:{ all -> 0x01a2 }
            int r7 = r7.getTotalPss()     // Catch:{ all -> 0x01a2 }
            long r7 = (long) r7     // Catch:{ all -> 0x01a2 }
            r9 = r14[r15]     // Catch:{ all -> 0x01a2 }
            int r9 = r9.getTotalUss()     // Catch:{ all -> 0x01a2 }
            long r9 = (long) r9     // Catch:{ all -> 0x01a2 }
            r16 = r14[r15]     // Catch:{ all -> 0x01a2 }
            int r2 = r16.getTotalRss()     // Catch:{ all -> 0x01a2 }
            r26 = r11
            r16 = r12
            long r11 = (long) r2
            r52 = 4
            long r53 = r21 - r3
            r27 = r3
            long r2 = r5.appVersion     // Catch:{ all -> 0x022f }
            r43 = r6
            r46 = r7
            r48 = r9
            r50 = r11
            r55 = r2
            android.util.StatsLog.write(r42, r43, r44, r45, r46, r48, r50, r52, r53, r55)     // Catch:{ all -> 0x022f }
            int r0 = r0 + -1
            r12 = r16
            r11 = r26
            r3 = r27
            r2 = 1
            goto L_0x0147
        L_0x019a:
            r27 = r3
            r26 = r11
            r16 = r12
            goto L_0x0200
        L_0x01a2:
            r0 = move-exception
            r27 = r3
            r26 = r11
            r16 = r12
            goto L_0x022a
        L_0x01ab:
            r0 = move-exception
            r27 = r3
            r40 = r9
            r41 = r10
            r26 = r11
            r16 = r12
            goto L_0x022a
        L_0x01b8:
            r0 = move-exception
            r27 = r3
            r38 = r7
            r39 = r8
            r40 = r9
            r41 = r10
            r26 = r11
            r16 = r12
            goto L_0x022a
        L_0x01c9:
            r0 = move-exception
            r37 = r2
            r27 = r3
            r17 = r5
            r38 = r7
            r39 = r8
            r40 = r9
            r41 = r10
            r26 = r11
            r16 = r12
            goto L_0x022a
        L_0x01dd:
            r37 = r2
            r27 = r3
            r17 = r5
            r38 = r7
            r39 = r8
            r40 = r9
            r41 = r10
            r26 = r11
            r16 = r12
            goto L_0x0200
        L_0x01f0:
            r37 = r2
            r27 = r3
            r38 = r7
            r39 = r8
            r40 = r9
            r41 = r10
            r26 = r11
            r16 = r12
        L_0x0200:
            monitor-exit(r57)     // Catch:{ all -> 0x022f }
            resetPriorityAfterLockedSection()
            goto L_0x0243
        L_0x0205:
            r0 = move-exception
            r37 = r2
            r27 = r3
            r38 = r7
            r39 = r8
            r40 = r9
            r41 = r10
            r26 = r11
            r16 = r12
            goto L_0x022a
        L_0x0217:
            r0 = move-exception
            r37 = r2
            r27 = r3
            r23 = r5
            r38 = r7
            r39 = r8
            r40 = r9
            r41 = r10
            r26 = r11
            r16 = r12
        L_0x022a:
            monitor-exit(r57)     // Catch:{ all -> 0x022f }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x022f:
            r0 = move-exception
            goto L_0x022a
        L_0x0231:
            r37 = r2
            r27 = r3
            r23 = r5
            r38 = r7
            r39 = r8
            r40 = r9
            r41 = r10
            r26 = r11
            r16 = r12
        L_0x0243:
            int r15 = r15 + -1
            r2 = r58
            r12 = r16
            r3 = r19
            r5 = r23
            r7 = r38
            r8 = r39
            r9 = r40
            r11 = 1
            goto L_0x003a
        L_0x0256:
            r0 = move-exception
            r19 = r3
            r23 = r5
            r38 = r7
            r39 = r8
            r40 = r9
            r16 = r12
        L_0x0263:
            monitor-exit(r10)     // Catch:{ all -> 0x0265 }
            throw r0     // Catch:{ all -> 0x0279 }
        L_0x0265:
            r0 = move-exception
            goto L_0x0263
        L_0x0267:
            r0 = move-exception
            r19 = r3
            r23 = r5
            r38 = r7
            r39 = r8
            r40 = r9
            r16 = r12
        L_0x0274:
            monitor-exit(r57)     // Catch:{ all -> 0x0279 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0279:
            r0 = move-exception
            goto L_0x0274
        L_0x027b:
            return r14
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.getProcessMemoryInfo(int[]):android.os.Debug$MemoryInfo[]");
    }

    /* Debug info: failed to restart local var, previous not found, register: 46 */
    /*  JADX ERROR: IndexOutOfBoundsException in pass: RegionMakerVisitor
        java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
        	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
        	at java.util.ArrayList.get(ArrayList.java:433)
        	at jadx.core.dex.nodes.InsnNode.getArg(InsnNode.java:101)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:611)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:561)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:598)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processLoop(RegionMaker.java:225)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:106)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:49)
        */
    public long[] getProcessPss(int[] r47) {
        /*
            r46 = this;
            r1 = r46
            r2 = r47
            java.lang.String r0 = "getProcessPss"
            r1.enforceNotIsolatedCaller(r0)
            int r3 = android.os.Binder.getCallingPid()
            int r4 = android.os.Binder.getCallingUid()
            int r5 = android.os.UserHandle.getUserId(r4)
            java.lang.String r0 = "android.permission.INTERACT_ACROSS_USERS_FULL"
            int r0 = android.app.ActivityManager.checkUidPermission(r0, r4)
            r6 = 1
            r7 = 0
            if (r0 != 0) goto L_0x0021
            r0 = r6
            goto L_0x0022
        L_0x0021:
            r0 = r7
        L_0x0022:
            r8 = r0
            com.android.server.wm.ActivityTaskManagerInternal r0 = r1.mAtmInternal
            java.lang.String r9 = "getProcessPss"
            boolean r9 = r0.isGetTasksAllowed(r9, r3, r4)
            int r0 = r2.length
            long[] r10 = new long[r0]
            int r0 = r2.length
            int r0 = r0 - r6
            r11 = r0
        L_0x0031:
            if (r11 < 0) goto L_0x0118
            monitor-enter(r46)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x010e }
            com.android.server.am.ActivityManagerService$PidMap r12 = r1.mPidsSelfLocked     // Catch:{ all -> 0x010e }
            monitor-enter(r12)     // Catch:{ all -> 0x010e }
            com.android.server.am.ActivityManagerService$PidMap r0 = r1.mPidsSelfLocked     // Catch:{ all -> 0x0107 }
            r13 = r2[r11]     // Catch:{ all -> 0x0107 }
            com.android.server.am.ProcessRecord r0 = r0.get(r13)     // Catch:{ all -> 0x0107 }
            r13 = r0
            if (r13 == 0) goto L_0x004d
            int r0 = r13.setAdj     // Catch:{ all -> 0x0048 }
            goto L_0x004e
        L_0x0048:
            r0 = move-exception
            r20 = r3
            goto L_0x010a
        L_0x004d:
            r0 = r7
        L_0x004e:
            r14 = r0
            monitor-exit(r12)     // Catch:{ all -> 0x0107 }
            monitor-exit(r46)     // Catch:{ all -> 0x010e }
            resetPriorityAfterLockedSection()
            if (r9 == 0) goto L_0x00fb
            if (r8 != 0) goto L_0x0064
            int r0 = r13.uid
            int r0 = android.os.UserHandle.getUserId(r0)
            if (r0 == r5) goto L_0x0064
            r20 = r3
            goto L_0x00fd
        L_0x0064:
            r0 = 3
            long[] r12 = new long[r0]
            long r15 = android.os.SystemClock.currentThreadTimeMillis()
            r0 = r2[r11]
            r6 = 0
            long r17 = android.os.Debug.getPss(r0, r12, r6)
            r10[r11] = r17
            long r17 = android.os.SystemClock.currentThreadTimeMillis()
            if (r13 == 0) goto L_0x00f8
            monitor-enter(r46)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x00ee }
            android.app.IApplicationThread r0 = r13.thread     // Catch:{ all -> 0x00ee }
            if (r0 == 0) goto L_0x00e7
            int r0 = r13.setAdj     // Catch:{ all -> 0x00ee }
            if (r0 != r14) goto L_0x00e7
            com.android.internal.app.procstats.ProcessState r0 = r13.baseProcessTracker     // Catch:{ all -> 0x00ee }
            r20 = r10[r11]     // Catch:{ all -> 0x00ee }
            r22 = r12[r7]     // Catch:{ all -> 0x00ee }
            r6 = 2
            r24 = r12[r6]     // Catch:{ all -> 0x00ee }
            r26 = 0
            r27 = 3
            long r28 = r17 - r15
            com.android.server.am.ProcessRecord$PackageList r6 = r13.pkgList     // Catch:{ all -> 0x00ee }
            android.util.ArrayMap<java.lang.String, com.android.internal.app.procstats.ProcessStats$ProcessStateHolder> r6 = r6.mPkgList     // Catch:{ all -> 0x00ee }
            r19 = r0
            r30 = r6
            r19.addPss(r20, r22, r24, r26, r27, r28, r30)     // Catch:{ all -> 0x00ee }
            com.android.server.am.ProcessRecord$PackageList r0 = r13.pkgList     // Catch:{ all -> 0x00ee }
            int r0 = r0.size()     // Catch:{ all -> 0x00ee }
            r6 = 1
            int r0 = r0 - r6
        L_0x00a8:
            if (r0 < 0) goto L_0x00e4
            com.android.server.am.ProcessRecord$PackageList r6 = r13.pkgList     // Catch:{ all -> 0x00ee }
            com.android.internal.app.procstats.ProcessStats$ProcessStateHolder r6 = r6.valueAt(r0)     // Catch:{ all -> 0x00ee }
            r31 = 18
            android.content.pm.ApplicationInfo r7 = r13.info     // Catch:{ all -> 0x00ee }
            int r7 = r7.uid     // Catch:{ all -> 0x00ee }
            com.android.internal.app.procstats.ProcessState r2 = r6.state     // Catch:{ all -> 0x00ee }
            java.lang.String r33 = r2.getName()     // Catch:{ all -> 0x00ee }
            com.android.internal.app.procstats.ProcessState r2 = r6.state     // Catch:{ all -> 0x00ee }
            java.lang.String r34 = r2.getPackage()     // Catch:{ all -> 0x00ee }
            r35 = r10[r11]     // Catch:{ all -> 0x00ee }
            r2 = 0
            r37 = r12[r2]     // Catch:{ all -> 0x00ee }
            r19 = 2
            r39 = r12[r19]     // Catch:{ all -> 0x00ee }
            r41 = 3
            long r42 = r17 - r15
            r20 = r3
            long r2 = r6.appVersion     // Catch:{ all -> 0x00f6 }
            r32 = r7
            r44 = r2
            android.util.StatsLog.write(r31, r32, r33, r34, r35, r37, r39, r41, r42, r44)     // Catch:{ all -> 0x00f6 }
            int r0 = r0 + -1
            r2 = r47
            r3 = r20
            r6 = 1
            r7 = 0
            goto L_0x00a8
        L_0x00e4:
            r20 = r3
            goto L_0x00e9
        L_0x00e7:
            r20 = r3
        L_0x00e9:
            monitor-exit(r46)     // Catch:{ all -> 0x00f6 }
            resetPriorityAfterLockedSection()
            goto L_0x00fd
        L_0x00ee:
            r0 = move-exception
            r20 = r3
        L_0x00f1:
            monitor-exit(r46)     // Catch:{ all -> 0x00f6 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x00f6:
            r0 = move-exception
            goto L_0x00f1
        L_0x00f8:
            r20 = r3
            goto L_0x00fd
        L_0x00fb:
            r20 = r3
        L_0x00fd:
            int r11 = r11 + -1
            r2 = r47
            r3 = r20
            r6 = 1
            r7 = 0
            goto L_0x0031
        L_0x0107:
            r0 = move-exception
            r20 = r3
        L_0x010a:
            monitor-exit(r12)     // Catch:{ all -> 0x010c }
            throw r0     // Catch:{ all -> 0x0116 }
        L_0x010c:
            r0 = move-exception
            goto L_0x010a
        L_0x010e:
            r0 = move-exception
            r20 = r3
        L_0x0111:
            monitor-exit(r46)     // Catch:{ all -> 0x0116 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0116:
            r0 = move-exception
            goto L_0x0111
        L_0x0118:
            return r10
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.getProcessPss(int[]):long[]");
    }

    public void killApplicationProcess(String processName, int uid) {
        if (processName != null) {
            int callerUid = Binder.getCallingUid();
            if (callerUid == 1000) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        ProcessRecord app = getProcessRecordLocked(processName, uid, true);
                        if (app == null || app.thread == null) {
                            Slog.w("ActivityManager", "Process/uid not found attempting kill of " + processName + " / " + uid);
                        } else {
                            try {
                                app.thread.scheduleSuicide();
                            } catch (RemoteException e) {
                            }
                        }
                    } catch (Throwable th) {
                        while (true) {
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                }
                resetPriorityAfterLockedSection();
                return;
            }
            throw new SecurityException(callerUid + " cannot kill app process: " + processName);
        }
    }

    @GuardedBy({"this"})
    private void forceStopPackageLocked(String packageName, int uid, String reason) {
        forceStopPackageLocked(packageName, UserHandle.getAppId(uid), false, false, true, false, false, UserHandle.getUserId(uid), reason);
    }

    /* access modifiers changed from: private */
    @GuardedBy({"this"})
    public void finishForceStopPackageLocked(String packageName, int uid) {
        Intent intent = new Intent("android.intent.action.PACKAGE_RESTARTED", Uri.fromParts(com.android.server.pm.Settings.ATTR_PACKAGE, packageName, (String) null));
        if (!this.mProcessesReady) {
            intent.addFlags(1342177280);
        }
        intent.putExtra("android.intent.extra.UID", uid);
        intent.putExtra("android.intent.extra.user_handle", UserHandle.getUserId(uid));
        broadcastIntentLocked((ProcessRecord) null, (String) null, intent, (String) null, (IIntentReceiver) null, 0, (String) null, (Bundle) null, (String[]) null, -1, (Bundle) null, false, false, MY_PID, 1000, Binder.getCallingUid(), Binder.getCallingPid(), UserHandle.getUserId(uid));
    }

    private void cleanupDisabledPackageComponentsLocked(String packageName, int userId, String[] changedClasses) {
        Set<String> disabledClasses;
        int i;
        String str = packageName;
        int i2 = userId;
        String[] strArr = changedClasses;
        IPackageManager pm = AppGlobals.getPackageManager();
        if (strArr != null) {
            int enabled = 0;
            int i3 = strArr.length - 1;
            int i4 = 0;
            Set<String> disabledClasses2 = null;
            while (true) {
                if (i3 < 0) {
                    disabledClasses = disabledClasses2;
                    int i5 = enabled;
                    i = i4;
                    break;
                }
                String changedClass = strArr[i3];
                int i6 = 0;
                if (changedClass.equals(str)) {
                    try {
                        enabled = pm.getApplicationEnabledSetting(str, i2 != -1 ? i2 : 0);
                        if (!(enabled == 1 || enabled == 0)) {
                            i6 = 1;
                        }
                        i4 = i6;
                        if (i4 != 0) {
                            disabledClasses = null;
                            int i7 = enabled;
                            i = i4;
                            break;
                        }
                    } catch (Exception e) {
                        Exception exc = e;
                        return;
                    }
                } else {
                    try {
                        ComponentName componentName = new ComponentName(str, changedClass);
                        if (i2 != -1) {
                            i6 = i2;
                        }
                        int enabled2 = pm.getComponentEnabledSetting(componentName, i6);
                        if (enabled2 == 1 || enabled2 == 0) {
                            enabled = enabled2;
                        } else {
                            if (disabledClasses2 == null) {
                                disabledClasses2 = new ArraySet<>(strArr.length);
                            }
                            disabledClasses2.add(changedClass);
                            enabled = enabled2;
                        }
                    } catch (Exception e2) {
                        return;
                    }
                }
                i3--;
            }
            if (i != 0 || disabledClasses != null) {
                this.mAtmInternal.cleanupDisabledPackageComponents(str, disabledClasses, i2, this.mBooted);
                String str2 = packageName;
                Set<String> set = disabledClasses;
                this.mServices.bringDownDisabledPackageServicesLocked(str2, set, userId, false, true);
                ArrayList<ContentProviderRecord> providers = new ArrayList<>();
                ArrayList<ContentProviderRecord> providers2 = providers;
                this.mProviderMap.collectPackageProvidersLocked(str2, set, true, false, userId, providers);
                for (int i8 = providers2.size() - 1; i8 >= 0; i8--) {
                    removeDyingProviderLocked((ProcessRecord) null, providers2.get(i8), true);
                }
                for (int i9 = this.mBroadcastQueues.length - 1; i9 >= 0; i9--) {
                    this.mBroadcastQueues[i9].cleanupDisabledPackageReceiversLocked(str, disabledClasses, i2, true);
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public final boolean clearBroadcastQueueForUserLocked(int userId) {
        boolean didSomething = false;
        for (int i = this.mBroadcastQueues.length - 1; i >= 0; i--) {
            didSomething |= this.mBroadcastQueues[i].cleanupDisabledPackageReceiversLocked((String) null, (Set<String>) null, userId, true);
        }
        return didSomething;
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Removed duplicated region for block: B:13:0x0032  */
    /* JADX WARNING: Removed duplicated region for block: B:26:0x009e  */
    /* JADX WARNING: Removed duplicated region for block: B:27:0x00ab  */
    /* JADX WARNING: Removed duplicated region for block: B:30:0x00f4  */
    /* JADX WARNING: Removed duplicated region for block: B:33:0x00fc  */
    /* JADX WARNING: Removed duplicated region for block: B:35:0x0100  */
    /* JADX WARNING: Removed duplicated region for block: B:38:0x011d  */
    /* JADX WARNING: Removed duplicated region for block: B:44:0x0129 A[LOOP:0: B:42:0x0126->B:44:0x0129, LOOP_END] */
    /* JADX WARNING: Removed duplicated region for block: B:47:0x013d  */
    /* JADX WARNING: Removed duplicated region for block: B:54:0x015d A[ADDED_TO_REGION] */
    @com.android.internal.annotations.GuardedBy({"this"})
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final boolean forceStopPackageLocked(java.lang.String r19, int r20, boolean r21, boolean r22, boolean r23, boolean r24, boolean r25, int r26, java.lang.String r27) {
        /*
            r18 = this;
            r1 = r18
            r13 = r19
            r14 = r23
            r15 = r26
            r12 = r27
            java.lang.String r2 = "ActivityManager"
            r0 = -1
            if (r15 != r0) goto L_0x0016
            if (r13 != 0) goto L_0x0016
            java.lang.String r0 = "Can't force stop all processes of all users, that is insane!"
            android.util.Slog.w(r2, r0)
        L_0x0016:
            r11 = 0
            if (r20 >= 0) goto L_0x002b
            if (r13 == 0) goto L_0x002b
            android.content.pm.IPackageManager r0 = android.app.AppGlobals.getPackageManager()     // Catch:{ RemoteException -> 0x002a }
            r3 = 268435456(0x10000000, float:2.5243549E-29)
            int r0 = r0.getPackageUid(r13, r3, r11)     // Catch:{ RemoteException -> 0x002a }
            int r0 = android.os.UserHandle.getAppId(r0)     // Catch:{ RemoteException -> 0x002a }
            goto L_0x002d
        L_0x002a:
            r0 = move-exception
        L_0x002b:
            r0 = r20
        L_0x002d:
            java.lang.String r3 = ": "
            r10 = 1
            if (r14 == 0) goto L_0x008c
            if (r13 == 0) goto L_0x005f
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            r4.<init>()
            java.lang.String r5 = "Force stopping "
            r4.append(r5)
            r4.append(r13)
            java.lang.String r5 = " appid="
            r4.append(r5)
            r4.append(r0)
            java.lang.String r5 = " user="
            r4.append(r5)
            r4.append(r15)
            r4.append(r3)
            r4.append(r12)
            java.lang.String r4 = r4.toString()
            android.util.Slog.i(r2, r4)
            goto L_0x0079
        L_0x005f:
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            r4.<init>()
            java.lang.String r5 = "Force stopping u"
            r4.append(r5)
            r4.append(r15)
            r4.append(r3)
            r4.append(r12)
            java.lang.String r4 = r4.toString()
            android.util.Slog.i(r2, r4)
        L_0x0079:
            android.util.BoostFramework r2 = mUxPerf
            if (r2 == 0) goto L_0x0082
            r4 = 4243(0x1093, float:5.946E-42)
            r2.perfHint(r4, r13, r0, r11)
        L_0x0082:
            com.android.server.am.AppErrors r2 = r1.mAppErrors
            if (r13 != 0) goto L_0x0088
            r4 = r10
            goto L_0x0089
        L_0x0088:
            r4 = r11
        L_0x0089:
            r2.resetProcessCrashTimeLocked(r4, r0, r15)
        L_0x008c:
            mForceStopKill = r10
            com.android.server.am.ProcessList r2 = r1.mProcessList
            r6 = -10000(0xffffffffffffd8f0, float:NaN)
            r8 = 1
            r16 = 1
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            r4.<init>()
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            if (r13 != 0) goto L_0x00ab
            r5.<init>()
            java.lang.String r7 = "stop user "
            r5.append(r7)
            r5.append(r15)
            goto L_0x00b7
        L_0x00ab:
            r5.<init>()
            java.lang.String r7 = "stop "
            r5.append(r7)
            r5.append(r13)
        L_0x00b7:
            java.lang.String r5 = r5.toString()
            r4.append(r5)
            r4.append(r3)
            r4.append(r12)
            java.lang.String r17 = r4.toString()
            r3 = r19
            r4 = r0
            r5 = r26
            r7 = r21
            r9 = r23
            r10 = r24
            r11 = r16
            r12 = r17
            boolean r2 = r2.killPackageProcessesLocked(r3, r4, r5, r6, r7, r8, r9, r10, r11, r12)
            com.android.server.wm.ActivityTaskManagerInternal r3 = r1.mAtmInternal
            r9 = r24
            boolean r3 = r3.onForceStopPackage(r13, r14, r9, r15)
            r8 = r2 | r3
            com.android.server.am.ActiveServices r2 = r1.mServices
            r4 = 0
            r3 = r19
            r6 = r24
            r7 = r23
            boolean r2 = r2.bringDownDisabledPackageServicesLocked(r3, r4, r5, r6, r7)
            if (r2 == 0) goto L_0x00fc
            if (r14 != 0) goto L_0x00f8
            r10 = 1
            return r10
        L_0x00f8:
            r10 = 1
            r8 = 1
            r11 = r8
            goto L_0x00fe
        L_0x00fc:
            r10 = 1
            r11 = r8
        L_0x00fe:
            if (r13 != 0) goto L_0x0105
            android.util.SparseArray<android.util.ArrayMap<java.lang.String, java.util.ArrayList<android.content.Intent>>> r2 = r1.mStickyBroadcasts
            r2.remove(r15)
        L_0x0105:
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r12 = r2
            com.android.server.am.ProviderMap r2 = r1.mProviderMap
            r4 = 0
            r3 = r19
            r5 = r23
            r6 = r24
            r7 = r26
            r8 = r12
            boolean r2 = r2.collectPackageProvidersLocked((java.lang.String) r3, (java.util.Set<java.lang.String>) r4, (boolean) r5, (boolean) r6, (int) r7, (java.util.ArrayList<com.android.server.am.ContentProviderRecord>) r8)
            if (r2 == 0) goto L_0x0121
            if (r14 != 0) goto L_0x0120
            return r10
        L_0x0120:
            r11 = 1
        L_0x0121:
            int r2 = r12.size()
            int r2 = r2 - r10
        L_0x0126:
            r3 = 0
            if (r2 < 0) goto L_0x0135
            java.lang.Object r4 = r12.get(r2)
            com.android.server.am.ContentProviderRecord r4 = (com.android.server.am.ContentProviderRecord) r4
            r1.removeDyingProviderLocked(r3, r4, r10)
            int r2 = r2 + -1
            goto L_0x0126
        L_0x0135:
            com.android.server.uri.UriGrantsManagerInternal r4 = r1.mUgmInternal
            r5 = 0
            r4.removeUriPermissionsForPackage(r13, r15, r5, r5)
            if (r14 == 0) goto L_0x0150
            com.android.server.am.BroadcastQueue[] r4 = r1.mBroadcastQueues
            int r4 = r4.length
            int r4 = r4 - r10
            r2 = r4
        L_0x0142:
            if (r2 < 0) goto L_0x0150
            com.android.server.am.BroadcastQueue[] r4 = r1.mBroadcastQueues
            r4 = r4[r2]
            boolean r4 = r4.cleanupDisabledPackageReceiversLocked(r13, r3, r15, r14)
            r11 = r11 | r4
            int r2 = r2 + -1
            goto L_0x0142
        L_0x0150:
            if (r13 == 0) goto L_0x0154
            if (r25 == 0) goto L_0x015b
        L_0x0154:
            com.android.server.am.PendingIntentController r3 = r1.mPendingIntentController
            boolean r3 = r3.removePendingIntentsForPackage(r13, r15, r0, r14)
            r11 = r11 | r3
        L_0x015b:
            if (r14 == 0) goto L_0x0173
            if (r22 == 0) goto L_0x016a
            if (r13 == 0) goto L_0x016a
            com.android.server.AttributeCache r3 = com.android.server.AttributeCache.instance()
            if (r3 == 0) goto L_0x016a
            r3.removePackage(r13)
        L_0x016a:
            boolean r3 = r1.mBooted
            if (r3 == 0) goto L_0x0173
            com.android.server.wm.ActivityTaskManagerInternal r3 = r1.mAtmInternal
            r3.resumeTopActivities(r10)
        L_0x0173:
            return r11
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.forceStopPackageLocked(java.lang.String, int, boolean, boolean, boolean, boolean, boolean, int, java.lang.String):boolean");
    }

    /* access modifiers changed from: private */
    @GuardedBy({"this"})
    public final void processContentProviderPublishTimedOutLocked(ProcessRecord app) {
        cleanupAppInLaunchingProvidersLocked(app, true);
        this.mProcessList.removeProcessLocked(app, false, true, "timeout publishing content providers");
    }

    /* access modifiers changed from: private */
    @GuardedBy({"this"})
    public final void processStartTimedOutLocked(final ProcessRecord app) {
        int pid = app.pid;
        if (this.mPidsSelfLocked.removeIfNoThread(app)) {
            Slog.w("ActivityManager", "Process " + app + " failed to attach");
            EventLog.writeEvent(EventLogTags.AM_PROCESS_START_TIMEOUT, new Object[]{Integer.valueOf(app.userId), Integer.valueOf(pid), Integer.valueOf(app.uid), app.processName});
            this.mProcessList.removeProcessNameLocked(app.processName, app.uid);
            this.mAtmInternal.clearHeavyWeightProcessIfEquals(app.getWindowProcessController());
            this.mBatteryStatsService.noteProcessFinish(app.processName, app.info.uid);
            cleanupAppInLaunchingProvidersLocked(app, true);
            this.mServices.processStartTimedOutLocked(app);
            app.kill("start timeout", true);
            if (app.isolated) {
                this.mBatteryStatsService.removeIsolatedUid(app.uid, app.info.uid);
            }
            removeLruProcessLocked(app);
            BackupRecord backupTarget = this.mBackupTargets.get(app.userId);
            if (backupTarget != null && backupTarget.app.pid == pid) {
                Slog.w("ActivityManager", "Unattached app died before backup, skipping");
                this.mHandler.post(new Runnable() {
                    public void run() {
                        try {
                            IBackupManager.Stub.asInterface(ServiceManager.getService(BatteryService.HealthServiceWrapper.INSTANCE_HEALTHD)).agentDisconnectedForUser(app.userId, app.info.packageName);
                        } catch (RemoteException e) {
                        }
                    }
                });
            }
            if (isPendingBroadcastProcessLocked(pid)) {
                Slog.w("ActivityManager", "Unattached app died before broadcast acknowledged, skipping");
                skipPendingBroadcastLocked(pid);
            }
            if (app.isPersistent() && !app.isolated) {
                this.mPersistentStartingProcesses.remove(app);
                addAppLocked(app.info, (String) null, false, (String) null);
                return;
            }
            return;
        }
        Slog.w("ActivityManager", "Spurious process start timeout - pid not known for " + app);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v13, resolved type: java.lang.Object[]} */
    /* JADX WARNING: type inference failed for: r14v1, types: [boolean] */
    /* JADX WARNING: type inference failed for: r14v15 */
    /* JADX WARNING: type inference failed for: r14v16 */
    /* JADX WARNING: type inference failed for: r18v13, types: [java.lang.String] */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:101:0x024b A[Catch:{ Exception -> 0x021d }] */
    /* JADX WARNING: Removed duplicated region for block: B:112:0x0262  */
    /* JADX WARNING: Removed duplicated region for block: B:116:0x0269 A[SYNTHETIC, Splitter:B:116:0x0269] */
    /* JADX WARNING: Removed duplicated region for block: B:119:0x0275 A[Catch:{ Exception -> 0x021d }] */
    /* JADX WARNING: Removed duplicated region for block: B:120:0x0278 A[SYNTHETIC, Splitter:B:120:0x0278] */
    /* JADX WARNING: Removed duplicated region for block: B:124:0x028c A[SYNTHETIC, Splitter:B:124:0x028c] */
    /* JADX WARNING: Removed duplicated region for block: B:137:0x02bf A[Catch:{ Exception -> 0x021d }] */
    /* JADX WARNING: Removed duplicated region for block: B:138:0x02cb A[Catch:{ Exception -> 0x021d }] */
    /* JADX WARNING: Removed duplicated region for block: B:141:0x02d7 A[Catch:{ Exception -> 0x021d }] */
    /* JADX WARNING: Removed duplicated region for block: B:152:0x030b A[SYNTHETIC, Splitter:B:152:0x030b] */
    /* JADX WARNING: Removed duplicated region for block: B:175:0x0384 A[SYNTHETIC, Splitter:B:175:0x0384] */
    /* JADX WARNING: Removed duplicated region for block: B:184:0x039a A[ADDED_TO_REGION] */
    /* JADX WARNING: Removed duplicated region for block: B:219:0x0430 A[Catch:{ Exception -> 0x0434 }] */
    /* JADX WARNING: Removed duplicated region for block: B:228:0x0448  */
    /* JADX WARNING: Removed duplicated region for block: B:236:0x0468  */
    /* JADX WARNING: Removed duplicated region for block: B:243:0x0477  */
    /* JADX WARNING: Removed duplicated region for block: B:253:0x04c0 A[SYNTHETIC, Splitter:B:253:0x04c0] */
    /* JADX WARNING: Removed duplicated region for block: B:256:0x04db  */
    /* JADX WARNING: Removed duplicated region for block: B:285:0x05a3 A[SYNTHETIC, Splitter:B:285:0x05a3] */
    /* JADX WARNING: Removed duplicated region for block: B:290:0x05b3  */
    /* JADX WARNING: Removed duplicated region for block: B:298:0x05e6 A[SYNTHETIC, Splitter:B:298:0x05e6] */
    /* JADX WARNING: Removed duplicated region for block: B:304:0x060c A[SYNTHETIC, Splitter:B:304:0x060c] */
    /* JADX WARNING: Removed duplicated region for block: B:313:0x0638  */
    /* JADX WARNING: Removed duplicated region for block: B:315:0x063c  */
    /* JADX WARNING: Removed duplicated region for block: B:321:0x0668  */
    /* JADX WARNING: Removed duplicated region for block: B:323:0x066c  */
    /* JADX WARNING: Removed duplicated region for block: B:332:0x06a5  */
    /* JADX WARNING: Removed duplicated region for block: B:334:0x06a9  */
    /* JADX WARNING: Removed duplicated region for block: B:336:0x06b4  */
    /* JADX WARNING: Removed duplicated region for block: B:39:0x00f8  */
    /* JADX WARNING: Removed duplicated region for block: B:47:0x0136  */
    /* JADX WARNING: Unknown variable types count: 1 */
    @com.android.internal.annotations.GuardedBy({"this"})
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private final boolean attachApplicationLocked(android.app.IApplicationThread r66, int r67, int r68, long r69) {
        /*
            r65 = this;
            r7 = r65
            r15 = r66
            r14 = r67
            r12 = r68
            r10 = r69
            long r8 = android.os.SystemClock.uptimeMillis()
            int r0 = MY_PID
            r13 = 3
            r4 = 0
            if (r14 == r0) goto L_0x00b5
            if (r14 < 0) goto L_0x00b5
            com.android.server.am.ActivityManagerService$PidMap r1 = r7.mPidsSelfLocked
            monitor-enter(r1)
            com.android.server.am.ActivityManagerService$PidMap r0 = r7.mPidsSelfLocked     // Catch:{ all -> 0x00b2 }
            com.android.server.am.ProcessRecord r0 = r0.get(r14)     // Catch:{ all -> 0x00b2 }
            monitor-exit(r1)     // Catch:{ all -> 0x00b2 }
            if (r0 == 0) goto L_0x00b6
            int r1 = r0.startUid
            if (r1 != r12) goto L_0x002c
            long r1 = r0.startSeq
            int r1 = (r1 > r10 ? 1 : (r1 == r10 ? 0 : -1))
            if (r1 == 0) goto L_0x00b6
        L_0x002c:
            r1 = 0
            com.android.server.am.ProcessList r2 = r7.mProcessList
            android.util.LongSparseArray<com.android.server.am.ProcessRecord> r2 = r2.mPendingStarts
            java.lang.Object r2 = r2.get(r10)
            r3 = r2
            com.android.server.am.ProcessRecord r3 = (com.android.server.am.ProcessRecord) r3
            if (r3 == 0) goto L_0x003e
            java.lang.String r1 = r3.processName
            r2 = r1
            goto L_0x003f
        L_0x003e:
            r2 = r1
        L_0x003f:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r6 = "attachApplicationLocked process:"
            r1.append(r6)
            r1.append(r2)
            java.lang.String r6 = " startSeq:"
            r1.append(r6)
            r1.append(r10)
            java.lang.String r6 = " pid:"
            r1.append(r6)
            r1.append(r14)
            java.lang.String r6 = " belongs to another existing app:"
            r1.append(r6)
            java.lang.String r6 = r0.processName
            r1.append(r6)
            java.lang.String r6 = " startSeq:"
            r1.append(r6)
            long r5 = r0.startSeq
            r1.append(r5)
            java.lang.String r6 = r1.toString()
            java.lang.String r1 = "ActivityManager"
            android.util.Slog.wtf(r1, r6)
            r1 = 1397638484(0x534e4554, float:8.859264E11)
            java.lang.Object[] r5 = new java.lang.Object[r13]
            java.lang.String r18 = "131105245"
            r5[r4] = r18
            int r4 = r0.startUid
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r17 = 1
            r5[r17] = r4
            r16 = 2
            r5[r16] = r6
            android.util.EventLog.writeEvent(r1, r5)
            r4 = 0
            r5 = 0
            r19 = -1
            r20 = 1
            r1 = r65
            r21 = r2
            r2 = r0
            r22 = r3
            r3 = r4
            r4 = r5
            r5 = r19
            r16 = r6
            r6 = r20
            r1.cleanUpApplicationRecordLocked(r2, r3, r4, r5, r6)
            com.android.server.am.ActivityManagerService$PidMap r1 = r7.mPidsSelfLocked
            r1.remove(r0)
            r0 = 0
            goto L_0x00b6
        L_0x00b2:
            r0 = move-exception
            monitor-exit(r1)     // Catch:{ all -> 0x00b2 }
            throw r0
        L_0x00b5:
            r0 = 0
        L_0x00b6:
            if (r0 != 0) goto L_0x00f2
            r1 = 0
            int r1 = (r10 > r1 ? 1 : (r10 == r1 ? 0 : -1))
            if (r1 <= 0) goto L_0x00f2
            com.android.server.am.ProcessList r1 = r7.mProcessList
            android.util.LongSparseArray<com.android.server.am.ProcessRecord> r1 = r1.mPendingStarts
            java.lang.Object r1 = r1.get(r10)
            com.android.server.am.ProcessRecord r1 = (com.android.server.am.ProcessRecord) r1
            if (r1 == 0) goto L_0x00ee
            int r2 = r1.startUid
            if (r2 != r12) goto L_0x00ee
            long r2 = r1.startSeq
            int r2 = (r2 > r10 ? 1 : (r2 == r10 ? 0 : -1))
            if (r2 != 0) goto L_0x00ee
            com.android.server.am.ProcessList r2 = r7.mProcessList
            boolean r3 = r1.isUsingWrapper()
            r4 = 1
            r5 = r8
            r8 = r2
            r9 = r1
            r10 = r67
            r11 = r3
            r2 = r13
            r12 = r69
            r3 = r14
            r14 = r4
            boolean r4 = r8.handleProcessStartedLocked(r9, r10, r11, r12, r14)
            if (r4 == 0) goto L_0x00f5
            r0 = r1
            goto L_0x00f6
        L_0x00ee:
            r5 = r8
            r2 = r13
            r3 = r14
            goto L_0x00f5
        L_0x00f2:
            r5 = r8
            r2 = r13
            r3 = r14
        L_0x00f5:
            r1 = r0
        L_0x00f6:
            if (r1 != 0) goto L_0x0136
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r2 = "No pending application record for pid "
            r0.append(r2)
            r0.append(r3)
            java.lang.String r2 = " (IApplicationThread "
            r0.append(r2)
            r0.append(r15)
            java.lang.String r2 = "); dropping process"
            r0.append(r2)
            java.lang.String r0 = r0.toString()
            java.lang.String r2 = "ActivityManager"
            android.util.Slog.w(r2, r0)
            r0 = 30033(0x7551, float:4.2085E-41)
            android.util.EventLog.writeEvent(r0, r3)
            if (r3 <= 0) goto L_0x012f
            int r0 = MY_PID
            if (r3 == r0) goto L_0x012f
            java.lang.String r2 = "attachApplicationLocked"
            com.android.server.am.ProcessRecordInjector.reportKillProcessEvent(r0, r3, r2)
            android.os.Process.killProcessQuiet(r67)
            goto L_0x0134
        L_0x012f:
            r66.scheduleExit()     // Catch:{ Exception -> 0x0133 }
            goto L_0x0134
        L_0x0133:
            r0 = move-exception
        L_0x0134:
            r4 = 0
            return r4
        L_0x0136:
            r4 = 0
            android.app.IApplicationThread r0 = r1.thread
            if (r0 == 0) goto L_0x0140
            r14 = 1
            r7.handleAppDiedLocked(r1, r14, r14)
            goto L_0x0141
        L_0x0140:
            r14 = 1
        L_0x0141:
            java.lang.String r13 = r1.processName
            com.android.server.am.ActivityManagerService$AppDeathRecipient r0 = new com.android.server.am.ActivityManagerService$AppDeathRecipient     // Catch:{ RemoteException -> 0x076e }
            r0.<init>(r1, r3, r15)     // Catch:{ RemoteException -> 0x076e }
            android.os.IBinder r8 = r66.asBinder()     // Catch:{ RemoteException -> 0x076e }
            r8.linkToDeath(r0, r4)     // Catch:{ RemoteException -> 0x076e }
            r1.deathRecipient = r0     // Catch:{ RemoteException -> 0x076e }
            r0 = 30010(0x753a, float:4.2053E-41)
            java.lang.Object[] r8 = new java.lang.Object[r2]
            int r9 = r1.userId
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)
            r8[r4] = r9
            int r9 = r1.pid
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)
            r8[r14] = r9
            java.lang.String r9 = r1.processName
            r10 = 2
            r8[r10] = r9
            android.util.EventLog.writeEvent(r0, r8)
            r0 = -10000(0xffffffffffffd8f0, float:NaN)
            r1.verifiedAdj = r0
            r1.setAdj = r0
            r1.curAdj = r0
            r1.setSchedGroup = r10
            r1.setCurrentSchedulingGroup(r10)
            r0 = 0
            r1.forcingToImportant = r0
            r7.updateProcessForegroundLocked(r1, r4, r4, r4)
            r1.hasShownUi = r4
            r1.setDebugging(r4)
            r1.cached = r4
            r1.killedByAm = r4
            r1.killed = r4
            int r8 = r1.userId
            boolean r8 = android.os.storage.StorageManager.isUserKeyUnlocked(r8)
            r1.unlocked = r8
            com.android.server.am.ActivityManagerService$MainHandler r8 = r7.mHandler
            r9 = 20
            r8.removeMessages(r9, r1)
            boolean r8 = r7.mProcessesReady
            if (r8 != 0) goto L_0x01aa
            android.content.pm.ApplicationInfo r8 = r1.info
            boolean r8 = r7.isAllowedWhileBooting(r8)
            if (r8 == 0) goto L_0x01a8
            goto L_0x01aa
        L_0x01a8:
            r8 = r4
            goto L_0x01ab
        L_0x01aa:
            r8 = r14
        L_0x01ab:
            r48 = r8
            if (r48 == 0) goto L_0x01b4
            java.util.List r8 = r7.generateApplicationProvidersLocked(r1)
            goto L_0x01b5
        L_0x01b4:
            r8 = r0
        L_0x01b5:
            r49 = r8
            if (r49 == 0) goto L_0x01d0
            boolean r8 = r7.checkAppInLaunchingProvidersLocked(r1)
            if (r8 == 0) goto L_0x01d0
            com.android.server.am.ActivityManagerService$MainHandler r8 = r7.mHandler
            r9 = 57
            android.os.Message r8 = r8.obtainMessage(r9)
            r8.obj = r1
            com.android.server.am.ActivityManagerService$MainHandler r9 = r7.mHandler
            r11 = 10000(0x2710, double:4.9407E-320)
            r9.sendMessageDelayed(r8, r11)
        L_0x01d0:
            java.lang.String r8 = "attachApplicationLocked: before bindApplication"
            r7.checkTime(r5, r8)
            if (r48 != 0) goto L_0x01ed
            java.lang.StringBuilder r8 = new java.lang.StringBuilder
            r8.<init>()
            java.lang.String r9 = "Launching preboot mode app: "
            r8.append(r9)
            r8.append(r1)
            java.lang.String r8 = r8.toString()
            java.lang.String r9 = "ActivityManager"
            android.util.Slog.i(r9, r8)
        L_0x01ed:
            android.util.SparseArray<com.android.server.am.BackupRecord> r8 = r7.mBackupTargets
            int r9 = r1.userId
            java.lang.Object r8 = r8.get(r9)
            r12 = r8
            com.android.server.am.BackupRecord r12 = (com.android.server.am.BackupRecord) r12
            r8 = 0
            java.lang.String r9 = r7.mDebugApp     // Catch:{ Exception -> 0x073e }
            if (r9 == 0) goto L_0x0223
            java.lang.String r9 = r7.mDebugApp     // Catch:{ Exception -> 0x021d }
            boolean r9 = r9.equals(r13)     // Catch:{ Exception -> 0x021d }
            if (r9 == 0) goto L_0x0223
            boolean r9 = r7.mWaitForDebugger     // Catch:{ Exception -> 0x021d }
            if (r9 == 0) goto L_0x020b
            r9 = r10
            goto L_0x020c
        L_0x020b:
            r9 = r14
        L_0x020c:
            r8 = r9
            r1.setDebugging(r14)     // Catch:{ Exception -> 0x021d }
            boolean r9 = r7.mDebugTransient     // Catch:{ Exception -> 0x021d }
            if (r9 == 0) goto L_0x0223
            java.lang.String r9 = r7.mOrigDebugApp     // Catch:{ Exception -> 0x021d }
            r7.mDebugApp = r9     // Catch:{ Exception -> 0x021d }
            boolean r9 = r7.mOrigWaitForDebugger     // Catch:{ Exception -> 0x021d }
            r7.mWaitForDebugger = r9     // Catch:{ Exception -> 0x021d }
            goto L_0x0223
        L_0x021d:
            r0 = move-exception
            r9 = r3
            r10 = r12
            r8 = r13
            goto L_0x0742
        L_0x0223:
            r50 = r8
            r8 = 0
            java.lang.String r9 = r7.mTrackAllocationApp     // Catch:{ Exception -> 0x073e }
            if (r9 == 0) goto L_0x0238
            java.lang.String r9 = r7.mTrackAllocationApp     // Catch:{ Exception -> 0x021d }
            boolean r9 = r9.equals(r13)     // Catch:{ Exception -> 0x021d }
            if (r9 == 0) goto L_0x0238
            r8 = 1
            r7.mTrackAllocationApp = r0     // Catch:{ Exception -> 0x021d }
            r51 = r8
            goto L_0x023a
        L_0x0238:
            r51 = r8
        L_0x023a:
            r8 = 0
            r9 = 10000(0x2710, float:1.4013E-41)
            if (r12 == 0) goto L_0x0262
            android.content.Context r11 = r7.mContext     // Catch:{ Exception -> 0x021d }
            android.content.pm.ApplicationInfo r0 = r12.appInfo     // Catch:{ Exception -> 0x021d }
            java.lang.String r0 = r0.packageName     // Catch:{ Exception -> 0x021d }
            boolean r0 = com.android.server.am.ActivityManagerServiceInjector.isStartWithBackupRestriction(r11, r0, r1)     // Catch:{ Exception -> 0x021d }
            if (r0 == 0) goto L_0x0262
            android.content.pm.ApplicationInfo r0 = r12.appInfo     // Catch:{ Exception -> 0x021d }
            int r0 = r0.uid     // Catch:{ Exception -> 0x021d }
            if (r0 < r9) goto L_0x025f
            int r0 = r12.backupMode     // Catch:{ Exception -> 0x021d }
            if (r0 == r10) goto L_0x025d
            int r0 = r12.backupMode     // Catch:{ Exception -> 0x021d }
            if (r0 == r2) goto L_0x025d
            int r0 = r12.backupMode     // Catch:{ Exception -> 0x021d }
            if (r0 != r14) goto L_0x025f
        L_0x025d:
            r0 = r14
            goto L_0x0260
        L_0x025f:
            r0 = r4
        L_0x0260:
            r8 = r0
            goto L_0x0263
        L_0x0262:
            r0 = r8
        L_0x0263:
            com.android.server.am.ActiveInstrumentation r2 = r1.getActiveInstrumentation()     // Catch:{ Exception -> 0x073e }
            if (r2 == 0) goto L_0x0273
            android.content.ComponentName r8 = r2.mClass     // Catch:{ Exception -> 0x021d }
            java.lang.String r8 = r8.getPackageName()     // Catch:{ Exception -> 0x021d }
            r11 = 7
            r7.notifyPackageUse(r8, r11)     // Catch:{ Exception -> 0x021d }
        L_0x0273:
            if (r2 == 0) goto L_0x0278
            android.content.pm.ApplicationInfo r8 = r2.mTargetInfo     // Catch:{ Exception -> 0x021d }
            goto L_0x027a
        L_0x0278:
            android.content.pm.ApplicationInfo r8 = r1.info     // Catch:{ Exception -> 0x073e }
        L_0x027a:
            r11 = r8
            android.content.res.CompatibilityInfo r8 = r7.compatibilityInfoForPackage(r11)     // Catch:{ Exception -> 0x073e }
            r1.compat = r8     // Catch:{ Exception -> 0x073e }
            r8 = 0
            r16 = 0
            com.android.server.am.ActivityManagerService$ProfileData r4 = r7.mProfileData     // Catch:{ Exception -> 0x073e }
            java.lang.String r4 = r4.getProfileApp()     // Catch:{ Exception -> 0x073e }
            if (r4 == 0) goto L_0x02e4
            com.android.server.am.ActivityManagerService$ProfileData r4 = r7.mProfileData     // Catch:{ Exception -> 0x021d }
            java.lang.String r4 = r4.getProfileApp()     // Catch:{ Exception -> 0x021d }
            boolean r4 = r4.equals(r13)     // Catch:{ Exception -> 0x021d }
            if (r4 == 0) goto L_0x02e4
            com.android.server.am.ActivityManagerService$ProfileData r4 = r7.mProfileData     // Catch:{ Exception -> 0x021d }
            r4.setProfileProc(r1)     // Catch:{ Exception -> 0x021d }
            com.android.server.am.ActivityManagerService$ProfileData r4 = r7.mProfileData     // Catch:{ Exception -> 0x021d }
            android.app.ProfilerInfo r4 = r4.getProfilerInfo()     // Catch:{ Exception -> 0x021d }
            if (r4 == 0) goto L_0x0305
            com.android.server.am.ActivityManagerService$ProfileData r4 = r7.mProfileData     // Catch:{ Exception -> 0x021d }
            android.app.ProfilerInfo r4 = r4.getProfilerInfo()     // Catch:{ Exception -> 0x021d }
            java.lang.String r4 = r4.profileFile     // Catch:{ Exception -> 0x021d }
            if (r4 != 0) goto L_0x02bc
            com.android.server.am.ActivityManagerService$ProfileData r4 = r7.mProfileData     // Catch:{ Exception -> 0x021d }
            android.app.ProfilerInfo r4 = r4.getProfilerInfo()     // Catch:{ Exception -> 0x021d }
            boolean r4 = r4.attachAgentDuringBind     // Catch:{ Exception -> 0x021d }
            if (r4 == 0) goto L_0x02ba
            goto L_0x02bc
        L_0x02ba:
            r4 = 0
            goto L_0x02bd
        L_0x02bc:
            r4 = r14
        L_0x02bd:
            if (r4 == 0) goto L_0x02cb
            android.app.ProfilerInfo r9 = new android.app.ProfilerInfo     // Catch:{ Exception -> 0x021d }
            com.android.server.am.ActivityManagerService$ProfileData r14 = r7.mProfileData     // Catch:{ Exception -> 0x021d }
            android.app.ProfilerInfo r14 = r14.getProfilerInfo()     // Catch:{ Exception -> 0x021d }
            r9.<init>(r14)     // Catch:{ Exception -> 0x021d }
            goto L_0x02cc
        L_0x02cb:
            r9 = 0
        L_0x02cc:
            r8 = r9
            com.android.server.am.ActivityManagerService$ProfileData r9 = r7.mProfileData     // Catch:{ Exception -> 0x021d }
            android.app.ProfilerInfo r9 = r9.getProfilerInfo()     // Catch:{ Exception -> 0x021d }
            java.lang.String r9 = r9.agent     // Catch:{ Exception -> 0x021d }
            if (r9 == 0) goto L_0x02e1
            com.android.server.am.ActivityManagerService$ProfileData r9 = r7.mProfileData     // Catch:{ Exception -> 0x021d }
            android.app.ProfilerInfo r9 = r9.getProfilerInfo()     // Catch:{ Exception -> 0x021d }
            java.lang.String r9 = r9.agent     // Catch:{ Exception -> 0x021d }
            r16 = r9
        L_0x02e1:
            r4 = r16
            goto L_0x0307
        L_0x02e4:
            if (r2 == 0) goto L_0x0305
            java.lang.String r4 = r2.mProfileFile     // Catch:{ Exception -> 0x021d }
            if (r4 == 0) goto L_0x0305
            android.app.ProfilerInfo r4 = new android.app.ProfilerInfo     // Catch:{ Exception -> 0x021d }
            java.lang.String r9 = r2.mProfileFile     // Catch:{ Exception -> 0x021d }
            r21 = 0
            r22 = 0
            r23 = 0
            r24 = 0
            r25 = 0
            r26 = 0
            r19 = r4
            r20 = r9
            r19.<init>(r20, r21, r22, r23, r24, r25, r26)     // Catch:{ Exception -> 0x021d }
            r8 = r4
            r4 = r16
            goto L_0x0307
        L_0x0305:
            r4 = r16
        L_0x0307:
            java.util.Map<java.lang.String, java.lang.String> r9 = r7.mAppAgentMap     // Catch:{ Exception -> 0x073e }
            if (r9 == 0) goto L_0x0358
            java.util.Map<java.lang.String, java.lang.String> r9 = r7.mAppAgentMap     // Catch:{ Exception -> 0x021d }
            boolean r9 = r9.containsKey(r13)     // Catch:{ Exception -> 0x021d }
            if (r9 == 0) goto L_0x0358
            android.content.pm.ApplicationInfo r9 = r1.info     // Catch:{ Exception -> 0x021d }
            int r9 = r9.flags     // Catch:{ Exception -> 0x021d }
            r9 = r9 & r10
            if (r9 == 0) goto L_0x0358
            java.util.Map<java.lang.String, java.lang.String> r9 = r7.mAppAgentMap     // Catch:{ Exception -> 0x021d }
            java.lang.Object r9 = r9.get(r13)     // Catch:{ Exception -> 0x021d }
            java.lang.String r9 = (java.lang.String) r9     // Catch:{ Exception -> 0x021d }
            if (r8 != 0) goto L_0x0344
            android.app.ProfilerInfo r10 = new android.app.ProfilerInfo     // Catch:{ Exception -> 0x021d }
            r20 = 0
            r21 = 0
            r22 = 0
            r23 = 0
            r24 = 0
            java.util.Map<java.lang.String, java.lang.String> r14 = r7.mAppAgentMap     // Catch:{ Exception -> 0x021d }
            java.lang.Object r14 = r14.get(r13)     // Catch:{ Exception -> 0x021d }
            r25 = r14
            java.lang.String r25 = (java.lang.String) r25     // Catch:{ Exception -> 0x021d }
            r26 = 1
            r19 = r10
            r19.<init>(r20, r21, r22, r23, r24, r25, r26)     // Catch:{ Exception -> 0x021d }
            r8 = r10
            r14 = r8
            goto L_0x0359
        L_0x0344:
            java.lang.String r10 = r8.agent     // Catch:{ Exception -> 0x021d }
            if (r10 != 0) goto L_0x0358
            java.util.Map<java.lang.String, java.lang.String> r10 = r7.mAppAgentMap     // Catch:{ Exception -> 0x021d }
            java.lang.Object r10 = r10.get(r13)     // Catch:{ Exception -> 0x021d }
            java.lang.String r10 = (java.lang.String) r10     // Catch:{ Exception -> 0x021d }
            r14 = 1
            android.app.ProfilerInfo r10 = r8.setAgent(r10, r14)     // Catch:{ Exception -> 0x021d }
            r8 = r10
            r14 = r8
            goto L_0x0359
        L_0x0358:
            r14 = r8
        L_0x0359:
            if (r14 == 0) goto L_0x037e
            android.os.ParcelFileDescriptor r8 = r14.profileFd     // Catch:{ Exception -> 0x021d }
            if (r8 == 0) goto L_0x037e
            android.os.ParcelFileDescriptor r8 = r14.profileFd     // Catch:{ Exception -> 0x021d }
            android.os.ParcelFileDescriptor r8 = r8.dup()     // Catch:{ Exception -> 0x021d }
            r14.profileFd = r8     // Catch:{ Exception -> 0x021d }
            com.android.server.am.ActivityManagerService$ProfileData r8 = r7.mProfileData     // Catch:{ Exception -> 0x021d }
            java.lang.String r8 = r8.getProfileApp()     // Catch:{ Exception -> 0x021d }
            boolean r8 = android.text.TextUtils.equals(r8, r13)     // Catch:{ Exception -> 0x021d }
            if (r8 == 0) goto L_0x037e
            com.android.server.am.ActivityManagerService$ProfileData r8 = r7.mProfileData     // Catch:{ Exception -> 0x021d }
            android.app.ProfilerInfo r8 = r8.getProfilerInfo()     // Catch:{ Exception -> 0x021d }
            if (r8 == 0) goto L_0x037e
            r65.clearProfilerLocked()     // Catch:{ Exception -> 0x021d }
        L_0x037e:
            boolean r8 = r11.isInstantApp()     // Catch:{ Exception -> 0x073e }
            if (r8 != 0) goto L_0x038d
            int r8 = r11.targetSdkVersion     // Catch:{ Exception -> 0x021d }
            r9 = 28
            if (r8 >= r9) goto L_0x038d
            java.lang.String r8 = sTheRealBuildSerial     // Catch:{ Exception -> 0x021d }
            goto L_0x0390
        L_0x038d:
            java.lang.String r8 = "unknown"
        L_0x0390:
            r26 = r8
            java.util.ArrayList<com.android.server.am.ActiveInstrumentation> r8 = r7.mActiveInstrumentation     // Catch:{ Exception -> 0x073e }
            int r8 = r8.size()     // Catch:{ Exception -> 0x073e }
            if (r8 <= 0) goto L_0x0428
            if (r2 != 0) goto L_0x0428
            java.util.ArrayList<com.android.server.am.ActiveInstrumentation> r8 = r7.mActiveInstrumentation     // Catch:{ Exception -> 0x0422 }
            int r8 = r8.size()     // Catch:{ Exception -> 0x0422 }
            r16 = 1
            int r8 = r8 + -1
        L_0x03a6:
            if (r8 < 0) goto L_0x041d
            com.android.server.am.ActiveInstrumentation r9 = r1.getActiveInstrumentation()     // Catch:{ Exception -> 0x0422 }
            if (r9 != 0) goto L_0x041d
            java.util.ArrayList<com.android.server.am.ActiveInstrumentation> r9 = r7.mActiveInstrumentation     // Catch:{ Exception -> 0x0422 }
            java.lang.Object r9 = r9.get(r8)     // Catch:{ Exception -> 0x0422 }
            com.android.server.am.ActiveInstrumentation r9 = (com.android.server.am.ActiveInstrumentation) r9     // Catch:{ Exception -> 0x0422 }
            boolean r10 = r9.mFinished     // Catch:{ Exception -> 0x0422 }
            if (r10 != 0) goto L_0x0412
            android.content.pm.ApplicationInfo r10 = r9.mTargetInfo     // Catch:{ Exception -> 0x0422 }
            int r10 = r10.uid     // Catch:{ Exception -> 0x0422 }
            r52 = r2
            int r2 = r1.uid     // Catch:{ Exception -> 0x0422 }
            if (r10 != r2) goto L_0x040f
            java.lang.String[] r2 = r9.mTargetProcesses     // Catch:{ Exception -> 0x0422 }
            int r2 = r2.length     // Catch:{ Exception -> 0x0422 }
            if (r2 != 0) goto L_0x03e5
            android.content.pm.ApplicationInfo r2 = r9.mTargetInfo     // Catch:{ Exception -> 0x021d }
            java.lang.String r2 = r2.packageName     // Catch:{ Exception -> 0x021d }
            android.content.pm.ApplicationInfo r10 = r1.info     // Catch:{ Exception -> 0x021d }
            java.lang.String r10 = r10.packageName     // Catch:{ Exception -> 0x021d }
            boolean r2 = r2.equals(r10)     // Catch:{ Exception -> 0x021d }
            if (r2 == 0) goto L_0x03e2
            r1.setActiveInstrumentation(r9)     // Catch:{ Exception -> 0x021d }
            java.util.ArrayList<com.android.server.am.ProcessRecord> r2 = r9.mRunningProcesses     // Catch:{ Exception -> 0x021d }
            r2.add(r1)     // Catch:{ Exception -> 0x021d }
            r18 = r12
            goto L_0x0416
        L_0x03e2:
            r18 = r12
            goto L_0x0416
        L_0x03e5:
            java.lang.String[] r2 = r9.mTargetProcesses     // Catch:{ Exception -> 0x0422 }
            int r10 = r2.length     // Catch:{ Exception -> 0x0422 }
            r18 = r12
            r12 = 0
        L_0x03eb:
            if (r12 >= r10) goto L_0x0416
            r19 = r2[r12]     // Catch:{ Exception -> 0x0434 }
            r20 = r19
            r19 = r2
            java.lang.String r2 = r1.processName     // Catch:{ Exception -> 0x0434 }
            r21 = r10
            r10 = r20
            boolean r2 = r10.equals(r2)     // Catch:{ Exception -> 0x0434 }
            if (r2 == 0) goto L_0x0408
            r1.setActiveInstrumentation(r9)     // Catch:{ Exception -> 0x0434 }
            java.util.ArrayList<com.android.server.am.ProcessRecord> r2 = r9.mRunningProcesses     // Catch:{ Exception -> 0x0434 }
            r2.add(r1)     // Catch:{ Exception -> 0x0434 }
            goto L_0x0416
        L_0x0408:
            int r12 = r12 + 1
            r2 = r19
            r10 = r21
            goto L_0x03eb
        L_0x040f:
            r18 = r12
            goto L_0x0416
        L_0x0412:
            r52 = r2
            r18 = r12
        L_0x0416:
            int r8 = r8 + -1
            r12 = r18
            r2 = r52
            goto L_0x03a6
        L_0x041d:
            r52 = r2
            r18 = r12
            goto L_0x042e
        L_0x0422:
            r0 = move-exception
            r9 = r3
            r10 = r12
            r8 = r13
            goto L_0x0742
        L_0x0428:
            r52 = r2
            r18 = r12
            r16 = 1
        L_0x042e:
            if (r4 == 0) goto L_0x043b
            r15.attachAgent(r4)     // Catch:{ Exception -> 0x0434 }
            goto L_0x043b
        L_0x0434:
            r0 = move-exception
            r9 = r3
        L_0x0436:
            r8 = r13
            r10 = r18
            goto L_0x0742
        L_0x043b:
            r2 = 0
            android.content.pm.ApplicationInfo r8 = r1.info     // Catch:{ Exception -> 0x0738 }
            int r8 = r8.uid     // Catch:{ Exception -> 0x0738 }
            int r8 = android.os.UserHandle.getAppId(r8)     // Catch:{ Exception -> 0x0738 }
            r9 = 10000(0x2710, float:1.4013E-41)
            if (r8 < r9) goto L_0x0468
            java.lang.Class<android.view.autofill.AutofillManagerInternal> r8 = android.view.autofill.AutofillManagerInternal.class
            java.lang.Object r8 = com.android.server.LocalServices.getService(r8)     // Catch:{ Exception -> 0x0464 }
            android.view.autofill.AutofillManagerInternal r8 = (android.view.autofill.AutofillManagerInternal) r8     // Catch:{ Exception -> 0x0464 }
            if (r8 == 0) goto L_0x0462
            android.content.pm.ApplicationInfo r9 = r1.info     // Catch:{ Exception -> 0x0464 }
            java.lang.String r9 = r9.packageName     // Catch:{ Exception -> 0x0464 }
            android.content.pm.ApplicationInfo r10 = r1.info     // Catch:{ Exception -> 0x0464 }
            r12 = r2
            long r2 = r10.longVersionCode     // Catch:{ Exception -> 0x0464 }
            int r10 = r1.userId     // Catch:{ Exception -> 0x0464 }
            android.content.AutofillOptions r2 = r8.getAutofillOptions(r9, r2, r10)     // Catch:{ Exception -> 0x0464 }
            goto L_0x046a
        L_0x0462:
            r12 = r2
            goto L_0x0469
        L_0x0464:
            r0 = move-exception
            r9 = r67
            goto L_0x0436
        L_0x0468:
            r12 = r2
        L_0x0469:
            r2 = r12
        L_0x046a:
            r3 = 0
            android.content.pm.ApplicationInfo r8 = r1.info     // Catch:{ Exception -> 0x0734 }
            int r8 = r8.uid     // Catch:{ Exception -> 0x0734 }
            int r8 = android.os.UserHandle.getAppId(r8)     // Catch:{ Exception -> 0x0734 }
            r9 = 10000(0x2710, float:1.4013E-41)
            if (r8 < r9) goto L_0x048c
            java.lang.Class<com.android.server.contentcapture.ContentCaptureManagerInternal> r8 = com.android.server.contentcapture.ContentCaptureManagerInternal.class
            java.lang.Object r8 = com.android.server.LocalServices.getService(r8)     // Catch:{ Exception -> 0x0464 }
            com.android.server.contentcapture.ContentCaptureManagerInternal r8 = (com.android.server.contentcapture.ContentCaptureManagerInternal) r8     // Catch:{ Exception -> 0x0464 }
            if (r8 == 0) goto L_0x048c
            int r9 = r1.userId     // Catch:{ Exception -> 0x0464 }
            android.content.pm.ApplicationInfo r10 = r1.info     // Catch:{ Exception -> 0x0464 }
            java.lang.String r10 = r10.packageName     // Catch:{ Exception -> 0x0464 }
            android.content.ContentCaptureOptions r9 = r8.getOptionsForPackage(r9, r10)     // Catch:{ Exception -> 0x0464 }
            r3 = r9
        L_0x048c:
            java.lang.String r8 = "attachApplicationLocked: immediately before bindApplication"
            r7.checkTime(r5, r8)     // Catch:{ Exception -> 0x0734 }
            long r8 = android.os.SystemClock.elapsedRealtime()     // Catch:{ Exception -> 0x0734 }
            r53 = r8
            com.android.server.wm.ActivityTaskManagerInternal r8 = r7.mAtmInternal     // Catch:{ Exception -> 0x0734 }
            com.android.server.wm.WindowProcessController r9 = r1.getWindowProcessController()     // Catch:{ Exception -> 0x0734 }
            r8.preBindApplication(r9)     // Catch:{ Exception -> 0x0734 }
            com.android.server.am.ActiveInstrumentation r8 = r1.getActiveInstrumentation()     // Catch:{ Exception -> 0x0734 }
            r12 = r8
            android.content.res.Configuration r8 = new android.content.res.Configuration     // Catch:{ Exception -> 0x0734 }
            com.android.server.wm.WindowProcessController r9 = r1.getWindowProcessController()     // Catch:{ Exception -> 0x0734 }
            android.content.res.Configuration r9 = r9.getConfiguration()     // Catch:{ Exception -> 0x0734 }
            r8.<init>(r9)     // Catch:{ Exception -> 0x0734 }
            r10 = r8
            com.android.server.wm.ActivityStackSupervisor r8 = r7.mStackSupervisor     // Catch:{ Exception -> 0x0734 }
            android.content.pm.ApplicationInfo r9 = r1.info     // Catch:{ Exception -> 0x0734 }
            java.lang.String r9 = r9.packageName     // Catch:{ Exception -> 0x0734 }
            com.android.server.wm.ActivityStackSupervisorInjector.updateApplicationConfiguration(r8, r10, r9)     // Catch:{ Exception -> 0x0734 }
            java.lang.String r8 = r1.isolatedEntryPoint     // Catch:{ Exception -> 0x0734 }
            if (r8 == 0) goto L_0x04db
            java.lang.String r8 = r1.isolatedEntryPoint     // Catch:{ Exception -> 0x0464 }
            java.lang.String[] r9 = r1.isolatedEntryPointArgs     // Catch:{ Exception -> 0x0464 }
            r15.runIsolatedEntryPoint(r8, r9)     // Catch:{ Exception -> 0x0464 }
            r58 = r0
            r55 = r4
            r56 = r5
            r59 = r10
            r60 = r11
            r62 = r12
            r63 = r13
            r64 = r14
            r61 = r18
            goto L_0x05a1
        L_0x04db:
            if (r12 == 0) goto L_0x054c
            android.content.ComponentName r9 = r12.mClass     // Catch:{ Exception -> 0x0544 }
            android.os.Bundle r8 = r12.mArguments     // Catch:{ Exception -> 0x0544 }
            r55 = r4
            android.app.IInstrumentationWatcher r4 = r12.mWatcher     // Catch:{ Exception -> 0x0544 }
            r56 = r5
            android.app.IUiAutomationConnection r5 = r12.mUiAutomationConnection     // Catch:{ Exception -> 0x053a }
            boolean r6 = r7.mBinderTransactionTrackingEnabled     // Catch:{ Exception -> 0x053a }
            if (r0 != 0) goto L_0x04f3
            if (r48 != 0) goto L_0x04f0
            goto L_0x04f3
        L_0x04f0:
            r20 = 0
            goto L_0x04f5
        L_0x04f3:
            r20 = r16
        L_0x04f5:
            boolean r21 = r1.isPersistent()     // Catch:{ Exception -> 0x053a }
            r58 = r0
            android.content.res.CompatibilityInfo r0 = r1.compat     // Catch:{ Exception -> 0x053a }
            r17 = r8
            boolean r8 = r1.isolated     // Catch:{ Exception -> 0x053a }
            android.util.ArrayMap r24 = r7.getCommonServicesLocked(r8)     // Catch:{ Exception -> 0x053a }
            com.android.server.am.CoreSettingsObserver r8 = r7.mCoreSettingsObserver     // Catch:{ Exception -> 0x053a }
            android.os.Bundle r25 = r8.getCoreSettingsLocked()     // Catch:{ Exception -> 0x053a }
            r8 = r66
            r19 = r9
            r9 = r13
            r59 = r10
            r10 = r11
            r60 = r11
            r11 = r49
            r62 = r12
            r61 = r18
            r12 = r19
            r63 = r13
            r13 = r14
            r64 = r14
            r14 = r17
            r15 = r4
            r16 = r5
            r17 = r50
            r18 = r6
            r19 = r51
            r22 = r59
            r23 = r0
            r27 = r2
            r28 = r3
            r8.bindApplication(r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28)     // Catch:{ Exception -> 0x05a8 }
            goto L_0x05a1
        L_0x053a:
            r0 = move-exception
            r9 = r67
            r8 = r13
            r10 = r18
            r5 = r56
            goto L_0x0742
        L_0x0544:
            r0 = move-exception
            r9 = r67
            r8 = r13
            r10 = r18
            goto L_0x0742
        L_0x054c:
            r58 = r0
            r55 = r4
            r56 = r5
            r59 = r10
            r60 = r11
            r62 = r12
            r63 = r13
            r64 = r14
            r61 = r18
            r31 = 0
            r33 = 0
            r34 = 0
            r35 = 0
            boolean r0 = r7.mBinderTransactionTrackingEnabled     // Catch:{ Exception -> 0x072a }
            if (r58 != 0) goto L_0x0570
            if (r48 != 0) goto L_0x056d
            goto L_0x0570
        L_0x056d:
            r39 = 0
            goto L_0x0572
        L_0x0570:
            r39 = 1
        L_0x0572:
            boolean r40 = r1.isPersistent()     // Catch:{ Exception -> 0x072a }
            android.content.res.CompatibilityInfo r4 = r1.compat     // Catch:{ Exception -> 0x072a }
            boolean r5 = r1.isolated     // Catch:{ Exception -> 0x072a }
            android.util.ArrayMap r43 = r7.getCommonServicesLocked(r5)     // Catch:{ Exception -> 0x072a }
            com.android.server.am.CoreSettingsObserver r5 = r7.mCoreSettingsObserver     // Catch:{ Exception -> 0x072a }
            android.os.Bundle r44 = r5.getCoreSettingsLocked()     // Catch:{ Exception -> 0x072a }
            r27 = r66
            r28 = r63
            r29 = r60
            r30 = r49
            r32 = r64
            r36 = r50
            r37 = r0
            r38 = r51
            r41 = r59
            r42 = r4
            r45 = r26
            r46 = r2
            r47 = r3
            r27.bindApplication(r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47)     // Catch:{ Exception -> 0x072a }
        L_0x05a1:
            if (r64 == 0) goto L_0x05b3
            r64.closeFd()     // Catch:{ Exception -> 0x05a8 }
            r14 = 0
            goto L_0x05b5
        L_0x05a8:
            r0 = move-exception
            r9 = r67
            r5 = r56
            r10 = r61
            r8 = r63
            goto L_0x0742
        L_0x05b3:
            r14 = r64
        L_0x05b5:
            com.android.server.am.ProcessStatsService r0 = r7.mProcessStats     // Catch:{ Exception -> 0x072a }
            r4 = r66
            r1.makeActive(r4, r0)     // Catch:{ Exception -> 0x072a }
            java.lang.String r0 = "attachApplicationLocked: immediately after bindApplication"
            r5 = r56
            r7.checkTime(r5, r0)     // Catch:{ Exception -> 0x0722 }
            com.android.server.am.ProcessList r0 = r7.mProcessList     // Catch:{ Exception -> 0x0722 }
            r8 = 0
            r9 = 0
            r0.updateLruProcessLocked(r1, r9, r8)     // Catch:{ Exception -> 0x0722 }
            java.lang.String r0 = "attachApplicationLocked: after updateLruProcessLocked"
            r7.checkTime(r5, r0)     // Catch:{ Exception -> 0x0722 }
            long r8 = android.os.SystemClock.uptimeMillis()     // Catch:{ Exception -> 0x0722 }
            r1.lastLowMemory = r8     // Catch:{ Exception -> 0x0722 }
            r1.lastRequestedGc = r8     // Catch:{ Exception -> 0x0722 }
            java.util.ArrayList<com.android.server.am.ProcessRecord> r0 = r7.mPersistentStartingProcesses
            r0.remove(r1)
            java.util.ArrayList<com.android.server.am.ProcessRecord> r0 = r7.mProcessesOnHold
            r0.remove(r1)
            r2 = 0
            r3 = 0
            if (r48 == 0) goto L_0x060a
            com.android.server.wm.ActivityTaskManagerInternal r0 = r7.mAtmInternal     // Catch:{ Exception -> 0x05f2 }
            com.android.server.wm.WindowProcessController r8 = r1.getWindowProcessController()     // Catch:{ Exception -> 0x05f2 }
            boolean r0 = r0.attachApplication(r8)     // Catch:{ Exception -> 0x05f2 }
            r3 = r0
            goto L_0x060a
        L_0x05f2:
            r0 = move-exception
            java.lang.StringBuilder r8 = new java.lang.StringBuilder
            r8.<init>()
            java.lang.String r9 = "Exception thrown launching activities in "
            r8.append(r9)
            r8.append(r1)
            java.lang.String r8 = r8.toString()
            java.lang.String r9 = "ActivityManager"
            android.util.Slog.wtf(r9, r8, r0)
            r2 = 1
        L_0x060a:
            if (r2 != 0) goto L_0x0638
            com.android.server.am.ActiveServices r0 = r7.mServices     // Catch:{ Exception -> 0x061d }
            r8 = r63
            boolean r0 = r0.attachApplicationLocked(r1, r8)     // Catch:{ Exception -> 0x061b }
            r3 = r3 | r0
            java.lang.String r0 = "attachApplicationLocked: after mServices.attachApplicationLocked"
            r7.checkTime(r5, r0)     // Catch:{ Exception -> 0x061b }
            goto L_0x063a
        L_0x061b:
            r0 = move-exception
            goto L_0x0620
        L_0x061d:
            r0 = move-exception
            r8 = r63
        L_0x0620:
            java.lang.StringBuilder r9 = new java.lang.StringBuilder
            r9.<init>()
            java.lang.String r10 = "Exception thrown starting services in "
            r9.append(r10)
            r9.append(r1)
            java.lang.String r9 = r9.toString()
            java.lang.String r10 = "ActivityManager"
            android.util.Slog.wtf(r10, r9, r0)
            r2 = 1
            goto L_0x063a
        L_0x0638:
            r8 = r63
        L_0x063a:
            if (r2 != 0) goto L_0x0668
            r9 = r67
            boolean r0 = r7.isPendingBroadcastProcessLocked(r9)
            if (r0 == 0) goto L_0x066a
            boolean r0 = r7.sendPendingBroadcastsLocked(r1)     // Catch:{ Exception -> 0x064f }
            r3 = r3 | r0
            java.lang.String r0 = "attachApplicationLocked: after sendPendingBroadcastsLocked"
            r7.checkTime(r5, r0)     // Catch:{ Exception -> 0x064f }
            goto L_0x066a
        L_0x064f:
            r0 = move-exception
            java.lang.StringBuilder r10 = new java.lang.StringBuilder
            r10.<init>()
            java.lang.String r11 = "Exception thrown dispatching broadcasts in "
            r10.append(r11)
            r10.append(r1)
            java.lang.String r10 = r10.toString()
            java.lang.String r11 = "ActivityManager"
            android.util.Slog.wtf(r11, r10, r0)
            r2 = 1
            goto L_0x066a
        L_0x0668:
            r9 = r67
        L_0x066a:
            if (r2 != 0) goto L_0x06a5
            r10 = r61
            if (r10 == 0) goto L_0x06a7
            com.android.server.am.ProcessRecord r0 = r10.app
            if (r0 != r1) goto L_0x06a7
            android.content.pm.ApplicationInfo r0 = r10.appInfo
            java.lang.String r0 = r0.packageName
            r11 = 5
            r7.notifyPackageUse(r0, r11)
            android.content.pm.ApplicationInfo r0 = r10.appInfo     // Catch:{ Exception -> 0x068c }
            android.content.pm.ApplicationInfo r11 = r10.appInfo     // Catch:{ Exception -> 0x068c }
            android.content.res.CompatibilityInfo r11 = r7.compatibilityInfoForPackage(r11)     // Catch:{ Exception -> 0x068c }
            int r12 = r10.backupMode     // Catch:{ Exception -> 0x068c }
            int r13 = r10.userId     // Catch:{ Exception -> 0x068c }
            r4.scheduleCreateBackupAgent(r0, r11, r12, r13)     // Catch:{ Exception -> 0x068c }
            goto L_0x06a7
        L_0x068c:
            r0 = move-exception
            java.lang.StringBuilder r11 = new java.lang.StringBuilder
            r11.<init>()
            java.lang.String r12 = "Exception thrown creating backup agent in "
            r11.append(r12)
            r11.append(r1)
            java.lang.String r11 = r11.toString()
            java.lang.String r12 = "ActivityManager"
            android.util.Slog.wtf(r12, r11, r0)
            r2 = 1
            goto L_0x06a7
        L_0x06a5:
            r10 = r61
        L_0x06a7:
            if (r2 == 0) goto L_0x06b4
            java.lang.String r0 = "error during init"
            r11 = 1
            r1.kill(r0, r11)
            r12 = 0
            r7.handleAppDiedLocked(r1, r12, r11)
            return r12
        L_0x06b4:
            r11 = 1
            if (r3 != 0) goto L_0x06c2
            java.lang.String r0 = "updateOomAdj_processBegin"
            r7.updateOomAdjLocked(r0)
            java.lang.String r0 = "attachApplicationLocked: after updateOomAdjLocked"
            r7.checkTime(r5, r0)
        L_0x06c2:
            android.content.pm.ApplicationInfo r0 = r1.info
            int r13 = r0.uid
            int r14 = r1.pid
            android.content.pm.ApplicationInfo r0 = r1.info
            java.lang.String r15 = r0.packageName
            r16 = 3
            long r11 = r1.startTime
            r24 = r2
            r23 = r3
            long r2 = r1.startTime
            long r2 = r53 - r2
            int r2 = (int) r2
            long r17 = android.os.SystemClock.elapsedRealtime()
            long r3 = r1.startTime
            long r3 = r17 - r3
            int r3 = (int) r3
            com.android.server.am.HostingRecord r4 = r1.hostingRecord
            java.lang.String r21 = r4.getType()
            com.android.server.am.HostingRecord r4 = r1.hostingRecord
            java.lang.String r4 = r4.getName()
            if (r4 == 0) goto L_0x06f7
            com.android.server.am.HostingRecord r4 = r1.hostingRecord
            java.lang.String r4 = r4.getName()
            goto L_0x06f9
        L_0x06f7:
            java.lang.String r4 = ""
        L_0x06f9:
            r22 = r4
            r17 = r11
            r0 = 169(0xa9, float:2.37E-43)
            r12 = r0
            r19 = r2
            r20 = r3
            android.util.StatsLog.write(r12, r13, r14, r15, r16, r17, r19, r20, r21, r22)
            com.android.server.am.HostingRecord r0 = r1.hostingRecord
            java.lang.String r0 = r0.getType()
            if (r0 == 0) goto L_0x0720
            java.lang.String r2 = "activity"
            boolean r2 = r0.equals(r2)
            if (r2 == 0) goto L_0x0720
            com.android.internal.app.ActivityTrigger r2 = mActivityTrigger
            android.content.pm.ApplicationInfo r3 = r1.info
            int r4 = r1.pid
            r2.activityStartTrigger(r3, r4)
        L_0x0720:
            r2 = 1
            return r2
        L_0x0722:
            r0 = move-exception
            r9 = r67
            r10 = r61
            r8 = r63
            goto L_0x0742
        L_0x072a:
            r0 = move-exception
            r9 = r67
            r5 = r56
            r10 = r61
            r8 = r63
            goto L_0x0742
        L_0x0734:
            r0 = move-exception
            r9 = r67
            goto L_0x073a
        L_0x0738:
            r0 = move-exception
            r9 = r3
        L_0x073a:
            r8 = r13
            r10 = r18
            goto L_0x0742
        L_0x073e:
            r0 = move-exception
            r9 = r3
            r10 = r12
            r8 = r13
        L_0x0742:
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r3 = "Exception thrown during bind of "
            r2.append(r3)
            r2.append(r1)
            java.lang.String r2 = r2.toString()
            java.lang.String r3 = "ActivityManager"
            android.util.Slog.wtf(r3, r2, r0)
            com.android.server.am.ProcessStatsService r2 = r7.mProcessStats
            r1.resetPackageList(r2)
            r1.unlinkDeathRecipient()
            com.android.server.am.ProcessList r2 = r7.mProcessList
            com.android.server.am.HostingRecord r3 = new com.android.server.am.HostingRecord
            java.lang.String r4 = "bind-fail"
            r3.<init>((java.lang.String) r4, (java.lang.String) r8)
            r2.startProcessLocked(r1, r3)
            r2 = 0
            return r2
        L_0x076e:
            r0 = move-exception
            r9 = r3
            r8 = r13
            com.android.server.am.ProcessStatsService r2 = r7.mProcessStats
            r1.resetPackageList(r2)
            com.android.server.am.ProcessList r2 = r7.mProcessList
            com.android.server.am.HostingRecord r3 = new com.android.server.am.HostingRecord
            java.lang.String r4 = "link fail"
            r3.<init>((java.lang.String) r4, (java.lang.String) r8)
            r2.startProcessLocked(r1, r3)
            r2 = 0
            return r2
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.attachApplicationLocked(android.app.IApplicationThread, int, int, long):boolean");
    }

    public final void attachApplication(IApplicationThread thread, long startSeq) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int callingPid = Binder.getCallingPid();
                int callingUid = Binder.getCallingUid();
                long origId = Binder.clearCallingIdentity();
                attachApplicationLocked(thread, callingPid, callingUid, startSeq);
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void showBootMessage(CharSequence msg, boolean always) {
        if (Binder.getCallingUid() == Process.myUid()) {
            this.mWindowManager.showBootMessage(msg, always);
            return;
        }
        throw new SecurityException();
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:13:0x001b, code lost:
        resetPriorityAfterLockedSection();
        com.android.server.am.ActivityManagerServiceInjector.markUIReady();
        r4 = new android.util.ArraySet<>();
        r5 = android.os.Build.SUPPORTED_ABIS;
        r6 = r5.length;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:14:0x0029, code lost:
        if (r2 >= r6) goto L_0x007a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x002b, code lost:
        r7 = r5[r2];
        android.os.Process.ZYGOTE_PROCESS.establishZygoteConnectionForAbi(r7);
        r8 = dalvik.system.VMRuntime.getInstructionSet(r7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x003a, code lost:
        if (r4.contains(r8) != false) goto L_0x0077;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:18:?, code lost:
        r14.mInstaller.markBootComplete(dalvik.system.VMRuntime.getInstructionSet(r7));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:19:0x0046, code lost:
        r9 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:21:0x004b, code lost:
        if (dalvik.system.VMRuntime.didPruneDalvikCache() == false) goto L_0x004d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:0x004d, code lost:
        android.util.Slog.w("ActivityManager", "Unable to mark boot complete for abi: " + r7 + " (" + r9.getMessage() + ")");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x0074, code lost:
        r4.add(r8);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x0077, code lost:
        r2 = r2 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:25:0x007a, code lost:
        r2 = new android.content.IntentFilter();
        r2.addAction("android.intent.action.QUERY_PACKAGE_RESTART");
        r2.addDataScheme(com.android.server.pm.Settings.ATTR_PACKAGE);
        r14.mContext.registerReceiver(new com.android.server.am.ActivityManagerService.AnonymousClass10(r14), r2);
        r5 = new android.content.IntentFilter();
        r5.addAction("com.android.server.am.DELETE_DUMPHEAP");
        r14.mContext.registerReceiver(new com.android.server.am.ActivityManagerService.AnonymousClass11(r14), r5);
        r6 = new android.content.IntentFilter();
        r6.addAction("android.intent.action.SCREEN_OFF");
        r14.mContext.registerReceiver(new com.android.server.am.ActivityManagerService.AnonymousClass12(r14), r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:?, code lost:
        android.util.Slog.i("ActivityManager", "About to commit checkpoint");
        com.android.internal.content.PackageHelper.getStorageManager().commitChanges();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:0x00cc, code lost:
        ((android.os.PowerManager) r14.mContext.getSystemService("power")).reboot("Checkpoint commit failed");
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void finishBooting() {
        /*
            r14 = this;
            r0 = 64
            java.lang.String r2 = "FinishBooting"
            android.os.Trace.traceBegin(r0, r2)
            monitor-enter(r14)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x017a }
            boolean r2 = r14.mBootAnimationComplete     // Catch:{ all -> 0x017a }
            r3 = 1
            if (r2 != 0) goto L_0x0017
            r14.mCallFinishBooting = r3     // Catch:{ all -> 0x017a }
            monitor-exit(r14)     // Catch:{ all -> 0x017a }
            resetPriorityAfterLockedSection()
            return
        L_0x0017:
            r2 = 0
            r14.mCallFinishBooting = r2     // Catch:{ all -> 0x017a }
            monitor-exit(r14)     // Catch:{ all -> 0x017a }
            resetPriorityAfterLockedSection()
            com.android.server.am.ActivityManagerServiceInjector.markUIReady()
            android.util.ArraySet r4 = new android.util.ArraySet
            r4.<init>()
            java.lang.String[] r5 = android.os.Build.SUPPORTED_ABIS
            int r6 = r5.length
        L_0x0029:
            if (r2 >= r6) goto L_0x007a
            r7 = r5[r2]
            android.os.ZygoteProcess r8 = android.os.Process.ZYGOTE_PROCESS
            r8.establishZygoteConnectionForAbi(r7)
            java.lang.String r8 = dalvik.system.VMRuntime.getInstructionSet(r7)
            boolean r9 = r4.contains(r8)
            if (r9 != 0) goto L_0x0077
            com.android.server.pm.Installer r9 = r14.mInstaller     // Catch:{ InstallerException -> 0x0046 }
            java.lang.String r10 = dalvik.system.VMRuntime.getInstructionSet(r7)     // Catch:{ InstallerException -> 0x0046 }
            r9.markBootComplete(r10)     // Catch:{ InstallerException -> 0x0046 }
            goto L_0x0074
        L_0x0046:
            r9 = move-exception
            boolean r10 = dalvik.system.VMRuntime.didPruneDalvikCache()
            if (r10 != 0) goto L_0x0074
            java.lang.StringBuilder r10 = new java.lang.StringBuilder
            r10.<init>()
            java.lang.String r11 = "Unable to mark boot complete for abi: "
            r10.append(r11)
            r10.append(r7)
            java.lang.String r11 = " ("
            r10.append(r11)
            java.lang.String r11 = r9.getMessage()
            r10.append(r11)
            java.lang.String r11 = ")"
            r10.append(r11)
            java.lang.String r10 = r10.toString()
            java.lang.String r11 = "ActivityManager"
            android.util.Slog.w(r11, r10)
        L_0x0074:
            r4.add(r8)
        L_0x0077:
            int r2 = r2 + 1
            goto L_0x0029
        L_0x007a:
            android.content.IntentFilter r2 = new android.content.IntentFilter
            r2.<init>()
            java.lang.String r5 = "android.intent.action.QUERY_PACKAGE_RESTART"
            r2.addAction(r5)
            java.lang.String r5 = "package"
            r2.addDataScheme(r5)
            android.content.Context r5 = r14.mContext
            com.android.server.am.ActivityManagerService$10 r6 = new com.android.server.am.ActivityManagerService$10
            r6.<init>()
            r5.registerReceiver(r6, r2)
            android.content.IntentFilter r5 = new android.content.IntentFilter
            r5.<init>()
            java.lang.String r6 = "com.android.server.am.DELETE_DUMPHEAP"
            r5.addAction(r6)
            android.content.Context r6 = r14.mContext
            com.android.server.am.ActivityManagerService$11 r7 = new com.android.server.am.ActivityManagerService$11
            r7.<init>()
            r6.registerReceiver(r7, r5)
            android.content.IntentFilter r6 = new android.content.IntentFilter
            r6.<init>()
            java.lang.String r7 = "android.intent.action.SCREEN_OFF"
            r6.addAction(r7)
            android.content.Context r7 = r14.mContext
            com.android.server.am.ActivityManagerService$12 r8 = new com.android.server.am.ActivityManagerService$12
            r8.<init>()
            r7.registerReceiver(r8, r6)
            java.lang.String r7 = "ActivityManager"
            java.lang.String r8 = "About to commit checkpoint"
            android.util.Slog.i(r7, r8)     // Catch:{ Exception -> 0x00cb }
            android.os.storage.IStorageManager r7 = com.android.internal.content.PackageHelper.getStorageManager()     // Catch:{ Exception -> 0x00cb }
            r7.commitChanges()     // Catch:{ Exception -> 0x00cb }
            goto L_0x00dc
        L_0x00cb:
            r7 = move-exception
            android.content.Context r8 = r14.mContext
            java.lang.String r9 = "power"
            java.lang.Object r8 = r8.getSystemService(r9)
            android.os.PowerManager r8 = (android.os.PowerManager) r8
            java.lang.String r9 = "Checkpoint commit failed"
            r8.reboot(r9)
        L_0x00dc:
            com.android.server.SystemServiceManager r7 = r14.mSystemServiceManager
            r8 = 1000(0x3e8, float:1.401E-42)
            r7.startBootPhase(r8)
            monitor-enter(r14)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0174 }
            java.util.ArrayList<com.android.server.am.ProcessRecord> r7 = r14.mProcessesOnHold     // Catch:{ all -> 0x0174 }
            int r7 = r7.size()     // Catch:{ all -> 0x0174 }
            if (r7 <= 0) goto L_0x010f
            java.util.ArrayList r8 = new java.util.ArrayList     // Catch:{ all -> 0x0174 }
            java.util.ArrayList<com.android.server.am.ProcessRecord> r9 = r14.mProcessesOnHold     // Catch:{ all -> 0x0174 }
            r8.<init>(r9)     // Catch:{ all -> 0x0174 }
            r9 = 0
        L_0x00f7:
            if (r9 >= r7) goto L_0x010f
            com.android.server.am.ProcessList r10 = r14.mProcessList     // Catch:{ all -> 0x0174 }
            java.lang.Object r11 = r8.get(r9)     // Catch:{ all -> 0x0174 }
            com.android.server.am.ProcessRecord r11 = (com.android.server.am.ProcessRecord) r11     // Catch:{ all -> 0x0174 }
            com.android.server.am.HostingRecord r12 = new com.android.server.am.HostingRecord     // Catch:{ all -> 0x0174 }
            java.lang.String r13 = "on-hold"
            r12.<init>(r13)     // Catch:{ all -> 0x0174 }
            r10.startProcessLocked(r11, r12)     // Catch:{ all -> 0x0174 }
            int r9 = r9 + 1
            goto L_0x00f7
        L_0x010f:
            int r8 = r14.mFactoryTest     // Catch:{ all -> 0x0174 }
            if (r8 != r3) goto L_0x0118
            monitor-exit(r14)     // Catch:{ all -> 0x0174 }
            resetPriorityAfterLockedSection()
            return
        L_0x0118:
            com.android.server.am.ActivityManagerService$MainHandler r3 = r14.mHandler     // Catch:{ all -> 0x0174 }
            r8 = 27
            android.os.Message r3 = r3.obtainMessage(r8)     // Catch:{ all -> 0x0174 }
            com.android.server.am.ActivityManagerService$MainHandler r8 = r14.mHandler     // Catch:{ all -> 0x0174 }
            com.android.server.am.ActivityManagerConstants r9 = r14.mConstants     // Catch:{ all -> 0x0174 }
            long r9 = r9.POWER_CHECK_INTERVAL     // Catch:{ all -> 0x0174 }
            r8.sendMessageDelayed(r3, r9)     // Catch:{ all -> 0x0174 }
            java.lang.String r8 = "sys.boot_completed"
            java.lang.String r9 = "1"
            android.os.SystemProperties.set(r8, r9)     // Catch:{ all -> 0x0174 }
            java.lang.String r8 = "trigger_restart_min_framework"
            java.util.Optional r9 = android.sysprop.VoldProperties.decrypt()     // Catch:{ all -> 0x0174 }
            java.lang.String r10 = ""
            java.lang.Object r9 = r9.orElse(r10)     // Catch:{ all -> 0x0174 }
            boolean r8 = r8.equals(r9)     // Catch:{ all -> 0x0174 }
            if (r8 == 0) goto L_0x0156
            java.lang.String r8 = ""
            java.util.Optional r9 = android.sysprop.VoldProperties.encrypt_progress()     // Catch:{ all -> 0x0174 }
            java.lang.String r10 = ""
            java.lang.Object r9 = r9.orElse(r10)     // Catch:{ all -> 0x0174 }
            boolean r8 = r8.equals(r9)     // Catch:{ all -> 0x0174 }
            if (r8 == 0) goto L_0x015d
        L_0x0156:
            java.lang.String r8 = "dev.bootcomplete"
            java.lang.String r9 = "1"
            android.os.SystemProperties.set(r8, r9)     // Catch:{ all -> 0x0174 }
        L_0x015d:
            com.android.server.am.UserController r8 = r14.mUserController     // Catch:{ all -> 0x0174 }
            com.android.server.am.ActivityManagerService$13 r9 = new com.android.server.am.ActivityManagerService$13     // Catch:{ all -> 0x0174 }
            r9.<init>()     // Catch:{ all -> 0x0174 }
            r8.sendBootCompleted(r9)     // Catch:{ all -> 0x0174 }
            com.android.server.am.UserController r8 = r14.mUserController     // Catch:{ all -> 0x0174 }
            r8.scheduleStartProfiles()     // Catch:{ all -> 0x0174 }
            monitor-exit(r14)     // Catch:{ all -> 0x0174 }
            resetPriorityAfterLockedSection()
            android.os.Trace.traceEnd(r0)
            return
        L_0x0174:
            r0 = move-exception
            monitor-exit(r14)     // Catch:{ all -> 0x0174 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x017a:
            r0 = move-exception
            monitor-exit(r14)     // Catch:{ all -> 0x017a }
            resetPriorityAfterLockedSection()
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.finishBooting():void");
    }

    public void bootAnimationComplete() {
        boolean callFinishBooting;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                callFinishBooting = this.mCallFinishBooting;
                this.mBootAnimationComplete = true;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        if (callFinishBooting) {
            finishBooting();
        }
    }

    /* access modifiers changed from: package-private */
    public final void ensureBootCompleted() {
        boolean booting;
        boolean enableScreen;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                booting = this.mBooting;
                enableScreen = false;
                this.mBooting = false;
                if (!this.mBooted) {
                    enableScreen = true;
                }
                this.mBooted = true;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        if (booting) {
            finishBooting();
        }
        if (enableScreen) {
            this.mAtmInternal.enableScreenAfterBoot(this.mBooted);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 19 */
    public IIntentSender getIntentSender(int type, String packageName, IBinder token, String resultWho, int requestCode, Intent[] intents, String[] resolvedTypes, int flags, Bundle bOptions, int userId) {
        int userId2;
        int i = type;
        String str = packageName;
        Intent[] intentArr = intents;
        String[] strArr = resolvedTypes;
        enforceNotIsolatedCaller("getIntentSender");
        boolean z = true;
        if (intentArr != null) {
            if (intentArr.length >= 1) {
                for (int i2 = 0; i2 < intentArr.length; i2++) {
                    Intent intent = intentArr[i2];
                    if (intent != null) {
                        if (intent.hasFileDescriptors()) {
                            throw new IllegalArgumentException("File descriptors passed in Intent");
                        } else if (i != 1 || (intent.getFlags() & DumpState.DUMP_APEX) == 0) {
                            intentArr[i2] = new Intent(intent);
                        } else {
                            throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
                        }
                    }
                }
                if (!(strArr == null || strArr.length == intentArr.length)) {
                    throw new IllegalArgumentException("Intent array length does not match resolvedTypes length");
                }
            } else {
                throw new IllegalArgumentException("Intents array length must be >= 1");
            }
        }
        if (bOptions == null || !bOptions.hasFileDescriptors()) {
            int callingUid = Binder.getCallingUid();
            int origUserId = userId;
            UserController userController = this.mUserController;
            int callingPid = Binder.getCallingPid();
            if (i != 1) {
                z = false;
            }
            int userId3 = userController.handleIncomingUser(callingPid, callingUid, userId, z, 0, "getIntentSender", (String) null);
            if (origUserId == -2) {
                userId2 = -2;
            } else {
                userId2 = userId3;
            }
            if (!(callingUid == 0 || callingUid == 1000)) {
                try {
                    int uid = AppGlobals.getPackageManager().getPackageUid(str, 268435456, UserHandle.getUserId(callingUid));
                    if (!UserHandle.isSameApp(callingUid, uid)) {
                        String msg = "Permission Denial: getIntentSender() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + ", (need uid=" + uid + ") is not allowed to send as package " + str;
                        Slog.w("ActivityManager", msg);
                        throw new SecurityException(msg);
                    }
                } catch (RemoteException e) {
                    e = e;
                    int i3 = origUserId;
                    int i4 = callingUid;
                    throw new SecurityException(e);
                }
            }
            if (i == 3) {
                try {
                    int i5 = origUserId;
                    int i6 = callingUid;
                } catch (RemoteException e2) {
                    e = e2;
                    int i7 = origUserId;
                    int i8 = callingUid;
                    throw new SecurityException(e);
                }
                try {
                    return this.mAtmInternal.getIntentSender(type, packageName, callingUid, userId2, token, resultWho, requestCode, intents, resolvedTypes, flags, bOptions);
                } catch (RemoteException e3) {
                    e = e3;
                    throw new SecurityException(e);
                }
            } else {
                return this.mPendingIntentController.getIntentSender(type, packageName, callingUid, userId2, token, resultWho, requestCode, intents, resolvedTypes, flags, bOptions);
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in options");
        }
    }

    public int sendIntentSender(IIntentSender target, IBinder whitelistToken, int code, Intent intent, String resolvedType, IIntentReceiver finishedReceiver, String requiredPermission, Bundle options) {
        Intent intent2;
        IIntentSender iIntentSender = target;
        if (iIntentSender instanceof PendingIntentRecord) {
            return ((PendingIntentRecord) iIntentSender).sendWithResult(code, intent, resolvedType, whitelistToken, finishedReceiver, requiredPermission, options);
        }
        if (intent == null) {
            Slog.wtf("ActivityManager", "Can't use null intent with direct IIntentSender call");
            intent2 = new Intent("android.intent.action.MAIN");
        } else {
            intent2 = intent;
        }
        try {
            target.send(code, intent2, resolvedType, whitelistToken, (IIntentReceiver) null, requiredPermission, options);
        } catch (RemoteException e) {
        }
        if (finishedReceiver == null) {
            return 0;
        }
        try {
            finishedReceiver.performReceive(intent2, 0, (String) null, (Bundle) null, false, false, UserHandle.getCallingUserId());
            return 0;
        } catch (RemoteException e2) {
            return 0;
        }
    }

    public void cancelIntentSender(IIntentSender sender) {
        this.mPendingIntentController.cancelIntentSender(sender);
    }

    public String getPackageForIntentSender(IIntentSender pendingResult) {
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return null;
        }
        try {
            return ((PendingIntentRecord) pendingResult).key.packageName;
        } catch (ClassCastException e) {
            return null;
        }
    }

    public void registerIntentSenderCancelListener(IIntentSender sender, IResultReceiver receiver) {
        this.mPendingIntentController.registerIntentSenderCancelListener(sender, receiver);
    }

    public void unregisterIntentSenderCancelListener(IIntentSender sender, IResultReceiver receiver) {
        this.mPendingIntentController.unregisterIntentSenderCancelListener(sender, receiver);
    }

    public int getUidForIntentSender(IIntentSender sender) {
        if (!(sender instanceof PendingIntentRecord)) {
            return -1;
        }
        try {
            return ((PendingIntentRecord) sender).uid;
        } catch (ClassCastException e) {
            return -1;
        }
    }

    public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult) {
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return false;
        }
        try {
            PendingIntentRecord res = (PendingIntentRecord) pendingResult;
            if (res.key.allIntents == null) {
                return false;
            }
            for (Intent intent : res.key.allIntents) {
                if (intent.getPackage() != null && intent.getComponent() != null) {
                    return false;
                }
            }
            return true;
        } catch (ClassCastException e) {
            return false;
        }
    }

    public boolean isIntentSenderAnActivity(IIntentSender pendingResult) {
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return false;
        }
        try {
            if (((PendingIntentRecord) pendingResult).key.type == 2) {
                return true;
            }
            return false;
        } catch (ClassCastException e) {
            return false;
        }
    }

    public boolean isIntentSenderAForegroundService(IIntentSender pendingResult) {
        if (!(pendingResult instanceof PendingIntentRecord) || ((PendingIntentRecord) pendingResult).key.type != 5) {
            return false;
        }
        return true;
    }

    public boolean isIntentSenderABroadcast(IIntentSender pendingResult) {
        if (!(pendingResult instanceof PendingIntentRecord) || ((PendingIntentRecord) pendingResult).key.type != 1) {
            return false;
        }
        return true;
    }

    public Intent getIntentForIntentSender(IIntentSender pendingResult) {
        enforceCallingPermission("android.permission.GET_INTENT_SENDER_INTENT", "getIntentForIntentSender()");
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return null;
        }
        try {
            PendingIntentRecord res = (PendingIntentRecord) pendingResult;
            if (res.key.requestIntent != null) {
                return new Intent(res.key.requestIntent);
            }
            return null;
        } catch (ClassCastException e) {
            return null;
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 3 */
    public String getTagForIntentSender(IIntentSender pendingResult, String prefix) {
        String tagForIntentSenderLocked;
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return null;
        }
        try {
            PendingIntentRecord res = (PendingIntentRecord) pendingResult;
            synchronized (this) {
                boostPriorityForLockedSection();
                tagForIntentSenderLocked = getTagForIntentSenderLocked(res, prefix);
            }
            resetPriorityAfterLockedSection();
            return tagForIntentSenderLocked;
        } catch (ClassCastException e) {
            return null;
        } catch (Throwable th) {
            while (true) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix) {
        Intent intent = res.key.requestIntent;
        if (intent == null) {
            return null;
        }
        if (res.lastTag != null && res.lastTagPrefix == prefix && (res.lastTagPrefix == null || res.lastTagPrefix.equals(prefix))) {
            return res.lastTag;
        }
        res.lastTagPrefix = prefix;
        StringBuilder sb = new StringBuilder(128);
        if (prefix != null) {
            sb.append(prefix);
        }
        if (intent.getAction() != null) {
            sb.append(intent.getAction());
        } else if (intent.getComponent() != null) {
            intent.getComponent().appendShortString(sb);
        } else {
            sb.append("?");
        }
        String sb2 = sb.toString();
        res.lastTag = sb2;
        return sb2;
    }

    public void setProcessLimit(int max) {
        enforceCallingPermission("android.permission.SET_PROCESS_LIMIT", "setProcessLimit()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mConstants.setOverrideMaxCachedProcesses(max);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        trimApplications("updateOomAdj_processEnd");
    }

    public int getProcessLimit() {
        int overrideMaxCachedProcesses;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                overrideMaxCachedProcesses = this.mConstants.getOverrideMaxCachedProcesses();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return overrideMaxCachedProcesses;
    }

    /* Debug info: failed to restart local var, previous not found, register: 5 */
    /* access modifiers changed from: package-private */
    public void importanceTokenDied(ImportanceToken token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    if (this.mImportantProcesses.get(token.pid) != token) {
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    this.mImportantProcesses.remove(token.pid);
                    ProcessRecord pr = this.mPidsSelfLocked.get(token.pid);
                    if (pr == null) {
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    pr.forcingToImportant = null;
                    updateProcessForegroundLocked(pr, false, 0, false);
                    updateOomAdjLocked("updateOomAdj_uiVisibility");
                    resetPriorityAfterLockedSection();
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 6 */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x0069, code lost:
        if (r0 == false) goto L_0x0071;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:34:?, code lost:
        updateOomAdjLocked("updateOomAdj_uiVisibility");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:36:0x0072, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:37:0x0075, code lost:
        return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void setProcessImportant(android.os.IBinder r7, int r8, boolean r9, java.lang.String r10) {
        /*
            r6 = this;
            java.lang.String r0 = "android.permission.SET_PROCESS_LIMIT"
            java.lang.String r1 = "setProcessImportant()"
            r6.enforceCallingPermission(r0, r1)
            monitor-enter(r6)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0079 }
            r0 = 0
            com.android.server.am.ActivityManagerService$PidMap r1 = r6.mPidsSelfLocked     // Catch:{ all -> 0x0079 }
            monitor-enter(r1)     // Catch:{ all -> 0x0079 }
            com.android.server.am.ActivityManagerService$PidMap r2 = r6.mPidsSelfLocked     // Catch:{ all -> 0x0076 }
            com.android.server.am.ProcessRecord r2 = r2.get(r8)     // Catch:{ all -> 0x0076 }
            if (r2 != 0) goto L_0x0037
            if (r9 == 0) goto L_0x0037
            java.lang.String r3 = "ActivityManager"
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x0076 }
            r4.<init>()     // Catch:{ all -> 0x0076 }
            java.lang.String r5 = "setProcessForeground called on unknown pid: "
            r4.append(r5)     // Catch:{ all -> 0x0076 }
            r4.append(r8)     // Catch:{ all -> 0x0076 }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x0076 }
            android.util.Slog.w(r3, r4)     // Catch:{ all -> 0x0076 }
            monitor-exit(r1)     // Catch:{ all -> 0x0076 }
            monitor-exit(r6)     // Catch:{ all -> 0x0079 }
            resetPriorityAfterLockedSection()
            return
        L_0x0037:
            android.util.SparseArray<com.android.server.am.ActivityManagerService$ImportanceToken> r3 = r6.mImportantProcesses     // Catch:{ all -> 0x0076 }
            java.lang.Object r3 = r3.get(r8)     // Catch:{ all -> 0x0076 }
            com.android.server.am.ActivityManagerService$ImportanceToken r3 = (com.android.server.am.ActivityManagerService.ImportanceToken) r3     // Catch:{ all -> 0x0076 }
            r4 = 0
            if (r3 == 0) goto L_0x0052
            android.os.IBinder r5 = r3.token     // Catch:{ all -> 0x0076 }
            r5.unlinkToDeath(r3, r4)     // Catch:{ all -> 0x0076 }
            android.util.SparseArray<com.android.server.am.ActivityManagerService$ImportanceToken> r5 = r6.mImportantProcesses     // Catch:{ all -> 0x0076 }
            r5.remove(r8)     // Catch:{ all -> 0x0076 }
            if (r2 == 0) goto L_0x0051
            r5 = 0
            r2.forcingToImportant = r5     // Catch:{ all -> 0x0076 }
        L_0x0051:
            r0 = 1
        L_0x0052:
            if (r9 == 0) goto L_0x0068
            if (r7 == 0) goto L_0x0068
            com.android.server.am.ActivityManagerService$14 r5 = new com.android.server.am.ActivityManagerService$14     // Catch:{ all -> 0x0076 }
            r5.<init>(r8, r7, r10)     // Catch:{ all -> 0x0076 }
            r7.linkToDeath(r5, r4)     // Catch:{ RemoteException -> 0x0067 }
            android.util.SparseArray<com.android.server.am.ActivityManagerService$ImportanceToken> r4 = r6.mImportantProcesses     // Catch:{ RemoteException -> 0x0067 }
            r4.put(r8, r5)     // Catch:{ RemoteException -> 0x0067 }
            r2.forcingToImportant = r5     // Catch:{ RemoteException -> 0x0067 }
            r0 = 1
            goto L_0x0068
        L_0x0067:
            r4 = move-exception
        L_0x0068:
            monitor-exit(r1)     // Catch:{ all -> 0x0076 }
            if (r0 == 0) goto L_0x0071
            java.lang.String r1 = "updateOomAdj_uiVisibility"
            r6.updateOomAdjLocked(r1)     // Catch:{ all -> 0x0079 }
        L_0x0071:
            monitor-exit(r6)     // Catch:{ all -> 0x0079 }
            resetPriorityAfterLockedSection()
            return
        L_0x0076:
            r2 = move-exception
            monitor-exit(r1)     // Catch:{ all -> 0x0076 }
            throw r2     // Catch:{ all -> 0x0079 }
        L_0x0079:
            r0 = move-exception
            monitor-exit(r6)     // Catch:{ all -> 0x0079 }
            resetPriorityAfterLockedSection()
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.setProcessImportant(android.os.IBinder, int, boolean, java.lang.String):void");
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:11:0x001d, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x0020, code lost:
        return r1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean isAppForeground(int r5) {
        /*
            r4 = this;
            monitor-enter(r4)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0026 }
            com.android.server.am.ProcessList r0 = r4.mProcessList     // Catch:{ all -> 0x0026 }
            com.android.server.am.ActiveUids r0 = r0.mActiveUids     // Catch:{ all -> 0x0026 }
            com.android.server.am.UidRecord r0 = r0.get(r5)     // Catch:{ all -> 0x0026 }
            r1 = 0
            if (r0 == 0) goto L_0x0021
            boolean r2 = r0.idle     // Catch:{ all -> 0x0026 }
            if (r2 == 0) goto L_0x0014
            goto L_0x0021
        L_0x0014:
            int r2 = r0.getCurProcState()     // Catch:{ all -> 0x0026 }
            r3 = 7
            if (r2 > r3) goto L_0x001c
            r1 = 1
        L_0x001c:
            monitor-exit(r4)     // Catch:{ all -> 0x0026 }
            resetPriorityAfterLockedSection()
            return r1
        L_0x0021:
            monitor-exit(r4)     // Catch:{ all -> 0x0026 }
            resetPriorityAfterLockedSection()
            return r1
        L_0x0026:
            r0 = move-exception
            monitor-exit(r4)     // Catch:{ all -> 0x0026 }
            resetPriorityAfterLockedSection()
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.isAppForeground(int):boolean");
    }

    /* access modifiers changed from: private */
    public boolean isAppBad(ApplicationInfo info) {
        boolean isBadProcessLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                isBadProcessLocked = this.mAppErrors.isBadProcessLocked(info);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return isBadProcessLocked;
    }

    /* access modifiers changed from: package-private */
    public int getUidState(int uid) {
        int uidProcStateLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                uidProcStateLocked = this.mProcessList.getUidProcStateLocked(uid);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return uidProcStateLocked;
    }

    static class ProcessInfoService extends IProcessInfoService.Stub {
        final ActivityManagerService mActivityManagerService;

        ProcessInfoService(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        public void getProcessStatesFromPids(int[] pids, int[] states) {
            this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(pids, states, (int[]) null);
        }

        public void getProcessStatesAndOomScoresFromPids(int[] pids, int[] states, int[] scores) {
            this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(pids, states, scores);
        }
    }

    public void getProcessStatesAndOomScoresForPIDs(int[] pids, int[] states, int[] scores) {
        if (scores != null) {
            enforceCallingPermission("android.permission.GET_PROCESS_STATE_AND_OOM_SCORE", "getProcessStatesAndOomScoresForPIDs()");
        }
        if (pids == null) {
            throw new NullPointerException("pids");
        } else if (states == null) {
            throw new NullPointerException("states");
        } else if (pids.length != states.length) {
            throw new IllegalArgumentException("pids and states arrays have different lengths!");
        } else if (scores == null || pids.length == scores.length) {
            synchronized (this.mPidsSelfLocked) {
                for (int i = 0; i < pids.length; i++) {
                    ProcessRecord pr = this.mPidsSelfLocked.get(pids[i]);
                    states[i] = pr == null ? 21 : pr.getCurProcState();
                    if (scores != null) {
                        scores[i] = pr == null ? ScreenRotationAnimationInjector.BLACK_SURFACE_INVALID_POSITION : pr.curAdj;
                    }
                }
            }
        } else {
            throw new IllegalArgumentException("pids and scores arrays have different lengths!");
        }
    }

    static class PermissionController extends IPermissionController.Stub {
        ActivityManagerService mActivityManagerService;

        PermissionController(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        public boolean checkPermission(String permission, int pid, int uid) {
            return this.mActivityManagerService.checkPermission(permission, pid, uid) == 0;
        }

        public int noteOp(String op, int uid, String packageName) {
            return this.mActivityManagerService.mAppOpsService.noteOperation(AppOpsManager.strOpToOp(op), uid, packageName);
        }

        public String[] getPackagesForUid(int uid) {
            return this.mActivityManagerService.mContext.getPackageManager().getPackagesForUid(uid);
        }

        public boolean isRuntimePermission(String permission) {
            try {
                if ((this.mActivityManagerService.mContext.getPackageManager().getPermissionInfo(permission, 0).protectionLevel & 15) == 1) {
                    return true;
                }
                return false;
            } catch (PackageManager.NameNotFoundException nnfe) {
                Slog.e("ActivityManager", "No such permission: " + permission, nnfe);
                return false;
            }
        }

        public int getPackageUid(String packageName, int flags) {
            try {
                return this.mActivityManagerService.mContext.getPackageManager().getPackageUid(packageName, flags);
            } catch (PackageManager.NameNotFoundException e) {
                return -1;
            }
        }
    }

    class IntentFirewallInterface implements IntentFirewall.AMSInterface {
        IntentFirewallInterface() {
        }

        public int checkComponentPermission(String permission, int pid, int uid, int owningUid, boolean exported) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            return ActivityManagerService.checkComponentPermission(permission, pid, uid, owningUid, exported);
        }

        public Object getAMSLock() {
            return ActivityManagerService.this;
        }
    }

    public static int checkComponentPermission(String permission, int pid, int uid, int owningUid, boolean exported) {
        if (pid == MY_PID) {
            return 0;
        }
        return ActivityManager.checkComponentPermission(permission, uid, owningUid, exported);
    }

    public int checkPermission(String permission, int pid, int uid) {
        if (permission == null) {
            return -1;
        }
        return checkComponentPermission(permission, pid, uid, -1, true);
    }

    public int checkPermissionWithToken(String permission, int pid, int uid, IBinder callerToken) {
        if (permission == null) {
            return -1;
        }
        Identity tlsIdentity = sCallerIdentity.get();
        if (tlsIdentity != null && tlsIdentity.token == callerToken) {
            Slog.d("ActivityManager", "checkComponentPermission() adjusting {pid,uid} to {" + tlsIdentity.pid + "," + tlsIdentity.uid + "}");
            uid = tlsIdentity.uid;
            pid = tlsIdentity.pid;
        }
        return checkComponentPermission(permission, pid, uid, -1, true);
    }

    /* access modifiers changed from: package-private */
    public int checkCallingPermission(String permission) {
        return checkPermission(permission, Binder.getCallingPid(), Binder.getCallingUid());
    }

    /* access modifiers changed from: package-private */
    public void enforceCallingPermission(String permission, String func) {
        if (checkCallingPermission(permission) != 0) {
            String msg = "Permission Denial: " + func + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + permission;
            Slog.w("ActivityManager", msg);
            throw new SecurityException(msg);
        }
    }

    /* access modifiers changed from: package-private */
    public void enforcePermission(String permission, int pid, int uid, String func) {
        if (checkPermission(permission, pid, uid) != 0) {
            String msg = "Permission Denial: " + func + " from pid=" + pid + ", uid=" + uid + " requires " + permission;
            Slog.w("ActivityManager", msg);
            throw new SecurityException(msg);
        }
    }

    public boolean isAppStartModeDisabled(int uid, String packageName) {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                z = getAppStartModeLocked(uid, packageName, 0, -1, false, true, false) == 3;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return z;
    }

    /* access modifiers changed from: package-private */
    public int appRestrictedInBackgroundLocked(int uid, String packageName, int packageTargetSdk) {
        if (packageTargetSdk >= SHOW_STRICT_MODE_VIOLATION_UI_MSG) {
            return 2;
        }
        int appop = this.mAppOpsService.noteOperation(HANDLE_TRUST_STORAGE_UPDATE_MSG, uid, packageName);
        if (appop != 0) {
            if (appop != 1) {
                return 2;
            }
            return 1;
        } else if (!this.mForceBackgroundCheck || UserHandle.isCore(uid) || isOnDeviceIdleWhitelistLocked(uid, true)) {
            return 0;
        } else {
            return 1;
        }
    }

    /* access modifiers changed from: package-private */
    public int appServicesRestrictedInBackgroundLocked(int uid, String packageName, int packageTargetSdk) {
        if (!this.mPackageManagerInt.isPackagePersistent(packageName) && !uidOnBackgroundWhitelist(uid) && !isOnDeviceIdleWhitelistLocked(uid, false)) {
            return appRestrictedInBackgroundLocked(uid, packageName, packageTargetSdk);
        }
        return 0;
    }

    /* access modifiers changed from: package-private */
    public int getAppStartModeLocked(int uid, String packageName, int packageTargetSdk, int callingPid, boolean alwaysRestrict, boolean disabledOnly, boolean forcedStandby) {
        return getAppStartModeLocked(uid, packageName, packageTargetSdk, callingPid, alwaysRestrict, disabledOnly, forcedStandby, (String) null);
    }

    /* access modifiers changed from: package-private */
    public int getAppStartModeLocked(int uid, String packageName, int packageTargetSdk, int callingPid, boolean alwaysRestrict, boolean disabledOnly, boolean forcedStandby, String callingPackage) {
        boolean ephemeral;
        int startMode;
        ProcessRecord proc;
        UidRecord uidRec = this.mProcessList.getUidRecordLocked(uid);
        if (uidRec != null && !alwaysRestrict && !forcedStandby && !uidRec.idle) {
            return 0;
        }
        if (uidRec == null) {
            ephemeral = getPackageManagerInternalLocked().isPackageEphemeral(UserHandle.getUserId(uid), packageName);
        } else {
            ephemeral = uidRec.ephemeral;
        }
        if (ephemeral) {
            return 3;
        }
        if (disabledOnly) {
            return 0;
        }
        if (alwaysRestrict) {
            startMode = appRestrictedInBackgroundLocked(uid, packageName, packageTargetSdk);
        } else {
            startMode = appServicesRestrictedInBackgroundLocked(uid, packageName, packageTargetSdk);
        }
        if (startMode == 1 && callingPid >= 0) {
            synchronized (this.mPidsSelfLocked) {
                proc = this.mPidsSelfLocked.get(callingPid);
            }
            if (proc != null && !ActivityManager.isProcStateBackground(proc.getCurProcState())) {
                return 0;
            }
        }
        return ActivityManagerServiceInjector.getAppStartMode(this, uid, packageName, startMode, callingPackage);
    }

    /* access modifiers changed from: package-private */
    public boolean isOnDeviceIdleWhitelistLocked(int uid, boolean allowExceptIdleToo) {
        int[] whitelist;
        int appId = UserHandle.getAppId(uid);
        if (allowExceptIdleToo) {
            whitelist = this.mDeviceIdleExceptIdleWhitelist;
        } else {
            whitelist = this.mDeviceIdleWhitelist;
        }
        return Arrays.binarySearch(whitelist, appId) >= 0 || Arrays.binarySearch(this.mDeviceIdleTempWhitelist, appId) >= 0 || this.mPendingTempWhitelist.indexOfKey(uid) >= 0;
    }

    /* access modifiers changed from: package-private */
    public String getPendingTempWhitelistTagForUidLocked(int uid) {
        PendingTempWhitelist ptw = this.mPendingTempWhitelist.get(uid);
        if (ptw != null) {
            return ptw.tag;
        }
        return null;
    }

    private ProviderInfo getProviderInfoLocked(String authority, int userHandle, int pmFlags) {
        ContentProviderRecord cpr = this.mProviderMap.getProviderByName(authority, userHandle);
        if (cpr != null) {
            return cpr.info;
        }
        try {
            return AppGlobals.getPackageManager().resolveContentProvider(authority, pmFlags | 2048, userHandle);
        } catch (RemoteException e) {
            return null;
        }
    }

    @VisibleForTesting
    public void grantEphemeralAccessLocked(int userId, Intent intent, int targetAppId, int ephemeralAppId) {
        getPackageManagerInternalLocked().grantEphemeralAccess(userId, intent, targetAppId, ephemeralAppId);
    }

    public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags, int userId, IBinder callerToken) {
        enforceNotIsolatedCaller("checkUriPermission");
        Identity tlsIdentity = sCallerIdentity.get();
        if (tlsIdentity != null && tlsIdentity.token == callerToken) {
            uid = tlsIdentity.uid;
            pid = tlsIdentity.pid;
        }
        if (pid != MY_PID && !this.mUgmInternal.checkUriPermission(new GrantUri(userId, uri, false), uid, modeFlags)) {
            return -1;
        }
        return 0;
    }

    /* Debug info: failed to restart local var, previous not found, register: 9 */
    public void grantUriPermission(IApplicationThread caller, String targetPkg, Uri uri, int modeFlags, int userId) {
        enforceNotIsolatedCaller("grantUriPermission");
        GrantUri grantUri = new GrantUri(userId, uri, false);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord r = getRecordForAppLocked(caller);
                if (r == null) {
                    throw new SecurityException("Unable to find app for caller " + caller + " when granting permission to uri " + grantUri);
                } else if (targetPkg != null) {
                    Preconditions.checkFlagsArgument(modeFlags, HdmiCecKeycode.UI_SOUND_PRESENTATION_TREBLE_STEP_MINUS);
                    this.mUgmInternal.grantUriPermission(r.uid, targetPkg, grantUri, modeFlags, (UriPermissionOwner) null, UserHandle.getUserId(r.uid));
                } else {
                    throw new IllegalArgumentException("null target");
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 7 */
    public void revokeUriPermission(IApplicationThread caller, String targetPackage, Uri uri, int modeFlags, int userId) {
        enforceNotIsolatedCaller("revokeUriPermission");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord r = getRecordForAppLocked(caller);
                if (r == null) {
                    throw new SecurityException("Unable to find app for caller " + caller + " when revoking permission to uri " + uri);
                } else if (uri == null) {
                    Slog.w("ActivityManager", "revokeUriPermission: null uri");
                } else if (!Intent.isAccessUriMode(modeFlags)) {
                    resetPriorityAfterLockedSection();
                } else if (getProviderInfoLocked(uri.getAuthority(), userId, 786432) == null) {
                    Slog.w("ActivityManager", "No content provider found for permission revoke: " + uri.toSafeString());
                    resetPriorityAfterLockedSection();
                } else {
                    this.mUgmInternal.revokeUriPermission(targetPackage, r.uid, new GrantUri(userId, uri, false), modeFlags);
                    resetPriorityAfterLockedSection();
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void showWaitingForDebugger(IApplicationThread who, boolean waiting) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord app = who != null ? getRecordForAppLocked(who) : null;
                if (app == null) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                Message msg = Message.obtain();
                msg.what = 6;
                msg.obj = app;
                msg.arg1 = waiting ? 1 : 0;
                this.mUiHandler.sendMessage(msg);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public void getMemoryInfo(ActivityManager.MemoryInfo outInfo) {
        this.mProcessList.getMemoryInfo(outInfo);
    }

    public List<ActivityManager.RunningTaskInfo> getTasks(int maxNum) {
        return this.mActivityTaskManager.getTasks(maxNum);
    }

    public List<ActivityManager.RunningTaskInfo> getFilteredTasks(int maxNum, @WindowConfiguration.ActivityType int ignoreActivityType, @WindowConfiguration.WindowingMode int ignoreWindowingMode) {
        return this.mActivityTaskManager.getFilteredTasks(maxNum, ignoreActivityType, ignoreWindowingMode);
    }

    public void cancelTaskWindowTransition(int taskId) {
        this.mActivityTaskManager.cancelTaskWindowTransition(taskId);
    }

    public void setTaskResizeable(int taskId, int resizeableMode) {
        this.mActivityTaskManager.setTaskResizeable(taskId, resizeableMode);
    }

    public ActivityManager.TaskSnapshot getTaskSnapshot(int taskId, boolean reducedResolution) {
        return this.mActivityTaskManager.getTaskSnapshot(taskId, reducedResolution);
    }

    public void resizeTask(int taskId, Rect bounds, int resizeMode) {
        this.mActivityTaskManager.resizeTask(taskId, bounds, resizeMode);
    }

    public Rect getTaskBounds(int taskId) {
        return this.mActivityTaskManager.getTaskBounds(taskId);
    }

    public void removeStack(int stackId) {
        this.mActivityTaskManager.removeStack(stackId);
    }

    public boolean removeTask(int taskId) {
        return this.mActivityTaskManager.removeTask(taskId);
    }

    public void moveTaskToFront(IApplicationThread appThread, String callingPackage, int taskId, int flags, Bundle bOptions) {
        this.mActivityTaskManager.moveTaskToFront(appThread, callingPackage, taskId, flags, bOptions);
    }

    public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot) {
        return this.mActivityTaskManager.moveActivityTaskToBack(token, nonRoot);
    }

    public void moveTaskToStack(int taskId, int stackId, boolean toTop) {
        this.mActivityTaskManager.moveTaskToStack(taskId, stackId, toTop);
    }

    public void resizeStack(int stackId, Rect destBounds, boolean allowResizeInDockedMode, boolean preserveWindows, boolean animate, int animationDuration) {
        this.mActivityTaskManager.resizeStack(stackId, destBounds, allowResizeInDockedMode, preserveWindows, animate, animationDuration);
    }

    public ParceledListSlice<ActivityManager.RecentTaskInfo> getRecentTasks(int maxNum, int flags, int userId) {
        return this.mActivityTaskManager.getRecentTasks(maxNum, flags, userId);
    }

    public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds) {
        return this.mActivityTaskManager.moveTopActivityToPinnedStack(stackId, bounds);
    }

    public void resizeDockedStack(Rect dockedBounds, Rect tempDockedTaskBounds, Rect tempDockedTaskInsetBounds, Rect tempOtherTaskBounds, Rect tempOtherTaskInsetBounds) {
        this.mActivityTaskManager.resizeDockedStack(dockedBounds, tempDockedTaskBounds, tempDockedTaskInsetBounds, tempOtherTaskBounds, tempOtherTaskInsetBounds);
    }

    public void positionTaskInStack(int taskId, int stackId, int position) {
        this.mActivityTaskManager.positionTaskInStack(taskId, stackId, position);
    }

    public List<ActivityManager.StackInfo> getAllStackInfos() {
        return this.mActivityTaskManager.getAllStackInfos();
    }

    public int getTaskForActivity(IBinder token, boolean onlyRoot) {
        return this.mActivityTaskManager.getTaskForActivity(token, onlyRoot);
    }

    public void updateDeviceOwner(String packageName) {
        int callingUid = Binder.getCallingUid();
        if (callingUid == 0 || callingUid == 1000) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mDeviceOwnerName = packageName;
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        throw new SecurityException("updateDeviceOwner called from non-system process");
    }

    public void updateLockTaskPackages(int userId, String[] packages) {
        this.mActivityTaskManager.updateLockTaskPackages(userId, packages);
    }

    public boolean isInLockTaskMode() {
        return this.mActivityTaskManager.isInLockTaskMode();
    }

    public int getLockTaskModeState() {
        return this.mActivityTaskManager.getLockTaskModeState();
    }

    public void startSystemLockTaskMode(int taskId) throws RemoteException {
        this.mActivityTaskManager.startSystemLockTaskMode(taskId);
    }

    private final List<ProviderInfo> generateApplicationProvidersLocked(ProcessRecord app) {
        List<ProviderInfo> providers;
        ProcessRecord processRecord = app;
        try {
            providers = AppGlobals.getPackageManager().queryContentProviders(processRecord.processName, processRecord.uid, 268438528, (String) null).getList();
        } catch (RemoteException e) {
            providers = null;
        }
        int userId = processRecord.userId;
        if (providers != null) {
            int N = providers.size();
            processRecord.pubProviders.ensureCapacity(processRecord.pubProviders.size() + N);
            int N2 = N;
            int i = 0;
            while (i < N2) {
                ProviderInfo cpi = providers.get(i);
                boolean singleton = isSingleton(cpi.processName, cpi.applicationInfo, cpi.name, cpi.flags);
                if (!singleton || UserHandle.getUserId(processRecord.uid) == 0) {
                    ComponentName comp = new ComponentName(cpi.packageName, cpi.name);
                    ContentProviderRecord cpr = this.mProviderMap.getProviderByClass(comp, userId);
                    if (cpr == null) {
                        cpr = new ContentProviderRecord(this, cpi, processRecord.info, comp, singleton);
                        this.mProviderMap.putProviderByClass(comp, cpr);
                    }
                    processRecord.pubProviders.put(cpi.name, cpr);
                    if (!cpi.multiprocess || !PackageManagerService.PLATFORM_PACKAGE_NAME.equals(cpi.packageName)) {
                        processRecord.addPackage(cpi.applicationInfo.packageName, cpi.applicationInfo.longVersionCode, this.mProcessStats);
                    }
                    notifyPackageUse(cpi.applicationInfo.packageName, 4);
                } else {
                    providers.remove(i);
                    N2--;
                    i--;
                }
                i++;
            }
        }
        return providers;
    }

    public String checkContentProviderAccess(String authority, int userId) {
        ProcessRecord r;
        String checkContentProviderPermissionLocked;
        if (userId == -1) {
            this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "ActivityManager");
            userId = UserHandle.getCallingUserId();
        }
        ProviderInfo cpi = null;
        try {
            cpi = AppGlobals.getPackageManager().resolveContentProvider(authority, 790016, userId);
        } catch (RemoteException e) {
        }
        if (cpi == null) {
            return "Failed to find provider " + authority + " for user " + userId + "; expected to find a valid ContentProvider for this authority";
        }
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        if (r == null) {
            return "Failed to find PID " + Binder.getCallingPid();
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                checkContentProviderPermissionLocked = checkContentProviderPermissionLocked(cpi, r, userId, true);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return checkContentProviderPermissionLocked;
    }

    private final String checkContentProviderPermissionLocked(ProviderInfo cpi, ProcessRecord r, int userId, boolean checkUser) {
        boolean checkedGrants;
        int userId2;
        String suffix;
        ProviderInfo providerInfo = cpi;
        ProcessRecord processRecord = r;
        int i = userId;
        int callingPid = processRecord != null ? processRecord.pid : Binder.getCallingPid();
        int callingUid = processRecord != null ? processRecord.uid : Binder.getCallingUid();
        boolean checkUser2 = CrossUserUtils.needCheckUser(providerInfo, processRecord != null ? processRecord.processName : null, i, checkUser);
        if (checkUser2) {
            int tmpTargetUserId = this.mUserController.unsafeConvertIncomingUser(i);
            if (tmpTargetUserId == UserHandle.getUserId(callingUid)) {
                checkedGrants = false;
            } else if (this.mUgmInternal.checkAuthorityGrants(callingUid, providerInfo, tmpTargetUserId, checkUser2)) {
                return null;
            } else {
                checkedGrants = true;
            }
            int tmpTargetUserId2 = tmpTargetUserId;
            userId2 = this.mUserController.handleIncomingUser(callingPid, callingUid, userId, false, 0, "checkContentProviderPermissionLocked " + providerInfo.authority, (String) null);
            if (userId2 != tmpTargetUserId2) {
                checkedGrants = false;
            }
        } else {
            checkedGrants = false;
            userId2 = i;
        }
        if (checkComponentPermission(providerInfo.readPermission, callingPid, callingUid, providerInfo.applicationInfo.uid, providerInfo.exported) == 0 || checkComponentPermission(providerInfo.writePermission, callingPid, callingUid, providerInfo.applicationInfo.uid, providerInfo.exported) == 0) {
            return null;
        }
        PathPermission[] pps = providerInfo.pathPermissions;
        if (pps != null) {
            int i2 = pps.length;
            while (i2 > 0) {
                i2--;
                PathPermission pp = pps[i2];
                String pprperm = pp.getReadPermission();
                if (pprperm != null && checkComponentPermission(pprperm, callingPid, callingUid, providerInfo.applicationInfo.uid, providerInfo.exported) == 0) {
                    return null;
                }
                String ppwperm = pp.getWritePermission();
                if (ppwperm != null && checkComponentPermission(ppwperm, callingPid, callingUid, providerInfo.applicationInfo.uid, providerInfo.exported) == 0) {
                    return null;
                }
            }
        }
        if (!checkedGrants && this.mUgmInternal.checkAuthorityGrants(callingUid, providerInfo, userId2, checkUser2)) {
            return null;
        }
        if (!providerInfo.exported) {
            suffix = " that is not exported from UID " + providerInfo.applicationInfo.uid;
        } else if ("android.permission.MANAGE_DOCUMENTS".equals(providerInfo.readPermission)) {
            suffix = " requires that you obtain access using ACTION_OPEN_DOCUMENT or related APIs";
        } else {
            suffix = " requires " + providerInfo.readPermission + " or " + providerInfo.writePermission;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Permission Denial: opening provider ");
        sb.append(providerInfo.name);
        sb.append(" from ");
        sb.append(processRecord != null ? processRecord : "(null)");
        sb.append(" (pid=");
        sb.append(callingPid);
        sb.append(", uid=");
        sb.append(callingUid);
        sb.append(")");
        sb.append(suffix);
        String msg = sb.toString();
        Slog.w("ActivityManager", msg);
        return msg;
    }

    /* access modifiers changed from: package-private */
    public ContentProviderConnection incProviderCountLocked(ProcessRecord r, ContentProviderRecord cpr, IBinder externalProcessToken, int callingUid, String callingPackage, String callingTag, boolean stable) {
        ProcessRecord processRecord = r;
        ContentProviderRecord contentProviderRecord = cpr;
        if (processRecord != null) {
            for (int i = 0; i < processRecord.conProviders.size(); i++) {
                ContentProviderConnection conn = processRecord.conProviders.get(i);
                if (conn.provider == contentProviderRecord) {
                    if (stable) {
                        conn.stableCount++;
                        conn.numStableIncs++;
                    } else {
                        conn.unstableCount++;
                        conn.numUnstableIncs++;
                    }
                    return conn;
                }
            }
            ContentProviderConnection conn2 = new ContentProviderConnection(contentProviderRecord, r, callingPackage);
            conn2.startAssociationIfNeeded();
            if (stable) {
                conn2.stableCount = 1;
                conn2.numStableIncs = 1;
            } else {
                conn2.unstableCount = 1;
                conn2.numUnstableIncs = 1;
            }
            contentProviderRecord.connections.add(conn2);
            processRecord.conProviders.add(conn2);
            startAssociationLocked(processRecord.uid, processRecord.processName, r.getCurProcState(), contentProviderRecord.uid, contentProviderRecord.appInfo.longVersionCode, contentProviderRecord.name, contentProviderRecord.info.processName);
            return conn2;
        }
        String str = callingPackage;
        contentProviderRecord.addExternalProcessHandleLocked(externalProcessToken, callingUid, callingTag);
        return null;
    }

    /* access modifiers changed from: package-private */
    public boolean decProviderCountLocked(ContentProviderConnection conn, ContentProviderRecord cpr, IBinder externalProcessToken, boolean stable) {
        if (conn != null) {
            ContentProviderRecord cpr2 = conn.provider;
            if (stable) {
                conn.stableCount--;
            } else {
                conn.unstableCount--;
            }
            if (conn.stableCount != 0 || conn.unstableCount != 0) {
                return false;
            }
            conn.stopAssociation();
            cpr2.connections.remove(conn);
            conn.client.conProviders.remove(conn);
            if (conn.client.setProcState < 16 && cpr2.proc != null) {
                cpr2.proc.lastProviderTime = SystemClock.uptimeMillis();
            }
            stopAssociationLocked(conn.client.uid, conn.client.processName, cpr2.uid, cpr2.appInfo.longVersionCode, cpr2.name, cpr2.info.processName);
            return true;
        }
        cpr.removeExternalProcessHandleLocked(externalProcessToken);
        return false;
    }

    /* access modifiers changed from: package-private */
    public void checkTime(long startTime, String where) {
        long now = SystemClock.uptimeMillis();
        if (now - startTime > 1000) {
            Slog.w("ActivityManager", "Slow operation: " + (now - startTime) + "ms so far, now at " + where);
        }
    }

    private boolean isProcessAliveLocked(ProcessRecord proc) {
        if (proc.pid <= 0) {
            return false;
        }
        if (proc.procStatFile == null) {
            proc.procStatFile = "/proc/" + proc.pid + "/stat";
        }
        this.mProcessStateStatsLongs[0] = 0;
        if (!Process.readProcFile(proc.procStatFile, PROCESS_STATE_STATS_FORMAT, (String[]) null, this.mProcessStateStatsLongs, (float[]) null)) {
            return false;
        }
        long state = this.mProcessStateStatsLongs[0];
        if (state == 90 || state == 88 || state == 120 || state == 75) {
            return false;
        }
        return true;
    }

    private String checkContentProviderAssociation(ProcessRecord callingApp, int callingUid, ProviderInfo cpi) {
        if (callingApp != null) {
            for (int i = callingApp.pkgList.size() - 1; i >= 0; i--) {
                if (!validateAssociationAllowedLocked(callingApp.pkgList.keyAt(i), callingApp.uid, cpi.packageName, cpi.applicationInfo.uid)) {
                    return cpi.packageName;
                }
            }
            return null;
        } else if (validateAssociationAllowedLocked(cpi.packageName, cpi.applicationInfo.uid, (String) null, callingUid)) {
            return null;
        } else {
            return "<null>";
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 39 */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r25v0, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v11, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r25v1, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r25v16, resolved type: java.lang.String} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v40, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r25v26, resolved type: int} */
    /* JADX WARNING: type inference failed for: r25v7 */
    /* JADX WARNING: type inference failed for: r25v27 */
    /* JADX WARNING: type inference failed for: r25v28 */
    /* JADX WARNING: type inference failed for: r25v29 */
    /* JADX WARNING: type inference failed for: r25v31 */
    /* JADX WARNING: type inference failed for: r25v33 */
    /*  JADX ERROR: IndexOutOfBoundsException in pass: RegionMakerVisitor
        java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
        	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
        	at java.util.ArrayList.get(ArrayList.java:433)
        	at jadx.core.dex.nodes.InsnNode.getArg(InsnNode.java:101)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:611)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:561)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processExcHandler(RegionMaker.java:1043)
        	at jadx.core.dex.visitors.regions.RegionMaker.processTryCatchBlocks(RegionMaker.java:975)
        	at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:52)
        */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:137:0x021b A[SYNTHETIC, Splitter:B:137:0x021b] */
    /* JADX WARNING: Removed duplicated region for block: B:146:0x0238 A[Catch:{ all -> 0x02a2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:155:0x027e  */
    /* JADX WARNING: Removed duplicated region for block: B:215:0x03a7  */
    /* JADX WARNING: Removed duplicated region for block: B:216:0x03a9  */
    /* JADX WARNING: Removed duplicated region for block: B:219:0x03ae  */
    /* JADX WARNING: Removed duplicated region for block: B:220:0x03b1  */
    /* JADX WARNING: Removed duplicated region for block: B:224:0x03c6 A[Catch:{ all -> 0x085f }] */
    /* JADX WARNING: Removed duplicated region for block: B:335:0x0589 A[SYNTHETIC, Splitter:B:335:0x0589] */
    /* JADX WARNING: Removed duplicated region for block: B:348:0x05b0 A[SYNTHETIC, Splitter:B:348:0x05b0] */
    /* JADX WARNING: Removed duplicated region for block: B:353:0x05be A[SYNTHETIC, Splitter:B:353:0x05be] */
    /* JADX WARNING: Removed duplicated region for block: B:399:0x068c A[SYNTHETIC, Splitter:B:399:0x068c] */
    /* JADX WARNING: Removed duplicated region for block: B:408:0x06a4 A[SYNTHETIC, Splitter:B:408:0x06a4] */
    /* JADX WARNING: Removed duplicated region for block: B:458:0x079a  */
    /* JADX WARNING: Removed duplicated region for block: B:463:0x07ad A[SYNTHETIC, Splitter:B:463:0x07ad] */
    /* JADX WARNING: Removed duplicated region for block: B:467:0x07c2  */
    /* JADX WARNING: Removed duplicated region for block: B:474:0x07e1  */
    /* JADX WARNING: Removed duplicated region for block: B:488:0x082b A[Catch:{ all -> 0x0851 }] */
    /* JADX WARNING: Unknown top exception splitter block from list: {B:446:0x0771=Splitter:B:446:0x0771, B:430:0x0727=Splitter:B:430:0x0727} */
    private android.app.ContentProviderHolder getContentProviderImpl(android.app.IApplicationThread r40, java.lang.String r41, android.os.IBinder r42, int r43, java.lang.String r44, java.lang.String r45, boolean r46, int r47) {
        /*
            r39 = this;
            r11 = r39
            r12 = r40
            r13 = r41
            r14 = r43
            r1 = r47
            r9 = 0
            r2 = 0
            r3 = 0
            monitor-enter(r39)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x09ec }
            long r4 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x09ec }
            r7 = r4
            r4 = 0
            if (r12 == 0) goto L_0x0055
            com.android.server.am.ProcessRecord r5 = r39.getRecordForAppLocked(r40)     // Catch:{ all -> 0x004d }
            r4 = r5
            if (r4 == 0) goto L_0x0022
            r15 = r4
            goto L_0x0056
        L_0x0022:
            java.lang.SecurityException r5 = new java.lang.SecurityException     // Catch:{ all -> 0x004d }
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ all -> 0x004d }
            r6.<init>()     // Catch:{ all -> 0x004d }
            java.lang.String r10 = "Unable to find app for caller "
            r6.append(r10)     // Catch:{ all -> 0x004d }
            r6.append(r12)     // Catch:{ all -> 0x004d }
            java.lang.String r10 = " (pid="
            r6.append(r10)     // Catch:{ all -> 0x004d }
            int r10 = android.os.Binder.getCallingPid()     // Catch:{ all -> 0x004d }
            r6.append(r10)     // Catch:{ all -> 0x004d }
            java.lang.String r10 = ") when getting content provider "
            r6.append(r10)     // Catch:{ all -> 0x004d }
            r6.append(r13)     // Catch:{ all -> 0x004d }
            java.lang.String r6 = r6.toString()     // Catch:{ all -> 0x004d }
            r5.<init>(r6)     // Catch:{ all -> 0x004d }
            throw r5     // Catch:{ all -> 0x004d }
        L_0x004d:
            r0 = move-exception
            r5 = r1
            r17 = r3
            r3 = r12
            r1 = r0
            goto L_0x09f4
        L_0x0055:
            r15 = r4
        L_0x0056:
            r4 = 1
            java.lang.String r5 = "getContentProviderImpl: getProviderByName"
            r11.checkTime(r7, r5)     // Catch:{ all -> 0x09ec }
            com.android.server.am.ProviderMap r5 = r11.mProviderMap     // Catch:{ all -> 0x09ec }
            com.android.server.am.ContentProviderRecord r5 = r5.getProviderByName(r13, r1)     // Catch:{ all -> 0x09ec }
            r10 = 0
            if (r5 != 0) goto L_0x00bf
            if (r1 == 0) goto L_0x00bf
            com.android.server.am.ProviderMap r6 = r11.mProviderMap     // Catch:{ all -> 0x00b7 }
            com.android.server.am.ContentProviderRecord r6 = r6.getProviderByName(r13, r10)     // Catch:{ all -> 0x00b7 }
            r5 = r6
            if (r5 == 0) goto L_0x00ae
            android.content.pm.ProviderInfo r6 = r5.info     // Catch:{ all -> 0x00b7 }
            r2 = r6
            java.lang.String r6 = r2.processName     // Catch:{ all -> 0x00b7 }
            android.content.pm.ApplicationInfo r10 = r2.applicationInfo     // Catch:{ all -> 0x00b7 }
            r17 = r3
            java.lang.String r3 = r2.name     // Catch:{ all -> 0x00a8 }
            r18 = r4
            int r4 = r2.flags     // Catch:{ all -> 0x00a8 }
            boolean r3 = r11.isSingleton(r6, r10, r3, r4)     // Catch:{ all -> 0x00a8 }
            if (r3 == 0) goto L_0x0091
            int r3 = r15.uid     // Catch:{ all -> 0x00a8 }
            android.content.pm.ApplicationInfo r4 = r2.applicationInfo     // Catch:{ all -> 0x00a8 }
            int r4 = r4.uid     // Catch:{ all -> 0x00a8 }
            boolean r3 = r11.isValidSingletonCall(r3, r4)     // Catch:{ all -> 0x00a8 }
            if (r3 != 0) goto L_0x009b
        L_0x0091:
            android.content.pm.ApplicationInfo r3 = r2.applicationInfo     // Catch:{ all -> 0x00a8 }
            java.lang.String r3 = r3.packageName     // Catch:{ all -> 0x00a8 }
            boolean r3 = com.android.server.am.ActivityManagerServiceInjector.shouldCrossXSpace(r3, r1)     // Catch:{ all -> 0x00a8 }
            if (r3 == 0) goto L_0x00a1
        L_0x009b:
            r1 = 0
            r4 = 0
            r6 = r4
            r10 = r5
            r5 = r1
            goto L_0x00c7
        L_0x00a1:
            r3 = 0
            r2 = 0
            r5 = r1
            r10 = r3
            r6 = r18
            goto L_0x00c7
        L_0x00a8:
            r0 = move-exception
            r5 = r1
            r3 = r12
            r1 = r0
            goto L_0x09f4
        L_0x00ae:
            r17 = r3
            r18 = r4
            r10 = r5
            r6 = r18
            r5 = r1
            goto L_0x00c7
        L_0x00b7:
            r0 = move-exception
            r17 = r3
            r5 = r1
            r3 = r12
            r1 = r0
            goto L_0x09f4
        L_0x00bf:
            r17 = r3
            r18 = r4
            r10 = r5
            r6 = r18
            r5 = r1
        L_0x00c7:
            r4 = 1
            if (r10 == 0) goto L_0x0111
            com.android.server.am.ProcessRecord r1 = r10.proc     // Catch:{ all -> 0x010c }
            if (r1 == 0) goto L_0x0111
            com.android.server.am.ProcessRecord r1 = r10.proc     // Catch:{ all -> 0x010c }
            boolean r1 = r1.killed     // Catch:{ all -> 0x010c }
            if (r1 != 0) goto L_0x00d6
            r1 = r4
            goto L_0x00d7
        L_0x00d6:
            r1 = 0
        L_0x00d7:
            r3 = r1
            com.android.server.am.ProcessRecord r1 = r10.proc     // Catch:{ all -> 0x0105 }
            boolean r1 = r1.killed     // Catch:{ all -> 0x0105 }
            if (r1 == 0) goto L_0x0102
            com.android.server.am.ProcessRecord r1 = r10.proc     // Catch:{ all -> 0x0105 }
            boolean r1 = r1.killedByAm     // Catch:{ all -> 0x0105 }
            if (r1 == 0) goto L_0x0102
            java.lang.String r1 = "getContentProviderImpl: before appDied (killedByAm)"
            r11.checkTime(r7, r1)     // Catch:{ all -> 0x0105 }
            long r17 = android.os.Binder.clearCallingIdentity()     // Catch:{ all -> 0x0105 }
            com.android.server.am.ProcessRecord r1 = r10.proc     // Catch:{ all -> 0x00fc }
            r11.appDiedLocked(r1)     // Catch:{ all -> 0x00fc }
            android.os.Binder.restoreCallingIdentity(r17)     // Catch:{ all -> 0x0105 }
            java.lang.String r1 = "getContentProviderImpl: after appDied (killedByAm)"
            r11.checkTime(r7, r1)     // Catch:{ all -> 0x0105 }
            goto L_0x0102
        L_0x00fc:
            r0 = move-exception
            r1 = r0
            android.os.Binder.restoreCallingIdentity(r17)     // Catch:{ all -> 0x0105 }
            throw r1     // Catch:{ all -> 0x0105 }
        L_0x0102:
            r17 = r3
            goto L_0x0111
        L_0x0105:
            r0 = move-exception
            r1 = r0
            r17 = r3
            r3 = r12
            goto L_0x09f4
        L_0x010c:
            r0 = move-exception
            r1 = r0
            r3 = r12
            goto L_0x09f4
        L_0x0111:
            r3 = 0
            if (r17 == 0) goto L_0x0324
            android.content.pm.ProviderInfo r1 = r10.info     // Catch:{ all -> 0x0314 }
            r2 = r1
            if (r15 == 0) goto L_0x0176
            boolean r1 = r10.canRunHere(r15)     // Catch:{ all -> 0x016f }
            if (r1 == 0) goto L_0x0176
            java.lang.String r1 = r11.checkContentProviderAssociation(r15, r14, r2)     // Catch:{ all -> 0x016f }
            r4 = r1
            if (r1 != 0) goto L_0x0148
            java.lang.String r1 = "getContentProviderImpl: before checkContentProviderPermission"
            r11.checkTime(r7, r1)     // Catch:{ all -> 0x010c }
            java.lang.String r1 = r11.checkContentProviderPermissionLocked(r2, r15, r5, r6)     // Catch:{ all -> 0x010c }
            r4 = r1
            if (r1 != 0) goto L_0x0142
            java.lang.String r1 = "getContentProviderImpl: after checkContentProviderPermission"
            r11.checkTime(r7, r1)     // Catch:{ all -> 0x010c }
            android.app.ContentProviderHolder r1 = r10.newHolder(r3)     // Catch:{ all -> 0x010c }
            r1.provider = r3     // Catch:{ all -> 0x010c }
            monitor-exit(r39)     // Catch:{ all -> 0x010c }
            resetPriorityAfterLockedSection()
            return r1
        L_0x0142:
            java.lang.SecurityException r1 = new java.lang.SecurityException     // Catch:{ all -> 0x010c }
            r1.<init>(r4)     // Catch:{ all -> 0x010c }
            throw r1     // Catch:{ all -> 0x010c }
        L_0x0148:
            java.lang.SecurityException r1 = new java.lang.SecurityException     // Catch:{ all -> 0x016f }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x016f }
            r3.<init>()     // Catch:{ all -> 0x016f }
            r18 = r9
            java.lang.String r9 = "Content provider lookup "
            r3.append(r9)     // Catch:{ all -> 0x0189 }
            android.content.ComponentName r9 = r10.name     // Catch:{ all -> 0x0189 }
            java.lang.String r9 = r9.flattenToShortString()     // Catch:{ all -> 0x0189 }
            r3.append(r9)     // Catch:{ all -> 0x0189 }
            java.lang.String r9 = " failed: association not allowed with package "
            r3.append(r9)     // Catch:{ all -> 0x0189 }
            r3.append(r4)     // Catch:{ all -> 0x0189 }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x0189 }
            r1.<init>(r3)     // Catch:{ all -> 0x0189 }
            throw r1     // Catch:{ all -> 0x0189 }
        L_0x016f:
            r0 = move-exception
            r18 = r9
            r1 = r0
            r3 = r12
            goto L_0x09f4
        L_0x0176:
            r18 = r9
            android.content.pm.IPackageManager r1 = android.app.AppGlobals.getPackageManager()     // Catch:{ RemoteException -> 0x0190 }
            r9 = 0
            android.content.pm.ProviderInfo r1 = r1.resolveContentProvider(r13, r9, r5)     // Catch:{ RemoteException -> 0x0190 }
            if (r1 != 0) goto L_0x0188
            monitor-exit(r39)     // Catch:{ all -> 0x0189 }
            resetPriorityAfterLockedSection()
            return r3
        L_0x0188:
            goto L_0x0191
        L_0x0189:
            r0 = move-exception
            r1 = r0
            r3 = r12
            r9 = r18
            goto L_0x09f4
        L_0x0190:
            r0 = move-exception
        L_0x0191:
            java.lang.String r1 = r11.checkContentProviderAssociation(r15, r14, r2)     // Catch:{ all -> 0x0302 }
            r9 = r1
            if (r1 != 0) goto L_0x02c7
            java.lang.String r1 = "getContentProviderImpl: before checkContentProviderPermission"
            r11.checkTime(r7, r1)     // Catch:{ all -> 0x0302 }
            java.lang.String r1 = r11.checkContentProviderPermissionLocked(r2, r15, r5, r6)     // Catch:{ all -> 0x0302 }
            r9 = r1
            if (r1 != 0) goto L_0x02b7
            java.lang.String r1 = "getContentProviderImpl: after checkContentProviderPermission"
            r11.checkTime(r7, r1)     // Catch:{ all -> 0x0302 }
            long r19 = android.os.Binder.clearCallingIdentity()     // Catch:{ all -> 0x0302 }
            java.lang.String r1 = "getContentProviderImpl: incProviderCountLocked"
            r11.checkTime(r7, r1)     // Catch:{ all -> 0x0302 }
            r1 = r39
            r21 = r2
            r2 = r15
            r12 = r3
            r3 = r10
            r12 = r4
            r4 = r42
            r22 = r5
            r5 = r43
            r23 = r6
            r6 = r44
            r24 = r7
            r7 = r45
            r8 = r46
            com.android.server.am.ContentProviderConnection r1 = r1.incProviderCountLocked(r2, r3, r4, r5, r6, r7, r8)     // Catch:{ all -> 0x02b1 }
            if (r1 == 0) goto L_0x0205
            int r2 = r1.stableCount     // Catch:{ all -> 0x01fa }
            int r3 = r1.unstableCount     // Catch:{ all -> 0x01fa }
            int r2 = r2 + r3
            if (r2 != r12) goto L_0x0205
            com.android.server.am.ProcessRecord r2 = r10.proc     // Catch:{ all -> 0x01fa }
            if (r2 == 0) goto L_0x01f7
            int r2 = r15.setAdj     // Catch:{ all -> 0x01fa }
            r3 = 250(0xfa, float:3.5E-43)
            if (r2 > r3) goto L_0x01f7
            java.lang.String r2 = "getContentProviderImpl: before updateLruProcess"
            r7 = r24
            r11.checkTime(r7, r2)     // Catch:{ all -> 0x01fa }
            com.android.server.am.ProcessList r2 = r11.mProcessList     // Catch:{ all -> 0x01fa }
            com.android.server.am.ProcessRecord r3 = r10.proc     // Catch:{ all -> 0x01fa }
            r4 = 0
            r5 = 0
            r2.updateLruProcessLocked(r3, r5, r4)     // Catch:{ all -> 0x01fa }
            java.lang.String r2 = "getContentProviderImpl: after updateLruProcess"
            r11.checkTime(r7, r2)     // Catch:{ all -> 0x01fa }
            goto L_0x0207
        L_0x01f7:
            r7 = r24
            goto L_0x0207
        L_0x01fa:
            r0 = move-exception
            r3 = r40
            r9 = r1
            r2 = r21
            r5 = r22
            r1 = r0
            goto L_0x09f4
        L_0x0205:
            r7 = r24
        L_0x0207:
            java.lang.String r2 = "getContentProviderImpl: before updateOomAdj"
            r11.checkTime(r7, r2)     // Catch:{ all -> 0x02a2 }
            com.android.server.am.ProcessRecord r2 = r10.proc     // Catch:{ all -> 0x02a2 }
            int r2 = r2.verifiedAdj     // Catch:{ all -> 0x02a2 }
            com.android.server.am.ProcessRecord r3 = r10.proc     // Catch:{ all -> 0x02a2 }
            java.lang.String r4 = "updateOomAdj_getProvider"
            boolean r3 = r11.updateOomAdjLocked(r3, r12, r4)     // Catch:{ all -> 0x02a2 }
            if (r3 == 0) goto L_0x022a
            com.android.server.am.ProcessRecord r4 = r10.proc     // Catch:{ all -> 0x01fa }
            int r4 = r4.setAdj     // Catch:{ all -> 0x01fa }
            if (r2 == r4) goto L_0x022a
            com.android.server.am.ProcessRecord r4 = r10.proc     // Catch:{ all -> 0x01fa }
            boolean r4 = r11.isProcessAliveLocked(r4)     // Catch:{ all -> 0x01fa }
            if (r4 != 0) goto L_0x022a
            r3 = 0
        L_0x022a:
            android.content.pm.ProviderInfo r4 = r10.info     // Catch:{ all -> 0x02a2 }
            java.lang.String r4 = r4.packageName     // Catch:{ all -> 0x02a2 }
            r11.maybeUpdateProviderUsageStatsLocked(r15, r4, r13)     // Catch:{ all -> 0x02a2 }
            java.lang.String r4 = "getContentProviderImpl: after updateOomAdj"
            r11.checkTime(r7, r4)     // Catch:{ all -> 0x02a2 }
            if (r3 != 0) goto L_0x027e
            java.lang.String r4 = "ActivityManager"
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ all -> 0x02a2 }
            r5.<init>()     // Catch:{ all -> 0x02a2 }
            java.lang.String r6 = "Existing provider "
            r5.append(r6)     // Catch:{ all -> 0x02a2 }
            android.content.ComponentName r6 = r10.name     // Catch:{ all -> 0x02a2 }
            java.lang.String r6 = r6.flattenToShortString()     // Catch:{ all -> 0x02a2 }
            r5.append(r6)     // Catch:{ all -> 0x02a2 }
            java.lang.String r6 = " is crashing; detaching "
            r5.append(r6)     // Catch:{ all -> 0x02a2 }
            r5.append(r15)     // Catch:{ all -> 0x02a2 }
            java.lang.String r5 = r5.toString()     // Catch:{ all -> 0x02a2 }
            android.util.Slog.i(r4, r5)     // Catch:{ all -> 0x02a2 }
            r6 = r42
            r5 = r46
            boolean r4 = r11.decProviderCountLocked(r1, r10, r6, r5)     // Catch:{ all -> 0x01fa }
            java.lang.String r12 = "getContentProviderImpl: before appDied"
            r11.checkTime(r7, r12)     // Catch:{ all -> 0x01fa }
            com.android.server.am.ProcessRecord r12 = r10.proc     // Catch:{ all -> 0x01fa }
            r11.appDiedLocked(r12)     // Catch:{ all -> 0x01fa }
            java.lang.String r12 = "getContentProviderImpl: after appDied"
            r11.checkTime(r7, r12)     // Catch:{ all -> 0x01fa }
            if (r4 != 0) goto L_0x027b
            monitor-exit(r39)     // Catch:{ all -> 0x01fa }
            resetPriorityAfterLockedSection()
            r12 = 0
            return r12
        L_0x027b:
            r12 = 0
            r1 = 0
            goto L_0x028c
        L_0x027e:
            r6 = r42
            r5 = r46
            com.android.server.am.ProcessRecord r4 = r10.proc     // Catch:{ all -> 0x01fa }
            com.android.server.am.ProcessRecord r12 = r10.proc     // Catch:{ all -> 0x01fa }
            int r12 = r12.setAdj     // Catch:{ all -> 0x01fa }
            r4.verifiedAdj = r12     // Catch:{ all -> 0x01fa }
            r12 = r17
        L_0x028c:
            android.os.Binder.restoreCallingIdentity(r19)     // Catch:{ all -> 0x0295 }
            r18 = r1
            r2 = r21
            goto L_0x0330
        L_0x0295:
            r0 = move-exception
            r3 = r40
            r9 = r1
            r17 = r12
            r2 = r21
            r5 = r22
            r1 = r0
            goto L_0x09f4
        L_0x02a2:
            r0 = move-exception
            r6 = r42
            r5 = r46
            r3 = r40
            r9 = r1
            r2 = r21
            r5 = r22
            r1 = r0
            goto L_0x09f4
        L_0x02b1:
            r0 = move-exception
            r6 = r42
            r5 = r46
            goto L_0x02f7
        L_0x02b7:
            r21 = r2
            r22 = r5
            r23 = r6
            r6 = r42
            r5 = r46
            java.lang.SecurityException r1 = new java.lang.SecurityException     // Catch:{ all -> 0x02f6 }
            r1.<init>(r9)     // Catch:{ all -> 0x02f6 }
            throw r1     // Catch:{ all -> 0x02f6 }
        L_0x02c7:
            r21 = r2
            r22 = r5
            r23 = r6
            r6 = r42
            r5 = r46
            java.lang.SecurityException r1 = new java.lang.SecurityException     // Catch:{ all -> 0x02f6 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x02f6 }
            r2.<init>()     // Catch:{ all -> 0x02f6 }
            java.lang.String r3 = "Content provider lookup "
            r2.append(r3)     // Catch:{ all -> 0x02f6 }
            android.content.ComponentName r3 = r10.name     // Catch:{ all -> 0x02f6 }
            java.lang.String r3 = r3.flattenToShortString()     // Catch:{ all -> 0x02f6 }
            r2.append(r3)     // Catch:{ all -> 0x02f6 }
            java.lang.String r3 = " failed: association not allowed with package "
            r2.append(r3)     // Catch:{ all -> 0x02f6 }
            r2.append(r9)     // Catch:{ all -> 0x02f6 }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x02f6 }
            r1.<init>(r2)     // Catch:{ all -> 0x02f6 }
            throw r1     // Catch:{ all -> 0x02f6 }
        L_0x02f6:
            r0 = move-exception
        L_0x02f7:
            r3 = r40
            r1 = r0
            r9 = r18
            r2 = r21
            r5 = r22
            goto L_0x09f4
        L_0x0302:
            r0 = move-exception
            r6 = r42
            r21 = r2
            r22 = r5
            r5 = r46
            r3 = r40
            r1 = r0
            r9 = r18
            r5 = r22
            goto L_0x09f4
        L_0x0314:
            r0 = move-exception
            r6 = r42
            r22 = r5
            r18 = r9
            r5 = r46
            r3 = r40
            r1 = r0
            r5 = r22
            goto L_0x09f4
        L_0x0324:
            r22 = r5
            r23 = r6
            r18 = r9
            r6 = r42
            r5 = r46
            r12 = r17
        L_0x0330:
            if (r12 != 0) goto L_0x0882
            java.lang.String r1 = "getContentProviderImpl: before resolveContentProvider"
            r11.checkTime(r7, r1)     // Catch:{ RemoteException -> 0x0365, all -> 0x0358 }
            android.content.pm.IPackageManager r1 = android.app.AppGlobals.getPackageManager()     // Catch:{ RemoteException -> 0x0365, all -> 0x0358 }
            r3 = 3072(0xc00, float:4.305E-42)
            r4 = r22
            android.content.pm.ProviderInfo r1 = r1.resolveContentProvider(r13, r3, r4)     // Catch:{ RemoteException -> 0x0356, all -> 0x034b }
            r2 = r1
            java.lang.String r1 = "getContentProviderImpl: after resolveContentProvider"
            r11.checkTime(r7, r1)     // Catch:{ RemoteException -> 0x0356, all -> 0x034b }
            r9 = r2
            goto L_0x0369
        L_0x034b:
            r0 = move-exception
            r3 = r40
            r1 = r0
            r5 = r4
            r17 = r12
            r9 = r18
            goto L_0x09f4
        L_0x0356:
            r0 = move-exception
            goto L_0x0368
        L_0x0358:
            r0 = move-exception
            r4 = r22
            r3 = r40
            r1 = r0
            r5 = r4
            r17 = r12
            r9 = r18
            goto L_0x09f4
        L_0x0365:
            r0 = move-exception
            r4 = r22
        L_0x0368:
            r9 = r2
        L_0x0369:
            if (r9 != 0) goto L_0x037d
            monitor-exit(r39)     // Catch:{ all -> 0x0371 }
            resetPriorityAfterLockedSection()
            r1 = 0
            return r1
        L_0x0371:
            r0 = move-exception
            r3 = r40
            r1 = r0
            r5 = r4
            r2 = r9
            r17 = r12
            r9 = r18
            goto L_0x09f4
        L_0x037d:
            java.lang.String r1 = r9.processName     // Catch:{ all -> 0x0871 }
            android.content.pm.ApplicationInfo r2 = r9.applicationInfo     // Catch:{ all -> 0x0871 }
            java.lang.String r3 = r9.name     // Catch:{ all -> 0x0871 }
            int r5 = r9.flags     // Catch:{ all -> 0x0871 }
            boolean r1 = r11.isSingleton(r1, r2, r3, r5)     // Catch:{ all -> 0x0871 }
            if (r1 == 0) goto L_0x0399
            int r1 = r15.uid     // Catch:{ all -> 0x0371 }
            android.content.pm.ApplicationInfo r2 = r9.applicationInfo     // Catch:{ all -> 0x0371 }
            int r2 = r2.uid     // Catch:{ all -> 0x0371 }
            boolean r1 = r11.isValidSingletonCall(r1, r2)     // Catch:{ all -> 0x0371 }
            if (r1 == 0) goto L_0x0399
            r1 = 1
            goto L_0x039a
        L_0x0399:
            r1 = 0
        L_0x039a:
            if (r1 != 0) goto L_0x03a9
            android.content.pm.ApplicationInfo r2 = r9.applicationInfo     // Catch:{ all -> 0x0371 }
            java.lang.String r2 = r2.packageName     // Catch:{ all -> 0x0371 }
            boolean r2 = com.android.server.am.ActivityManagerServiceInjector.shouldCrossXSpace(r2, r4)     // Catch:{ all -> 0x0371 }
            if (r2 == 0) goto L_0x03a7
            goto L_0x03a9
        L_0x03a7:
            r2 = 0
            goto L_0x03aa
        L_0x03a9:
            r2 = 1
        L_0x03aa:
            r17 = r2
            if (r17 == 0) goto L_0x03b1
            r1 = 0
            r5 = r1
            goto L_0x03b2
        L_0x03b1:
            r5 = r4
        L_0x03b2:
            android.content.pm.ApplicationInfo r1 = r9.applicationInfo     // Catch:{ all -> 0x085f }
            android.content.pm.ApplicationInfo r1 = r11.getAppInfoForUser(r1, r5)     // Catch:{ all -> 0x085f }
            r9.applicationInfo = r1     // Catch:{ all -> 0x085f }
            java.lang.String r1 = "getContentProviderImpl: got app info for user"
            r11.checkTime(r7, r1)     // Catch:{ all -> 0x085f }
            java.lang.String r1 = r11.checkContentProviderAssociation(r15, r14, r9)     // Catch:{ all -> 0x085f }
            r2 = r1
            if (r1 != 0) goto L_0x082b
            java.lang.String r1 = "getContentProviderImpl: before checkContentProviderPermission"
            r11.checkTime(r7, r1)     // Catch:{ all -> 0x085f }
            if (r17 != 0) goto L_0x03cf
            r1 = 1
            goto L_0x03d0
        L_0x03cf:
            r1 = 0
        L_0x03d0:
            java.lang.String r1 = r11.checkContentProviderPermissionLocked(r9, r15, r5, r1)     // Catch:{ all -> 0x085f }
            r3 = r1
            if (r1 != 0) goto L_0x081d
            java.lang.String r1 = "getContentProviderImpl: after checkContentProviderPermission"
            r11.checkTime(r7, r1)     // Catch:{ all -> 0x085f }
            boolean r1 = r11.mProcessesReady     // Catch:{ all -> 0x085f }
            if (r1 != 0) goto L_0x03ff
            java.lang.String r1 = r9.processName     // Catch:{ all -> 0x03f4 }
            java.lang.String r2 = "system"
            boolean r1 = r1.equals(r2)     // Catch:{ all -> 0x03f4 }
            if (r1 == 0) goto L_0x03ec
            goto L_0x03ff
        L_0x03ec:
            java.lang.IllegalArgumentException r1 = new java.lang.IllegalArgumentException     // Catch:{ all -> 0x03f4 }
            java.lang.String r2 = "Attempt to launch content provider before system ready"
            r1.<init>(r2)     // Catch:{ all -> 0x03f4 }
            throw r1     // Catch:{ all -> 0x03f4 }
        L_0x03f4:
            r0 = move-exception
            r3 = r40
            r1 = r0
            r2 = r9
            r17 = r12
            r9 = r18
            goto L_0x09f4
        L_0x03ff:
            boolean r1 = r11.mSystemProvidersInstalled     // Catch:{ all -> 0x085f }
            if (r1 != 0) goto L_0x0435
            android.content.pm.ApplicationInfo r1 = r9.applicationInfo     // Catch:{ all -> 0x03f4 }
            boolean r1 = r1.isSystemApp()     // Catch:{ all -> 0x03f4 }
            if (r1 == 0) goto L_0x0435
            java.lang.String r1 = "system"
            java.lang.String r2 = r9.processName     // Catch:{ all -> 0x03f4 }
            boolean r1 = r1.equals(r2)     // Catch:{ all -> 0x03f4 }
            if (r1 != 0) goto L_0x0417
            goto L_0x0435
        L_0x0417:
            java.lang.IllegalStateException r1 = new java.lang.IllegalStateException     // Catch:{ all -> 0x03f4 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x03f4 }
            r2.<init>()     // Catch:{ all -> 0x03f4 }
            java.lang.String r4 = "Cannot access system provider: '"
            r2.append(r4)     // Catch:{ all -> 0x03f4 }
            java.lang.String r4 = r9.authority     // Catch:{ all -> 0x03f4 }
            r2.append(r4)     // Catch:{ all -> 0x03f4 }
            java.lang.String r4 = "' before system providers are installed!"
            r2.append(r4)     // Catch:{ all -> 0x03f4 }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x03f4 }
            r1.<init>(r2)     // Catch:{ all -> 0x03f4 }
            throw r1     // Catch:{ all -> 0x03f4 }
        L_0x0435:
            com.android.server.am.UserController r1 = r11.mUserController     // Catch:{ all -> 0x085f }
            r2 = 0
            boolean r1 = r1.isUserRunning(r5, r2)     // Catch:{ all -> 0x085f }
            if (r1 != 0) goto L_0x047f
            java.lang.String r1 = "ActivityManager"
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x03f4 }
            r2.<init>()     // Catch:{ all -> 0x03f4 }
            java.lang.String r4 = "Unable to launch app "
            r2.append(r4)     // Catch:{ all -> 0x03f4 }
            android.content.pm.ApplicationInfo r4 = r9.applicationInfo     // Catch:{ all -> 0x03f4 }
            java.lang.String r4 = r4.packageName     // Catch:{ all -> 0x03f4 }
            r2.append(r4)     // Catch:{ all -> 0x03f4 }
            java.lang.String r4 = "/"
            r2.append(r4)     // Catch:{ all -> 0x03f4 }
            android.content.pm.ApplicationInfo r4 = r9.applicationInfo     // Catch:{ all -> 0x03f4 }
            int r4 = r4.uid     // Catch:{ all -> 0x03f4 }
            r2.append(r4)     // Catch:{ all -> 0x03f4 }
            java.lang.String r4 = " for provider "
            r2.append(r4)     // Catch:{ all -> 0x03f4 }
            r2.append(r13)     // Catch:{ all -> 0x03f4 }
            java.lang.String r4 = ": user "
            r2.append(r4)     // Catch:{ all -> 0x03f4 }
            r2.append(r5)     // Catch:{ all -> 0x03f4 }
            java.lang.String r4 = " is stopped"
            r2.append(r4)     // Catch:{ all -> 0x03f4 }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x03f4 }
            android.util.Slog.w(r1, r2)     // Catch:{ all -> 0x03f4 }
            monitor-exit(r39)     // Catch:{ all -> 0x03f4 }
            resetPriorityAfterLockedSection()
            r1 = 0
            return r1
        L_0x047f:
            android.content.ComponentName r1 = new android.content.ComponentName     // Catch:{ all -> 0x085f }
            java.lang.String r2 = r9.packageName     // Catch:{ all -> 0x085f }
            java.lang.String r4 = r9.name     // Catch:{ all -> 0x085f }
            r1.<init>(r2, r4)     // Catch:{ all -> 0x085f }
            r2 = r1
            java.lang.String r1 = "getContentProviderImpl: before getProviderByClass"
            r11.checkTime(r7, r1)     // Catch:{ all -> 0x085f }
            com.android.server.am.ProviderMap r1 = r11.mProviderMap     // Catch:{ all -> 0x085f }
            com.android.server.am.ContentProviderRecord r1 = r1.getProviderByClass(r2, r5)     // Catch:{ all -> 0x085f }
            r10 = r1
            java.lang.String r1 = "getContentProviderImpl: after getProviderByClass"
            r11.checkTime(r7, r1)     // Catch:{ all -> 0x085f }
            if (r10 != 0) goto L_0x049e
            r1 = 1
            goto L_0x049f
        L_0x049e:
            r1 = 0
        L_0x049f:
            r19 = r1
            if (r19 == 0) goto L_0x057c
            long r20 = android.os.Binder.clearCallingIdentity()     // Catch:{ all -> 0x056e }
            boolean r1 = r11.requestTargetProviderPermissionsReviewIfNeededLocked(r9, r15, r5)     // Catch:{ all -> 0x056e }
            if (r1 != 0) goto L_0x04b3
            monitor-exit(r39)     // Catch:{ all -> 0x03f4 }
            resetPriorityAfterLockedSection()
            r1 = 0
            return r1
        L_0x04b3:
            java.lang.String r1 = "getContentProviderImpl: before getApplicationInfo"
            r11.checkTime(r7, r1)     // Catch:{ RemoteException -> 0x0563, all -> 0x0557 }
            android.content.pm.IPackageManager r1 = android.app.AppGlobals.getPackageManager()     // Catch:{ RemoteException -> 0x0563, all -> 0x0557 }
            android.content.pm.ApplicationInfo r4 = r9.applicationInfo     // Catch:{ RemoteException -> 0x0563, all -> 0x0557 }
            java.lang.String r4 = r4.packageName     // Catch:{ RemoteException -> 0x0563, all -> 0x0557 }
            r22 = r2
            r2 = 1024(0x400, float:1.435E-42)
            android.content.pm.ApplicationInfo r1 = r1.getApplicationInfo(r4, r2, r5)     // Catch:{ RemoteException -> 0x0551, all -> 0x054a }
            java.lang.String r2 = "getContentProviderImpl: after getApplicationInfo"
            r11.checkTime(r7, r2)     // Catch:{ RemoteException -> 0x0551, all -> 0x054a }
            if (r1 != 0) goto L_0x0513
            java.lang.String r2 = "ActivityManager"
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ RemoteException -> 0x050c, all -> 0x0504 }
            r4.<init>()     // Catch:{ RemoteException -> 0x050c, all -> 0x0504 }
            r25 = r3
            java.lang.String r3 = "No package info for content provider "
            r4.append(r3)     // Catch:{ RemoteException -> 0x04fc, all -> 0x04f3 }
            java.lang.String r3 = r9.name     // Catch:{ RemoteException -> 0x04fc, all -> 0x04f3 }
            r4.append(r3)     // Catch:{ RemoteException -> 0x04fc, all -> 0x04f3 }
            java.lang.String r3 = r4.toString()     // Catch:{ RemoteException -> 0x04fc, all -> 0x04f3 }
            android.util.Slog.w(r2, r3)     // Catch:{ RemoteException -> 0x04fc, all -> 0x04f3 }
            android.os.Binder.restoreCallingIdentity(r20)     // Catch:{ all -> 0x03f4 }
            monitor-exit(r39)     // Catch:{ all -> 0x03f4 }
            resetPriorityAfterLockedSection()
            r2 = 0
            return r2
        L_0x04f3:
            r0 = move-exception
            r1 = r0
            r14 = r25
            r25 = r12
            r12 = r5
            goto L_0x055f
        L_0x04fc:
            r0 = move-exception
            r14 = r25
            r25 = r12
            r12 = r5
            goto L_0x056a
        L_0x0504:
            r0 = move-exception
            r1 = r0
            r14 = r3
            r25 = r12
            r12 = r5
            goto L_0x055f
        L_0x050c:
            r0 = move-exception
            r14 = r3
            r25 = r12
            r12 = r5
            goto L_0x056a
        L_0x0513:
            r25 = r3
            android.content.pm.ApplicationInfo r4 = r11.getAppInfoForUser(r1, r5)     // Catch:{ RemoteException -> 0x0543, all -> 0x053b }
            com.android.server.am.ContentProviderRecord r26 = new com.android.server.am.ContentProviderRecord     // Catch:{ RemoteException -> 0x0543, all -> 0x053b }
            r1 = r26
            r3 = r22
            r2 = r39
            r14 = r25
            r3 = r9
            r25 = r12
            r12 = r5
            r5 = r22
            r6 = r17
            r1.<init>(r2, r3, r4, r5, r6)     // Catch:{ RemoteException -> 0x0539, all -> 0x0536 }
            r1 = r26
            android.os.Binder.restoreCallingIdentity(r20)     // Catch:{ all -> 0x0599 }
            r10 = r1
            goto L_0x0582
        L_0x0536:
            r0 = move-exception
            r1 = r0
            goto L_0x055f
        L_0x0539:
            r0 = move-exception
            goto L_0x056a
        L_0x053b:
            r0 = move-exception
            r14 = r25
            r25 = r12
            r12 = r5
            r1 = r0
            goto L_0x055f
        L_0x0543:
            r0 = move-exception
            r14 = r25
            r25 = r12
            r12 = r5
            goto L_0x056a
        L_0x054a:
            r0 = move-exception
            r14 = r3
            r25 = r12
            r12 = r5
            r1 = r0
            goto L_0x055f
        L_0x0551:
            r0 = move-exception
            r14 = r3
            r25 = r12
            r12 = r5
            goto L_0x056a
        L_0x0557:
            r0 = move-exception
            r22 = r2
            r14 = r3
            r25 = r12
            r12 = r5
            r1 = r0
        L_0x055f:
            android.os.Binder.restoreCallingIdentity(r20)     // Catch:{ all -> 0x0599 }
            throw r1     // Catch:{ all -> 0x0599 }
        L_0x0563:
            r0 = move-exception
            r22 = r2
            r14 = r3
            r25 = r12
            r12 = r5
        L_0x056a:
            android.os.Binder.restoreCallingIdentity(r20)     // Catch:{ all -> 0x0599 }
            goto L_0x0582
        L_0x056e:
            r0 = move-exception
            r25 = r12
            r12 = r5
            r3 = r40
            r1 = r0
            r2 = r9
            r9 = r18
            r17 = r25
            goto L_0x09f4
        L_0x057c:
            r22 = r2
            r14 = r3
            r25 = r12
            r12 = r5
        L_0x0582:
            java.lang.String r1 = "getContentProviderImpl: now have ContentProviderRecord"
            r11.checkTime(r7, r1)     // Catch:{ all -> 0x080b }
            if (r15 == 0) goto L_0x05a5
            boolean r1 = r10.canRunHere(r15)     // Catch:{ all -> 0x0599 }
            if (r1 == 0) goto L_0x05a5
            r1 = 0
            android.app.ContentProviderHolder r1 = r10.newHolder(r1)     // Catch:{ all -> 0x0599 }
            monitor-exit(r39)     // Catch:{ all -> 0x0599 }
            resetPriorityAfterLockedSection()
            return r1
        L_0x0599:
            r0 = move-exception
            r3 = r40
            r1 = r0
            r2 = r9
            r5 = r12
            r9 = r18
            r17 = r25
            goto L_0x09f4
        L_0x05a5:
            java.util.ArrayList<com.android.server.am.ContentProviderRecord> r1 = r11.mLaunchingProviders     // Catch:{ all -> 0x080b }
            int r1 = r1.size()     // Catch:{ all -> 0x080b }
            r6 = r1
            r1 = 0
            r5 = r1
        L_0x05ae:
            if (r5 >= r6) goto L_0x05bc
            java.util.ArrayList<com.android.server.am.ContentProviderRecord> r1 = r11.mLaunchingProviders     // Catch:{ all -> 0x0599 }
            java.lang.Object r1 = r1.get(r5)     // Catch:{ all -> 0x0599 }
            if (r1 != r10) goto L_0x05b9
            goto L_0x05bc
        L_0x05b9:
            int r5 = r5 + 1
            goto L_0x05ae
        L_0x05bc:
            if (r5 < r6) goto L_0x079a
            long r1 = android.os.Binder.clearCallingIdentity()     // Catch:{ all -> 0x078a }
            r20 = r1
            java.lang.String r1 = "getContentProviderImpl: before set stopped state"
            r11.checkTime(r7, r1)     // Catch:{ RemoteException -> 0x0610, IllegalArgumentException -> 0x05eb }
            android.content.pm.IPackageManager r1 = android.app.AppGlobals.getPackageManager()     // Catch:{ RemoteException -> 0x0610, IllegalArgumentException -> 0x05eb }
            android.content.pm.ApplicationInfo r2 = r10.appInfo     // Catch:{ RemoteException -> 0x0610, IllegalArgumentException -> 0x05eb }
            java.lang.String r2 = r2.packageName     // Catch:{ RemoteException -> 0x0610, IllegalArgumentException -> 0x05eb }
            r3 = 0
            r1.setPackageStoppedState(r2, r3, r12)     // Catch:{ RemoteException -> 0x0610, IllegalArgumentException -> 0x05eb }
            java.lang.String r1 = "getContentProviderImpl: after set stopped state"
            r11.checkTime(r7, r1)     // Catch:{ RemoteException -> 0x0610, IllegalArgumentException -> 0x05eb }
            goto L_0x0611
        L_0x05db:
            r0 = move-exception
            r1 = r0
            r28 = r5
            r29 = r6
            r30 = r12
            r12 = r10
            r37 = r7
            r8 = r9
            r9 = r37
            goto L_0x0786
        L_0x05eb:
            r0 = move-exception
            r1 = r0
            java.lang.String r2 = "ActivityManager"
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x05db }
            r3.<init>()     // Catch:{ all -> 0x05db }
            java.lang.String r4 = "Failed trying to unstop package "
            r3.append(r4)     // Catch:{ all -> 0x05db }
            android.content.pm.ApplicationInfo r4 = r10.appInfo     // Catch:{ all -> 0x05db }
            java.lang.String r4 = r4.packageName     // Catch:{ all -> 0x05db }
            r3.append(r4)     // Catch:{ all -> 0x05db }
            java.lang.String r4 = ": "
            r3.append(r4)     // Catch:{ all -> 0x05db }
            r3.append(r1)     // Catch:{ all -> 0x05db }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x05db }
            android.util.Slog.w(r2, r3)     // Catch:{ all -> 0x05db }
            goto L_0x0612
        L_0x0610:
            r0 = move-exception
        L_0x0611:
        L_0x0612:
            java.lang.String r1 = "getContentProviderImpl: looking for process record"
            r11.checkTime(r7, r1)     // Catch:{ all -> 0x0778 }
            java.lang.String r1 = r9.processName     // Catch:{ all -> 0x0778 }
            android.content.pm.ApplicationInfo r2 = r10.appInfo     // Catch:{ all -> 0x0778 }
            int r2 = r2.uid     // Catch:{ all -> 0x0778 }
            r4 = 0
            com.android.server.am.ProcessRecord r1 = r11.getProcessRecordLocked(r1, r2, r4)     // Catch:{ all -> 0x0778 }
            r3 = r1
            if (r3 == 0) goto L_0x0658
            android.app.IApplicationThread r1 = r3.thread     // Catch:{ all -> 0x05db }
            if (r1 == 0) goto L_0x0658
            boolean r1 = r3.killed     // Catch:{ all -> 0x05db }
            if (r1 != 0) goto L_0x0658
            android.util.ArrayMap<java.lang.String, com.android.server.am.ContentProviderRecord> r1 = r3.pubProviders     // Catch:{ all -> 0x05db }
            java.lang.String r2 = r9.name     // Catch:{ all -> 0x05db }
            boolean r1 = r1.containsKey(r2)     // Catch:{ all -> 0x05db }
            if (r1 != 0) goto L_0x064a
            java.lang.String r1 = "getContentProviderImpl: scheduling install"
            r11.checkTime(r7, r1)     // Catch:{ all -> 0x05db }
            android.util.ArrayMap<java.lang.String, com.android.server.am.ContentProviderRecord> r1 = r3.pubProviders     // Catch:{ all -> 0x05db }
            java.lang.String r2 = r9.name     // Catch:{ all -> 0x05db }
            r1.put(r2, r10)     // Catch:{ all -> 0x05db }
            android.app.IApplicationThread r1 = r3.thread     // Catch:{ RemoteException -> 0x0649 }
            r1.scheduleInstallProvider(r9)     // Catch:{ RemoteException -> 0x0649 }
            goto L_0x064a
        L_0x0649:
            r0 = move-exception
        L_0x064a:
            r28 = r5
            r29 = r6
            r30 = r12
            r12 = r10
            r37 = r7
            r8 = r9
            r9 = r37
            goto L_0x0727
        L_0x0658:
            android.os.Binder.restoreCallingIdentity(r20)     // Catch:{ all -> 0x0778 }
            if (r15 == 0) goto L_0x0668
            android.content.pm.ApplicationInfo r1 = r15.info     // Catch:{ all -> 0x05db }
            if (r1 == 0) goto L_0x0668
            android.content.pm.ApplicationInfo r1 = r15.info     // Catch:{ all -> 0x05db }
            java.lang.String r1 = r1.packageName     // Catch:{ all -> 0x05db }
            r16 = r1
            goto L_0x0673
        L_0x0668:
            int r1 = android.os.Binder.getCallingPid()     // Catch:{ all -> 0x0778 }
            java.lang.String r2 = com.android.server.am.ExtraActivityManagerService.getPackageNameByPid(r1)     // Catch:{ all -> 0x0778 }
            r1 = r2
            r16 = r1
        L_0x0673:
            android.content.Context r1 = r11.mContext     // Catch:{ all -> 0x0761 }
            r2 = r39
            r26 = r3
            r3 = r40
            r27 = r4
            r4 = r43
            r28 = r5
            r5 = r10
            r29 = r6
            r6 = r12
            boolean r1 = com.android.server.am.ExtraActivityManagerService.checkRunningCompatibility(r1, r2, r3, r4, r5, r6)     // Catch:{ all -> 0x0756 }
            if (r1 != 0) goto L_0x06a4
            android.os.Binder.clearCallingIdentity()     // Catch:{ all -> 0x0698 }
            android.os.Binder.restoreCallingIdentity(r20)     // Catch:{ all -> 0x0599 }
            monitor-exit(r39)     // Catch:{ all -> 0x0599 }
            resetPriorityAfterLockedSection()
            r1 = 0
            return r1
        L_0x0698:
            r0 = move-exception
            r1 = r0
            r30 = r12
            r12 = r10
            r37 = r7
            r8 = r9
            r9 = r37
            goto L_0x0786
        L_0x06a4:
            android.os.Binder.clearCallingIdentity()     // Catch:{ all -> 0x074b }
            java.lang.String r1 = "getContentProviderImpl: before start process"
            r11.checkTime(r7, r1)     // Catch:{ all -> 0x074b }
            java.lang.String r2 = r9.processName     // Catch:{ all -> 0x074b }
            android.content.pm.ApplicationInfo r3 = r10.appInfo     // Catch:{ all -> 0x074b }
            com.android.server.am.HostingRecord r6 = new com.android.server.am.HostingRecord     // Catch:{ all -> 0x074b }
            java.lang.String r1 = "content provider"
            android.content.ComponentName r5 = new android.content.ComponentName     // Catch:{ all -> 0x074b }
            android.content.pm.ApplicationInfo r4 = r9.applicationInfo     // Catch:{ all -> 0x074b }
            java.lang.String r4 = r4.packageName     // Catch:{ all -> 0x074b }
            r31 = r7
            java.lang.String r7 = r9.name     // Catch:{ all -> 0x0742 }
            r5.<init>(r4, r7)     // Catch:{ all -> 0x0742 }
            r6.<init>((java.lang.String) r1, (android.content.ComponentName) r5)     // Catch:{ all -> 0x0742 }
            r7 = 0
            r8 = 0
            r33 = 0
            r1 = r39
            r4 = 0
            r5 = 0
            r34 = r31
            r36 = r9
            r9 = r33
            r30 = r12
            r12 = r10
            r10 = r16
            com.android.server.am.ProcessRecord r1 = r1.startProcessLocked(r2, r3, r4, r5, r6, r7, r8, r9, r10)     // Catch:{ all -> 0x073a }
            r3 = r1
            java.lang.String r1 = "getContentProviderImpl: after start process"
            r9 = r34
            r11.checkTime(r9, r1)     // Catch:{ all -> 0x0734 }
            if (r3 != 0) goto L_0x0725
            java.lang.String r1 = "ActivityManager"
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x0734 }
            r2.<init>()     // Catch:{ all -> 0x0734 }
            java.lang.String r4 = "Unable to launch app "
            r2.append(r4)     // Catch:{ all -> 0x0734 }
            r8 = r36
            android.content.pm.ApplicationInfo r4 = r8.applicationInfo     // Catch:{ all -> 0x0775 }
            java.lang.String r4 = r4.packageName     // Catch:{ all -> 0x0775 }
            r2.append(r4)     // Catch:{ all -> 0x0775 }
            java.lang.String r4 = "/"
            r2.append(r4)     // Catch:{ all -> 0x0775 }
            android.content.pm.ApplicationInfo r4 = r8.applicationInfo     // Catch:{ all -> 0x0775 }
            int r4 = r4.uid     // Catch:{ all -> 0x0775 }
            r2.append(r4)     // Catch:{ all -> 0x0775 }
            java.lang.String r4 = " for provider "
            r2.append(r4)     // Catch:{ all -> 0x0775 }
            r2.append(r13)     // Catch:{ all -> 0x0775 }
            java.lang.String r4 = ": process is bad"
            r2.append(r4)     // Catch:{ all -> 0x0775 }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x0775 }
            android.util.Slog.w(r1, r2)     // Catch:{ all -> 0x0775 }
            android.os.Binder.restoreCallingIdentity(r20)     // Catch:{ all -> 0x07b5 }
            monitor-exit(r39)     // Catch:{ all -> 0x07b5 }
            resetPriorityAfterLockedSection()
            r1 = 0
            return r1
        L_0x0725:
            r8 = r36
        L_0x0727:
            r12.launchingApp = r3     // Catch:{ all -> 0x0775 }
            java.util.ArrayList<com.android.server.am.ContentProviderRecord> r1 = r11.mLaunchingProviders     // Catch:{ all -> 0x0775 }
            r1.add(r12)     // Catch:{ all -> 0x0775 }
            android.os.Binder.restoreCallingIdentity(r20)     // Catch:{ all -> 0x07b5 }
            goto L_0x07a6
        L_0x0734:
            r0 = move-exception
            r8 = r36
            r1 = r0
            goto L_0x0786
        L_0x073a:
            r0 = move-exception
            r9 = r34
            r8 = r36
            r1 = r0
            goto L_0x0786
        L_0x0742:
            r0 = move-exception
            r8 = r9
            r30 = r12
            r12 = r10
            r9 = r31
            r1 = r0
            goto L_0x0786
        L_0x074b:
            r0 = move-exception
            r30 = r12
            r12 = r10
            r37 = r7
            r8 = r9
            r9 = r37
            r1 = r0
            goto L_0x0786
        L_0x0756:
            r0 = move-exception
            r30 = r12
            r12 = r10
            r37 = r7
            r8 = r9
            r9 = r37
            r1 = r0
            goto L_0x0771
        L_0x0761:
            r0 = move-exception
            r26 = r3
            r28 = r5
            r29 = r6
            r30 = r12
            r12 = r10
            r37 = r7
            r8 = r9
            r9 = r37
            r1 = r0
        L_0x0771:
            android.os.Binder.clearCallingIdentity()     // Catch:{ all -> 0x0775 }
            throw r1     // Catch:{ all -> 0x0775 }
        L_0x0775:
            r0 = move-exception
            r1 = r0
            goto L_0x0786
        L_0x0778:
            r0 = move-exception
            r28 = r5
            r29 = r6
            r30 = r12
            r12 = r10
            r37 = r7
            r8 = r9
            r9 = r37
            r1 = r0
        L_0x0786:
            android.os.Binder.restoreCallingIdentity(r20)     // Catch:{ all -> 0x07b5 }
            throw r1     // Catch:{ all -> 0x07b5 }
        L_0x078a:
            r0 = move-exception
            r8 = r9
            r30 = r12
            r3 = r40
            r1 = r0
            r2 = r8
            r9 = r18
            r17 = r25
            r5 = r30
            goto L_0x09f4
        L_0x079a:
            r28 = r5
            r29 = r6
            r30 = r12
            r12 = r10
            r37 = r7
            r8 = r9
            r9 = r37
        L_0x07a6:
            java.lang.String r1 = "getContentProviderImpl: updating data structures"
            r11.checkTime(r9, r1)     // Catch:{ all -> 0x07fb }
            if (r19 == 0) goto L_0x07c2
            com.android.server.am.ProviderMap r1 = r11.mProviderMap     // Catch:{ all -> 0x07b5 }
            r7 = r22
            r1.putProviderByClass(r7, r12)     // Catch:{ all -> 0x07b5 }
            goto L_0x07c4
        L_0x07b5:
            r0 = move-exception
            r3 = r40
            r1 = r0
            r2 = r8
            r9 = r18
            r17 = r25
            r5 = r30
            goto L_0x09f4
        L_0x07c2:
            r7 = r22
        L_0x07c4:
            com.android.server.am.ProviderMap r1 = r11.mProviderMap     // Catch:{ all -> 0x07fb }
            r1.putProviderByName(r13, r12)     // Catch:{ all -> 0x07fb }
            r1 = r39
            r2 = r15
            r3 = r12
            r4 = r42
            r5 = r43
            r6 = r44
            r16 = r7
            r7 = r45
            r20 = r8
            r8 = r46
            com.android.server.am.ContentProviderConnection r1 = r1.incProviderCountLocked(r2, r3, r4, r5, r6, r7, r8)     // Catch:{ all -> 0x0851 }
            if (r1 == 0) goto L_0x07f2
            r2 = 1
            r1.waiting = r2     // Catch:{ all -> 0x07e5 }
            goto L_0x07f2
        L_0x07e5:
            r0 = move-exception
            r3 = r40
            r9 = r1
            r2 = r20
            r17 = r25
            r5 = r30
            r1 = r0
            goto L_0x09f4
        L_0x07f2:
            r5 = r9
            r10 = r12
            r2 = r20
            r4 = r30
            r9 = r1
            goto L_0x0889
        L_0x07fb:
            r0 = move-exception
            r20 = r8
            r3 = r40
            r1 = r0
            r9 = r18
            r2 = r20
            r17 = r25
            r5 = r30
            goto L_0x09f4
        L_0x080b:
            r0 = move-exception
            r20 = r9
            r30 = r12
            r3 = r40
            r1 = r0
            r9 = r18
            r2 = r20
            r17 = r25
            r5 = r30
            goto L_0x09f4
        L_0x081d:
            r14 = r3
            r30 = r5
            r5 = r7
            r20 = r9
            r25 = r12
            java.lang.SecurityException r1 = new java.lang.SecurityException     // Catch:{ all -> 0x0851 }
            r1.<init>(r14)     // Catch:{ all -> 0x0851 }
            throw r1     // Catch:{ all -> 0x0851 }
        L_0x082b:
            r30 = r5
            r5 = r7
            r20 = r9
            r25 = r12
            java.lang.SecurityException r1 = new java.lang.SecurityException     // Catch:{ all -> 0x0851 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x0851 }
            r3.<init>()     // Catch:{ all -> 0x0851 }
            java.lang.String r4 = "Content provider lookup "
            r3.append(r4)     // Catch:{ all -> 0x0851 }
            r3.append(r13)     // Catch:{ all -> 0x0851 }
            java.lang.String r4 = " failed: association not allowed with package "
            r3.append(r4)     // Catch:{ all -> 0x0851 }
            r3.append(r2)     // Catch:{ all -> 0x0851 }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x0851 }
            r1.<init>(r3)     // Catch:{ all -> 0x0851 }
            throw r1     // Catch:{ all -> 0x0851 }
        L_0x0851:
            r0 = move-exception
            r3 = r40
            r1 = r0
            r9 = r18
            r2 = r20
            r17 = r25
            r5 = r30
            goto L_0x09f4
        L_0x085f:
            r0 = move-exception
            r30 = r5
            r20 = r9
            r25 = r12
            r3 = r40
            r1 = r0
            r9 = r18
            r2 = r20
            r17 = r25
            goto L_0x09f4
        L_0x0871:
            r0 = move-exception
            r20 = r9
            r25 = r12
            r3 = r40
            r1 = r0
            r5 = r4
            r9 = r18
            r2 = r20
            r17 = r25
            goto L_0x09f4
        L_0x0882:
            r5 = r7
            r25 = r12
            r4 = r22
            r9 = r18
        L_0x0889:
            java.lang.String r1 = "getContentProviderImpl: done!"
            r11.checkTime(r5, r1)     // Catch:{ all -> 0x09e2 }
            android.content.pm.ApplicationInfo r1 = r2.applicationInfo     // Catch:{ all -> 0x09e2 }
            int r1 = r1.uid     // Catch:{ all -> 0x09e2 }
            int r1 = android.os.UserHandle.getAppId(r1)     // Catch:{ all -> 0x09e2 }
            int r3 = android.os.Binder.getCallingUid()     // Catch:{ all -> 0x09e2 }
            int r3 = android.os.UserHandle.getAppId(r3)     // Catch:{ all -> 0x09e2 }
            r7 = 0
            r11.grantEphemeralAccessLocked(r4, r7, r1, r3)     // Catch:{ all -> 0x09e2 }
            monitor-exit(r39)     // Catch:{ all -> 0x09e2 }
            resetPriorityAfterLockedSection()
            long r5 = android.os.SystemClock.uptimeMillis()
            r7 = 20000(0x4e20, double:9.8813E-320)
            long r5 = r5 + r7
            r1 = 0
            monitor-enter(r10)
        L_0x08af:
            android.content.IContentProvider r3 = r10.provider     // Catch:{ all -> 0x09d6 }
            if (r3 != 0) goto L_0x0959
            com.android.server.am.ProcessRecord r3 = r10.launchingApp     // Catch:{ all -> 0x0950 }
            if (r3 != 0) goto L_0x0919
            java.lang.String r3 = "ActivityManager"
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x0950 }
            r7.<init>()     // Catch:{ all -> 0x0950 }
            java.lang.String r8 = "Unable to launch app "
            r7.append(r8)     // Catch:{ all -> 0x0950 }
            android.content.pm.ApplicationInfo r8 = r2.applicationInfo     // Catch:{ all -> 0x0950 }
            java.lang.String r8 = r8.packageName     // Catch:{ all -> 0x0950 }
            r7.append(r8)     // Catch:{ all -> 0x0950 }
            java.lang.String r8 = "/"
            r7.append(r8)     // Catch:{ all -> 0x0950 }
            android.content.pm.ApplicationInfo r8 = r2.applicationInfo     // Catch:{ all -> 0x0950 }
            int r8 = r8.uid     // Catch:{ all -> 0x0950 }
            r7.append(r8)     // Catch:{ all -> 0x0950 }
            java.lang.String r8 = " for provider "
            r7.append(r8)     // Catch:{ all -> 0x0950 }
            r7.append(r13)     // Catch:{ all -> 0x0950 }
            java.lang.String r8 = ": launching app became null"
            r7.append(r8)     // Catch:{ all -> 0x0950 }
            java.lang.String r7 = r7.toString()     // Catch:{ all -> 0x0950 }
            android.util.Slog.w(r3, r7)     // Catch:{ all -> 0x0950 }
            r3 = 30036(0x7554, float:4.209E-41)
            r7 = 4
            java.lang.Object[] r7 = new java.lang.Object[r7]     // Catch:{ all -> 0x0950 }
            android.content.pm.ApplicationInfo r8 = r2.applicationInfo     // Catch:{ all -> 0x0950 }
            int r8 = r8.uid     // Catch:{ all -> 0x0950 }
            int r8 = android.os.UserHandle.getUserId(r8)     // Catch:{ all -> 0x0950 }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)     // Catch:{ all -> 0x0950 }
            r12 = 0
            r7[r12] = r8     // Catch:{ all -> 0x0950 }
            android.content.pm.ApplicationInfo r8 = r2.applicationInfo     // Catch:{ all -> 0x0950 }
            java.lang.String r8 = r8.packageName     // Catch:{ all -> 0x0950 }
            r12 = 1
            r7[r12] = r8     // Catch:{ all -> 0x0950 }
            r8 = 2
            android.content.pm.ApplicationInfo r12 = r2.applicationInfo     // Catch:{ all -> 0x0950 }
            int r12 = r12.uid     // Catch:{ all -> 0x0950 }
            java.lang.Integer r12 = java.lang.Integer.valueOf(r12)     // Catch:{ all -> 0x0950 }
            r7[r8] = r12     // Catch:{ all -> 0x0950 }
            r8 = 3
            r7[r8] = r13     // Catch:{ all -> 0x0950 }
            android.util.EventLog.writeEvent(r3, r7)     // Catch:{ all -> 0x0950 }
            monitor-exit(r10)     // Catch:{ all -> 0x0950 }
            r3 = 0
            return r3
        L_0x0919:
            r3 = 0
            r12 = 0
            r7 = 0
            long r14 = android.os.SystemClock.uptimeMillis()     // Catch:{ InterruptedException -> 0x0948, all -> 0x0940 }
            long r14 = r5 - r14
            long r7 = java.lang.Math.max(r7, r14)     // Catch:{ InterruptedException -> 0x0948, all -> 0x0940 }
            if (r9 == 0) goto L_0x092d
            r14 = 1
            r9.waiting = r14     // Catch:{ InterruptedException -> 0x093e, all -> 0x0940 }
            goto L_0x092e
        L_0x092d:
            r14 = 1
        L_0x092e:
            r10.wait(r7)     // Catch:{ InterruptedException -> 0x093e, all -> 0x0940 }
            android.content.IContentProvider r15 = r10.provider     // Catch:{ InterruptedException -> 0x093e, all -> 0x0940 }
            if (r15 != 0) goto L_0x093b
            r1 = 1
            if (r9 == 0) goto L_0x095a
            r9.waiting = r12     // Catch:{ all -> 0x0950 }
            goto L_0x095a
        L_0x093b:
            if (r9 == 0) goto L_0x094e
            goto L_0x094c
        L_0x093e:
            r0 = move-exception
            goto L_0x094a
        L_0x0940:
            r0 = move-exception
            r3 = r0
            if (r9 == 0) goto L_0x0946
            r9.waiting = r12     // Catch:{ all -> 0x0950 }
        L_0x0946:
            throw r3     // Catch:{ all -> 0x0950 }
        L_0x0948:
            r0 = move-exception
            r14 = 1
        L_0x094a:
            if (r9 == 0) goto L_0x094e
        L_0x094c:
            r9.waiting = r12     // Catch:{ all -> 0x0950 }
        L_0x094e:
            goto L_0x08af
        L_0x0950:
            r0 = move-exception
            r3 = r40
            r7 = r1
            r14 = r25
            r1 = r0
            goto L_0x09dd
        L_0x0959:
            r3 = 0
        L_0x095a:
            monitor-exit(r10)     // Catch:{ all -> 0x09d6 }
            if (r1 == 0) goto L_0x09d1
            java.lang.String r7 = "unknown"
            r8 = r3
            r3 = r40
            if (r3 == 0) goto L_0x0984
            monitor-enter(r39)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0979 }
            com.android.server.am.ProcessList r12 = r11.mProcessList     // Catch:{ all -> 0x0979 }
            com.android.server.am.ProcessRecord r12 = r12.getLRURecordForAppLocked(r3)     // Catch:{ all -> 0x0979 }
            if (r12 == 0) goto L_0x0974
            java.lang.String r14 = r12.processName     // Catch:{ all -> 0x0979 }
            r7 = r14
        L_0x0974:
            monitor-exit(r39)     // Catch:{ all -> 0x0979 }
            resetPriorityAfterLockedSection()
            goto L_0x0984
        L_0x0979:
            r0 = move-exception
            r8 = r7
            r7 = r0
        L_0x097c:
            monitor-exit(r39)     // Catch:{ all -> 0x0981 }
            resetPriorityAfterLockedSection()
            throw r7
        L_0x0981:
            r0 = move-exception
            r7 = r0
            goto L_0x097c
        L_0x0984:
            java.lang.StringBuilder r12 = new java.lang.StringBuilder
            r12.<init>()
            java.lang.String r14 = "Timeout waiting for provider "
            r12.append(r14)
            android.content.pm.ApplicationInfo r14 = r2.applicationInfo
            java.lang.String r14 = r14.packageName
            r12.append(r14)
            java.lang.String r14 = "/"
            r12.append(r14)
            android.content.pm.ApplicationInfo r14 = r2.applicationInfo
            int r14 = r14.uid
            r12.append(r14)
            java.lang.String r14 = " for provider "
            r12.append(r14)
            r12.append(r13)
            java.lang.String r14 = " providerRunning="
            r12.append(r14)
            r14 = r25
            r12.append(r14)
            java.lang.String r15 = " caller="
            r12.append(r15)
            r12.append(r7)
            java.lang.String r15 = "/"
            r12.append(r15)
            int r15 = android.os.Binder.getCallingUid()
            r12.append(r15)
            java.lang.String r12 = r12.toString()
            java.lang.String r15 = "ActivityManager"
            android.util.Slog.wtf(r15, r12)
            return r8
        L_0x09d1:
            android.app.ContentProviderHolder r7 = r10.newHolder(r9)
            return r7
        L_0x09d6:
            r0 = move-exception
            r3 = r40
            r14 = r25
            r7 = r1
            r1 = r0
        L_0x09dd:
            monitor-exit(r10)     // Catch:{ all -> 0x09df }
            throw r1
        L_0x09df:
            r0 = move-exception
            r1 = r0
            goto L_0x09dd
        L_0x09e2:
            r0 = move-exception
            r3 = r40
            r14 = r25
            r1 = r0
            r5 = r4
            r17 = r14
            goto L_0x09f4
        L_0x09ec:
            r0 = move-exception
            r17 = r3
            r18 = r9
            r3 = r12
            r5 = r1
            r1 = r0
        L_0x09f4:
            monitor-exit(r39)     // Catch:{ all -> 0x09f9 }
            resetPriorityAfterLockedSection()
            throw r1
        L_0x09f9:
            r0 = move-exception
            r1 = r0
            goto L_0x09f4
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.getContentProviderImpl(android.app.IApplicationThread, java.lang.String, android.os.IBinder, int, java.lang.String, java.lang.String, boolean, int):android.app.ContentProviderHolder");
    }

    private static final class StartActivityRunnable implements Runnable {
        private final Context mContext;
        private final Intent mIntent;
        private final UserHandle mUserHandle;

        StartActivityRunnable(Context context, Intent intent, UserHandle userHandle) {
            this.mContext = context;
            this.mIntent = intent;
            this.mUserHandle = userHandle;
        }

        public void run() {
            this.mContext.startActivityAsUser(this.mIntent, this.mUserHandle);
        }
    }

    private boolean requestTargetProviderPermissionsReviewIfNeededLocked(ProviderInfo cpi, ProcessRecord r, int userId) {
        boolean callerForeground = true;
        if (!getPackageManagerInternalLocked().isPermissionsReviewRequired(cpi.packageName, userId)) {
            return true;
        }
        if (r != null && r.setSchedGroup == 0) {
            callerForeground = false;
        }
        if (!callerForeground) {
            Slog.w("ActivityManager", "u" + userId + " Instantiating a provider in package" + cpi.packageName + " requires a permissions review");
            return false;
        }
        Intent intent = new Intent("android.intent.action.REVIEW_PERMISSIONS");
        intent.addFlags(276824064);
        intent.putExtra("android.intent.extra.PACKAGE_NAME", cpi.packageName);
        this.mHandler.post(new StartActivityRunnable(this.mContext, intent, new UserHandle(userId)));
        return false;
    }

    @VisibleForTesting
    public IPackageManager getPackageManager() {
        return AppGlobals.getPackageManager();
    }

    @VisibleForTesting
    public PackageManagerInternal getPackageManagerInternalLocked() {
        if (this.mPackageManagerInt == null) {
            this.mPackageManagerInt = (PackageManagerInternal) LocalServices.getService(PackageManagerInternal.class);
        }
        return this.mPackageManagerInt;
    }

    public final ContentProviderHolder getContentProvider(IApplicationThread caller, String callingPackage, String name, int userId, boolean stable) {
        enforceNotIsolatedCaller("getContentProvider");
        if (caller != null) {
            int callingUid = Binder.getCallingUid();
            if (callingPackage == null || this.mAppOpsService.checkPackage(callingUid, callingPackage) == 0) {
                return getContentProviderImpl(caller, name, (IBinder) null, callingUid, callingPackage, (String) null, stable, userId);
            }
            throw new SecurityException("Given calling package " + callingPackage + " does not match caller's uid " + callingUid);
        }
        String msg = "null IApplicationThread when getting content provider " + name;
        Slog.w("ActivityManager", msg);
        throw new SecurityException(msg);
    }

    public ContentProviderHolder getContentProviderExternal(String name, int userId, IBinder token, String tag) {
        enforceCallingPermission("android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY", "Do not have permission in call getContentProviderExternal()");
        return getContentProviderExternalUnchecked(name, token, Binder.getCallingUid(), tag != null ? tag : "*external*", this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, false, 2, "getContentProvider", (String) null));
    }

    private ContentProviderHolder getContentProviderExternalUnchecked(String name, IBinder token, int callingUid, String callingTag, int userId) {
        return getContentProviderImpl((IApplicationThread) null, name, token, callingUid, (String) null, callingTag, true, userId);
    }

    /* Debug info: failed to restart local var, previous not found, register: 5 */
    public void removeContentProvider(IBinder connection, boolean stable) {
        enforceNotIsolatedCaller("removeContentProvider");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ContentProviderConnection conn = (ContentProviderConnection) connection;
                if (conn == null) {
                    throw new NullPointerException("connection is null");
                } else if (decProviderCountLocked(conn, (ContentProviderRecord) null, (IBinder) null, stable)) {
                    updateOomAdjLocked("updateOomAdj_removeProvider");
                }
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
        } catch (ClassCastException e) {
            String msg = "removeContentProvider: " + connection + " not a ContentProviderConnection";
            Slog.w("ActivityManager", msg);
            throw new IllegalArgumentException(msg);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    @Deprecated
    public void removeContentProviderExternal(String name, IBinder token) {
        removeContentProviderExternalAsUser(name, token, UserHandle.getCallingUserId());
    }

    public void removeContentProviderExternalAsUser(String name, IBinder token, int userId) {
        enforceCallingPermission("android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY", "Do not have permission in call removeContentProviderExternal()");
        long ident = Binder.clearCallingIdentity();
        try {
            removeContentProviderExternalUnchecked(name, token, userId);
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:16:0x0077, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:17:0x007a, code lost:
        return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void removeContentProviderExternalUnchecked(java.lang.String r7, android.os.IBinder r8, int r9) {
        /*
            r6 = this;
            monitor-enter(r6)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x007b }
            com.android.server.am.ProviderMap r0 = r6.mProviderMap     // Catch:{ all -> 0x007b }
            com.android.server.am.ContentProviderRecord r0 = r0.getProviderByName(r7, r9)     // Catch:{ all -> 0x007b }
            if (r0 != 0) goto L_0x0011
            monitor-exit(r6)     // Catch:{ all -> 0x007b }
            resetPriorityAfterLockedSection()
            return
        L_0x0011:
            android.content.ComponentName r1 = new android.content.ComponentName     // Catch:{ all -> 0x007b }
            android.content.pm.ProviderInfo r2 = r0.info     // Catch:{ all -> 0x007b }
            java.lang.String r2 = r2.packageName     // Catch:{ all -> 0x007b }
            android.content.pm.ProviderInfo r3 = r0.info     // Catch:{ all -> 0x007b }
            java.lang.String r3 = r3.name     // Catch:{ all -> 0x007b }
            r1.<init>(r2, r3)     // Catch:{ all -> 0x007b }
            com.android.server.am.ProviderMap r2 = r6.mProviderMap     // Catch:{ all -> 0x007b }
            com.android.server.am.ContentProviderRecord r2 = r2.getProviderByClass(r1, r9)     // Catch:{ all -> 0x007b }
            boolean r3 = r2.hasExternalProcessHandles()     // Catch:{ all -> 0x007b }
            if (r3 == 0) goto L_0x005b
            boolean r3 = r2.removeExternalProcessHandleLocked(r8)     // Catch:{ all -> 0x007b }
            if (r3 == 0) goto L_0x0037
            java.lang.String r3 = "updateOomAdj_removeProvider"
            r6.updateOomAdjLocked(r3)     // Catch:{ all -> 0x007b }
            goto L_0x0076
        L_0x0037:
            java.lang.String r3 = "ActivityManager"
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x007b }
            r4.<init>()     // Catch:{ all -> 0x007b }
            java.lang.String r5 = "Attmpt to remove content provider "
            r4.append(r5)     // Catch:{ all -> 0x007b }
            r4.append(r2)     // Catch:{ all -> 0x007b }
            java.lang.String r5 = " with no external reference for token: "
            r4.append(r5)     // Catch:{ all -> 0x007b }
            r4.append(r8)     // Catch:{ all -> 0x007b }
            java.lang.String r5 = "."
            r4.append(r5)     // Catch:{ all -> 0x007b }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x007b }
            android.util.Slog.e(r3, r4)     // Catch:{ all -> 0x007b }
            goto L_0x0076
        L_0x005b:
            java.lang.String r3 = "ActivityManager"
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x007b }
            r4.<init>()     // Catch:{ all -> 0x007b }
            java.lang.String r5 = "Attmpt to remove content provider: "
            r4.append(r5)     // Catch:{ all -> 0x007b }
            r4.append(r2)     // Catch:{ all -> 0x007b }
            java.lang.String r5 = " with no external references."
            r4.append(r5)     // Catch:{ all -> 0x007b }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x007b }
            android.util.Slog.e(r3, r4)     // Catch:{ all -> 0x007b }
        L_0x0076:
            monitor-exit(r6)     // Catch:{ all -> 0x007b }
            resetPriorityAfterLockedSection()
            return
        L_0x007b:
            r0 = move-exception
            monitor-exit(r6)     // Catch:{ all -> 0x007b }
            resetPriorityAfterLockedSection()
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.removeContentProviderExternalUnchecked(java.lang.String, android.os.IBinder, int):void");
    }

    /* Debug info: failed to restart local var, previous not found, register: 18 */
    /*  JADX ERROR: IndexOutOfBoundsException in pass: RegionMakerVisitor
        java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
        	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
        	at java.util.ArrayList.get(ArrayList.java:433)
        	at jadx.core.dex.nodes.InsnNode.getArg(InsnNode.java:101)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:611)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:561)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processIf(RegionMaker.java:693)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:123)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processIf(RegionMaker.java:698)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:123)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processIf(RegionMaker.java:693)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:123)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processLoop(RegionMaker.java:225)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:106)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processIf(RegionMaker.java:693)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:123)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:598)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processIf(RegionMaker.java:698)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:123)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:49)
        */
    public final void publishContentProviders(android.app.IApplicationThread r19, java.util.List<android.app.ContentProviderHolder> r20) {
        /*
            r18 = this;
            r1 = r18
            r2 = r20
            if (r2 != 0) goto L_0x0007
            return
        L_0x0007:
            java.lang.String r0 = "publishContentProviders"
            r1.enforceNotIsolatedCaller(r0)
            monitor-enter(r18)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x010a }
            com.android.server.am.ProcessRecord r0 = r18.getRecordForAppLocked(r19)     // Catch:{ all -> 0x010a }
            r3 = r0
            if (r3 == 0) goto L_0x00e0
            long r4 = android.os.Binder.clearCallingIdentity()     // Catch:{ all -> 0x010a }
            int r0 = r20.size()     // Catch:{ all -> 0x010a }
            r6 = r0
            r0 = 0
            r7 = r0
        L_0x0023:
            if (r7 >= r6) goto L_0x00d8
            java.lang.Object r0 = r2.get(r7)     // Catch:{ all -> 0x010a }
            android.app.ContentProviderHolder r0 = (android.app.ContentProviderHolder) r0     // Catch:{ all -> 0x010a }
            r8 = r0
            if (r8 == 0) goto L_0x00d4
            android.content.pm.ProviderInfo r0 = r8.info     // Catch:{ all -> 0x010a }
            if (r0 == 0) goto L_0x00d4
            android.content.IContentProvider r0 = r8.provider     // Catch:{ all -> 0x010a }
            if (r0 != 0) goto L_0x0038
            goto L_0x00d4
        L_0x0038:
            android.util.ArrayMap<java.lang.String, com.android.server.am.ContentProviderRecord> r0 = r3.pubProviders     // Catch:{ all -> 0x010a }
            android.content.pm.ProviderInfo r9 = r8.info     // Catch:{ all -> 0x010a }
            java.lang.String r9 = r9.name     // Catch:{ all -> 0x010a }
            java.lang.Object r0 = r0.get(r9)     // Catch:{ all -> 0x010a }
            com.android.server.am.ContentProviderRecord r0 = (com.android.server.am.ContentProviderRecord) r0     // Catch:{ all -> 0x010a }
            r9 = r0
            if (r9 == 0) goto L_0x00d4
            android.content.ComponentName r0 = new android.content.ComponentName     // Catch:{ all -> 0x010a }
            android.content.pm.ProviderInfo r10 = r9.info     // Catch:{ all -> 0x010a }
            java.lang.String r10 = r10.packageName     // Catch:{ all -> 0x010a }
            android.content.pm.ProviderInfo r11 = r9.info     // Catch:{ all -> 0x010a }
            java.lang.String r11 = r11.name     // Catch:{ all -> 0x010a }
            r0.<init>(r10, r11)     // Catch:{ all -> 0x010a }
            r10 = r0
            com.android.server.am.ProviderMap r0 = r1.mProviderMap     // Catch:{ all -> 0x010a }
            r0.putProviderByClass(r10, r9)     // Catch:{ all -> 0x010a }
            android.content.pm.ProviderInfo r0 = r9.info     // Catch:{ all -> 0x010a }
            java.lang.String r0 = r0.authority     // Catch:{ all -> 0x010a }
            java.lang.String r11 = ";"
            java.lang.String[] r0 = r0.split(r11)     // Catch:{ all -> 0x010a }
            r11 = r0
            r0 = 0
        L_0x0066:
            int r12 = r11.length     // Catch:{ all -> 0x010a }
            if (r0 >= r12) goto L_0x0073
            com.android.server.am.ProviderMap r12 = r1.mProviderMap     // Catch:{ all -> 0x010a }
            r13 = r11[r0]     // Catch:{ all -> 0x010a }
            r12.putProviderByName(r13, r9)     // Catch:{ all -> 0x010a }
            int r0 = r0 + 1
            goto L_0x0066
        L_0x0073:
            java.util.ArrayList<com.android.server.am.ContentProviderRecord> r0 = r1.mLaunchingProviders     // Catch:{ all -> 0x010a }
            int r0 = r0.size()     // Catch:{ all -> 0x010a }
            r12 = 0
            r13 = 0
            r14 = r12
            r12 = r0
        L_0x007d:
            r0 = 1
            if (r13 >= r12) goto L_0x0094
            java.util.ArrayList<com.android.server.am.ContentProviderRecord> r15 = r1.mLaunchingProviders     // Catch:{ all -> 0x010a }
            java.lang.Object r15 = r15.get(r13)     // Catch:{ all -> 0x010a }
            if (r15 != r9) goto L_0x0092
            java.util.ArrayList<com.android.server.am.ContentProviderRecord> r15 = r1.mLaunchingProviders     // Catch:{ all -> 0x010a }
            r15.remove(r13)     // Catch:{ all -> 0x010a }
            r14 = 1
            int r13 = r13 + -1
            int r12 = r12 + -1
        L_0x0092:
            int r13 = r13 + r0
            goto L_0x007d
        L_0x0094:
            if (r14 == 0) goto L_0x009d
            com.android.server.am.ActivityManagerService$MainHandler r15 = r1.mHandler     // Catch:{ all -> 0x010a }
            r0 = 57
            r15.removeMessages(r0, r3)     // Catch:{ all -> 0x010a }
        L_0x009d:
            android.content.pm.ProviderInfo r0 = r9.info     // Catch:{ all -> 0x010a }
            android.content.pm.ApplicationInfo r0 = r0.applicationInfo     // Catch:{ all -> 0x010a }
            java.lang.String r0 = r0.packageName     // Catch:{ all -> 0x010a }
            android.content.pm.ProviderInfo r15 = r9.info     // Catch:{ all -> 0x010a }
            android.content.pm.ApplicationInfo r15 = r15.applicationInfo     // Catch:{ all -> 0x010a }
            r16 = r10
            r17 = r11
            long r10 = r15.longVersionCode     // Catch:{ all -> 0x010a }
            com.android.server.am.ProcessStatsService r15 = r1.mProcessStats     // Catch:{ all -> 0x010a }
            r3.addPackage(r0, r10, r15)     // Catch:{ all -> 0x010a }
            monitor-enter(r9)     // Catch:{ all -> 0x010a }
            android.content.IContentProvider r0 = r8.provider     // Catch:{ all -> 0x00d1 }
            r9.provider = r0     // Catch:{ all -> 0x00d1 }
            r9.setProcess(r3)     // Catch:{ all -> 0x00d1 }
            r9.notifyAll()     // Catch:{ all -> 0x00d1 }
            monitor-exit(r9)     // Catch:{ all -> 0x00d1 }
            java.lang.String r0 = "updateOomAdj_getProvider"
            r10 = 1
            r1.updateOomAdjLocked(r3, r10, r0)     // Catch:{ all -> 0x010a }
            android.content.pm.ProviderInfo r0 = r8.info     // Catch:{ all -> 0x010a }
            java.lang.String r0 = r0.packageName     // Catch:{ all -> 0x010a }
            android.content.pm.ProviderInfo r10 = r8.info     // Catch:{ all -> 0x010a }
            java.lang.String r10 = r10.authority     // Catch:{ all -> 0x010a }
            r1.maybeUpdateProviderUsageStatsLocked(r3, r0, r10)     // Catch:{ all -> 0x010a }
            goto L_0x00d4
        L_0x00d1:
            r0 = move-exception
            monitor-exit(r9)     // Catch:{ all -> 0x00d1 }
            throw r0     // Catch:{ all -> 0x010a }
        L_0x00d4:
            int r7 = r7 + 1
            goto L_0x0023
        L_0x00d8:
            android.os.Binder.restoreCallingIdentity(r4)     // Catch:{ all -> 0x010a }
            monitor-exit(r18)     // Catch:{ all -> 0x010a }
            resetPriorityAfterLockedSection()
            return
        L_0x00e0:
            java.lang.SecurityException r0 = new java.lang.SecurityException     // Catch:{ all -> 0x010a }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x010a }
            r4.<init>()     // Catch:{ all -> 0x010a }
            java.lang.String r5 = "Unable to find app for caller "
            r4.append(r5)     // Catch:{ all -> 0x010a }
            r5 = r19
            r4.append(r5)     // Catch:{ all -> 0x0112 }
            java.lang.String r6 = " (pid="
            r4.append(r6)     // Catch:{ all -> 0x0112 }
            int r6 = android.os.Binder.getCallingPid()     // Catch:{ all -> 0x0112 }
            r4.append(r6)     // Catch:{ all -> 0x0112 }
            java.lang.String r6 = ") when publishing content providers"
            r4.append(r6)     // Catch:{ all -> 0x0112 }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x0112 }
            r0.<init>(r4)     // Catch:{ all -> 0x0112 }
            throw r0     // Catch:{ all -> 0x0112 }
        L_0x010a:
            r0 = move-exception
            r5 = r19
        L_0x010d:
            monitor-exit(r18)     // Catch:{ all -> 0x0112 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0112:
            r0 = move-exception
            goto L_0x010d
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.publishContentProviders(android.app.IApplicationThread, java.util.List):void");
    }

    /* Debug info: failed to restart local var, previous not found, register: 4 */
    public boolean refContentProvider(IBinder connection, int stable, int unstable) {
        boolean z;
        try {
            ContentProviderConnection conn = (ContentProviderConnection) connection;
            if (conn != null) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        if (stable > 0) {
                            conn.numStableIncs += stable;
                        }
                        int stable2 = stable + conn.stableCount;
                        if (stable2 >= 0) {
                            if (unstable > 0) {
                                conn.numUnstableIncs += unstable;
                            }
                            int unstable2 = unstable + conn.unstableCount;
                            if (unstable2 < 0) {
                                throw new IllegalStateException("unstableCount < 0: " + unstable2);
                            } else if (stable2 + unstable2 > 0) {
                                conn.stableCount = stable2;
                                conn.unstableCount = unstable2;
                                z = !conn.dead;
                            } else {
                                throw new IllegalStateException("ref counts can't go to zero here: stable=" + stable2 + " unstable=" + unstable2);
                            }
                        } else {
                            throw new IllegalStateException("stableCount < 0: " + stable2);
                        }
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
                return z;
            }
            throw new NullPointerException("connection is null");
        } catch (ClassCastException e) {
            String msg = "refContentProvider: " + connection + " not a ContentProviderConnection";
            Slog.w("ActivityManager", msg);
            throw new IllegalArgumentException(msg);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 6 */
    /* JADX WARNING: Code restructure failed: missing block: B:50:0x00b1, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:51:0x00b4, code lost:
        return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void unstableProviderDied(android.os.IBinder r7) {
        /*
            r6 = this;
            r0 = r7
            com.android.server.am.ContentProviderConnection r0 = (com.android.server.am.ContentProviderConnection) r0     // Catch:{ ClassCastException -> 0x00c9 }
            if (r0 == 0) goto L_0x00c1
            monitor-enter(r6)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x00bb }
            com.android.server.am.ContentProviderRecord r1 = r0.provider     // Catch:{ all -> 0x00bb }
            android.content.IContentProvider r1 = r1.provider     // Catch:{ all -> 0x00bb }
            monitor-exit(r6)     // Catch:{ all -> 0x00bb }
            resetPriorityAfterLockedSection()
            if (r1 != 0) goto L_0x0015
            return
        L_0x0015:
            android.os.IBinder r2 = r1.asBinder()
            boolean r2 = r2.pingBinder()
            if (r2 == 0) goto L_0x0056
            monitor-enter(r6)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0050 }
            java.lang.String r2 = "ActivityManager"
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x0050 }
            r3.<init>()     // Catch:{ all -> 0x0050 }
            java.lang.String r4 = "unstableProviderDied: caller "
            r3.append(r4)     // Catch:{ all -> 0x0050 }
            int r4 = android.os.Binder.getCallingUid()     // Catch:{ all -> 0x0050 }
            r3.append(r4)     // Catch:{ all -> 0x0050 }
            java.lang.String r4 = " says "
            r3.append(r4)     // Catch:{ all -> 0x0050 }
            r3.append(r0)     // Catch:{ all -> 0x0050 }
            java.lang.String r4 = " died, but we don't agree"
            r3.append(r4)     // Catch:{ all -> 0x0050 }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x0050 }
            android.util.Slog.w(r2, r3)     // Catch:{ all -> 0x0050 }
            monitor-exit(r6)     // Catch:{ all -> 0x0050 }
            resetPriorityAfterLockedSection()
            return
        L_0x0050:
            r2 = move-exception
            monitor-exit(r6)     // Catch:{ all -> 0x0050 }
            resetPriorityAfterLockedSection()
            throw r2
        L_0x0056:
            monitor-enter(r6)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x00b5 }
            com.android.server.am.ContentProviderRecord r2 = r0.provider     // Catch:{ all -> 0x00b5 }
            android.content.IContentProvider r2 = r2.provider     // Catch:{ all -> 0x00b5 }
            if (r2 == r1) goto L_0x0065
            monitor-exit(r6)     // Catch:{ all -> 0x00b5 }
            resetPriorityAfterLockedSection()
            return
        L_0x0065:
            com.android.server.am.ContentProviderRecord r2 = r0.provider     // Catch:{ all -> 0x00b5 }
            com.android.server.am.ProcessRecord r2 = r2.proc     // Catch:{ all -> 0x00b5 }
            if (r2 == 0) goto L_0x00b0
            android.app.IApplicationThread r3 = r2.thread     // Catch:{ all -> 0x00b5 }
            if (r3 != 0) goto L_0x0070
            goto L_0x00b0
        L_0x0070:
            java.lang.String r3 = "ActivityManager"
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x00b5 }
            r4.<init>()     // Catch:{ all -> 0x00b5 }
            java.lang.String r5 = "Process "
            r4.append(r5)     // Catch:{ all -> 0x00b5 }
            java.lang.String r5 = r2.processName     // Catch:{ all -> 0x00b5 }
            r4.append(r5)     // Catch:{ all -> 0x00b5 }
            java.lang.String r5 = " (pid "
            r4.append(r5)     // Catch:{ all -> 0x00b5 }
            int r5 = r2.pid     // Catch:{ all -> 0x00b5 }
            r4.append(r5)     // Catch:{ all -> 0x00b5 }
            java.lang.String r5 = ") early provider death"
            r4.append(r5)     // Catch:{ all -> 0x00b5 }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x00b5 }
            android.content.pm.ApplicationInfo r5 = r2.info     // Catch:{ all -> 0x00b5 }
            int r5 = r5.uid     // Catch:{ all -> 0x00b5 }
            r6.reportUidInfoMessageLocked(r3, r4, r5)     // Catch:{ all -> 0x00b5 }
            long r3 = android.os.Binder.clearCallingIdentity()     // Catch:{ all -> 0x00b5 }
            r6.appDiedLocked(r2)     // Catch:{ all -> 0x00ab }
            android.os.Binder.restoreCallingIdentity(r3)     // Catch:{ all -> 0x00b5 }
            monitor-exit(r6)     // Catch:{ all -> 0x00b5 }
            resetPriorityAfterLockedSection()
            return
        L_0x00ab:
            r5 = move-exception
            android.os.Binder.restoreCallingIdentity(r3)     // Catch:{ all -> 0x00b5 }
            throw r5     // Catch:{ all -> 0x00b5 }
        L_0x00b0:
            monitor-exit(r6)     // Catch:{ all -> 0x00b5 }
            resetPriorityAfterLockedSection()
            return
        L_0x00b5:
            r2 = move-exception
            monitor-exit(r6)     // Catch:{ all -> 0x00b5 }
            resetPriorityAfterLockedSection()
            throw r2
        L_0x00bb:
            r1 = move-exception
            monitor-exit(r6)     // Catch:{ all -> 0x00bb }
            resetPriorityAfterLockedSection()
            throw r1
        L_0x00c1:
            java.lang.NullPointerException r1 = new java.lang.NullPointerException
            java.lang.String r2 = "connection is null"
            r1.<init>(r2)
            throw r1
        L_0x00c9:
            r0 = move-exception
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "refContentProvider: "
            r1.append(r2)
            r1.append(r7)
            java.lang.String r2 = " not a ContentProviderConnection"
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            java.lang.String r2 = "ActivityManager"
            android.util.Slog.w(r2, r1)
            java.lang.IllegalArgumentException r2 = new java.lang.IllegalArgumentException
            r2.<init>(r1)
            throw r2
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.unstableProviderDied(android.os.IBinder):void");
    }

    public void appNotRespondingViaProvider(IBinder connection) {
        enforceCallingPermission("android.permission.REMOVE_TASKS", "appNotRespondingViaProvider()");
        ContentProviderConnection conn = (ContentProviderConnection) connection;
        if (conn == null) {
            Slog.w("ActivityManager", "ContentProviderConnection is null");
            return;
        }
        final ProcessRecord host = conn.provider.proc;
        if (host == null) {
            Slog.w("ActivityManager", "Failed to find hosting ProcessRecord");
        } else {
            this.mHandler.post(new Runnable() {
                public void run() {
                    host.appNotResponding((String) null, (ApplicationInfo) null, (String) null, (WindowProcessController) null, false, "ContentProvider not responding");
                }
            });
        }
    }

    public final void installSystemProviders() {
        List<ProviderInfo> providers;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                providers = generateApplicationProvidersLocked((ProcessRecord) this.mProcessList.mProcessNames.get("system", 1000));
                if (providers != null) {
                    for (int i = providers.size() - 1; i >= 0; i--) {
                        ProviderInfo pi = providers.get(i);
                        if ((pi.applicationInfo.flags & 1) == 0) {
                            Slog.w("ActivityManager", "Not installing system proc provider " + pi.name + ": not system .apk");
                            providers.remove(i);
                        }
                    }
                }
            } finally {
                while (true) {
                    resetPriorityAfterLockedSection();
                }
            }
        }
        resetPriorityAfterLockedSection();
        if (providers != null) {
            this.mSystemThread.installSystemProviders(providers);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mSystemProvidersInstalled = true;
            } catch (Throwable th) {
                while (true) {
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        this.mConstants.start(this.mContext.getContentResolver());
        this.mCoreSettingsObserver = new CoreSettingsObserver(this);
        this.mActivityTaskManager.installSystemProviders();
        this.mDevelopmentSettingsObserver = new DevelopmentSettingsObserver();
        SettingsToPropertiesMapper.start(this.mContext.getContentResolver());
        this.mOomAdjuster.initSettings();
        RescueParty.onSettingsProviderPublished(this.mContext);
    }

    /* access modifiers changed from: package-private */
    public void startPersistentApps(int matchFlags) {
        if (this.mFactoryTest != 1) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    for (ApplicationInfo app : AppGlobals.getPackageManager().getPersistentApplications(matchFlags | 1024).getList()) {
                        if (!PackageManagerService.PLATFORM_PACKAGE_NAME.equals(app.packageName) && !ProcessPolicyManager.isDelayBootPersistentApp(app.packageName)) {
                            if (ActivityManagerServiceInjector.shouldAddPersistApp(app)) {
                                addAppLocked(app, (String) null, false, (String) null);
                                ActivityManagerServiceInjector.setProcessInitState(app.processName);
                            }
                        }
                    }
                } catch (RemoteException e) {
                }
                try {
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
        }
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Removed duplicated region for block: B:48:0x00b6 A[Catch:{ RemoteException -> 0x0108 }] */
    /* JADX WARNING: Removed duplicated region for block: B:55:0x00c4 A[ADDED_TO_REGION, Catch:{ RemoteException -> 0x0108 }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void installEncryptionUnawareProviders(int r23) {
        /*
            r22 = this;
            r1 = r22
            r2 = r23
            r3 = 262152(0x40008, float:3.67353E-40)
            monitor-enter(r22)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x017f }
            com.android.server.am.ProcessList r0 = r1.mProcessList     // Catch:{ all -> 0x017f }
            com.android.server.am.ProcessList$MyProcessMap r0 = r0.mProcessNames     // Catch:{ all -> 0x017f }
            android.util.ArrayMap r0 = r0.getMap()     // Catch:{ all -> 0x017f }
            int r0 = r0.size()     // Catch:{ all -> 0x017f }
            r4 = r0
            r0 = 0
            r5 = r0
        L_0x001a:
            if (r5 >= r4) goto L_0x0176
            com.android.server.am.ProcessList r0 = r1.mProcessList     // Catch:{ all -> 0x017f }
            com.android.server.am.ProcessList$MyProcessMap r0 = r0.mProcessNames     // Catch:{ all -> 0x017f }
            android.util.ArrayMap r0 = r0.getMap()     // Catch:{ all -> 0x017f }
            java.lang.Object r0 = r0.valueAt(r5)     // Catch:{ all -> 0x017f }
            android.util.SparseArray r0 = (android.util.SparseArray) r0     // Catch:{ all -> 0x017f }
            r6 = r0
            int r0 = r6.size()     // Catch:{ all -> 0x017f }
            r7 = r0
            r0 = 0
            r8 = r0
        L_0x0032:
            if (r8 >= r7) goto L_0x0168
            java.lang.Object r0 = r6.valueAt(r8)     // Catch:{ all -> 0x017f }
            com.android.server.am.ProcessRecord r0 = (com.android.server.am.ProcessRecord) r0     // Catch:{ all -> 0x017f }
            r9 = r0
            int r0 = r9.userId     // Catch:{ all -> 0x017f }
            if (r0 != r2) goto L_0x0152
            android.app.IApplicationThread r0 = r9.thread     // Catch:{ all -> 0x017f }
            if (r0 == 0) goto L_0x0152
            boolean r0 = r9.unlocked     // Catch:{ all -> 0x017f }
            if (r0 == 0) goto L_0x0051
            r17 = r3
            r19 = r4
            r20 = r6
            r21 = r7
            goto L_0x015a
        L_0x0051:
            com.android.server.am.ProcessRecord$PackageList r0 = r9.pkgList     // Catch:{ all -> 0x017f }
            int r0 = r0.size()     // Catch:{ all -> 0x017f }
            r10 = r0
            r0 = 0
            r11 = r0
        L_0x005a:
            if (r11 >= r10) goto L_0x0149
            com.android.server.am.ProcessRecord$PackageList r0 = r9.pkgList     // Catch:{ RemoteException -> 0x0132 }
            java.lang.String r0 = r0.keyAt(r11)     // Catch:{ RemoteException -> 0x0132 }
            android.content.pm.IPackageManager r12 = android.app.AppGlobals.getPackageManager()     // Catch:{ RemoteException -> 0x0132 }
            r13 = 262152(0x40008, float:3.67353E-40)
            android.content.pm.PackageInfo r12 = r12.getPackageInfo(r0, r13, r2)     // Catch:{ RemoteException -> 0x0132 }
            if (r12 == 0) goto L_0x0127
            android.content.pm.ProviderInfo[] r13 = r12.providers     // Catch:{ RemoteException -> 0x0132 }
            boolean r13 = com.android.internal.util.ArrayUtils.isEmpty(r13)     // Catch:{ RemoteException -> 0x0132 }
            if (r13 != 0) goto L_0x0127
            android.content.pm.ProviderInfo[] r13 = r12.providers     // Catch:{ RemoteException -> 0x0132 }
            int r14 = r13.length     // Catch:{ RemoteException -> 0x0132 }
            r15 = 0
        L_0x007b:
            if (r15 >= r14) goto L_0x011c
            r16 = r13[r15]     // Catch:{ RemoteException -> 0x0132 }
            r17 = r16
            r16 = r0
            r0 = r17
            java.lang.String r2 = r0.processName     // Catch:{ RemoteException -> 0x0132 }
            r17 = r3
            java.lang.String r3 = r9.processName     // Catch:{ RemoteException -> 0x0114 }
            boolean r2 = java.util.Objects.equals(r2, r3)     // Catch:{ RemoteException -> 0x0114 }
            if (r2 != 0) goto L_0x00a1
            boolean r2 = r0.multiprocess     // Catch:{ RemoteException -> 0x0098 }
            if (r2 == 0) goto L_0x0096
            goto L_0x00a1
        L_0x0096:
            r2 = 0
            goto L_0x00a2
        L_0x0098:
            r0 = move-exception
            r19 = r4
            r20 = r6
            r21 = r7
            goto L_0x013b
        L_0x00a1:
            r2 = 1
        L_0x00a2:
            java.lang.String r3 = r0.processName     // Catch:{ RemoteException -> 0x0114 }
            r19 = r4
            android.content.pm.ApplicationInfo r4 = r0.applicationInfo     // Catch:{ RemoteException -> 0x010e }
            r20 = r6
            java.lang.String r6 = r0.name     // Catch:{ RemoteException -> 0x010a }
            r21 = r7
            int r7 = r0.flags     // Catch:{ RemoteException -> 0x0108 }
            boolean r3 = r1.isSingleton(r3, r4, r6, r7)     // Catch:{ RemoteException -> 0x0108 }
            if (r3 == 0) goto L_0x00be
            int r3 = r9.userId     // Catch:{ RemoteException -> 0x0108 }
            if (r3 != 0) goto L_0x00bb
            goto L_0x00be
        L_0x00bb:
            r18 = 0
            goto L_0x00c0
        L_0x00be:
            r18 = 1
        L_0x00c0:
            r3 = r18
            if (r2 == 0) goto L_0x00e2
            if (r3 == 0) goto L_0x00e2
            java.lang.String r4 = "ActivityManager"
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ RemoteException -> 0x0108 }
            r6.<init>()     // Catch:{ RemoteException -> 0x0108 }
            java.lang.String r7 = "Installing "
            r6.append(r7)     // Catch:{ RemoteException -> 0x0108 }
            r6.append(r0)     // Catch:{ RemoteException -> 0x0108 }
            java.lang.String r6 = r6.toString()     // Catch:{ RemoteException -> 0x0108 }
            android.util.Log.v(r4, r6)     // Catch:{ RemoteException -> 0x0108 }
            android.app.IApplicationThread r4 = r9.thread     // Catch:{ RemoteException -> 0x0108 }
            r4.scheduleInstallProvider(r0)     // Catch:{ RemoteException -> 0x0108 }
            goto L_0x00f8
        L_0x00e2:
            java.lang.String r4 = "ActivityManager"
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ RemoteException -> 0x0108 }
            r6.<init>()     // Catch:{ RemoteException -> 0x0108 }
            java.lang.String r7 = "Skipping "
            r6.append(r7)     // Catch:{ RemoteException -> 0x0108 }
            r6.append(r0)     // Catch:{ RemoteException -> 0x0108 }
            java.lang.String r6 = r6.toString()     // Catch:{ RemoteException -> 0x0108 }
            android.util.Log.v(r4, r6)     // Catch:{ RemoteException -> 0x0108 }
        L_0x00f8:
            int r15 = r15 + 1
            r2 = r23
            r0 = r16
            r3 = r17
            r4 = r19
            r6 = r20
            r7 = r21
            goto L_0x007b
        L_0x0108:
            r0 = move-exception
            goto L_0x013b
        L_0x010a:
            r0 = move-exception
            r21 = r7
            goto L_0x013b
        L_0x010e:
            r0 = move-exception
            r20 = r6
            r21 = r7
            goto L_0x013b
        L_0x0114:
            r0 = move-exception
            r19 = r4
            r20 = r6
            r21 = r7
            goto L_0x013b
        L_0x011c:
            r16 = r0
            r17 = r3
            r19 = r4
            r20 = r6
            r21 = r7
            goto L_0x0131
        L_0x0127:
            r16 = r0
            r17 = r3
            r19 = r4
            r20 = r6
            r21 = r7
        L_0x0131:
            goto L_0x013b
        L_0x0132:
            r0 = move-exception
            r17 = r3
            r19 = r4
            r20 = r6
            r21 = r7
        L_0x013b:
            int r11 = r11 + 1
            r2 = r23
            r3 = r17
            r4 = r19
            r6 = r20
            r7 = r21
            goto L_0x005a
        L_0x0149:
            r17 = r3
            r19 = r4
            r20 = r6
            r21 = r7
            goto L_0x015a
        L_0x0152:
            r17 = r3
            r19 = r4
            r20 = r6
            r21 = r7
        L_0x015a:
            int r8 = r8 + 1
            r2 = r23
            r3 = r17
            r4 = r19
            r6 = r20
            r7 = r21
            goto L_0x0032
        L_0x0168:
            r17 = r3
            r19 = r4
            r20 = r6
            r21 = r7
            int r5 = r5 + 1
            r2 = r23
            goto L_0x001a
        L_0x0176:
            r17 = r3
            r19 = r4
            monitor-exit(r22)     // Catch:{ all -> 0x0187 }
            resetPriorityAfterLockedSection()
            return
        L_0x017f:
            r0 = move-exception
            r17 = r3
        L_0x0182:
            monitor-exit(r22)     // Catch:{ all -> 0x0187 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0187:
            r0 = move-exception
            goto L_0x0182
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.installEncryptionUnawareProviders(int):void");
    }

    /* JADX WARNING: Removed duplicated region for block: B:43:0x00af  */
    /* JADX WARNING: Removed duplicated region for block: B:45:0x00b5 A[SYNTHETIC, Splitter:B:45:0x00b5] */
    /* JADX WARNING: Removed duplicated region for block: B:56:0x00e0  */
    /* JADX WARNING: Removed duplicated region for block: B:58:0x00e6 A[SYNTHETIC, Splitter:B:58:0x00e6] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public java.lang.String getProviderMimeType(android.net.Uri r20, int r21) {
        /*
            r19 = this;
            r7 = r19
            r8 = r20
            java.lang.String r9 = "ActivityManager"
            java.lang.String r0 = "getProviderMimeType"
            r7.enforceNotIsolatedCaller(r0)
            java.lang.String r10 = r20.getAuthority()
            int r11 = android.os.Binder.getCallingUid()
            int r12 = android.os.Binder.getCallingPid()
            r0 = 0
            r2 = 0
            com.android.server.am.UserController r3 = r7.mUserController
            r4 = r21
            int r13 = r3.unsafeConvertIncomingUser(r4)
            boolean r3 = r7.canClearIdentity(r12, r11, r13)
            if (r3 == 0) goto L_0x0030
            r2 = 1
            long r0 = android.os.Binder.clearCallingIdentity()
            r15 = r0
            r14 = r2
            goto L_0x0032
        L_0x0030:
            r15 = r0
            r14 = r2
        L_0x0032:
            r17 = 0
            r3 = 0
            r6 = 0
            java.lang.String r5 = "*getmimetype*"
            r1 = r19
            r2 = r10
            r4 = r11
            r18 = r11
            r11 = r6
            r6 = r13
            android.app.ContentProviderHolder r0 = r1.getContentProviderExternalUnchecked(r2, r3, r4, r5, r6)     // Catch:{ RemoteException -> 0x008c, Exception -> 0x008a }
            r1 = r0
            if (r1 == 0) goto L_0x006f
            android.content.IContentProvider r0 = r1.provider     // Catch:{ RemoteException -> 0x006b, Exception -> 0x0067, all -> 0x0062 }
            java.lang.String r0 = r0.getType(r8)     // Catch:{ RemoteException -> 0x006b, Exception -> 0x0067, all -> 0x0062 }
            if (r14 != 0) goto L_0x0053
            long r15 = android.os.Binder.clearCallingIdentity()
        L_0x0053:
            r7.removeContentProviderExternalUnchecked(r10, r11, r13)     // Catch:{ all -> 0x005c }
            android.os.Binder.restoreCallingIdentity(r15)
            return r0
        L_0x005c:
            r0 = move-exception
            r2 = r0
            android.os.Binder.restoreCallingIdentity(r15)
            throw r2
        L_0x0062:
            r0 = move-exception
            r17 = r1
            goto L_0x00f5
        L_0x0067:
            r0 = move-exception
            r17 = r1
            goto L_0x0097
        L_0x006b:
            r0 = move-exception
            r17 = r1
            goto L_0x00c8
        L_0x006f:
            if (r14 != 0) goto L_0x0075
            long r15 = android.os.Binder.clearCallingIdentity()
        L_0x0075:
            if (r1 == 0) goto L_0x0081
            r7.removeContentProviderExternalUnchecked(r10, r11, r13)     // Catch:{ all -> 0x007b }
            goto L_0x0081
        L_0x007b:
            r0 = move-exception
            r2 = r0
            android.os.Binder.restoreCallingIdentity(r15)
            throw r2
        L_0x0081:
            android.os.Binder.restoreCallingIdentity(r15)
            return r11
        L_0x0087:
            r0 = move-exception
            goto L_0x00f5
        L_0x008a:
            r0 = move-exception
            goto L_0x0097
        L_0x008c:
            r0 = move-exception
            goto L_0x00c8
        L_0x008e:
            r0 = move-exception
            r18 = r11
            r11 = r6
            goto L_0x00f5
        L_0x0093:
            r0 = move-exception
            r18 = r11
            r11 = r6
        L_0x0097:
            r1 = r0
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ all -> 0x0087 }
            r0.<init>()     // Catch:{ all -> 0x0087 }
            java.lang.String r2 = "Exception while determining type of "
            r0.append(r2)     // Catch:{ all -> 0x0087 }
            r0.append(r8)     // Catch:{ all -> 0x0087 }
            java.lang.String r0 = r0.toString()     // Catch:{ all -> 0x0087 }
            android.util.Log.w(r9, r0, r1)     // Catch:{ all -> 0x0087 }
            if (r14 != 0) goto L_0x00b3
            long r15 = android.os.Binder.clearCallingIdentity()
        L_0x00b3:
            if (r17 == 0) goto L_0x00bf
            r7.removeContentProviderExternalUnchecked(r10, r11, r13)     // Catch:{ all -> 0x00b9 }
            goto L_0x00bf
        L_0x00b9:
            r0 = move-exception
            r2 = r0
            android.os.Binder.restoreCallingIdentity(r15)
            throw r2
        L_0x00bf:
            android.os.Binder.restoreCallingIdentity(r15)
            return r11
        L_0x00c4:
            r0 = move-exception
            r18 = r11
            r11 = r6
        L_0x00c8:
            r1 = r0
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ all -> 0x0087 }
            r0.<init>()     // Catch:{ all -> 0x0087 }
            java.lang.String r2 = "Content provider dead retrieving "
            r0.append(r2)     // Catch:{ all -> 0x0087 }
            r0.append(r8)     // Catch:{ all -> 0x0087 }
            java.lang.String r0 = r0.toString()     // Catch:{ all -> 0x0087 }
            android.util.Log.w(r9, r0, r1)     // Catch:{ all -> 0x0087 }
            if (r14 != 0) goto L_0x00e4
            long r15 = android.os.Binder.clearCallingIdentity()
        L_0x00e4:
            if (r17 == 0) goto L_0x00f0
            r7.removeContentProviderExternalUnchecked(r10, r11, r13)     // Catch:{ all -> 0x00ea }
            goto L_0x00f0
        L_0x00ea:
            r0 = move-exception
            r2 = r0
            android.os.Binder.restoreCallingIdentity(r15)
            throw r2
        L_0x00f0:
            android.os.Binder.restoreCallingIdentity(r15)
            return r11
        L_0x00f5:
            if (r14 != 0) goto L_0x00fb
            long r15 = android.os.Binder.clearCallingIdentity()
        L_0x00fb:
            if (r17 == 0) goto L_0x0107
            r7.removeContentProviderExternalUnchecked(r10, r11, r13)     // Catch:{ all -> 0x0101 }
            goto L_0x0107
        L_0x0101:
            r0 = move-exception
            r1 = r0
            android.os.Binder.restoreCallingIdentity(r15)
            throw r1
        L_0x0107:
            android.os.Binder.restoreCallingIdentity(r15)
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.getProviderMimeType(android.net.Uri, int):java.lang.String");
    }

    private boolean canClearIdentity(int callingPid, int callingUid, int userId) {
        if (UserHandle.getUserId(callingUid) == userId || checkComponentPermission("android.permission.INTERACT_ACROSS_USERS", callingPid, callingUid, -1, true) == 0 || checkComponentPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingPid, callingUid, -1, true) == 0) {
            return true;
        }
        return false;
    }

    private boolean uidOnBackgroundWhitelist(int uid) {
        int appId = UserHandle.getAppId(uid);
        for (int i : this.mBackgroundAppIdWhitelist) {
            if (appId == i) {
                return true;
            }
        }
        return false;
    }

    /* Debug info: failed to restart local var, previous not found, register: 6 */
    public boolean isBackgroundRestricted(String packageName) {
        int callingUid = Binder.getCallingUid();
        try {
            if (AppGlobals.getPackageManager().getPackageUid(packageName, 268435456, UserHandle.getUserId(callingUid)) == callingUid) {
                return isBackgroundRestrictedNoCheck(callingUid, packageName);
            }
            throw new IllegalArgumentException("Uid " + callingUid + " cannot query restriction state for package " + packageName);
        } catch (RemoteException e) {
        }
    }

    /* access modifiers changed from: package-private */
    public boolean isBackgroundRestrictedNoCheck(int uid, String packageName) {
        return this.mAppOpsService.checkOperation(70, uid, packageName) != 0;
    }

    public void backgroundWhitelistUid(int uid) {
        if (Binder.getCallingUid() == 1000) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int N = this.mBackgroundAppIdWhitelist.length;
                    int[] newList = new int[(N + 1)];
                    System.arraycopy(this.mBackgroundAppIdWhitelist, 0, newList, 0, N);
                    newList[N] = UserHandle.getAppId(uid);
                    this.mBackgroundAppIdWhitelist = newList;
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        throw new SecurityException("Only the OS may call backgroundWhitelistUid()");
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final ProcessRecord addAppLocked(ApplicationInfo info, String customProcess, boolean isolated, String abiOverride) {
        return addAppLocked(info, customProcess, isolated, false, false, abiOverride);
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final ProcessRecord addAppLocked(ApplicationInfo info, String customProcess, boolean isolated, boolean disableHiddenApiChecks, boolean mountExtStorageFull, String abiOverride) {
        ProcessRecord app;
        ProcessRecord app2;
        ApplicationInfo applicationInfo = info;
        if (!isolated) {
            app = getProcessRecordLocked(customProcess != null ? customProcess : applicationInfo.processName, applicationInfo.uid, true);
        } else {
            app = null;
        }
        if (app == null) {
            ProcessRecord app3 = this.mProcessList.newProcessRecordLocked(info, customProcess, isolated, 0, new HostingRecord("added application", customProcess != null ? customProcess : applicationInfo.processName));
            this.mProcessList.updateLruProcessLocked(app3, false, (ProcessRecord) null);
            updateOomAdjLocked("updateOomAdj_processBegin");
            app2 = app3;
        } else {
            app2 = app;
        }
        try {
            AppGlobals.getPackageManager().setPackageStoppedState(applicationInfo.packageName, false, UserHandle.getUserId(app2.uid));
        } catch (RemoteException e) {
        } catch (IllegalArgumentException e2) {
            Slog.w("ActivityManager", "Failed trying to unstop package " + applicationInfo.packageName + ": " + e2);
        }
        if ((applicationInfo.flags & 9) == 9) {
            app2.setPersistent(true);
            app2.maxAdj = -800;
        }
        if (app2.thread == null && this.mPersistentStartingProcesses.indexOf(app2) < 0) {
            this.mPersistentStartingProcesses.add(app2);
            app2.callerPackage = PackageManagerService.PLATFORM_PACKAGE_NAME;
            this.mProcessList.startProcessLocked(app2, new HostingRecord("added application", customProcess != null ? customProcess : app2.processName), disableHiddenApiChecks, mountExtStorageFull, abiOverride);
        }
        return app2;
    }

    public void unhandledBack() {
        this.mActivityTaskManager.unhandledBack();
    }

    public ParcelFileDescriptor openContentUri(String uriString) throws RemoteException {
        enforceNotIsolatedCaller("openContentUri");
        int userId = UserHandle.getCallingUserId();
        Uri uri = Uri.parse(uriString);
        String name = uri.getAuthority();
        ContentProviderHolder cph = getContentProviderExternalUnchecked(name, (IBinder) null, Binder.getCallingUid(), "*opencontent*", userId);
        if (cph != null) {
            Binder token = new Binder();
            sCallerIdentity.set(new Identity(token, Binder.getCallingPid(), Binder.getCallingUid()));
            try {
                ParcelFileDescriptor pfd = cph.provider.openFile((String) null, uri, ActivityTaskManagerService.DUMP_RECENTS_SHORT_CMD, (ICancellationSignal) null, token);
                sCallerIdentity.remove();
                removeContentProviderExternalUnchecked(name, (IBinder) null, userId);
                return pfd;
            } catch (FileNotFoundException e) {
                sCallerIdentity.remove();
                removeContentProviderExternalUnchecked(name, (IBinder) null, userId);
                return null;
            } catch (Throwable th) {
                sCallerIdentity.remove();
                removeContentProviderExternalUnchecked(name, (IBinder) null, userId);
                throw th;
            }
        } else {
            Slog.d("ActivityManager", "Failed to get provider for authority '" + name + "'");
            return null;
        }
    }

    /* access modifiers changed from: package-private */
    public void reportGlobalUsageEventLocked(int event) {
        this.mUsageStatsService.reportEvent(PackageManagerService.PLATFORM_PACKAGE_NAME, this.mUserController.getCurrentUserId(), event);
        int[] profiles = this.mUserController.getCurrentProfileIds();
        if (profiles != null) {
            for (int i = profiles.length - 1; i >= 0; i--) {
                this.mUsageStatsService.reportEvent((String) null, profiles[i], event);
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void reportCurWakefulnessUsageEventLocked() {
        int i;
        if (this.mWakefulness == 1) {
            i = 15;
        } else {
            i = 16;
        }
        reportGlobalUsageEventLocked(i);
    }

    /* access modifiers changed from: package-private */
    public void onWakefulnessChanged(int wakefulness) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                boolean isAwake = false;
                boolean wasAwake = this.mWakefulness == 1;
                if (wakefulness == 1) {
                    isAwake = true;
                }
                this.mWakefulness = wakefulness;
                if (wasAwake != isAwake) {
                    this.mServices.updateScreenStateLocked(isAwake);
                    reportCurWakefulnessUsageEventLocked();
                    this.mActivityTaskManager.onScreenAwakeChanged(isAwake);
                    this.mOomAdjProfiler.onWakefulnessChanged(wakefulness);
                }
                updateOomAdjLocked("updateOomAdj_uiVisibility");
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void notifyCleartextNetwork(int uid, byte[] firstPacket) {
        this.mHandler.obtainMessage(49, uid, 0, firstPacket).sendToTarget();
    }

    public boolean shutdown(int timeout) {
        if (checkCallingPermission("android.permission.SHUTDOWN") == 0) {
            boolean timedout = this.mAtmInternal.shuttingDown(this.mBooted, timeout);
            this.mAppOpsService.shutdown();
            UsageStatsManagerInternal usageStatsManagerInternal = this.mUsageStatsService;
            if (usageStatsManagerInternal != null) {
                usageStatsManagerInternal.prepareShutdown();
            }
            this.mBatteryStatsService.shutdown();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mProcessStats.shutdownLocked();
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return timedout;
        }
        throw new SecurityException("Requires permission android.permission.SHUTDOWN");
    }

    public void notifyLockedProfile(int userId) {
        this.mAtmInternal.notifyLockedProfile(userId, this.mUserController.getCurrentUserId());
    }

    public void startConfirmDeviceCredentialIntent(Intent intent, Bundle options) {
        this.mAtmInternal.startConfirmDeviceCredentialIntent(intent, options);
    }

    public void stopAppSwitches() {
        this.mActivityTaskManager.stopAppSwitches();
    }

    public void resumeAppSwitches() {
        this.mActivityTaskManager.resumeAppSwitches();
    }

    /* Debug info: failed to restart local var, previous not found, register: 16 */
    public void setDebugApp(String packageName, boolean waitForDebugger, boolean persistent) {
        String str = packageName;
        boolean z = waitForDebugger;
        enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDebugApp()");
        long ident = Binder.clearCallingIdentity();
        boolean z2 = true;
        if (persistent) {
            try {
                ContentResolver resolver = this.mContext.getContentResolver();
                Settings.Global.putString(resolver, "debug_app", str);
                Settings.Global.putInt(resolver, "wait_for_debugger", z ? 1 : 0);
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(ident);
                throw th;
            }
        }
        synchronized (this) {
            boostPriorityForLockedSection();
            if (!persistent) {
                this.mOrigDebugApp = this.mDebugApp;
                this.mOrigWaitForDebugger = this.mWaitForDebugger;
            }
            this.mDebugApp = str;
            this.mWaitForDebugger = z;
            if (persistent) {
                z2 = false;
            }
            this.mDebugTransient = z2;
            if (str != null) {
                forceStopPackageLocked(packageName, -1, false, false, true, true, false, -1, "set debug app");
            }
        }
        resetPriorityAfterLockedSection();
        Binder.restoreCallingIdentity(ident);
    }

    /* Debug info: failed to restart local var, previous not found, register: 3 */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x0064, code lost:
        return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void setAgentApp(java.lang.String r4, java.lang.String r5) {
        /*
            r3 = this;
            monitor-enter(r3)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x006d }
            java.lang.String r0 = "android.permission.SET_ACTIVITY_WATCHER"
            int r0 = r3.checkCallingPermission(r0)     // Catch:{ all -> 0x006d }
            if (r0 != 0) goto L_0x0065
            if (r5 != 0) goto L_0x0023
            java.util.Map<java.lang.String, java.lang.String> r0 = r3.mAppAgentMap     // Catch:{ all -> 0x006d }
            if (r0 == 0) goto L_0x0060
            java.util.Map<java.lang.String, java.lang.String> r0 = r3.mAppAgentMap     // Catch:{ all -> 0x006d }
            r0.remove(r4)     // Catch:{ all -> 0x006d }
            java.util.Map<java.lang.String, java.lang.String> r0 = r3.mAppAgentMap     // Catch:{ all -> 0x006d }
            boolean r0 = r0.isEmpty()     // Catch:{ all -> 0x006d }
            if (r0 == 0) goto L_0x0060
            r0 = 0
            r3.mAppAgentMap = r0     // Catch:{ all -> 0x006d }
            goto L_0x0060
        L_0x0023:
            java.util.Map<java.lang.String, java.lang.String> r0 = r3.mAppAgentMap     // Catch:{ all -> 0x006d }
            if (r0 != 0) goto L_0x002e
            java.util.HashMap r0 = new java.util.HashMap     // Catch:{ all -> 0x006d }
            r0.<init>()     // Catch:{ all -> 0x006d }
            r3.mAppAgentMap = r0     // Catch:{ all -> 0x006d }
        L_0x002e:
            java.util.Map<java.lang.String, java.lang.String> r0 = r3.mAppAgentMap     // Catch:{ all -> 0x006d }
            int r0 = r0.size()     // Catch:{ all -> 0x006d }
            r1 = 100
            if (r0 < r1) goto L_0x005b
            java.lang.String r0 = "ActivityManager"
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x006d }
            r1.<init>()     // Catch:{ all -> 0x006d }
            java.lang.String r2 = "App agent map has too many entries, cannot add "
            r1.append(r2)     // Catch:{ all -> 0x006d }
            r1.append(r4)     // Catch:{ all -> 0x006d }
            java.lang.String r2 = "/"
            r1.append(r2)     // Catch:{ all -> 0x006d }
            r1.append(r5)     // Catch:{ all -> 0x006d }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x006d }
            android.util.Slog.e(r0, r1)     // Catch:{ all -> 0x006d }
            monitor-exit(r3)     // Catch:{ all -> 0x006d }
            resetPriorityAfterLockedSection()
            return
        L_0x005b:
            java.util.Map<java.lang.String, java.lang.String> r0 = r3.mAppAgentMap     // Catch:{ all -> 0x006d }
            r0.put(r4, r5)     // Catch:{ all -> 0x006d }
        L_0x0060:
            monitor-exit(r3)     // Catch:{ all -> 0x006d }
            resetPriorityAfterLockedSection()
            return
        L_0x0065:
            java.lang.SecurityException r0 = new java.lang.SecurityException     // Catch:{ all -> 0x006d }
            java.lang.String r1 = "Requires permission android.permission.SET_ACTIVITY_WATCHER"
            r0.<init>(r1)     // Catch:{ all -> 0x006d }
            throw r0     // Catch:{ all -> 0x006d }
        L_0x006d:
            r0 = move-exception
            monitor-exit(r3)     // Catch:{ all -> 0x006d }
            resetPriorityAfterLockedSection()
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.setAgentApp(java.lang.String, java.lang.String):void");
    }

    /* Debug info: failed to restart local var, previous not found, register: 4 */
    /* access modifiers changed from: package-private */
    public void setTrackAllocationApp(ApplicationInfo app, String processName) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!SplitScreenReporter.ACTION_ENTER_SPLIT.equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"))) {
                    if ((app.flags & 2) == 0) {
                        throw new SecurityException("Process not debuggable: " + app.packageName);
                    }
                }
                this.mTrackAllocationApp = processName;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* Debug info: failed to restart local var, previous not found, register: 4 */
    /* access modifiers changed from: package-private */
    public void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!SplitScreenReporter.ACTION_ENTER_SPLIT.equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"))) {
                    if (!app.isProfileableByShell()) {
                        throw new SecurityException("Process not debuggable, and not profileable by shell: " + app.packageName);
                    }
                }
                this.mProfileData.setProfileApp(processName);
                if (!(this.mProfileData.getProfilerInfo() == null || this.mProfileData.getProfilerInfo().profileFd == null)) {
                    try {
                        this.mProfileData.getProfilerInfo().profileFd.close();
                    } catch (IOException e) {
                    }
                }
                this.mProfileData.setProfilerInfo(new ProfilerInfo(profilerInfo));
                this.mProfileType = 0;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void setNativeDebuggingAppLocked(ApplicationInfo app, String processName) {
        if (SplitScreenReporter.ACTION_ENTER_SPLIT.equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0")) || (app.flags & 2) != 0) {
            this.mNativeDebuggingApp = processName;
            return;
        }
        throw new SecurityException("Process not debuggable: " + app.packageName);
    }

    /* Debug info: failed to restart local var, previous not found, register: 5 */
    public void setAlwaysFinish(boolean enabled) {
        enforceCallingPermission("android.permission.SET_ALWAYS_FINISH", "setAlwaysFinish()");
        long ident = Binder.clearCallingIdentity();
        try {
            Settings.Global.putInt(this.mContext.getContentResolver(), "always_finish_activities", enabled ? 1 : 0);
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mAlwaysFinishActivities = enabled;
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public void setActivityController(IActivityController controller, boolean imAMonkey) {
        this.mActivityTaskManager.setActivityController(controller, imAMonkey);
    }

    /* Debug info: failed to restart local var, previous not found, register: 6 */
    public void setUserIsMonkey(boolean userIsMonkey) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    int callingPid = Binder.getCallingPid();
                    ProcessRecord proc = this.mPidsSelfLocked.get(callingPid);
                    if (proc == null) {
                        throw new SecurityException("Unknown process: " + callingPid);
                    } else if (proc.getActiveInstrumentation() == null || proc.getActiveInstrumentation().mUiAutomationConnection == null) {
                        throw new SecurityException("Only an instrumentation process with a UiAutomation can call setUserIsMonkey");
                    }
                }
                this.mUserIsMonkey = userIsMonkey;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean isUserAMonkey() {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!this.mUserIsMonkey) {
                    if (!this.mActivityTaskManager.isControllerAMonkey()) {
                        z = false;
                    }
                }
                z = true;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return z;
    }

    public void requestSystemServerHeapDump() {
        ProcessRecord pr;
        if (!Build.IS_DEBUGGABLE) {
            Slog.wtf("ActivityManager", "requestSystemServerHeapDump called on a user build");
        } else if (Binder.getCallingUid() == 1000) {
            synchronized (this.mPidsSelfLocked) {
                pr = this.mPidsSelfLocked.get(Process.myPid());
            }
            if (pr == null) {
                Slog.w("ActivityManager", "system process not in mPidsSelfLocked: " + Process.myPid());
                return;
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    startHeapDumpLocked(pr, true);
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
        } else {
            throw new SecurityException("Only the system process is allowed to request a system heap dump");
        }
    }

    @Deprecated
    public void requestBugReport(int bugreportType) {
        String extraOptions;
        if (bugreportType == 0) {
            extraOptions = "bugreportfull";
        } else if (bugreportType == 1) {
            extraOptions = "bugreportplus";
        } else if (bugreportType == 2) {
            extraOptions = "bugreportremote";
        } else if (bugreportType == 3) {
            extraOptions = "bugreportwear";
        } else if (bugreportType == 4) {
            extraOptions = "bugreporttelephony";
        } else if (bugreportType == 5) {
            extraOptions = "bugreportwifi";
        } else {
            throw new IllegalArgumentException("Provided bugreport type is not correct, value: " + bugreportType);
        }
        Slog.i("ActivityManager", extraOptions + " requested by UID " + Binder.getCallingUid());
        enforceCallingPermission("android.permission.DUMP", "requestBugReport");
        SystemProperties.set("dumpstate.options", extraOptions);
        SystemProperties.set("ctl.start", "bugreport");
    }

    @Deprecated
    private void requestBugReportWithDescription(String shareTitle, String shareDescription, int bugreportType) {
        if (!TextUtils.isEmpty(shareTitle)) {
            if (shareTitle.length() <= 50) {
                if (!TextUtils.isEmpty(shareDescription)) {
                    try {
                        if (shareDescription.getBytes("UTF-8").length <= 91) {
                            SystemProperties.set("dumpstate.options.description", shareDescription);
                        } else {
                            throw new IllegalArgumentException("shareTitle should be less than 91 bytes");
                        }
                    } catch (UnsupportedEncodingException e) {
                        throw new IllegalArgumentException("shareDescription: UnsupportedEncodingException");
                    }
                }
                SystemProperties.set("dumpstate.options.title", shareTitle);
            } else {
                throw new IllegalArgumentException("shareTitle should be less than 50 characters");
            }
        }
        Slog.d("ActivityManager", "Bugreport notification title " + shareTitle + " description " + shareDescription);
        requestBugReport(bugreportType);
    }

    @Deprecated
    public void requestTelephonyBugReport(String shareTitle, String shareDescription) {
        requestBugReportWithDescription(shareTitle, shareDescription, 4);
    }

    @Deprecated
    public void requestWifiBugReport(String shareTitle, String shareDescription) {
        requestBugReportWithDescription(shareTitle, shareDescription, 5);
    }

    public void registerProcessObserver(IProcessObserver observer) {
        enforceCallingPermission("android.permission.SET_ACTIVITY_WATCHER", "registerProcessObserver()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mProcessObservers.register(observer);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void unregisterProcessObserver(IProcessObserver observer) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mProcessObservers.unregister(observer);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public int getUidProcessState(int uid, String callingPackage) {
        int uidProcStateLocked;
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getUidProcessState");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                uidProcStateLocked = this.mProcessList.getUidProcStateLocked(uid);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return uidProcStateLocked;
    }

    public void registerUidObserver(IUidObserver observer, int which, int cutpoint, String callingPackage) {
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidObserver");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mUidObservers.register(observer, new UidObserverRegistration(Binder.getCallingUid(), callingPackage, which, cutpoint));
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void unregisterUidObserver(IUidObserver observer) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mUidObservers.unregister(observer);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean isUidActive(int uid, String callingPackage) {
        boolean isUidActiveLocked;
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "isUidActive");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                isUidActiveLocked = isUidActiveLocked(uid);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return isUidActiveLocked;
    }

    /* access modifiers changed from: package-private */
    public boolean isUidActiveLocked(int uid) {
        UidRecord uidRecord = this.mProcessList.getUidRecordLocked(uid);
        return uidRecord != null && !uidRecord.setIdle;
    }

    public void setPersistentVrThread(int tid) {
        this.mActivityTaskManager.setPersistentVrThread(tid);
    }

    public static boolean scheduleAsRegularPriority(int tid, boolean suppressLogs) {
        try {
            Process.setThreadScheduler(tid, 0, 0);
            return true;
        } catch (IllegalArgumentException e) {
            if (!suppressLogs) {
                Slog.w("ActivityManager", "Failed to set scheduling policy, thread does not exist:\n" + e);
            }
            return false;
        } catch (SecurityException e2) {
            if (!suppressLogs) {
                Slog.w("ActivityManager", "Failed to set scheduling policy, not allowed:\n" + e2);
            }
            return false;
        }
    }

    public static boolean scheduleAsFifoPriority(int tid, boolean suppressLogs) {
        try {
            Process.setThreadScheduler(tid, WindowManagerPolicy.COLOR_FADE_LAYER, 1);
            return true;
        } catch (IllegalArgumentException e) {
            if (suppressLogs) {
                return false;
            }
            Slog.w("ActivityManager", "Failed to set scheduling policy, thread does not exist:\n" + e);
            return false;
        } catch (SecurityException e2) {
            if (suppressLogs) {
                return false;
            }
            Slog.w("ActivityManager", "Failed to set scheduling policy, not allowed:\n" + e2);
            return false;
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 6 */
    public void setRenderThread(int tid) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int pid = Binder.getCallingPid();
                if (pid == Process.myPid()) {
                    demoteSystemServerRenderThread(tid);
                    resetPriorityAfterLockedSection();
                    return;
                }
                synchronized (this.mPidsSelfLocked) {
                    ProcessRecord proc = this.mPidsSelfLocked.get(pid);
                    if (proc != null && proc.renderThreadTid == 0 && tid > 0) {
                        if (Process.isThreadInProcess(pid, tid)) {
                            proc.renderThreadTid = tid;
                            if (proc.getCurrentSchedulingGroup() == 3) {
                                if (this.mUseFifoUiScheduling) {
                                    Process.setThreadScheduler(proc.renderThreadTid, WindowManagerPolicy.COLOR_FADE_LAYER, 1);
                                } else {
                                    Process.setThreadPriority(proc.renderThreadTid, -10);
                                }
                            }
                        } else {
                            throw new IllegalArgumentException("Render thread does not belong to process");
                        }
                    }
                }
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    private void demoteSystemServerRenderThread(int tid) {
        Process.setThreadPriority(tid, 10);
    }

    public boolean isVrModePackageEnabled(ComponentName packageName) {
        this.mActivityTaskManager.enforceSystemHasVrFeature();
        return ((VrManagerInternal) LocalServices.getService(VrManagerInternal.class)).hasVrPackage(packageName, UserHandle.getCallingUserId()) == 0;
    }

    public boolean isTopActivityImmersive() {
        return this.mActivityTaskManager.isTopActivityImmersive();
    }

    public boolean isTopOfTask(IBinder token) {
        return this.mActivityTaskManager.isTopOfTask(token);
    }

    /* Debug info: failed to restart local var, previous not found, register: 9 */
    /* JADX WARNING: Code restructure failed: missing block: B:22:0x004b, code lost:
        if (r3 == false) goto L_0x0054;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:25:?, code lost:
        updateOomAdjLocked(r5, true, "updateOomAdj_uiVisibility");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:0x0058, code lost:
        android.os.Binder.restoreCallingIdentity(r1);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:30:0x005c, code lost:
        return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void setHasTopUi(boolean r10) throws android.os.RemoteException {
        /*
            r9 = this;
            java.lang.String r0 = "android.permission.INTERNAL_SYSTEM_WINDOW"
            int r0 = r9.checkCallingPermission(r0)
            if (r0 != 0) goto L_0x006b
            int r0 = android.os.Binder.getCallingPid()
            long r1 = android.os.Binder.clearCallingIdentity()
            monitor-enter(r9)     // Catch:{ all -> 0x0066 }
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0060 }
            r3 = 0
            com.android.server.am.ActivityManagerService$PidMap r4 = r9.mPidsSelfLocked     // Catch:{ all -> 0x0060 }
            monitor-enter(r4)     // Catch:{ all -> 0x0060 }
            com.android.server.am.ActivityManagerService$PidMap r5 = r9.mPidsSelfLocked     // Catch:{ all -> 0x005d }
            com.android.server.am.ProcessRecord r5 = r5.get(r0)     // Catch:{ all -> 0x005d }
            if (r5 != 0) goto L_0x0040
            java.lang.String r6 = "ActivityManager"
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x005d }
            r7.<init>()     // Catch:{ all -> 0x005d }
            java.lang.String r8 = "setHasTopUi called on unknown pid: "
            r7.append(r8)     // Catch:{ all -> 0x005d }
            r7.append(r0)     // Catch:{ all -> 0x005d }
            java.lang.String r7 = r7.toString()     // Catch:{ all -> 0x005d }
            android.util.Slog.w(r6, r7)     // Catch:{ all -> 0x005d }
            monitor-exit(r4)     // Catch:{ all -> 0x005d }
            monitor-exit(r9)     // Catch:{ all -> 0x0060 }
            resetPriorityAfterLockedSection()
            android.os.Binder.restoreCallingIdentity(r1)
            return
        L_0x0040:
            boolean r6 = r5.hasTopUi()     // Catch:{ all -> 0x005d }
            if (r6 == r10) goto L_0x004a
            r5.setHasTopUi(r10)     // Catch:{ all -> 0x005d }
            r3 = 1
        L_0x004a:
            monitor-exit(r4)     // Catch:{ all -> 0x005d }
            if (r3 == 0) goto L_0x0054
            r4 = 1
            java.lang.String r6 = "updateOomAdj_uiVisibility"
            r9.updateOomAdjLocked(r5, r4, r6)     // Catch:{ all -> 0x0060 }
        L_0x0054:
            monitor-exit(r9)     // Catch:{ all -> 0x0060 }
            resetPriorityAfterLockedSection()     // Catch:{ all -> 0x0066 }
            android.os.Binder.restoreCallingIdentity(r1)
            return
        L_0x005d:
            r5 = move-exception
            monitor-exit(r4)     // Catch:{ all -> 0x005d }
            throw r5     // Catch:{ all -> 0x0060 }
        L_0x0060:
            r3 = move-exception
            monitor-exit(r9)     // Catch:{ all -> 0x0060 }
            resetPriorityAfterLockedSection()     // Catch:{ all -> 0x0066 }
            throw r3     // Catch:{ all -> 0x0066 }
        L_0x0066:
            r3 = move-exception
            android.os.Binder.restoreCallingIdentity(r1)
            throw r3
        L_0x006b:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "Permission Denial: setHasTopUi() from pid="
            r0.append(r1)
            int r1 = android.os.Binder.getCallingPid()
            r0.append(r1)
            java.lang.String r1 = ", uid="
            r0.append(r1)
            int r1 = android.os.Binder.getCallingUid()
            r0.append(r1)
            java.lang.String r1 = " requires "
            r0.append(r1)
            java.lang.String r1 = "android.permission.INTERNAL_SYSTEM_WINDOW"
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            java.lang.String r1 = "ActivityManager"
            android.util.Slog.w(r1, r0)
            java.lang.SecurityException r1 = new java.lang.SecurityException
            r1.<init>(r0)
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.setHasTopUi(boolean):void");
    }

    /* Debug info: failed to restart local var, previous not found, register: 5 */
    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:21:0x003e, code lost:
        if (r1.runningRemoteAnimation != r7) goto L_0x0045;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x0041, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x0044, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:?, code lost:
        r1.runningRemoteAnimation = r7;
        updateOomAdjLocked(r1, true, "updateOomAdj_uiVisibility");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:0x0050, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:0x0053, code lost:
        return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void setRunningRemoteAnimation(int r6, boolean r7) {
        /*
            r5 = this;
            int r0 = android.os.Process.myPid()
            if (r6 != r0) goto L_0x000f
            java.lang.String r0 = "ActivityManager"
            java.lang.String r1 = "system can't run remote animation"
            android.util.Slog.wtf(r0, r1)
            return
        L_0x000f:
            monitor-enter(r5)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0057 }
            com.android.server.am.ActivityManagerService$PidMap r0 = r5.mPidsSelfLocked     // Catch:{ all -> 0x0057 }
            monitor-enter(r0)     // Catch:{ all -> 0x0057 }
            com.android.server.am.ActivityManagerService$PidMap r1 = r5.mPidsSelfLocked     // Catch:{ all -> 0x0054 }
            com.android.server.am.ProcessRecord r1 = r1.get(r6)     // Catch:{ all -> 0x0054 }
            if (r1 != 0) goto L_0x003b
            java.lang.String r2 = "ActivityManager"
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x0054 }
            r3.<init>()     // Catch:{ all -> 0x0054 }
            java.lang.String r4 = "setRunningRemoteAnimation called on unknown pid: "
            r3.append(r4)     // Catch:{ all -> 0x0054 }
            r3.append(r6)     // Catch:{ all -> 0x0054 }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x0054 }
            android.util.Slog.w(r2, r3)     // Catch:{ all -> 0x0054 }
            monitor-exit(r0)     // Catch:{ all -> 0x0054 }
            monitor-exit(r5)     // Catch:{ all -> 0x0057 }
            resetPriorityAfterLockedSection()
            return
        L_0x003b:
            monitor-exit(r0)     // Catch:{ all -> 0x0054 }
            boolean r0 = r1.runningRemoteAnimation     // Catch:{ all -> 0x0057 }
            if (r0 != r7) goto L_0x0045
            monitor-exit(r5)     // Catch:{ all -> 0x0057 }
            resetPriorityAfterLockedSection()
            return
        L_0x0045:
            r1.runningRemoteAnimation = r7     // Catch:{ all -> 0x0057 }
            r0 = 1
            java.lang.String r2 = "updateOomAdj_uiVisibility"
            r5.updateOomAdjLocked(r1, r0, r2)     // Catch:{ all -> 0x0057 }
            monitor-exit(r5)     // Catch:{ all -> 0x0057 }
            resetPriorityAfterLockedSection()
            return
        L_0x0054:
            r1 = move-exception
            monitor-exit(r0)     // Catch:{ all -> 0x0054 }
            throw r1     // Catch:{ all -> 0x0057 }
        L_0x0057:
            r0 = move-exception
            monitor-exit(r5)     // Catch:{ all -> 0x0057 }
            resetPriorityAfterLockedSection()
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.setRunningRemoteAnimation(int, boolean):void");
    }

    public final void enterSafeMode() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!this.mSystemReady) {
                    try {
                        AppGlobals.getPackageManager().enterSafeMode();
                    } catch (RemoteException e) {
                    }
                }
                this.mSafeMode = true;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void showSafeModeOverlay() {
        View v = LayoutInflater.from(this.mContext).inflate(17367289, (ViewGroup) null);
        WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
        lp.type = 2015;
        lp.width = -2;
        lp.height = -2;
        lp.gravity = 8388691;
        lp.format = v.getBackground().getOpacity();
        lp.flags = 24;
        lp.privateFlags |= 16;
        ((WindowManager) this.mContext.getSystemService("window")).addView(v, lp);
    }

    public void noteWakeupAlarm(IIntentSender sender, WorkSource workSource, int sourceUid, String sourcePkg, String tag) {
        int standbyBucket;
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (sourceUid <= 0 && workSource == null) {
            if (sender != null && (sender instanceof PendingIntentRecord)) {
                PendingIntentRecord rec = (PendingIntentRecord) sender;
                sourceUid = rec.uid == Binder.getCallingUid() ? 1000 : rec.uid;
            } else {
                return;
            }
        }
        int standbyBucket2 = 0;
        this.mBatteryStatsService.noteWakupAlarm(sourcePkg, sourceUid, workSource, tag);
        if (workSource != null) {
            String workSourcePackage = workSource.getName(0);
            int workSourceUid = workSource.getAttributionUid();
            if (workSourcePackage == null) {
                workSourcePackage = sourcePkg;
                workSourceUid = sourceUid;
            }
            UsageStatsManagerInternal usageStatsManagerInternal = this.mUsageStatsService;
            if (usageStatsManagerInternal != null) {
                standbyBucket2 = usageStatsManagerInternal.getAppStandbyBucket(workSourcePackage, UserHandle.getUserId(workSourceUid), SystemClock.elapsedRealtime());
            }
            StatsLog.write(35, workSource, tag, sourcePkg, standbyBucket2);
            return;
        }
        UsageStatsManagerInternal usageStatsManagerInternal2 = this.mUsageStatsService;
        if (usageStatsManagerInternal2 != null) {
            standbyBucket = usageStatsManagerInternal2.getAppStandbyBucket(sourcePkg, UserHandle.getUserId(sourceUid), SystemClock.elapsedRealtime());
        } else {
            standbyBucket = 0;
        }
        StatsLog.write_non_chained(35, sourceUid, (String) null, tag, sourcePkg, standbyBucket);
        int i = standbyBucket;
    }

    public void noteAlarmStart(IIntentSender sender, WorkSource workSource, int sourceUid, String tag) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (sourceUid <= 0 && workSource == null) {
            if (sender != null && (sender instanceof PendingIntentRecord)) {
                PendingIntentRecord rec = (PendingIntentRecord) sender;
                sourceUid = rec.uid == Binder.getCallingUid() ? 1000 : rec.uid;
            } else {
                return;
            }
        }
        this.mBatteryStatsService.noteAlarmStart(tag, workSource, sourceUid);
    }

    public void noteAlarmFinish(IIntentSender sender, WorkSource workSource, int sourceUid, String tag) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (sourceUid <= 0 && workSource == null) {
            if (sender != null && (sender instanceof PendingIntentRecord)) {
                PendingIntentRecord rec = (PendingIntentRecord) sender;
                sourceUid = rec.uid == Binder.getCallingUid() ? 1000 : rec.uid;
            } else {
                return;
            }
        }
        this.mBatteryStatsService.noteAlarmFinish(tag, workSource, sourceUid);
    }

    public boolean killPids(int[] pids, String pReason, boolean secure) {
        if (Binder.getCallingUid() == 1000) {
            String reason = (pReason == null ? ProcessPolicy.REASON_UNKNOWN : pReason) + " from process:" + ExtraActivityManagerService.getProcessNameByPid(Binder.getCallingPid());
            boolean killed = false;
            synchronized (this.mPidsSelfLocked) {
                int worstType = 0;
                boolean secure2 = secure;
                for (int i : pids) {
                    ProcessRecord proc = this.mPidsSelfLocked.get(i);
                    if (proc != null) {
                        int type = proc.setAdj;
                        if (secure2 && pids.length == 1 && ProcessPolicyManager.isSecureProtectedProcess(proc.processName)) {
                            Slog.w("ActivityManager", "process " + proc.processName + " is secure.");
                            secure2 = false;
                        }
                        if (type > worstType) {
                            worstType = type;
                        }
                    }
                }
                if (worstType < 999 && worstType > 900) {
                    worstType = 900;
                }
                if (!secure2 && worstType < 500) {
                    worstType = 500;
                }
                Slog.w("ActivityManager", "Killing processes " + reason + " at adjustment " + worstType);
                for (int i2 = 0; i2 < pids.length; i2++) {
                    ProcessRecord proc2 = this.mPidsSelfLocked.get(pids[i2]);
                    if (proc2 != null) {
                        if (proc2.setAdj >= worstType && !proc2.killedByAm) {
                            proc2.kill(reason, true);
                            killed = true;
                        }
                    }
                }
            }
            return killed;
        }
        throw new SecurityException("killPids only available to the system");
    }

    /* Debug info: failed to restart local var, previous not found, register: 15 */
    public void killUid(int appId, int userId, String reason) {
        long identity;
        enforceCallingPermission("android.permission.KILL_UID", "killUid");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                identity = Binder.clearCallingIdentity();
                this.mProcessList.killPackageProcessesLocked((String) null, appId, userId, -800, false, true, true, true, false, reason != null ? reason : "kill uid");
                Binder.restoreCallingIdentity(identity);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean killProcessesBelowForeground(String reason) {
        if (Binder.getCallingUid() == 1000) {
            return killProcessesBelowAdj(0, reason);
        }
        throw new SecurityException("killProcessesBelowForeground() only available to system");
    }

    private boolean killProcessesBelowAdj(int belowAdj, String reason) {
        if (Binder.getCallingUid() == 1000) {
            boolean killed = false;
            synchronized (this.mPidsSelfLocked) {
                int size = this.mPidsSelfLocked.size();
                for (int i = 0; i < size; i++) {
                    int keyAt = this.mPidsSelfLocked.keyAt(i);
                    ProcessRecord proc = this.mPidsSelfLocked.valueAt(i);
                    if (proc != null) {
                        if (proc.setAdj > belowAdj && !proc.killedByAm) {
                            proc.kill(reason, true);
                            killed = true;
                        }
                    }
                }
            }
            return killed;
        }
        throw new SecurityException("killProcessesBelowAdj() only available to system");
    }

    /* Debug info: failed to restart local var, previous not found, register: 4 */
    public void hang(IBinder who, boolean allowRestart) {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
            IBinder.DeathRecipient death = new IBinder.DeathRecipient() {
                public void binderDied() {
                    synchronized (this) {
                        notifyAll();
                    }
                }
            };
            try {
                who.linkToDeath(death, 0);
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        Watchdog.getInstance().setAllowRestart(allowRestart);
                        Slog.i("ActivityManager", "Hanging system process at request of pid " + Binder.getCallingPid());
                        synchronized (death) {
                            while (who.isBinderAlive()) {
                                try {
                                    death.wait();
                                } catch (InterruptedException e) {
                                }
                            }
                        }
                        Watchdog.getInstance().setAllowRestart(true);
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterLockedSection();
            } catch (RemoteException e2) {
                Slog.w("ActivityManager", "hang: given caller IBinder is already dead.");
            }
        } else {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
    }

    public void restart() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
            Log.i("ActivityManager", "Sending shutdown broadcast...");
            BroadcastReceiver br = new BroadcastReceiver() {
                public void onReceive(Context context, Intent intent) {
                    Log.i("ActivityManager", "Shutting down activity manager...");
                    ActivityManagerService.this.shutdown(10000);
                    Log.i("ActivityManager", "Shutdown complete, restarting!");
                    Process.killProcess(Process.myPid());
                    System.exit(10);
                }
            };
            Intent intent = new Intent("android.intent.action.ACTION_SHUTDOWN");
            intent.addFlags(268435456);
            intent.putExtra("android.intent.extra.SHUTDOWN_USERSPACE_ONLY", true);
            br.onReceive(this.mContext, intent);
            return;
        }
        throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
    }

    private long getLowRamTimeSinceIdle(long now) {
        long j = this.mLowRamTimeSinceLastIdle;
        long j2 = this.mLowRamStartTime;
        long j3 = 0;
        if (j2 > 0) {
            j3 = now - j2;
        }
        return j + j3;
    }

    public void performIdleMaintenance() {
        boolean z;
        int i;
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    long now = SystemClock.uptimeMillis();
                    long timeSinceLastIdle = now - this.mLastIdleTime;
                    long lowRamSinceLastIdle = getLowRamTimeSinceIdle(now);
                    this.mLastIdleTime = now;
                    long j = 0;
                    this.mLowRamTimeSinceLastIdle = 0;
                    if (this.mLowRamStartTime != 0) {
                        this.mLowRamStartTime = now;
                    }
                    int i2 = 128;
                    StringBuilder sb = new StringBuilder(128);
                    sb.append("Idle maintenance over ");
                    TimeUtils.formatDuration(timeSinceLastIdle, sb);
                    sb.append(" low RAM for ");
                    TimeUtils.formatDuration(lowRamSinceLastIdle, sb);
                    Slog.i("ActivityManager", sb.toString());
                    boolean z2 = true;
                    boolean doKilling = lowRamSinceLastIdle > timeSinceLastIdle / 3;
                    long memoryGrowthThreshold = Math.max((Process.getTotalMemory() / 1000) / 100, JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
                    StringBuilder sb2 = sb;
                    int i3 = this.mProcessList.mLruProcesses.size() - 1;
                    while (i3 >= 0) {
                        ProcessRecord proc = this.mProcessList.mLruProcesses.get(i3);
                        if (proc.notCachedSinceIdle) {
                            if (proc.setProcState < 6 || proc.setProcState > 11) {
                                i = i2;
                                z = z2;
                            } else if (!doKilling || proc.initialIdlePss == j || proc.lastPss <= (proc.initialIdlePss * 3) / 2 || proc.lastPss <= proc.initialIdlePss + memoryGrowthThreshold) {
                                i = i2;
                                z = z2;
                            } else {
                                StringBuilder sb3 = new StringBuilder(i2);
                                sb3.append("Kill");
                                sb3.append(proc.processName);
                                sb3.append(" in idle maint: pss=");
                                sb3.append(proc.lastPss);
                                sb3.append(", swapPss=");
                                sb3.append(proc.lastSwapPss);
                                sb3.append(", initialPss=");
                                sb3.append(proc.initialIdlePss);
                                sb3.append(", period=");
                                TimeUtils.formatDuration(timeSinceLastIdle, sb3);
                                sb3.append(", lowRamPeriod=");
                                TimeUtils.formatDuration(lowRamSinceLastIdle, sb3);
                                Slog.wtfQuiet("ActivityManager", sb3.toString());
                                proc.kill("idle maint (pss " + proc.lastPss + " from " + proc.initialIdlePss + ")", z2);
                                StringBuilder sb4 = sb3;
                                i = i2;
                                z = z2;
                            }
                        } else if (proc.setProcState >= 15 || proc.setProcState < 0) {
                            i = i2;
                            z = z2;
                        } else {
                            proc.notCachedSinceIdle = z2;
                            proc.initialIdlePss = 0;
                            z = z2;
                            i = 128;
                            proc.nextPssTime = ProcessList.computeNextPssTime(proc.setProcState, (ProcessList.ProcStateMemTracker) null, this.mTestPssMode, this.mAtmInternal.isSleeping(), now);
                        }
                        i3--;
                        i2 = i;
                        z2 = z;
                        j = 0;
                    }
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
    }

    public void sendIdleJobTrigger() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
            long ident = Binder.clearCallingIdentity();
            try {
                broadcastIntent((IApplicationThread) null, new Intent(ACTION_TRIGGER_IDLE).setPackage(PackageManagerService.PLATFORM_PACKAGE_NAME).addFlags(1073741824), (String) null, (IIntentReceiver) null, 0, (String) null, (Bundle) null, (String[]) null, -1, (Bundle) null, false, false, -1);
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
        } else {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
    }

    private void retrieveSettings() {
        ContentResolver resolver = this.mContext.getContentResolver();
        this.mActivityTaskManager.retrieveSettings(resolver);
        String debugApp = Settings.Global.getString(resolver, "debug_app");
        boolean z = false;
        boolean waitForDebugger = Settings.Global.getInt(resolver, "wait_for_debugger", 0) != 0;
        boolean alwaysFinishActivities = Settings.Global.getInt(resolver, "always_finish_activities", 0) != 0;
        long waitForNetworkTimeoutMs = Settings.Global.getLong(resolver, "network_access_timeout_ms", NETWORK_ACCESS_TIMEOUT_DEFAULT_MS);
        this.mHiddenApiBlacklist.registerObserver();
        long pssDeferralMs = DeviceConfig.getLong("activity_manager", ACTIVITY_START_PSS_DEFER_CONFIG, 0);
        DeviceConfig.addOnPropertiesChangedListener("activity_manager", ActivityThread.currentApplication().getMainExecutor(), this.mPssDelayConfigListener);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mOrigDebugApp = debugApp;
                this.mDebugApp = debugApp;
                this.mOrigWaitForDebugger = waitForDebugger;
                this.mWaitForDebugger = waitForDebugger;
                this.mAlwaysFinishActivities = alwaysFinishActivities;
                Resources res = this.mContext.getResources();
                this.mAppErrors.loadAppsNotReportingCrashesFromConfigLocked(res.getString(17039695));
                UserController userController = this.mUserController;
                if (!res.getBoolean(17891396)) {
                    z = true;
                }
                userController.mUserSwitchUiEnabled = z;
                this.mUserController.mMaxRunningUsers = res.getInteger(17694848);
                this.mUserController.mDelayUserDataLocking = res.getBoolean(17891483);
                this.mWaitForNetworkTimeoutMs = waitForNetworkTimeoutMs;
                this.mPssDeferralTime = pssDeferralMs;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* Debug info: failed to restart local var, previous not found, register: 44 */
    /* JADX WARNING: Code restructure failed: missing block: B:100:?, code lost:
        android.os.Binder.restoreCallingIdentity(r38);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:101:0x0279, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:102:0x027b, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:103:0x027c, code lost:
        r3 = r44;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:104:0x027f, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:105:0x0280, code lost:
        r3 = r44;
        r2 = r40;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:106:0x0285, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:107:0x0286, code lost:
        r2 = r9;
        r41 = r10;
        r42 = r12;
        r43 = true;
        r3 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:110:?, code lost:
        android.util.Slog.wtf("ActivityManager", "Failed sending first user broadcasts", r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:112:?, code lost:
        android.os.Binder.restoreCallingIdentity(r38);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:113:0x0299, code lost:
        r3.mAtmInternal.resumeTopActivities(false);
        r3.mUserController.sendUserSwitchBroadcasts(-1, r2);
        com.android.internal.os.BinderInternal.nSetBinderProxyCountWatermarks(BINDER_PROXY_HIGH_WATERMARK, BINDER_PROXY_LOW_WATERMARK);
        com.android.internal.os.BinderInternal.nSetBinderProxyCountEnabled(r43);
        com.android.internal.os.BinderInternal.setBinderProxyCountCallback(new com.android.server.am.ActivityManagerService.AnonymousClass19(r3), r3.mHandler);
        r46.traceEnd();
        r46.traceEnd();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:114:0x02c0, code lost:
        monitor-exit(r44);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:115:0x02c1, code lost:
        resetPriorityAfterLockedSection();
        com.android.server.am.ExtraActivityManagerService.onSystemReady(r3.mContext);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:116:0x02c9, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:117:0x02ca, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:119:?, code lost:
        android.os.Binder.restoreCallingIdentity(r38);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:120:0x02ce, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:121:0x02cf, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:122:0x02d0, code lost:
        r2 = r9;
        r41 = r10;
        r42 = r12;
        r3 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:123:0x02d6, code lost:
        monitor-exit(r44);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:124:0x02d7, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:125:0x02da, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:126:0x02db, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:127:0x02dd, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:128:0x02de, code lost:
        r42 = r12;
        r3 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:130:?, code lost:
        monitor-exit(r44);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:131:0x02e2, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:132:0x02e5, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:133:0x02e6, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:148:0x02fc, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:14:0x0038, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:?, code lost:
        sTheRealBuildSerial = android.os.IDeviceIdentifiersPolicyService.Stub.asInterface(android.os.ServiceManager.getService("device_identifiers")).getSerial();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x0086, code lost:
        monitor-enter(r44);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:?, code lost:
        boostPriorityForLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:0x008b, code lost:
        if (r12 == null) goto L_0x00c2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:46:?, code lost:
        r0 = r12.size() - 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:0x0092, code lost:
        if (r0 < 0) goto L_0x00c2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:48:0x0094, code lost:
        r1 = r12.get(r0);
        android.util.Slog.i("ActivityManager", "Removing system update proc: " + r1);
        r15.mProcessList.removeProcessLocked(r1, true, false, "system update done");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x00b8, code lost:
        r0 = r0 - 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:50:0x00bc, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:51:0x00bd, code lost:
        r42 = r12;
        r3 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:53:?, code lost:
        r15.mProcessesReady = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:54:0x00c4, code lost:
        monitor-exit(r44);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:55:0x00c5, code lost:
        resetPriorityAfterLockedSection();
        android.util.Slog.i("ActivityManager", "System now ready");
        android.util.EventLog.writeEvent(com.android.server.am.EventLogTags.BOOT_PROGRESS_AMS_READY, android.os.SystemClock.uptimeMillis());
        com.android.server.am.ActivityManagerServiceInjector.markAmsReady();
        r15.mAtmInternal.updateTopComponentForFactoryTest();
        r15.mAtmInternal.getLaunchObserverRegistry().registerLaunchObserver(r15.mActivityLaunchObserver);
        watchDeviceProvisioning(r15.mContext);
        retrieveSettings();
        r15.mUgmInternal.onSystemReady();
        r10 = (android.os.PowerManagerInternal) com.android.server.LocalServices.getService(android.os.PowerManagerInternal.class);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:56:0x0101, code lost:
        if (r10 == null) goto L_0x0118;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:57:0x0103, code lost:
        r10.registerLowPowerModeObserver(12, new com.android.server.am.$$Lambda$ActivityManagerService$Z3G4KWA2tlTOhqhFtAvVby1SjyQ(r15));
        updateForceBackgroundCheck(r10.getLowPowerState(12).batterySaverEnabled);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:58:0x0118, code lost:
        android.util.Slog.wtf("ActivityManager", "PowerManagerInternal not found.");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:59:0x011f, code lost:
        if (r45 == null) goto L_0x0124;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:60:0x0121, code lost:
        r45.run();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:61:0x0124, code lost:
        r9 = r15.mUserController.getCurrentUserId();
        android.util.Slog.i("ActivityManager", "Current user:" + r9);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:62:0x0140, code lost:
        if (r9 == 0) goto L_0x0162;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:64:0x0148, code lost:
        if (r15.mUserController.isSystemUserStarted() == false) goto L_0x014b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:66:0x0161, code lost:
        throw new java.lang.RuntimeException("System user not started while current user is:" + r9);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:67:0x0162, code lost:
        r14.traceBegin("ActivityManagerStartApps");
        r15.mBatteryStatsService.noteEvent(32775, java.lang.Integer.toString(r9), r9);
        r15.mBatteryStatsService.noteEvent(32776, java.lang.Integer.toString(r9), r9);
        r15.mSystemServiceManager.startUser(r9);
        r15.mActivityTaskManager.setCurrentCastModeState("", 0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:68:0x018b, code lost:
        monitor-enter(r44);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:70:?, code lost:
        boostPriorityForLockedSection();
        startPersistentApps(com.android.server.pm.DumpState.DUMP_FROZEN);
        r15.mBooting = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:71:0x019a, code lost:
        if (android.os.UserManager.isSplitSystemUser() == false) goto L_0x01cc;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:74:0x01a9, code lost:
        if (android.provider.Settings.Secure.getInt(r15.mContext.getContentResolver(), "user_setup_complete", 0) == 0) goto L_0x01cc;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:78:?, code lost:
        android.app.AppGlobals.getPackageManager().setComponentEnabledSetting(new android.content.ComponentName(r15.mContext, com.android.internal.app.SystemUserHomeActivity.class), 1, 0, 0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:79:0x01bd, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:82:0x01c2, code lost:
        throw r0.rethrowAsRuntimeException();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:83:0x01c3, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:84:0x01c4, code lost:
        r2 = r9;
        r41 = r10;
        r42 = r12;
        r3 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:86:?, code lost:
        r15.mAtmInternal.startHomeOnAllDisplays(r9, "systemReady");
        r15.mAtmInternal.showSystemReadyErrorDialogsIfNeeded();
        r17 = android.os.Binder.getCallingUid();
        r18 = android.os.Binder.getCallingPid();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:87:0x01e5, code lost:
        r38 = android.os.Binder.clearCallingIdentity();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:89:?, code lost:
        r0 = new android.content.Intent("android.intent.action.USER_STARTED");
        r0.addFlags(1342177280);
        r0.putExtra("android.intent.extra.user_handle", r9);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:8:0x0017, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:90:0x020c, code lost:
        r40 = r9;
        r41 = r10;
        r42 = r12;
        r43 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:92:?, code lost:
        broadcastIntentLocked((com.android.server.am.ProcessRecord) null, (java.lang.String) null, r0, (java.lang.String) null, (android.content.IIntentReceiver) null, 0, (java.lang.String) null, (android.os.Bundle) null, (java.lang.String[]) null, -1, (android.os.Bundle) null, false, false, MY_PID, 1000, r17, r18, r40);
        r0 = new android.content.Intent("android.intent.action.USER_STARTING");
        r0.addFlags(1073741824);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:93:0x023b, code lost:
        r2 = r40;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:95:?, code lost:
        r0.putExtra("android.intent.extra.user_handle", r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x0248, code lost:
        r3 = r44;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:98:?, code lost:
        broadcastIntentLocked((com.android.server.am.ProcessRecord) null, (java.lang.String) null, r0, (java.lang.String) null, new com.android.server.am.ActivityManagerService.AnonymousClass18(r3), 0, (java.lang.String) null, (android.os.Bundle) null, new java.lang.String[]{"android.permission.INTERACT_ACROSS_USERS"}, -1, (android.os.Bundle) null, true, false, MY_PID, 1000, r17, r18, -1);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x001a, code lost:
        return;
     */
    /* JADX WARNING: Exception block dominator not found, dom blocks: [B:99:0x0275, B:109:0x0292] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void systemReady(java.lang.Runnable r45, android.util.TimingsTraceLog r46) {
        /*
            r44 = this;
            r15 = r44
            r14 = r46
            java.lang.String r0 = "PhaseActivityManagerReady"
            r14.traceBegin(r0)
            monitor-enter(r44)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x02f5 }
            boolean r0 = r15.mSystemReady     // Catch:{ all -> 0x02f5 }
            if (r0 == 0) goto L_0x001b
            if (r45 == 0) goto L_0x0016
            r45.run()     // Catch:{ all -> 0x02f5 }
        L_0x0016:
            monitor-exit(r44)     // Catch:{ all -> 0x02f5 }
            resetPriorityAfterLockedSection()
            return
        L_0x001b:
            java.lang.Class<com.android.server.DeviceIdleController$LocalService> r0 = com.android.server.DeviceIdleController.LocalService.class
            java.lang.Object r0 = com.android.server.LocalServices.getService(r0)     // Catch:{ all -> 0x02f5 }
            com.android.server.DeviceIdleController$LocalService r0 = (com.android.server.DeviceIdleController.LocalService) r0     // Catch:{ all -> 0x02f5 }
            r15.mLocalDeviceIdleController = r0     // Catch:{ all -> 0x02f5 }
            com.android.server.wm.ActivityTaskManagerService r0 = r15.mActivityTaskManager     // Catch:{ all -> 0x02f5 }
            r0.onSystemReady()     // Catch:{ all -> 0x02f5 }
            com.android.server.am.UserController r0 = r15.mUserController     // Catch:{ all -> 0x02f5 }
            r0.onSystemReady()     // Catch:{ all -> 0x02f5 }
            com.android.server.appop.AppOpsService r0 = r15.mAppOpsService     // Catch:{ all -> 0x02f5 }
            r0.systemReady()     // Catch:{ all -> 0x02f5 }
            r13 = 1
            r15.mSystemReady = r13     // Catch:{ all -> 0x02f5 }
            monitor-exit(r44)     // Catch:{ all -> 0x02f5 }
            resetPriorityAfterLockedSection()
            java.lang.String r0 = "device_identifiers"
            android.os.IBinder r0 = android.os.ServiceManager.getService(r0)     // Catch:{ RemoteException -> 0x004c }
            android.os.IDeviceIdentifiersPolicyService r0 = android.os.IDeviceIdentifiersPolicyService.Stub.asInterface(r0)     // Catch:{ RemoteException -> 0x004c }
            java.lang.String r0 = r0.getSerial()     // Catch:{ RemoteException -> 0x004c }
            sTheRealBuildSerial = r0     // Catch:{ RemoteException -> 0x004c }
            goto L_0x004d
        L_0x004c:
            r0 = move-exception
        L_0x004d:
            r1 = 0
            com.android.server.am.ActivityManagerService$PidMap r2 = r15.mPidsSelfLocked
            monitor-enter(r2)
            com.android.server.am.ActivityManagerService$PidMap r0 = r15.mPidsSelfLocked     // Catch:{ all -> 0x02ef }
            int r0 = r0.size()     // Catch:{ all -> 0x02ef }
            int r0 = r0 - r13
            r12 = r1
        L_0x005a:
            if (r0 < 0) goto L_0x0085
            com.android.server.am.ActivityManagerService$PidMap r1 = r15.mPidsSelfLocked     // Catch:{ all -> 0x0080 }
            com.android.server.am.ProcessRecord r1 = r1.valueAt(r0)     // Catch:{ all -> 0x0080 }
            android.content.pm.ApplicationInfo r3 = r1.info     // Catch:{ all -> 0x0080 }
            boolean r3 = r15.isAllowedWhileBooting(r3)     // Catch:{ all -> 0x0080 }
            if (r3 != 0) goto L_0x007d
            if (r12 != 0) goto L_0x0072
            java.util.ArrayList r3 = new java.util.ArrayList     // Catch:{ all -> 0x0080 }
            r3.<init>()     // Catch:{ all -> 0x0080 }
            goto L_0x0073
        L_0x0072:
            r3 = r12
        L_0x0073:
            r3.add(r1)     // Catch:{ all -> 0x0078 }
            r12 = r3
            goto L_0x007d
        L_0x0078:
            r0 = move-exception
            r1 = r3
            r3 = r15
            goto L_0x02f1
        L_0x007d:
            int r0 = r0 + -1
            goto L_0x005a
        L_0x0080:
            r0 = move-exception
            r1 = r12
            r3 = r15
            goto L_0x02f1
        L_0x0085:
            monitor-exit(r2)     // Catch:{ all -> 0x02e8 }
            monitor-enter(r44)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x02dd }
            r11 = 0
            if (r12 == 0) goto L_0x00c2
            int r0 = r12.size()     // Catch:{ all -> 0x00bc }
            int r0 = r0 - r13
        L_0x0092:
            if (r0 < 0) goto L_0x00c2
            java.lang.Object r1 = r12.get(r0)     // Catch:{ all -> 0x00bc }
            com.android.server.am.ProcessRecord r1 = (com.android.server.am.ProcessRecord) r1     // Catch:{ all -> 0x00bc }
            java.lang.String r2 = "ActivityManager"
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x00bc }
            r3.<init>()     // Catch:{ all -> 0x00bc }
            java.lang.String r4 = "Removing system update proc: "
            r3.append(r4)     // Catch:{ all -> 0x00bc }
            r3.append(r1)     // Catch:{ all -> 0x00bc }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x00bc }
            android.util.Slog.i(r2, r3)     // Catch:{ all -> 0x00bc }
            com.android.server.am.ProcessList r2 = r15.mProcessList     // Catch:{ all -> 0x00bc }
            java.lang.String r3 = "system update done"
            r2.removeProcessLocked(r1, r13, r11, r3)     // Catch:{ all -> 0x00bc }
            int r0 = r0 + -1
            goto L_0x0092
        L_0x00bc:
            r0 = move-exception
            r42 = r12
            r3 = r15
            goto L_0x02e1
        L_0x00c2:
            r15.mProcessesReady = r13     // Catch:{ all -> 0x02dd }
            monitor-exit(r44)     // Catch:{ all -> 0x02dd }
            resetPriorityAfterLockedSection()
            java.lang.String r0 = "ActivityManager"
            java.lang.String r1 = "System now ready"
            android.util.Slog.i(r0, r1)
            r0 = 3040(0xbe0, float:4.26E-42)
            long r1 = android.os.SystemClock.uptimeMillis()
            android.util.EventLog.writeEvent(r0, r1)
            com.android.server.am.ActivityManagerServiceInjector.markAmsReady()
            com.android.server.wm.ActivityTaskManagerInternal r0 = r15.mAtmInternal
            r0.updateTopComponentForFactoryTest()
            com.android.server.wm.ActivityTaskManagerInternal r0 = r15.mAtmInternal
            com.android.server.wm.ActivityMetricsLaunchObserverRegistry r0 = r0.getLaunchObserverRegistry()
            com.android.server.wm.ActivityMetricsLaunchObserver r1 = r15.mActivityLaunchObserver
            r0.registerLaunchObserver(r1)
            android.content.Context r0 = r15.mContext
            r15.watchDeviceProvisioning(r0)
            r44.retrieveSettings()
            com.android.server.uri.UriGrantsManagerInternal r0 = r15.mUgmInternal
            r0.onSystemReady()
            java.lang.Class<android.os.PowerManagerInternal> r0 = android.os.PowerManagerInternal.class
            java.lang.Object r0 = com.android.server.LocalServices.getService(r0)
            r10 = r0
            android.os.PowerManagerInternal r10 = (android.os.PowerManagerInternal) r10
            if (r10 == 0) goto L_0x0118
            com.android.server.am.-$$Lambda$ActivityManagerService$Z3G4KWA2tlTOhqhFtAvVby1SjyQ r0 = new com.android.server.am.-$$Lambda$ActivityManagerService$Z3G4KWA2tlTOhqhFtAvVby1SjyQ
            r0.<init>()
            r1 = 12
            r10.registerLowPowerModeObserver(r1, r0)
            android.os.PowerSaveState r0 = r10.getLowPowerState(r1)
            boolean r0 = r0.batterySaverEnabled
            r15.updateForceBackgroundCheck(r0)
            goto L_0x011f
        L_0x0118:
            java.lang.String r0 = "ActivityManager"
            java.lang.String r1 = "PowerManagerInternal not found."
            android.util.Slog.wtf(r0, r1)
        L_0x011f:
            if (r45 == 0) goto L_0x0124
            r45.run()
        L_0x0124:
            com.android.server.am.UserController r0 = r15.mUserController
            int r9 = r0.getCurrentUserId()
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "Current user:"
            r0.append(r1)
            r0.append(r9)
            java.lang.String r0 = r0.toString()
            java.lang.String r1 = "ActivityManager"
            android.util.Slog.i(r1, r0)
            if (r9 == 0) goto L_0x0162
            com.android.server.am.UserController r0 = r15.mUserController
            boolean r0 = r0.isSystemUserStarted()
            if (r0 == 0) goto L_0x014b
            goto L_0x0162
        L_0x014b:
            java.lang.RuntimeException r0 = new java.lang.RuntimeException
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "System user not started while current user is:"
            r1.append(r2)
            r1.append(r9)
            java.lang.String r1 = r1.toString()
            r0.<init>(r1)
            throw r0
        L_0x0162:
            java.lang.String r0 = "ActivityManagerStartApps"
            r14.traceBegin(r0)
            com.android.server.am.BatteryStatsService r0 = r15.mBatteryStatsService
            r1 = 32775(0x8007, float:4.5928E-41)
            java.lang.String r2 = java.lang.Integer.toString(r9)
            r0.noteEvent(r1, r2, r9)
            com.android.server.am.BatteryStatsService r0 = r15.mBatteryStatsService
            r1 = 32776(0x8008, float:4.5929E-41)
            java.lang.String r2 = java.lang.Integer.toString(r9)
            r0.noteEvent(r1, r2, r9)
            com.android.server.SystemServiceManager r0 = r15.mSystemServiceManager
            r0.startUser(r9)
            com.android.server.wm.ActivityTaskManagerService r0 = r15.mActivityTaskManager
            java.lang.String r1 = ""
            r0.setCurrentCastModeState(r1, r11)
            monitor-enter(r44)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x02cf }
            r0 = 524288(0x80000, float:7.34684E-40)
            r15.startPersistentApps(r0)     // Catch:{ all -> 0x02cf }
            r15.mBooting = r13     // Catch:{ all -> 0x02cf }
            boolean r0 = android.os.UserManager.isSplitSystemUser()     // Catch:{ all -> 0x02cf }
            if (r0 == 0) goto L_0x01cc
            android.content.Context r0 = r15.mContext     // Catch:{ all -> 0x01c3 }
            android.content.ContentResolver r0 = r0.getContentResolver()     // Catch:{ all -> 0x01c3 }
            java.lang.String r1 = "user_setup_complete"
            int r0 = android.provider.Settings.Secure.getInt(r0, r1, r11)     // Catch:{ all -> 0x01c3 }
            if (r0 == 0) goto L_0x01cc
            android.content.ComponentName r0 = new android.content.ComponentName     // Catch:{ all -> 0x01c3 }
            android.content.Context r1 = r15.mContext     // Catch:{ all -> 0x01c3 }
            java.lang.Class<com.android.internal.app.SystemUserHomeActivity> r2 = com.android.internal.app.SystemUserHomeActivity.class
            r0.<init>(r1, r2)     // Catch:{ all -> 0x01c3 }
            r1 = r0
            android.content.pm.IPackageManager r0 = android.app.AppGlobals.getPackageManager()     // Catch:{ RemoteException -> 0x01bd }
            r0.setComponentEnabledSetting(r1, r13, r11, r11)     // Catch:{ RemoteException -> 0x01bd }
            goto L_0x01cc
        L_0x01bd:
            r0 = move-exception
            java.lang.RuntimeException r2 = r0.rethrowAsRuntimeException()     // Catch:{ all -> 0x01c3 }
            throw r2     // Catch:{ all -> 0x01c3 }
        L_0x01c3:
            r0 = move-exception
            r2 = r9
            r41 = r10
            r42 = r12
            r3 = r15
            goto L_0x02d6
        L_0x01cc:
            com.android.server.wm.ActivityTaskManagerInternal r0 = r15.mAtmInternal     // Catch:{ all -> 0x02cf }
            java.lang.String r1 = "systemReady"
            r0.startHomeOnAllDisplays(r9, r1)     // Catch:{ all -> 0x02cf }
            com.android.server.wm.ActivityTaskManagerInternal r0 = r15.mAtmInternal     // Catch:{ all -> 0x02cf }
            r0.showSystemReadyErrorDialogsIfNeeded()     // Catch:{ all -> 0x02cf }
            int r17 = android.os.Binder.getCallingUid()     // Catch:{ all -> 0x02cf }
            int r18 = android.os.Binder.getCallingPid()     // Catch:{ all -> 0x02cf }
            long r0 = android.os.Binder.clearCallingIdentity()     // Catch:{ all -> 0x02cf }
            r38 = r0
            android.content.Intent r0 = new android.content.Intent     // Catch:{ all -> 0x0285 }
            java.lang.String r1 = "android.intent.action.USER_STARTED"
            r0.<init>(r1)     // Catch:{ all -> 0x0285 }
            r1 = 1342177280(0x50000000, float:8.5899346E9)
            r0.addFlags(r1)     // Catch:{ all -> 0x0285 }
            java.lang.String r1 = "android.intent.extra.user_handle"
            r0.putExtra(r1, r9)     // Catch:{ all -> 0x0285 }
            r2 = 0
            r3 = 0
            r5 = 0
            r6 = 0
            r7 = 0
            r8 = 0
            r19 = 0
            r20 = 0
            r21 = -1
            r22 = 0
            r23 = 0
            r24 = 0
            int r25 = MY_PID     // Catch:{ all -> 0x0285 }
            r16 = 1000(0x3e8, float:1.401E-42)
            r1 = r44
            r4 = r0
            r40 = r9
            r9 = r19
            r41 = r10
            r10 = r20
            r11 = r21
            r42 = r12
            r12 = r22
            r43 = r13
            r13 = r23
            r14 = r24
            r15 = r25
            r19 = r40
            r1.broadcastIntentLocked(r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19)     // Catch:{ all -> 0x027f }
            android.content.Intent r1 = new android.content.Intent     // Catch:{ all -> 0x027f }
            java.lang.String r2 = "android.intent.action.USER_STARTING"
            r1.<init>(r2)     // Catch:{ all -> 0x027f }
            r0 = r1
            r1 = 1073741824(0x40000000, float:2.0)
            r0.addFlags(r1)     // Catch:{ all -> 0x027f }
            java.lang.String r1 = "android.intent.extra.user_handle"
            r2 = r40
            r0.putExtra(r1, r2)     // Catch:{ all -> 0x027b }
            r20 = 0
            r21 = 0
            r23 = 0
            com.android.server.am.ActivityManagerService$18 r1 = new com.android.server.am.ActivityManagerService$18     // Catch:{ all -> 0x027b }
            r3 = r44
            r1.<init>()     // Catch:{ all -> 0x0279 }
            r25 = 0
            r26 = 0
            r27 = 0
            java.lang.String r4 = "android.permission.INTERACT_ACROSS_USERS"
            java.lang.String[] r28 = new java.lang.String[]{r4}     // Catch:{ all -> 0x0279 }
            r29 = -1
            r30 = 0
            r31 = 1
            r32 = 0
            int r33 = MY_PID     // Catch:{ all -> 0x0279 }
            r34 = 1000(0x3e8, float:1.401E-42)
            r37 = -1
            r19 = r44
            r22 = r0
            r24 = r1
            r35 = r17
            r36 = r18
            r19.broadcastIntentLocked(r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37)     // Catch:{ all -> 0x0279 }
            android.os.Binder.restoreCallingIdentity(r38)     // Catch:{ all -> 0x02db }
            goto L_0x0299
        L_0x0279:
            r0 = move-exception
            goto L_0x028e
        L_0x027b:
            r0 = move-exception
            r3 = r44
            goto L_0x028e
        L_0x027f:
            r0 = move-exception
            r3 = r44
            r2 = r40
            goto L_0x028e
        L_0x0285:
            r0 = move-exception
            r2 = r9
            r41 = r10
            r42 = r12
            r43 = r13
            r3 = r15
        L_0x028e:
            java.lang.String r1 = "ActivityManager"
            java.lang.String r4 = "Failed sending first user broadcasts"
            android.util.Slog.wtf(r1, r4, r0)     // Catch:{ all -> 0x02ca }
            android.os.Binder.restoreCallingIdentity(r38)     // Catch:{ all -> 0x02db }
        L_0x0299:
            com.android.server.wm.ActivityTaskManagerInternal r0 = r3.mAtmInternal     // Catch:{ all -> 0x02db }
            r1 = 0
            r0.resumeTopActivities(r1)     // Catch:{ all -> 0x02db }
            com.android.server.am.UserController r0 = r3.mUserController     // Catch:{ all -> 0x02db }
            r1 = -1
            r0.sendUserSwitchBroadcasts(r1, r2)     // Catch:{ all -> 0x02db }
            r0 = 6000(0x1770, float:8.408E-42)
            r1 = 5500(0x157c, float:7.707E-42)
            com.android.internal.os.BinderInternal.nSetBinderProxyCountWatermarks(r0, r1)     // Catch:{ all -> 0x02db }
            com.android.internal.os.BinderInternal.nSetBinderProxyCountEnabled(r43)     // Catch:{ all -> 0x02db }
            com.android.server.am.ActivityManagerService$19 r0 = new com.android.server.am.ActivityManagerService$19     // Catch:{ all -> 0x02db }
            r0.<init>()     // Catch:{ all -> 0x02db }
            com.android.server.am.ActivityManagerService$MainHandler r1 = r3.mHandler     // Catch:{ all -> 0x02db }
            com.android.internal.os.BinderInternal.setBinderProxyCountCallback(r0, r1)     // Catch:{ all -> 0x02db }
            r46.traceEnd()     // Catch:{ all -> 0x02db }
            r46.traceEnd()     // Catch:{ all -> 0x02db }
            monitor-exit(r44)     // Catch:{ all -> 0x02db }
            resetPriorityAfterLockedSection()
            android.content.Context r0 = r3.mContext
            com.android.server.am.ExtraActivityManagerService.onSystemReady(r0)
            return
        L_0x02ca:
            r0 = move-exception
            android.os.Binder.restoreCallingIdentity(r38)     // Catch:{ all -> 0x02db }
            throw r0     // Catch:{ all -> 0x02db }
        L_0x02cf:
            r0 = move-exception
            r2 = r9
            r41 = r10
            r42 = r12
            r3 = r15
        L_0x02d6:
            monitor-exit(r44)     // Catch:{ all -> 0x02db }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x02db:
            r0 = move-exception
            goto L_0x02d6
        L_0x02dd:
            r0 = move-exception
            r42 = r12
            r3 = r15
        L_0x02e1:
            monitor-exit(r44)     // Catch:{ all -> 0x02e6 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x02e6:
            r0 = move-exception
            goto L_0x02e1
        L_0x02e8:
            r0 = move-exception
            r42 = r12
            r3 = r15
            r1 = r42
            goto L_0x02f1
        L_0x02ef:
            r0 = move-exception
            r3 = r15
        L_0x02f1:
            monitor-exit(r2)     // Catch:{ all -> 0x02f3 }
            throw r0
        L_0x02f3:
            r0 = move-exception
            goto L_0x02f1
        L_0x02f5:
            r0 = move-exception
            r3 = r15
        L_0x02f7:
            monitor-exit(r44)     // Catch:{ all -> 0x02fc }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x02fc:
            r0 = move-exception
            goto L_0x02f7
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.systemReady(java.lang.Runnable, android.util.TimingsTraceLog):void");
    }

    public /* synthetic */ void lambda$systemReady$1$ActivityManagerService(PowerSaveState state) {
        updateForceBackgroundCheck(state.batterySaverEnabled);
    }

    private void watchDeviceProvisioning(final Context context) {
        if (isDeviceProvisioned(context)) {
            SystemProperties.set(SYSTEM_PROPERTY_DEVICE_PROVISIONED, SplitScreenReporter.ACTION_ENTER_SPLIT);
        } else {
            context.getContentResolver().registerContentObserver(Settings.Global.getUriFor("device_provisioned"), false, new ContentObserver(new Handler(Looper.getMainLooper())) {
                public void onChange(boolean selfChange) {
                    if (ActivityManagerService.this.isDeviceProvisioned(context)) {
                        SystemProperties.set(ActivityManagerService.SYSTEM_PROPERTY_DEVICE_PROVISIONED, SplitScreenReporter.ACTION_ENTER_SPLIT);
                        context.getContentResolver().unregisterContentObserver(this);
                    }
                }
            });
        }
    }

    /* access modifiers changed from: private */
    public boolean isDeviceProvisioned(Context context) {
        return Settings.Global.getInt(context.getContentResolver(), "device_provisioned", 0) != 0;
    }

    /* access modifiers changed from: private */
    public void startBroadcastObservers() {
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.start(this.mContext.getContentResolver());
        }
    }

    private void updateForceBackgroundCheck(boolean enabled) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mForceBackgroundCheck != enabled) {
                    this.mForceBackgroundCheck = enabled;
                    if (this.mForceBackgroundCheck) {
                        this.mProcessList.doStopUidForIdleUidsLocked();
                    }
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void killAppAtUsersRequest(ProcessRecord app, Dialog fromDialog) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mAppErrors.killAppAtUserRequestLocked(app, fromDialog);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void skipCurrentReceiverLocked(ProcessRecord app) {
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.skipCurrentReceiverLocked(app);
        }
    }

    public void handleApplicationCrash(IBinder app, ApplicationErrorReport.ParcelableCrashInfo crashInfo) {
        String processName;
        ProcessRecord r = findAppProcess(app, "Crash");
        if (app == null) {
            processName = "system_server";
        } else {
            processName = r == null ? UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN : r.processName;
        }
        handleApplicationCrashInner(ProcessPolicy.REASON_CRASH, r, processName, crashInfo);
    }

    /* access modifiers changed from: package-private */
    public void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName, ApplicationErrorReport.CrashInfo crashInfo) {
        int i;
        int i2;
        int i3;
        ProcessRecord processRecord = r;
        String str = processName;
        ApplicationErrorReport.CrashInfo crashInfo2 = crashInfo;
        Object[] objArr = new Object[8];
        int relaunchReason = 0;
        objArr[0] = Integer.valueOf(Binder.getCallingPid());
        objArr[1] = Integer.valueOf(UserHandle.getUserId(Binder.getCallingUid()));
        objArr[2] = str;
        objArr[3] = Integer.valueOf(processRecord == null ? -1 : processRecord.info.flags);
        objArr[4] = crashInfo2.exceptionClassName;
        objArr[5] = crashInfo2.exceptionMessage;
        objArr[6] = crashInfo2.throwFileName;
        objArr[7] = Integer.valueOf(crashInfo2.throwLineNumber);
        EventLog.writeEvent(EventLogTags.AM_CRASH, objArr);
        int callingUid = Binder.getCallingUid();
        int callingPid = Binder.getCallingPid();
        String str2 = (processRecord == null || processRecord.info == null) ? "" : processRecord.info.packageName;
        if (processRecord == null || processRecord.info == null) {
            i = 0;
        } else if (processRecord.info.isInstantApp()) {
            i = 2;
        } else {
            i = 1;
        }
        if (processRecord == null) {
            i2 = 0;
        } else if (r.isInterestingToUserLocked()) {
            i2 = 2;
        } else {
            i2 = 1;
        }
        if (str.equals("system_server")) {
            i3 = 3;
        } else if (processRecord != null) {
            i3 = r.getProcessClassEnum();
        } else {
            i3 = 0;
        }
        StatsLog.write(78, callingUid, eventType, processName, callingPid, str2, i, i2, i3);
        if (processRecord != null) {
            relaunchReason = r.getWindowProcessController().computeRelaunchReason();
        }
        String relaunchReasonString = ActivityTaskManagerService.relaunchReasonToString(relaunchReason);
        if (crashInfo2.crashTag == null) {
            crashInfo2.crashTag = relaunchReasonString;
        } else {
            crashInfo2.crashTag += " " + relaunchReasonString;
        }
        addErrorToDropBox(eventType, r, processName, (String) null, (String) null, (ProcessRecord) null, (String) null, (String) null, (File) null, crashInfo);
        this.mAppErrors.crashApplication(processRecord, crashInfo2);
    }

    public void handleApplicationStrictModeViolation(IBinder app, int penaltyMask, StrictMode.ViolationInfo info) {
        ProcessRecord r = findAppProcess(app, "StrictMode");
        if ((67108864 & penaltyMask) != 0) {
            Integer stackFingerprint = Integer.valueOf(info.hashCode());
            boolean logIt = true;
            synchronized (this.mAlreadyLoggedViolatedStacks) {
                if (this.mAlreadyLoggedViolatedStacks.contains(stackFingerprint)) {
                    logIt = false;
                } else {
                    if (this.mAlreadyLoggedViolatedStacks.size() >= 5000) {
                        this.mAlreadyLoggedViolatedStacks.clear();
                    }
                    this.mAlreadyLoggedViolatedStacks.add(stackFingerprint);
                }
            }
            if (logIt) {
                logStrictModeViolationToDropBox(r, info);
            }
        }
        if ((536870912 & penaltyMask) != 0) {
            AppErrorResult result = new AppErrorResult();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    long origId = Binder.clearCallingIdentity();
                    Message msg = Message.obtain();
                    msg.what = SHOW_STRICT_MODE_VIOLATION_UI_MSG;
                    HashMap<String, Object> data = new HashMap<>();
                    data.put("result", result);
                    data.put("app", r);
                    data.put("info", info);
                    msg.obj = data;
                    this.mUiHandler.sendMessage(msg);
                    Binder.restoreCallingIdentity(origId);
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            int res = result.get();
            Slog.w("ActivityManager", "handleApplicationStrictModeViolation; res=" + res);
        }
    }

    private void logStrictModeViolationToDropBox(ProcessRecord process, StrictMode.ViolationInfo info) {
        if (info != null) {
            boolean isSystemApp = process == null || (process.info.flags & MiuiSecurityInputMethodHelper.TEXT_PASSWORD) != 0;
            String processName = process == null ? UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN : process.processName;
            DropBoxManager dbox = (DropBoxManager) this.mContext.getSystemService("dropbox");
            String dropboxTag = processClass(process) + "_strictmode";
            if (dbox != null && dbox.isTagEnabled(dropboxTag)) {
                StringBuilder sb = new StringBuilder(1024);
                synchronized (sb) {
                    appendDropBoxProcessHeaders(process, processName, sb);
                    sb.append("Build: ");
                    sb.append(Build.FINGERPRINT);
                    sb.append("\n");
                    sb.append("System-App: ");
                    sb.append(isSystemApp);
                    sb.append("\n");
                    sb.append("Uptime-Millis: ");
                    sb.append(info.violationUptimeMillis);
                    sb.append("\n");
                    if (info.violationNumThisLoop != 0) {
                        sb.append("Loop-Violation-Number: ");
                        sb.append(info.violationNumThisLoop);
                        sb.append("\n");
                    }
                    if (info.numAnimationsRunning != 0) {
                        sb.append("Animations-Running: ");
                        sb.append(info.numAnimationsRunning);
                        sb.append("\n");
                    }
                    if (info.broadcastIntentAction != null) {
                        sb.append("Broadcast-Intent-Action: ");
                        sb.append(info.broadcastIntentAction);
                        sb.append("\n");
                    }
                    if (info.durationMillis != -1) {
                        sb.append("Duration-Millis: ");
                        sb.append(info.durationMillis);
                        sb.append("\n");
                    }
                    if (info.numInstances != -1) {
                        sb.append("Instance-Count: ");
                        sb.append(info.numInstances);
                        sb.append("\n");
                    }
                    if (info.tags != null) {
                        for (String tag : info.tags) {
                            sb.append("Span-Tag: ");
                            sb.append(tag);
                            sb.append("\n");
                        }
                    }
                    sb.append("\n");
                    sb.append(info.getStackTrace());
                    sb.append("\n");
                    if (info.getViolationDetails() != null) {
                        sb.append(info.getViolationDetails());
                        sb.append("\n");
                    }
                }
                IoThread.getHandler().post(new Runnable(dbox, dropboxTag, sb.toString()) {
                    private final /* synthetic */ DropBoxManager f$0;
                    private final /* synthetic */ String f$1;
                    private final /* synthetic */ String f$2;

                    {
                        this.f$0 = r1;
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run() {
                        this.f$0.addText(this.f$1, this.f$2);
                    }
                });
            }
        }
    }

    public boolean handleApplicationWtf(IBinder app, String tag, boolean system, ApplicationErrorReport.ParcelableCrashInfo crashInfo) {
        int callingUid = Binder.getCallingUid();
        int callingPid = Binder.getCallingPid();
        if (system) {
            final int i = callingUid;
            final int i2 = callingPid;
            final IBinder iBinder = app;
            final String str = tag;
            final ApplicationErrorReport.ParcelableCrashInfo parcelableCrashInfo = crashInfo;
            this.mHandler.post(new Runnable() {
                public void run() {
                    ActivityManagerService.this.handleApplicationWtfInner(i, i2, iBinder, str, parcelableCrashInfo);
                }
            });
            return false;
        }
        ProcessRecord r = handleApplicationWtfInner(callingUid, callingPid, app, tag, crashInfo);
        boolean isFatal = Build.IS_ENG || Settings.Global.getInt(this.mContext.getContentResolver(), "wtf_is_fatal", 0) != 0;
        boolean isSystem = r == null || r.isPersistent();
        if (!isFatal || isSystem) {
            ApplicationErrorReport.ParcelableCrashInfo parcelableCrashInfo2 = crashInfo;
            return false;
        }
        this.mAppErrors.crashApplication(r, crashInfo);
        return true;
    }

    /* access modifiers changed from: package-private */
    public ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag, ApplicationErrorReport.CrashInfo crashInfo) {
        String str;
        IBinder iBinder = app;
        ProcessRecord r = findAppProcess(iBinder, "WTF");
        if (iBinder == null) {
            str = "system_server";
        } else {
            str = r == null ? UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN : r.processName;
        }
        String processName = str;
        Object[] objArr = new Object[6];
        objArr[0] = Integer.valueOf(UserHandle.getUserId(callingUid));
        objArr[1] = Integer.valueOf(callingPid);
        objArr[2] = processName;
        objArr[3] = Integer.valueOf(r == null ? -1 : r.info.flags);
        objArr[4] = tag;
        objArr[5] = crashInfo.exceptionMessage;
        EventLog.writeEvent(EventLogTags.AM_WTF, objArr);
        StatsLog.write(80, callingUid, tag, processName, callingPid, r != null ? r.getProcessClassEnum() : 0);
        addErrorToDropBox("wtf", r, processName, (String) null, (String) null, (ProcessRecord) null, tag, (String) null, (File) null, crashInfo);
        return r;
    }

    private ProcessRecord findAppProcess(IBinder app, String reason) {
        ProcessRecord findAppProcessLocked;
        if (app == null) {
            return null;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                findAppProcessLocked = this.mProcessList.findAppProcessLocked(app, reason);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return findAppProcessLocked;
    }

    private void appendDropBoxProcessHeaders(ProcessRecord process, String processName, StringBuilder sb) {
        String pkg;
        if (process == null) {
            sb.append("Process: ");
            sb.append(processName);
            sb.append("\n");
            return;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                sb.append("Process: ");
                sb.append(processName);
                sb.append("\n");
                sb.append("PID: ");
                sb.append(process.pid);
                sb.append("\n");
                sb.append("UID: ");
                sb.append(process.uid);
                sb.append("\n");
                int flags = process.info.flags;
                IPackageManager pm = AppGlobals.getPackageManager();
                sb.append("Flags: 0x");
                sb.append(Integer.toHexString(flags));
                sb.append("\n");
                for (int ip = 0; ip < process.pkgList.size(); ip++) {
                    pkg = process.pkgList.keyAt(ip);
                    sb.append("Package: ");
                    sb.append(pkg);
                    PackageInfo pi = pm.getPackageInfo(pkg, 0, UserHandle.getCallingUserId());
                    if (pi != null) {
                        sb.append(" v");
                        sb.append(pi.getLongVersionCode());
                        if (pi.versionName != null) {
                            sb.append(" (");
                            sb.append(pi.versionName);
                            sb.append(")");
                        }
                    }
                    sb.append("\n");
                }
                if (process.info.isInstantApp()) {
                    sb.append("Instant-App: true\n");
                }
            } catch (RemoteException e) {
                Slog.e("ActivityManager", "Error getting package info: " + pkg, e);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    private static String processClass(ProcessRecord process) {
        if (process == null || process.pid == MY_PID) {
            return "system_server";
        }
        if ((process.info.flags & 1) != 0) {
            return "system_app";
        }
        return "data_app";
    }

    public void addErrorToDropBox(String eventType, ProcessRecord process, String processName, String activityShortComponentName, String parentShortComponentName, ProcessRecord parentProcess, String subject, String report, File dataFile, ApplicationErrorReport.CrashInfo crashInfo) {
        ProcessRecord processRecord = process;
        String str = activityShortComponentName;
        String str2 = parentShortComponentName;
        ProcessRecord processRecord2 = parentProcess;
        String str3 = subject;
        ApplicationErrorReport.CrashInfo crashInfo2 = crashInfo;
        if (ServiceManager.getService("dropbox") != null) {
            DropBoxManager dbox = (DropBoxManager) this.mContext.getSystemService(DropBoxManager.class);
            final String dropboxTag = processClass(process) + "_" + eventType;
            if (dbox == null) {
                DropBoxManager dropBoxManager = dbox;
            } else if (!dbox.isTagEnabled(dropboxTag)) {
                String str4 = dropboxTag;
                DropBoxManager dropBoxManager2 = dbox;
            } else {
                long now = SystemClock.elapsedRealtime();
                if (now - this.mWtfClusterStart > JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY) {
                    this.mWtfClusterStart = now;
                    this.mWtfClusterCount = 1;
                } else {
                    int i = this.mWtfClusterCount;
                    this.mWtfClusterCount = i + 1;
                    if (i >= 5) {
                        return;
                    }
                }
                StringBuilder sb = new StringBuilder(1024);
                appendDropBoxProcessHeaders(processRecord, processName, sb);
                if (processRecord != null) {
                    sb.append("Foreground: ");
                    sb.append(process.isInterestingToUserLocked() ? "Yes" : "No");
                    sb.append("\n");
                }
                if (str != null) {
                    sb.append("Activity: ");
                    sb.append(str);
                    sb.append("\n");
                }
                if (str2 != null) {
                    if (!(processRecord2 == null || processRecord2.pid == processRecord.pid)) {
                        sb.append("Parent-Process: ");
                        sb.append(processRecord2.processName);
                        sb.append("\n");
                    }
                    if (!str2.equals(str)) {
                        sb.append("Parent-Activity: ");
                        sb.append(str2);
                        sb.append("\n");
                    }
                }
                if (str3 != null) {
                    sb.append("Subject: ");
                    sb.append(str3);
                    sb.append("\n");
                }
                sb.append("Build: ");
                sb.append(Build.FINGERPRINT);
                sb.append("\n");
                if (Debug.isDebuggerConnected()) {
                    sb.append("Debugger: Connected\n");
                }
                if (!(crashInfo2 == null || crashInfo2.crashTag == null || crashInfo2.crashTag.isEmpty())) {
                    sb.append("Crash-Tag: ");
                    sb.append(crashInfo2.crashTag);
                    sb.append("\n");
                }
                sb.append("\n");
                long j = now;
                final String str5 = report;
                final StringBuilder sb2 = sb;
                String str6 = dropboxTag;
                final File file = dataFile;
                DropBoxManager dbox2 = dbox;
                final ApplicationErrorReport.CrashInfo crashInfo3 = crashInfo;
                final DropBoxManager dropBoxManager3 = dbox2;
                Thread worker = new Thread("Error dump: " + dropboxTag) {
                    public void run() {
                        String str = str5;
                        if (str != null) {
                            sb2.append(str);
                        }
                        int lines = Settings.Global.getInt(ActivityManagerService.this.mContext.getContentResolver(), "logcat_for_" + dropboxTag, 0);
                        int maxDataFileSize = (ActivityManagerService.DROPBOX_MAX_SIZE - sb2.length()) - (lines * 100);
                        File file = file;
                        if (file != null && maxDataFileSize > 0) {
                            try {
                                sb2.append(FileUtils.readTextFile(file, maxDataFileSize, "\n\n[[TRUNCATED]]"));
                            } catch (IOException e) {
                                Slog.e("ActivityManager", "Error reading " + file, e);
                            }
                        }
                        ApplicationErrorReport.CrashInfo crashInfo = crashInfo3;
                        if (!(crashInfo == null || crashInfo.stackTrace == null)) {
                            sb2.append(crashInfo3.stackTrace);
                        }
                        if (lines > 0) {
                            sb2.append("\n");
                            InputStreamReader input = null;
                            try {
                                Process logcat = new ProcessBuilder(new String[]{"/system/bin/timeout", "-k", "15s", "10s", "/system/bin/logcat", "-v", "threadtime", "-b", "events", "-b", "system", "-b", "main", "-b", ProcessPolicy.REASON_CRASH, "-t", String.valueOf(lines)}).redirectErrorStream(true).start();
                                try {
                                    logcat.getOutputStream().close();
                                } catch (IOException e2) {
                                }
                                try {
                                    logcat.getErrorStream().close();
                                } catch (IOException e3) {
                                }
                                InputStreamReader input2 = new InputStreamReader(logcat.getInputStream());
                                char[] buf = new char[8192];
                                while (true) {
                                    int read = input2.read(buf);
                                    int num = read;
                                    if (read > 0) {
                                        sb2.append(buf, 0, num);
                                    } else {
                                        try {
                                            break;
                                        } catch (IOException e4) {
                                        }
                                    }
                                }
                                input2.close();
                            } catch (IOException e5) {
                                Slog.e("ActivityManager", "Error running logcat", e5);
                                if (input != null) {
                                    input.close();
                                }
                            } catch (Throwable th) {
                                if (input != null) {
                                    try {
                                        input.close();
                                    } catch (IOException e6) {
                                    }
                                }
                                throw th;
                            }
                        }
                        dropBoxManager3.addText(dropboxTag, sb2.toString());
                    }
                };
                if (processRecord == null) {
                    int oldMask = StrictMode.allowThreadDiskWritesMask();
                    try {
                        worker.run();
                        StrictMode.setThreadPolicyMask(oldMask);
                    } catch (Throwable th) {
                        Throwable th2 = th;
                        StrictMode.setThreadPolicyMask(oldMask);
                        throw th2;
                    }
                } else {
                    worker.start();
                }
            }
        }
    }

    public List<ActivityManager.ProcessErrorStateInfo> getProcessesInErrorState() {
        enforceNotIsolatedCaller("getProcessesInErrorState");
        List<ActivityManager.ProcessErrorStateInfo> errList = null;
        boolean allUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", Binder.getCallingUid()) == 0;
        int userId = UserHandle.getUserId(Binder.getCallingUid());
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (int i = this.mProcessList.mLruProcesses.size() - 1; i >= 0; i--) {
                    ProcessRecord app = this.mProcessList.mLruProcesses.get(i);
                    if (allUsers || app.userId == userId) {
                        boolean crashing = app.isCrashing();
                        boolean notResponding = app.isNotResponding();
                        if (app.thread != null && (crashing || notResponding)) {
                            ActivityManager.ProcessErrorStateInfo report = null;
                            if (crashing) {
                                report = app.crashingReport;
                            } else if (notResponding) {
                                report = app.notRespondingReport;
                            }
                            if (report != null) {
                                if (errList == null) {
                                    errList = new ArrayList<>(1);
                                }
                                errList.add(report);
                            } else {
                                Slog.w("ActivityManager", "Missing app error report, app = " + app.processName + " crashing = " + crashing + " notResponding = " + notResponding);
                            }
                        }
                    }
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return errList;
    }

    public List<ActivityManager.RunningAppProcessInfo> getRunningAppProcesses() {
        List<ActivityManager.RunningAppProcessInfo> runningAppProcessesLocked;
        enforceNotIsolatedCaller("getRunningAppProcesses");
        int callingUid = Binder.getCallingUid();
        int clientTargetSdk = this.mPackageManagerInt.getUidTargetSdkVersion(callingUid);
        boolean allUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        int userId = UserHandle.getUserId(callingUid);
        boolean allUids = this.mAtmInternal.isGetTasksAllowed("getRunningAppProcesses", Binder.getCallingPid(), callingUid);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                runningAppProcessesLocked = this.mProcessList.getRunningAppProcessesLocked(allUsers, userId, allUids, callingUid, clientTargetSdk);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return runningAppProcessesLocked;
    }

    public List<ApplicationInfo> getRunningExternalApplications() {
        enforceNotIsolatedCaller("getRunningExternalApplications");
        List<ActivityManager.RunningAppProcessInfo> runningApps = getRunningAppProcesses();
        List<ApplicationInfo> retList = new ArrayList<>();
        if (runningApps != null && runningApps.size() > 0) {
            Set<String> extList = new HashSet<>();
            Iterator<ActivityManager.RunningAppProcessInfo> it = runningApps.iterator();
            while (true) {
                if (!it.hasNext()) {
                    break;
                }
                ActivityManager.RunningAppProcessInfo app = it.next();
                if (app.pkgList != null) {
                    for (String pkg : app.pkgList) {
                        extList.add(pkg);
                    }
                }
            }
            IPackageManager pm = AppGlobals.getPackageManager();
            for (String pkg2 : extList) {
                try {
                    ApplicationInfo info = pm.getApplicationInfo(pkg2, 0, UserHandle.getCallingUserId());
                    if ((info.flags & DumpState.DUMP_DOMAIN_PREFERRED) != 0) {
                        retList.add(info);
                    }
                } catch (RemoteException e) {
                }
            }
        }
        return retList;
    }

    /* Debug info: failed to restart local var, previous not found, register: 5 */
    public void getMyMemoryState(ActivityManager.RunningAppProcessInfo outState) {
        ProcessRecord proc;
        if (outState != null) {
            enforceNotIsolatedCaller("getMyMemoryState");
            int clientTargetSdk = this.mPackageManagerInt.getUidTargetSdkVersion(Binder.getCallingUid());
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    synchronized (this.mPidsSelfLocked) {
                        proc = this.mPidsSelfLocked.get(Binder.getCallingPid());
                    }
                    if (proc != null) {
                        this.mProcessList.fillInProcMemInfoLocked(proc, outState, clientTargetSdk);
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        throw new IllegalArgumentException("outState is null");
    }

    public int getMemoryTrimLevel() {
        int i;
        enforceNotIsolatedCaller("getMyMemoryState");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                i = this.mLastMemoryLevel;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return i;
    }

    /* JADX WARNING: type inference failed for: r1v1, types: [android.os.Binder] */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void onShellCommand(java.io.FileDescriptor r9, java.io.FileDescriptor r10, java.io.FileDescriptor r11, java.lang.String[] r12, android.os.ShellCallback r13, android.os.ResultReceiver r14) {
        /*
            r8 = this;
            com.android.server.am.ActivityManagerShellCommand r0 = new com.android.server.am.ActivityManagerShellCommand
            r1 = 0
            r0.<init>(r8, r1)
            r1 = r8
            r2 = r9
            r3 = r10
            r4 = r11
            r5 = r12
            r6 = r13
            r7 = r14
            r0.exec(r1, r2, r3, r4, r5, r6, r7)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver):void");
    }

    /* access modifiers changed from: protected */
    public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
        PriorityDump.dump(this.mPriorityDumper, fd, pw, args);
    }

    /* JADX INFO: finally extract failed */
    /* JADX WARNING: Code restructure failed: missing block: B:104:0x01e0, code lost:
        r0 = th;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void dumpEverything(java.io.FileDescriptor r21, java.io.PrintWriter r22, java.lang.String[] r23, int r24, boolean r25, java.lang.String r26, boolean r27, boolean r28, int r29) {
        /*
            r20 = this;
            r9 = r20
            r8 = r22
            r15 = r25
            r14 = r26
            monitor-enter(r20)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x01d8 }
            com.android.server.am.ActivityManagerConstants r0 = r9.mConstants     // Catch:{ all -> 0x01d8 }
            r0.dump(r8)     // Catch:{ all -> 0x01d8 }
            com.android.server.am.OomAdjuster r0 = r9.mOomAdjuster     // Catch:{ all -> 0x01d8 }
            r0.dumpAppCompactorSettings(r8)     // Catch:{ all -> 0x01d8 }
            r22.println()     // Catch:{ all -> 0x01d8 }
            if (r15 == 0) goto L_0x0020
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r8.println(r0)     // Catch:{ all -> 0x01d8 }
        L_0x0020:
            r20.dumpAllowedAssociationsLocked(r21, r22, r23, r24, r25, r26)     // Catch:{ all -> 0x01d8 }
            r22.println()     // Catch:{ all -> 0x01d8 }
            if (r15 == 0) goto L_0x002d
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r8.println(r0)     // Catch:{ all -> 0x01d8 }
        L_0x002d:
            com.android.server.am.PendingIntentController r0 = r9.mPendingIntentController     // Catch:{ all -> 0x01d8 }
            r0.dumpPendingIntents(r8, r15, r14)     // Catch:{ all -> 0x01d8 }
            r22.println()     // Catch:{ all -> 0x01d8 }
            if (r15 == 0) goto L_0x003c
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r8.println(r0)     // Catch:{ all -> 0x01d8 }
        L_0x003c:
            r20.dumpBroadcastsLocked(r21, r22, r23, r24, r25, r26)     // Catch:{ all -> 0x01d8 }
            r22.println()     // Catch:{ all -> 0x01d8 }
            if (r15 == 0) goto L_0x0049
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r8.println(r0)     // Catch:{ all -> 0x01d8 }
        L_0x0049:
            if (r15 != 0) goto L_0x004d
            if (r14 == 0) goto L_0x005a
        L_0x004d:
            r20.dumpBroadcastStatsLocked(r21, r22, r23, r24, r25, r26)     // Catch:{ all -> 0x01d8 }
            r22.println()     // Catch:{ all -> 0x01d8 }
            if (r15 == 0) goto L_0x005a
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r8.println(r0)     // Catch:{ all -> 0x01d8 }
        L_0x005a:
            r20.dumpProvidersLocked(r21, r22, r23, r24, r25, r26)     // Catch:{ all -> 0x01d8 }
            r22.println()     // Catch:{ all -> 0x01d8 }
            if (r15 == 0) goto L_0x0067
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r8.println(r0)     // Catch:{ all -> 0x01d8 }
        L_0x0067:
            r20.dumpPermissionsLocked(r21, r22, r23, r24, r25, r26)     // Catch:{ all -> 0x01d8 }
            r22.println()     // Catch:{ all -> 0x01d8 }
            com.android.server.am.ActiveServices r1 = r9.mServices     // Catch:{ all -> 0x01d8 }
            r2 = r21
            r3 = r22
            r4 = r23
            r5 = r24
            r6 = r25
            r7 = r26
            com.android.server.am.ActiveServices$ServiceDumper r0 = r1.newServiceDumperLocked(r2, r3, r4, r5, r6, r7)     // Catch:{ all -> 0x01d8 }
            r19 = r0
            if (r27 != 0) goto L_0x008d
            if (r15 == 0) goto L_0x008a
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r8.println(r0)     // Catch:{ all -> 0x01d8 }
        L_0x008a:
            r19.dumpLocked()     // Catch:{ all -> 0x01d8 }
        L_0x008d:
            monitor-exit(r20)     // Catch:{ all -> 0x01d8 }
            resetPriorityAfterLockedSection()
            if (r27 == 0) goto L_0x009d
            if (r15 == 0) goto L_0x009a
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r8.println(r0)
        L_0x009a:
            r19.dumpWithClient()
        L_0x009d:
            if (r14 != 0) goto L_0x00ae
            r22.println()
            if (r15 == 0) goto L_0x00a9
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r8.println(r0)
        L_0x00a9:
            r0 = 6000(0x1770, float:8.408E-42)
            r9.dumpBinderProxies(r8, r0)
        L_0x00ae:
            monitor-enter(r20)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x01ce }
            r22.println()     // Catch:{ all -> 0x01ce }
            if (r15 == 0) goto L_0x00bc
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r8.println(r0)     // Catch:{ all -> 0x01ce }
        L_0x00bc:
            com.android.server.wm.ActivityTaskManagerInternal r10 = r9.mAtmInternal     // Catch:{ all -> 0x01ce }
            java.lang.String r11 = "recents"
            r12 = r21
            r13 = r22
            r7 = r14
            r14 = r23
            r15 = r24
            r16 = r25
            r17 = r27
            r18 = r26
            r10.dump(r11, r12, r13, r14, r15, r16, r17, r18)     // Catch:{ all -> 0x01ca }
            r22.println()     // Catch:{ all -> 0x01ca }
            if (r25 == 0) goto L_0x00dd
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r8.println(r0)     // Catch:{ all -> 0x01ca }
        L_0x00dd:
            com.android.server.wm.ActivityTaskManagerInternal r10 = r9.mAtmInternal     // Catch:{ all -> 0x01ca }
            java.lang.String r11 = "lastanr"
            r12 = r21
            r13 = r22
            r14 = r23
            r15 = r24
            r16 = r25
            r17 = r27
            r18 = r26
            r10.dump(r11, r12, r13, r14, r15, r16, r17, r18)     // Catch:{ all -> 0x01ca }
            r22.println()     // Catch:{ all -> 0x01ca }
            if (r25 == 0) goto L_0x00fd
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r8.println(r0)     // Catch:{ all -> 0x01ca }
        L_0x00fd:
            com.android.server.wm.ActivityTaskManagerInternal r10 = r9.mAtmInternal     // Catch:{ all -> 0x01ca }
            java.lang.String r11 = "starter"
            r12 = r21
            r13 = r22
            r14 = r23
            r15 = r24
            r16 = r25
            r17 = r27
            r18 = r26
            r10.dump(r11, r12, r13, r14, r15, r16, r17, r18)     // Catch:{ all -> 0x01ca }
            r22.println()     // Catch:{ all -> 0x01ca }
            if (r25 == 0) goto L_0x011d
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r8.println(r0)     // Catch:{ all -> 0x01ca }
        L_0x011d:
            com.android.server.wm.ActivityTaskManagerInternal r10 = r9.mAtmInternal     // Catch:{ all -> 0x01ca }
            java.lang.String r11 = "containers"
            r12 = r21
            r13 = r22
            r14 = r23
            r15 = r24
            r16 = r25
            r17 = r27
            r18 = r26
            r10.dump(r11, r12, r13, r14, r15, r16, r17, r18)     // Catch:{ all -> 0x01ca }
            if (r28 != 0) goto L_0x0153
            r22.println()     // Catch:{ all -> 0x01ca }
            if (r25 == 0) goto L_0x013e
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r8.println(r0)     // Catch:{ all -> 0x01ca }
        L_0x013e:
            com.android.server.wm.ActivityTaskManagerInternal r10 = r9.mAtmInternal     // Catch:{ all -> 0x01ca }
            java.lang.String r11 = "activities"
            r12 = r21
            r13 = r22
            r14 = r23
            r15 = r24
            r16 = r25
            r17 = r27
            r18 = r26
            r10.dump(r11, r12, r13, r14, r15, r16, r17, r18)     // Catch:{ all -> 0x01ca }
        L_0x0153:
            android.util.SparseArray<android.util.ArrayMap<android.content.ComponentName, android.util.SparseArray<android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService$Association>>>> r0 = r9.mAssociations     // Catch:{ all -> 0x01ca }
            int r0 = r0.size()     // Catch:{ all -> 0x01ca }
            if (r0 <= 0) goto L_0x017b
            r22.println()     // Catch:{ all -> 0x01ca }
            if (r25 == 0) goto L_0x0165
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r8.println(r0)     // Catch:{ all -> 0x01ca }
        L_0x0165:
            r1 = r20
            r2 = r21
            r3 = r22
            r4 = r23
            r5 = r24
            r6 = r25
            r10 = r7
            r7 = r27
            r11 = r8
            r8 = r26
            r1.dumpAssociationsLocked(r2, r3, r4, r5, r6, r7, r8)     // Catch:{ all -> 0x01d6 }
            goto L_0x017d
        L_0x017b:
            r10 = r7
            r11 = r8
        L_0x017d:
            if (r10 != 0) goto L_0x019b
            r22.println()     // Catch:{ all -> 0x01d6 }
            if (r25 == 0) goto L_0x0189
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r11.println(r0)     // Catch:{ all -> 0x01d6 }
        L_0x0189:
            com.android.server.am.OomAdjProfiler r0 = r9.mOomAdjProfiler     // Catch:{ all -> 0x01d6 }
            r0.dump(r11)     // Catch:{ all -> 0x01d6 }
            r22.println()     // Catch:{ all -> 0x01d6 }
            if (r25 == 0) goto L_0x0198
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r11.println(r0)     // Catch:{ all -> 0x01d6 }
        L_0x0198:
            r9.dumpLmkLocked(r11)     // Catch:{ all -> 0x01d6 }
        L_0x019b:
            r22.println()     // Catch:{ all -> 0x01d6 }
            if (r25 == 0) goto L_0x01a5
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r11.println(r0)     // Catch:{ all -> 0x01d6 }
        L_0x01a5:
            r9.dumpLruLocked(r11, r10)     // Catch:{ all -> 0x01d6 }
            r22.println()     // Catch:{ all -> 0x01d6 }
            if (r25 == 0) goto L_0x01b2
            java.lang.String r0 = "-------------------------------------------------------------------------------"
            r11.println(r0)     // Catch:{ all -> 0x01d6 }
        L_0x01b2:
            r1 = r20
            r2 = r21
            r3 = r22
            r4 = r23
            r5 = r24
            r6 = r25
            r7 = r26
            r8 = r29
            r1.dumpProcessesLocked(r2, r3, r4, r5, r6, r7, r8)     // Catch:{ all -> 0x01d6 }
            monitor-exit(r20)     // Catch:{ all -> 0x01d6 }
            resetPriorityAfterLockedSection()
            return
        L_0x01ca:
            r0 = move-exception
            r10 = r7
            r11 = r8
            goto L_0x01d1
        L_0x01ce:
            r0 = move-exception
            r11 = r8
            r10 = r14
        L_0x01d1:
            monitor-exit(r20)     // Catch:{ all -> 0x01d6 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x01d6:
            r0 = move-exception
            goto L_0x01d1
        L_0x01d8:
            r0 = move-exception
            r11 = r8
            r10 = r14
        L_0x01db:
            monitor-exit(r20)     // Catch:{ all -> 0x01e0 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x01e0:
            r0 = move-exception
            goto L_0x01db
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.dumpEverything(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[], int, boolean, java.lang.String, boolean, boolean, int):void");
    }

    /* JADX WARNING: type inference failed for: r2v72, types: [android.os.Binder] */
    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:153:0x02bc, code lost:
        resetPriorityAfterLockedSection();
        r12 = r8;
        r8 = r26;
        r14 = r27;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:181:0x0326, code lost:
        resetPriorityAfterLockedSection();
        r12 = r8;
        r8 = r26;
        r14 = r27;
     */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:428:0x0714  */
    /* JADX WARNING: Removed duplicated region for block: B:430:0x0718  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void doDump(java.io.FileDescriptor r29, java.io.PrintWriter r30, java.lang.String[] r31, boolean r32) {
        /*
            r28 = this;
            r11 = r28
            r12 = r29
            r13 = r30
            r10 = r31
            android.content.Context r0 = r11.mContext
            java.lang.String r1 = "ActivityManager"
            boolean r0 = com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(r0, r1, r13)
            if (r0 != 0) goto L_0x0013
            return
        L_0x0013:
            r0 = 0
            r1 = 0
            r2 = 0
            r3 = 0
            r4 = 0
            r5 = 0
            r6 = 0
            r7 = 0
            r8 = 0
            r15 = r0
            r16 = r1
            r17 = r2
            r18 = r3
            r19 = r4
            r20 = r5
            r21 = r6
            r14 = r7
        L_0x002a:
            int r0 = r10.length
            r1 = 0
            r9 = 1
            if (r8 >= r0) goto L_0x00d7
            r0 = r10[r8]
            if (r0 == 0) goto L_0x00d7
            int r2 = r0.length()
            if (r2 <= 0) goto L_0x00d7
            char r2 = r0.charAt(r1)
            r3 = 45
            if (r2 == r3) goto L_0x0043
            goto L_0x00d7
        L_0x0043:
            int r8 = r8 + 1
            java.lang.String r1 = "-a"
            boolean r1 = r1.equals(r0)
            if (r1 == 0) goto L_0x0050
            r15 = 1
            goto L_0x00d5
        L_0x0050:
            java.lang.String r1 = "-c"
            boolean r1 = r1.equals(r0)
            if (r1 == 0) goto L_0x005c
            r16 = 1
            goto L_0x00d5
        L_0x005c:
            java.lang.String r1 = "-v"
            boolean r1 = r1.equals(r0)
            if (r1 == 0) goto L_0x0068
            r20 = 1
            goto L_0x00d5
        L_0x0068:
            java.lang.String r1 = "-f"
            boolean r1 = r1.equals(r0)
            if (r1 == 0) goto L_0x0073
            r21 = 1
            goto L_0x00d5
        L_0x0073:
            java.lang.String r1 = "-p"
            boolean r1 = r1.equals(r0)
            if (r1 == 0) goto L_0x008b
            int r1 = r10.length
            if (r8 >= r1) goto L_0x0085
            r14 = r10[r8]
            int r8 = r8 + 1
            r16 = 1
            goto L_0x00d5
        L_0x0085:
            java.lang.String r1 = "Error: -p option requires package argument"
            r13.println(r1)
            return
        L_0x008b:
            java.lang.String r1 = "--checkin"
            boolean r1 = r1.equals(r0)
            if (r1 == 0) goto L_0x0099
            r1 = r9
            r17 = r9
            r18 = r1
            goto L_0x00d5
        L_0x0099:
            java.lang.String r1 = "-C"
            boolean r1 = r1.equals(r0)
            if (r1 == 0) goto L_0x00a5
            r1 = 1
            r18 = r1
            goto L_0x00d5
        L_0x00a5:
            java.lang.String r1 = "--normal-priority"
            boolean r1 = r1.equals(r0)
            if (r1 == 0) goto L_0x00b0
            r19 = 1
            goto L_0x00d5
        L_0x00b0:
            java.lang.String r1 = "-h"
            boolean r1 = r1.equals(r0)
            if (r1 == 0) goto L_0x00bc
            com.android.server.am.ActivityManagerShellCommand.dumpHelp(r13, r9)
            return
        L_0x00bc:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "Unknown argument: "
            r1.append(r2)
            r1.append(r0)
            java.lang.String r2 = "; use -h for help"
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r13.println(r1)
        L_0x00d5:
            goto L_0x002a
        L_0x00d7:
            long r22 = android.os.Binder.clearCallingIdentity()
            r0 = 2
            if (r32 == 0) goto L_0x020a
            android.util.proto.ProtoOutputStream r2 = new android.util.proto.ProtoOutputStream
            r2.<init>(r12)
            int r3 = r10.length
            if (r8 >= r3) goto L_0x00e9
            r3 = r10[r8]
            goto L_0x00eb
        L_0x00e9:
            java.lang.String r3 = ""
        L_0x00eb:
            int r8 = r8 + r9
            java.lang.String r4 = "activities"
            boolean r4 = r4.equals(r3)
            if (r4 != 0) goto L_0x01fe
            java.lang.String r4 = "a"
            boolean r4 = r4.equals(r3)
            if (r4 == 0) goto L_0x00fe
            goto L_0x01fe
        L_0x00fe:
            java.lang.String r4 = "broadcasts"
            boolean r4 = r4.equals(r3)
            if (r4 != 0) goto L_0x01ec
            java.lang.String r4 = "b"
            boolean r4 = r4.equals(r3)
            if (r4 == 0) goto L_0x0110
            goto L_0x01ec
        L_0x0110:
            java.lang.String r4 = "provider"
            boolean r4 = r4.equals(r3)
            if (r4 == 0) goto L_0x0153
            int r4 = r10.length
            if (r8 < r4) goto L_0x0120
            r0 = 0
            java.lang.String[] r1 = EMPTY_STRING_ARRAY
            goto L_0x0132
        L_0x0120:
            r4 = r10[r8]
            int r8 = r8 + 1
            int r5 = r10.length
            int r5 = r5 - r8
            java.lang.String[] r5 = new java.lang.String[r5]
            int r6 = r10.length
            if (r6 <= r0) goto L_0x0130
            int r0 = r10.length
            int r0 = r0 - r8
            java.lang.System.arraycopy(r10, r8, r5, r1, r0)
        L_0x0130:
            r0 = r4
            r1 = r5
        L_0x0132:
            boolean r4 = r11.dumpProviderProto(r12, r13, r0, r1)
            if (r4 != 0) goto L_0x0151
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            r4.<init>()
            java.lang.String r5 = "No providers match: "
            r4.append(r5)
            r4.append(r0)
            java.lang.String r4 = r4.toString()
            r13.println(r4)
            java.lang.String r4 = "Use -h for help."
            r13.println(r4)
        L_0x0151:
            goto L_0x0203
        L_0x0153:
            java.lang.String r0 = "service"
            boolean r0 = r0.equals(r3)
            r4 = 1146756268033(0x10b00000001, double:5.66572876188E-312)
            if (r0 == 0) goto L_0x0168
            com.android.server.am.ActiveServices r0 = r11.mServices
            r0.writeToProto(r2, r4)
            goto L_0x0203
        L_0x0168:
            java.lang.String r0 = "processes"
            boolean r0 = r0.equals(r3)
            if (r0 != 0) goto L_0x01cc
            java.lang.String r0 = "p"
            boolean r0 = r0.equals(r3)
            if (r0 == 0) goto L_0x017b
            goto L_0x01cc
        L_0x017b:
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x01c6 }
            long r0 = r2.start(r4)     // Catch:{ all -> 0x01c6 }
            com.android.server.wm.ActivityTaskManagerInternal r6 = r11.mAtmInternal     // Catch:{ all -> 0x01c6 }
            r6.writeActivitiesToProto(r2)     // Catch:{ all -> 0x01c6 }
            r2.end(r0)     // Catch:{ all -> 0x01c6 }
            r6 = 1146756268034(0x10b00000002, double:5.665728761887E-312)
            long r6 = r2.start(r6)     // Catch:{ all -> 0x01c6 }
            r11.writeBroadcastsToProtoLocked(r2)     // Catch:{ all -> 0x01c6 }
            r2.end(r6)     // Catch:{ all -> 0x01c6 }
            r4 = 1146756268035(0x10b00000003, double:5.66572876189E-312)
            long r4 = r2.start(r4)     // Catch:{ all -> 0x01c6 }
            com.android.server.am.ActiveServices r9 = r11.mServices     // Catch:{ all -> 0x01c6 }
            r26 = r0
            r0 = 1146756268033(0x10b00000001, double:5.66572876188E-312)
            r9.writeToProto(r2, r0)     // Catch:{ all -> 0x01c6 }
            r2.end(r4)     // Catch:{ all -> 0x01c6 }
            r0 = 1146756268036(0x10b00000004, double:5.665728761897E-312)
            long r0 = r2.start(r0)     // Catch:{ all -> 0x01c6 }
            r11.writeProcessesToProtoLocked(r2, r14)     // Catch:{ all -> 0x01c6 }
            r2.end(r0)     // Catch:{ all -> 0x01c6 }
            monitor-exit(r28)     // Catch:{ all -> 0x01c6 }
            resetPriorityAfterLockedSection()
            goto L_0x0203
        L_0x01c6:
            r0 = move-exception
            monitor-exit(r28)     // Catch:{ all -> 0x01c6 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x01cc:
            int r0 = r10.length
            if (r8 >= r0) goto L_0x01d6
            r14 = r10[r8]
            int r8 = r8 + 1
            r4 = r8
            r1 = r14
            goto L_0x01d8
        L_0x01d6:
            r4 = r8
            r1 = r14
        L_0x01d8:
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x01e6 }
            r11.writeProcessesToProtoLocked(r2, r1)     // Catch:{ all -> 0x01e6 }
            monitor-exit(r28)     // Catch:{ all -> 0x01e6 }
            resetPriorityAfterLockedSection()
            r14 = r1
            r8 = r4
            goto L_0x0203
        L_0x01e6:
            r0 = move-exception
            monitor-exit(r28)     // Catch:{ all -> 0x01e6 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x01ec:
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x01f8 }
            r11.writeBroadcastsToProtoLocked(r2)     // Catch:{ all -> 0x01f8 }
            monitor-exit(r28)     // Catch:{ all -> 0x01f8 }
            resetPriorityAfterLockedSection()
            goto L_0x0203
        L_0x01f8:
            r0 = move-exception
            monitor-exit(r28)     // Catch:{ all -> 0x01f8 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x01fe:
            com.android.server.wm.ActivityTaskManagerInternal r0 = r11.mAtmInternal
            r0.writeActivitiesToProto(r2)
        L_0x0203:
            r2.flush()
            android.os.Binder.restoreCallingIdentity(r22)
            return
        L_0x020a:
            int r24 = r11.getAppId(r14)
            r25 = 0
            int r2 = r10.length
            if (r8 >= r2) goto L_0x071f
            r7 = r10[r8]
            int r8 = r8 + 1
            java.lang.String r2 = "activities"
            boolean r2 = r2.equals(r7)
            if (r2 != 0) goto L_0x06fb
            java.lang.String r2 = "a"
            boolean r2 = r2.equals(r7)
            if (r2 != 0) goto L_0x06fb
            java.lang.String r2 = "lastanr"
            boolean r2 = r2.equals(r7)
            if (r2 != 0) goto L_0x06f8
            java.lang.String r2 = "lastanr-traces"
            boolean r2 = r2.equals(r7)
            if (r2 != 0) goto L_0x06f8
            java.lang.String r2 = "starter"
            boolean r2 = r2.equals(r7)
            if (r2 != 0) goto L_0x06f5
            java.lang.String r2 = "containers"
            boolean r2 = r2.equals(r7)
            if (r2 != 0) goto L_0x06f5
            java.lang.String r2 = "recents"
            boolean r2 = r2.equals(r7)
            if (r2 != 0) goto L_0x06f2
            java.lang.String r2 = "r"
            boolean r2 = r2.equals(r7)
            if (r2 == 0) goto L_0x0260
            r12 = r7
            r9 = r8
            goto L_0x06fd
        L_0x0260:
            java.lang.String r2 = "binder-proxies"
            boolean r2 = r2.equals(r7)
            if (r2 == 0) goto L_0x028e
            int r0 = r10.length
            if (r8 < r0) goto L_0x0273
            r11.dumpBinderProxies(r13, r1)
            r12 = r7
            r26 = r8
            goto L_0x0710
        L_0x0273:
            r0 = r10[r8]
            int r8 = r8 + 1
            java.lang.System.gc()
            java.lang.System.runFinalization()
            java.lang.System.gc()
            int r1 = java.lang.Integer.parseInt(r0)
            int r1 = com.android.internal.os.BinderInternal.nGetBinderProxyCount(r1)
            r13.println(r1)
            r12 = r7
            goto L_0x0712
        L_0x028e:
            java.lang.String r2 = "allowed-associations"
            boolean r2 = r2.equals(r7)
            if (r2 == 0) goto L_0x02cf
            int r0 = r10.length
            if (r8 >= r0) goto L_0x02a2
            r0 = r10[r8]
            int r8 = r8 + 1
            r27 = r0
            r26 = r8
            goto L_0x02a6
        L_0x02a2:
            r26 = r8
            r27 = r14
        L_0x02a6:
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x02c8 }
            r6 = 1
            r1 = r28
            r2 = r29
            r3 = r30
            r4 = r31
            r5 = r26
            r8 = r7
            r7 = r27
            r1.dumpAllowedAssociationsLocked(r2, r3, r4, r5, r6, r7)     // Catch:{ all -> 0x02c6 }
            monitor-exit(r28)     // Catch:{ all -> 0x02c6 }
            resetPriorityAfterLockedSection()
            r12 = r8
            r8 = r26
            r14 = r27
            goto L_0x0712
        L_0x02c6:
            r0 = move-exception
            goto L_0x02ca
        L_0x02c8:
            r0 = move-exception
            r8 = r7
        L_0x02ca:
            monitor-exit(r28)     // Catch:{ all -> 0x02c6 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x02cf:
            java.lang.String r2 = "broadcasts"
            boolean r2 = r2.equals(r7)
            if (r2 != 0) goto L_0x06c3
            java.lang.String r2 = "b"
            boolean r2 = r2.equals(r7)
            if (r2 == 0) goto L_0x02e3
            r12 = r7
            r9 = r8
            goto L_0x06c5
        L_0x02e3:
            java.lang.String r2 = "broadcast-stats"
            boolean r2 = r2.equals(r7)
            if (r2 == 0) goto L_0x0339
            int r0 = r10.length
            if (r8 >= r0) goto L_0x02f7
            r0 = r10[r8]
            int r8 = r8 + 1
            r27 = r0
            r26 = r8
            goto L_0x02fb
        L_0x02f7:
            r26 = r8
            r27 = r14
        L_0x02fb:
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0330 }
            if (r18 == 0) goto L_0x0314
            r1 = r28
            r2 = r29
            r3 = r30
            r4 = r31
            r5 = r26
            r6 = r17
            r8 = r7
            r7 = r27
            r1.dumpBroadcastStatsCheckinLocked(r2, r3, r4, r5, r6, r7)     // Catch:{ all -> 0x0337 }
            goto L_0x0325
        L_0x0314:
            r8 = r7
            r6 = 1
            r1 = r28
            r2 = r29
            r3 = r30
            r4 = r31
            r5 = r26
            r7 = r27
            r1.dumpBroadcastStatsLocked(r2, r3, r4, r5, r6, r7)     // Catch:{ all -> 0x0337 }
        L_0x0325:
            monitor-exit(r28)     // Catch:{ all -> 0x0337 }
            resetPriorityAfterLockedSection()
            r12 = r8
            r8 = r26
            r14 = r27
            goto L_0x0712
        L_0x0330:
            r0 = move-exception
            r8 = r7
        L_0x0332:
            monitor-exit(r28)     // Catch:{ all -> 0x0337 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0337:
            r0 = move-exception
            goto L_0x0332
        L_0x0339:
            java.lang.String r2 = "intents"
            boolean r2 = r2.equals(r7)
            if (r2 != 0) goto L_0x069f
            java.lang.String r2 = "i"
            boolean r2 = r2.equals(r7)
            if (r2 == 0) goto L_0x0350
            r12 = r7
            r0 = r9
            r9 = r8
            goto L_0x06a2
        L_0x0350:
            java.lang.String r2 = "processes"
            boolean r2 = r2.equals(r7)
            if (r2 != 0) goto L_0x0664
            java.lang.String r2 = "p"
            boolean r2 = r2.equals(r7)
            if (r2 == 0) goto L_0x0367
            r12 = r7
            r26 = r8
            goto L_0x0667
        L_0x0367:
            java.lang.String r2 = "oom"
            boolean r2 = r2.equals(r7)
            if (r2 != 0) goto L_0x0643
            java.lang.String r2 = "o"
            boolean r2 = r2.equals(r7)
            if (r2 == 0) goto L_0x037e
            r12 = r7
            r26 = r8
            goto L_0x0646
        L_0x037e:
            java.lang.String r2 = "lmk"
            boolean r2 = r2.equals(r7)
            if (r2 == 0) goto L_0x039d
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0397 }
            r11.dumpLmkLocked(r13)     // Catch:{ all -> 0x0397 }
            monitor-exit(r28)     // Catch:{ all -> 0x0397 }
            resetPriorityAfterLockedSection()
            r12 = r7
            r26 = r8
            goto L_0x0710
        L_0x0397:
            r0 = move-exception
            monitor-exit(r28)     // Catch:{ all -> 0x0397 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x039d:
            java.lang.String r2 = "lru"
            boolean r2 = r2.equals(r7)
            r6 = 0
            if (r2 == 0) goto L_0x03bd
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x03b7 }
            r11.dumpLruLocked(r13, r6)     // Catch:{ all -> 0x03b7 }
            monitor-exit(r28)     // Catch:{ all -> 0x03b7 }
            resetPriorityAfterLockedSection()
            r12 = r7
            r26 = r8
            goto L_0x0710
        L_0x03b7:
            r0 = move-exception
            monitor-exit(r28)     // Catch:{ all -> 0x03b7 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x03bd:
            java.lang.String r2 = "permissions"
            boolean r2 = r2.equals(r7)
            if (r2 != 0) goto L_0x0621
            java.lang.String r2 = "perm"
            boolean r2 = r2.equals(r7)
            if (r2 == 0) goto L_0x03d4
            r12 = r7
            r26 = r8
            goto L_0x0624
        L_0x03d4:
            java.lang.String r2 = "provider"
            boolean r2 = r2.equals(r7)
            if (r2 == 0) goto L_0x0426
            int r2 = r10.length
            if (r8 < r2) goto L_0x03e6
            r0 = 0
            java.lang.String[] r1 = EMPTY_STRING_ARRAY
            r9 = r8
            r8 = r1
            goto L_0x03f9
        L_0x03e6:
            r2 = r10[r8]
            int r8 = r8 + 1
            int r3 = r10.length
            int r3 = r3 - r8
            java.lang.String[] r3 = new java.lang.String[r3]
            int r4 = r10.length
            if (r4 <= r0) goto L_0x03f6
            int r0 = r10.length
            int r0 = r0 - r8
            java.lang.System.arraycopy(r10, r8, r3, r1, r0)
        L_0x03f6:
            r0 = r2
            r9 = r8
            r8 = r3
        L_0x03f9:
            r6 = 0
            r1 = r28
            r2 = r29
            r3 = r30
            r4 = r0
            r5 = r8
            r12 = r7
            r7 = r15
            boolean r1 = r1.dumpProvider(r2, r3, r4, r5, r6, r7)
            if (r1 != 0) goto L_0x0423
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "No providers match: "
            r1.append(r2)
            r1.append(r0)
            java.lang.String r1 = r1.toString()
            r13.println(r1)
            java.lang.String r1 = "Use -h for help."
            r13.println(r1)
        L_0x0423:
            r8 = r9
            goto L_0x0712
        L_0x0426:
            r12 = r7
            java.lang.String r2 = "providers"
            boolean r2 = r2.equals(r12)
            if (r2 != 0) goto L_0x0600
            java.lang.String r2 = "prov"
            boolean r2 = r2.equals(r12)
            if (r2 == 0) goto L_0x043d
            r26 = r8
            goto L_0x0602
        L_0x043d:
            java.lang.String r2 = "service"
            boolean r2 = r2.equals(r12)
            if (r2 == 0) goto L_0x048e
            int r2 = r10.length
            if (r8 < r2) goto L_0x044f
            r0 = 0
            java.lang.String[] r1 = EMPTY_STRING_ARRAY
            r9 = r8
            r8 = r1
            goto L_0x0462
        L_0x044f:
            r2 = r10[r8]
            int r8 = r8 + 1
            int r3 = r10.length
            int r3 = r3 - r8
            java.lang.String[] r3 = new java.lang.String[r3]
            int r4 = r10.length
            if (r4 <= r0) goto L_0x045f
            int r0 = r10.length
            int r0 = r0 - r8
            java.lang.System.arraycopy(r10, r8, r3, r1, r0)
        L_0x045f:
            r0 = r2
            r9 = r8
            r8 = r3
        L_0x0462:
            com.android.server.am.ActiveServices r1 = r11.mServices
            r6 = 0
            r2 = r29
            r3 = r30
            r4 = r0
            r5 = r8
            r7 = r15
            boolean r1 = r1.dumpService((java.io.FileDescriptor) r2, (java.io.PrintWriter) r3, (java.lang.String) r4, (java.lang.String[]) r5, (int) r6, (boolean) r7)
            if (r1 != 0) goto L_0x048b
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "No services match: "
            r1.append(r2)
            r1.append(r0)
            java.lang.String r1 = r1.toString()
            r13.println(r1)
            java.lang.String r1 = "Use -h for help."
            r13.println(r1)
        L_0x048b:
            r8 = r9
            goto L_0x0712
        L_0x048e:
            java.lang.String r2 = "package"
            boolean r2 = r2.equals(r12)
            if (r2 == 0) goto L_0x04be
            int r2 = r10.length
            if (r8 < r2) goto L_0x04a7
            java.lang.String r0 = "package: no package name specified"
            r13.println(r0)
            java.lang.String r0 = "Use -h for help."
            r13.println(r0)
            r0 = r10
            goto L_0x04bb
        L_0x04a7:
            r14 = r10[r8]
            int r8 = r8 + 1
            int r2 = r10.length
            int r2 = r2 - r8
            java.lang.String[] r2 = new java.lang.String[r2]
            int r3 = r10.length
            if (r3 <= r0) goto L_0x04b7
            int r0 = r10.length
            int r0 = r0 - r8
            java.lang.System.arraycopy(r10, r8, r2, r1, r0)
        L_0x04b7:
            r0 = r2
            r8 = 0
            r25 = 1
        L_0x04bb:
            r10 = r0
            goto L_0x0712
        L_0x04be:
            java.lang.String r0 = "associations"
            boolean r0 = r0.equals(r12)
            if (r0 != 0) goto L_0x05dd
            java.lang.String r0 = "as"
            boolean r0 = r0.equals(r12)
            if (r0 == 0) goto L_0x04d2
            r26 = r8
            goto L_0x05df
        L_0x04d2:
            java.lang.String r0 = "loopers"
            boolean r0 = r0.equals(r12)
            if (r0 == 0) goto L_0x04fb
            java.lang.String r0 = "ACTIVITY MANAGER LOOPERS (dumpsys activity loopers)"
            r13.println(r0)
            com.android.server.am.ActivityManagerService$MainHandler r0 = r11.mHandler
            android.os.Looper r0 = r0.getLooper()
            if (r0 == 0) goto L_0x04f7
            com.android.server.am.ActivityManagerService$MainHandler r0 = r11.mHandler
            android.os.Looper r0 = r0.getLooper()
            java.lang.String r1 = "  "
            r0.dumpAllLoopers(r13, r1)
            r26 = r8
            goto L_0x0710
        L_0x04f7:
            r26 = r8
            goto L_0x0710
        L_0x04fb:
            java.lang.String r0 = "settings"
            boolean r0 = r0.equals(r12)
            if (r0 == 0) goto L_0x0520
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x051a }
            com.android.server.am.ActivityManagerConstants r0 = r11.mConstants     // Catch:{ all -> 0x051a }
            r0.dump(r13)     // Catch:{ all -> 0x051a }
            com.android.server.am.OomAdjuster r0 = r11.mOomAdjuster     // Catch:{ all -> 0x051a }
            r0.dumpAppCompactorSettings(r13)     // Catch:{ all -> 0x051a }
            monitor-exit(r28)     // Catch:{ all -> 0x051a }
            resetPriorityAfterLockedSection()
            r26 = r8
            goto L_0x0710
        L_0x051a:
            r0 = move-exception
            monitor-exit(r28)     // Catch:{ all -> 0x051a }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0520:
            java.lang.String r0 = "services"
            boolean r0 = r0.equals(r12)
            if (r0 != 0) goto L_0x0593
            java.lang.String r0 = "s"
            boolean r0 = r0.equals(r12)
            if (r0 == 0) goto L_0x0535
            r26 = r8
            goto L_0x0595
        L_0x0535:
            java.lang.String r0 = "locks"
            boolean r0 = r0.equals(r12)
            if (r0 == 0) goto L_0x0545
            com.android.server.LockGuard.dump(r29, r30, r31)
            r26 = r8
            goto L_0x0710
        L_0x0545:
            com.android.server.wm.ActivityTaskManagerInternal r1 = r11.mAtmInternal
            r2 = r29
            r3 = r30
            r4 = r12
            r5 = r31
            r0 = r6
            r6 = r8
            r7 = r15
            r26 = r8
            r8 = r20
            r0 = r9
            r9 = r21
            boolean r1 = r1.dumpActivity(r2, r3, r4, r5, r6, r7, r8, r9)
            if (r1 != 0) goto L_0x0710
            com.android.server.am.ActivityManagerShellCommand r1 = new com.android.server.am.ActivityManagerShellCommand
            r1.<init>(r11, r0)
            r3 = 0
            r5 = 0
            r7 = 0
            android.os.ResultReceiver r8 = new android.os.ResultReceiver
            r0 = 0
            r8.<init>(r0)
            r2 = r28
            r4 = r29
            r6 = r31
            int r0 = r1.exec(r2, r3, r4, r5, r6, r7, r8)
            if (r0 >= 0) goto L_0x0710
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r3 = "Bad activity command, or no activities match: "
            r2.append(r3)
            r2.append(r12)
            java.lang.String r2 = r2.toString()
            r13.println(r2)
            java.lang.String r2 = "Use -h for help."
            r13.println(r2)
            goto L_0x0710
        L_0x0593:
            r26 = r8
        L_0x0595:
            if (r16 == 0) goto L_0x05ba
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x05b4 }
            com.android.server.am.ActiveServices r1 = r11.mServices     // Catch:{ all -> 0x05b4 }
            r6 = 1
            r2 = r29
            r3 = r30
            r4 = r31
            r5 = r26
            r7 = r14
            com.android.server.am.ActiveServices$ServiceDumper r0 = r1.newServiceDumperLocked(r2, r3, r4, r5, r6, r7)     // Catch:{ all -> 0x05b4 }
            monitor-exit(r28)     // Catch:{ all -> 0x05b4 }
            resetPriorityAfterLockedSection()
            r0.dumpWithClient()
            goto L_0x0710
        L_0x05b4:
            r0 = move-exception
            monitor-exit(r28)     // Catch:{ all -> 0x05b4 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x05ba:
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x05d7 }
            com.android.server.am.ActiveServices r1 = r11.mServices     // Catch:{ all -> 0x05d7 }
            r6 = 1
            r2 = r29
            r3 = r30
            r4 = r31
            r5 = r26
            r7 = r14
            com.android.server.am.ActiveServices$ServiceDumper r0 = r1.newServiceDumperLocked(r2, r3, r4, r5, r6, r7)     // Catch:{ all -> 0x05d7 }
            r0.dumpLocked()     // Catch:{ all -> 0x05d7 }
            monitor-exit(r28)     // Catch:{ all -> 0x05d7 }
            resetPriorityAfterLockedSection()
            goto L_0x0710
        L_0x05d7:
            r0 = move-exception
            monitor-exit(r28)     // Catch:{ all -> 0x05d7 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x05dd:
            r26 = r8
        L_0x05df:
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x05fa }
            r6 = 1
            r1 = r28
            r2 = r29
            r3 = r30
            r4 = r31
            r5 = r26
            r7 = r16
            r8 = r14
            r1.dumpAssociationsLocked(r2, r3, r4, r5, r6, r7, r8)     // Catch:{ all -> 0x05fa }
            monitor-exit(r28)     // Catch:{ all -> 0x05fa }
            resetPriorityAfterLockedSection()
            goto L_0x0710
        L_0x05fa:
            r0 = move-exception
            monitor-exit(r28)     // Catch:{ all -> 0x05fa }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0600:
            r26 = r8
        L_0x0602:
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x061b }
            r6 = 1
            r7 = 0
            r1 = r28
            r2 = r29
            r3 = r30
            r4 = r31
            r5 = r26
            r1.dumpProvidersLocked(r2, r3, r4, r5, r6, r7)     // Catch:{ all -> 0x061b }
            monitor-exit(r28)     // Catch:{ all -> 0x061b }
            resetPriorityAfterLockedSection()
            goto L_0x0710
        L_0x061b:
            r0 = move-exception
            monitor-exit(r28)     // Catch:{ all -> 0x061b }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0621:
            r12 = r7
            r26 = r8
        L_0x0624:
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x063d }
            r6 = 1
            r7 = 0
            r1 = r28
            r2 = r29
            r3 = r30
            r4 = r31
            r5 = r26
            r1.dumpPermissionsLocked(r2, r3, r4, r5, r6, r7)     // Catch:{ all -> 0x063d }
            monitor-exit(r28)     // Catch:{ all -> 0x063d }
            resetPriorityAfterLockedSection()
            goto L_0x0710
        L_0x063d:
            r0 = move-exception
            monitor-exit(r28)     // Catch:{ all -> 0x063d }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0643:
            r12 = r7
            r26 = r8
        L_0x0646:
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x065e }
            r6 = 1
            r1 = r28
            r2 = r29
            r3 = r30
            r4 = r31
            r5 = r26
            r1.dumpOomLocked(r2, r3, r4, r5, r6)     // Catch:{ all -> 0x065e }
            monitor-exit(r28)     // Catch:{ all -> 0x065e }
            resetPriorityAfterLockedSection()
            goto L_0x0710
        L_0x065e:
            r0 = move-exception
            monitor-exit(r28)     // Catch:{ all -> 0x065e }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0664:
            r12 = r7
            r26 = r8
        L_0x0667:
            int r0 = r10.length
            r9 = r26
            if (r9 >= r0) goto L_0x0675
            r0 = r10[r9]
            int r8 = r9 + 1
            r27 = r0
            r26 = r8
            goto L_0x0679
        L_0x0675:
            r26 = r9
            r27 = r14
        L_0x0679:
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0699 }
            r6 = 1
            r1 = r28
            r2 = r29
            r3 = r30
            r4 = r31
            r5 = r26
            r7 = r27
            r8 = r24
            r1.dumpProcessesLocked(r2, r3, r4, r5, r6, r7, r8)     // Catch:{ all -> 0x0699 }
            monitor-exit(r28)     // Catch:{ all -> 0x0699 }
            resetPriorityAfterLockedSection()
            r8 = r26
            r14 = r27
            goto L_0x0712
        L_0x0699:
            r0 = move-exception
            monitor-exit(r28)     // Catch:{ all -> 0x0699 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x069f:
            r12 = r7
            r0 = r9
            r9 = r8
        L_0x06a2:
            int r1 = r10.length
            if (r9 >= r1) goto L_0x06ab
            r14 = r10[r9]
            int r8 = r9 + 1
            r1 = r14
            goto L_0x06ad
        L_0x06ab:
            r8 = r9
            r1 = r14
        L_0x06ad:
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x06bd }
            com.android.server.am.PendingIntentController r2 = r11.mPendingIntentController     // Catch:{ all -> 0x06bd }
            r2.dumpPendingIntents(r13, r0, r1)     // Catch:{ all -> 0x06bd }
            monitor-exit(r28)     // Catch:{ all -> 0x06bd }
            resetPriorityAfterLockedSection()
            r14 = r1
            goto L_0x0712
        L_0x06bd:
            r0 = move-exception
            monitor-exit(r28)     // Catch:{ all -> 0x06bd }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x06c3:
            r12 = r7
            r9 = r8
        L_0x06c5:
            int r0 = r10.length
            if (r9 >= r0) goto L_0x06cf
            r0 = r10[r9]
            int r8 = r9 + 1
            r26 = r0
            goto L_0x06d2
        L_0x06cf:
            r8 = r9
            r26 = r14
        L_0x06d2:
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x06ec }
            r6 = 1
            r1 = r28
            r2 = r29
            r3 = r30
            r4 = r31
            r5 = r8
            r7 = r26
            r1.dumpBroadcastsLocked(r2, r3, r4, r5, r6, r7)     // Catch:{ all -> 0x06ec }
            monitor-exit(r28)     // Catch:{ all -> 0x06ec }
            resetPriorityAfterLockedSection()
            r14 = r26
            goto L_0x0712
        L_0x06ec:
            r0 = move-exception
            monitor-exit(r28)     // Catch:{ all -> 0x06ec }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x06f2:
            r12 = r7
            r9 = r8
            goto L_0x06fd
        L_0x06f5:
            r12 = r7
            r9 = r8
            goto L_0x06fd
        L_0x06f8:
            r12 = r7
            r9 = r8
            goto L_0x06fd
        L_0x06fb:
            r12 = r7
            r9 = r8
        L_0x06fd:
            com.android.server.wm.ActivityTaskManagerInternal r1 = r11.mAtmInternal
            r7 = 1
            r2 = r12
            r3 = r29
            r4 = r30
            r5 = r31
            r6 = r9
            r8 = r16
            r26 = r9
            r9 = r14
            r1.dump(r2, r3, r4, r5, r6, r7, r8, r9)
        L_0x0710:
            r8 = r26
        L_0x0712:
            if (r25 != 0) goto L_0x0718
            android.os.Binder.restoreCallingIdentity(r22)
            return
        L_0x0718:
            r12 = r10
            r26 = r25
            r25 = r14
            r14 = r8
            goto L_0x0725
        L_0x071f:
            r12 = r10
            r26 = r25
            r25 = r14
            r14 = r8
        L_0x0725:
            if (r18 == 0) goto L_0x0737
            r1 = r28
            r2 = r29
            r3 = r30
            r4 = r12
            r5 = r14
            r6 = r17
            r7 = r25
            r1.dumpBroadcastStatsCheckinLocked(r2, r3, r4, r5, r6, r7)
            goto L_0x0782
        L_0x0737:
            if (r16 == 0) goto L_0x074e
            r1 = r28
            r2 = r29
            r3 = r30
            r4 = r12
            r5 = r14
            r6 = r15
            r7 = r25
            r8 = r16
            r9 = r19
            r10 = r24
            r1.dumpEverything(r2, r3, r4, r5, r6, r7, r8, r9, r10)
            goto L_0x076a
        L_0x074e:
            monitor-enter(r28)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0786 }
            r1 = r28
            r2 = r29
            r3 = r30
            r4 = r12
            r5 = r14
            r6 = r15
            r7 = r25
            r8 = r16
            r9 = r19
            r10 = r24
            r1.dumpEverything(r2, r3, r4, r5, r6, r7, r8, r9, r10)     // Catch:{ all -> 0x0786 }
            monitor-exit(r28)     // Catch:{ all -> 0x0786 }
            resetPriorityAfterLockedSection()
        L_0x076a:
            java.lang.String r0 = "ACTIVITY MANAGER LOOPERS (dumpsys activity loopers)"
            r13.println(r0)
            com.android.server.am.ActivityManagerService$MainHandler r0 = r11.mHandler
            android.os.Looper r0 = r0.getLooper()
            if (r0 == 0) goto L_0x0782
            com.android.server.am.ActivityManagerService$MainHandler r0 = r11.mHandler
            android.os.Looper r0 = r0.getLooper()
            java.lang.String r1 = "  "
            r0.dumpAllLoopers(r13, r1)
        L_0x0782:
            android.os.Binder.restoreCallingIdentity(r22)
            return
        L_0x0786:
            r0 = move-exception
            monitor-exit(r28)     // Catch:{ all -> 0x0786 }
            resetPriorityAfterLockedSection()
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.doDump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[], boolean):void");
    }

    /* access modifiers changed from: package-private */
    public void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, boolean dumpClient, String dumpPackage) {
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents;
        int N1;
        int dumpUid;
        ArrayMap<String, Association> sourceProcesses;
        ActivityManagerService activityManagerService = this;
        PrintWriter printWriter = pw;
        String str = dumpPackage;
        printWriter.println("ACTIVITY MANAGER ASSOCIATIONS (dumpsys activity associations)");
        int dumpUid2 = 0;
        int i = false;
        if (str != null) {
            try {
                dumpUid2 = AppGlobals.getPackageManager().getPackageUid(str, DumpState.DUMP_CHANGES, 0);
            } catch (RemoteException e) {
            }
        }
        boolean printedAnything = false;
        long now = SystemClock.uptimeMillis();
        int i1 = 0;
        int N12 = activityManagerService.mAssociations.size();
        while (i1 < N12) {
            ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents2 = activityManagerService.mAssociations.valueAt(i1);
            int i2 = 0;
            int N2 = targetComponents2.size();
            while (i2 < N2) {
                SparseArray<ArrayMap<String, Association>> sourceUids = targetComponents2.valueAt(i2);
                int i3 = 0;
                int N3 = sourceUids.size();
                while (i3 < N3) {
                    ArrayMap<String, Association> sourceProcesses2 = sourceUids.valueAt(i3);
                    boolean printedAnything2 = printedAnything;
                    int N4 = sourceProcesses2.size();
                    int i4 = 0;
                    while (i4 < N4) {
                        int N42 = N4;
                        Association ass = sourceProcesses2.valueAt(i4);
                        if (str != null) {
                            sourceProcesses = sourceProcesses2;
                            if (!ass.mTargetComponent.getPackageName().equals(str) && UserHandle.getAppId(ass.mSourceUid) != dumpUid2) {
                                dumpUid = dumpUid2;
                                N1 = N12;
                                targetComponents = targetComponents2;
                                i4++;
                                str = dumpPackage;
                                sourceProcesses2 = sourceProcesses;
                                N4 = N42;
                                dumpUid2 = dumpUid;
                                N12 = N1;
                                targetComponents2 = targetComponents;
                            }
                        } else {
                            sourceProcesses = sourceProcesses2;
                        }
                        printedAnything2 = true;
                        printWriter.print("  ");
                        printWriter.print(ass.mTargetProcess);
                        printWriter.print(SliceClientPermissions.SliceAuthority.DELIMITER);
                        dumpUid = dumpUid2;
                        UserHandle.formatUid(printWriter, ass.mTargetUid);
                        printWriter.print(" <- ");
                        printWriter.print(ass.mSourceProcess);
                        printWriter.print(SliceClientPermissions.SliceAuthority.DELIMITER);
                        UserHandle.formatUid(printWriter, ass.mSourceUid);
                        pw.println();
                        printWriter.print("    via ");
                        printWriter.print(ass.mTargetComponent.flattenToShortString());
                        pw.println();
                        printWriter.print("    ");
                        long dur = ass.mTime;
                        N1 = N12;
                        if (ass.mNesting > 0) {
                            targetComponents = targetComponents2;
                            dur += now - ass.mStartTime;
                        } else {
                            targetComponents = targetComponents2;
                        }
                        TimeUtils.formatDuration(dur, printWriter);
                        printWriter.print(" (");
                        printWriter.print(ass.mCount);
                        printWriter.print(" times)");
                        printWriter.print("  ");
                        int i5 = 0;
                        while (i5 < ass.mStateTimes.length) {
                            long amt = ass.mStateTimes[i5];
                            long dur2 = dur;
                            if (ass.mLastState - 0 == i5) {
                                amt += now - ass.mLastStateUptime;
                            }
                            if (amt != 0) {
                                printWriter.print(" ");
                                printWriter.print(ProcessList.makeProcStateString(i5 + 0));
                                printWriter.print("=");
                                TimeUtils.formatDuration(amt, printWriter);
                                if (ass.mLastState - 0 == i5) {
                                    printWriter.print("*");
                                }
                            }
                            i5++;
                            dur = dur2;
                        }
                        pw.println();
                        if (ass.mNesting > 0) {
                            printWriter.print("    Currently active: ");
                            TimeUtils.formatDuration(now - ass.mStartTime, printWriter);
                            pw.println();
                        }
                        i4++;
                        str = dumpPackage;
                        sourceProcesses2 = sourceProcesses;
                        N4 = N42;
                        dumpUid2 = dumpUid;
                        N12 = N1;
                        targetComponents2 = targetComponents;
                    }
                    ArrayMap<String, Association> arrayMap = sourceProcesses2;
                    int i6 = N12;
                    ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> arrayMap2 = targetComponents2;
                    i3++;
                    str = dumpPackage;
                    i = false;
                    printedAnything = printedAnything2;
                    dumpUid2 = dumpUid2;
                }
                int dumpUid3 = dumpUid2;
                int dumpUid4 = i;
                int i7 = N12;
                ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> arrayMap3 = targetComponents2;
                i2++;
                str = dumpPackage;
                dumpUid2 = dumpUid3;
            }
            int dumpUid5 = dumpUid2;
            int dumpUid6 = i;
            int i8 = N12;
            ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> arrayMap4 = targetComponents2;
            i1++;
            activityManagerService = this;
            str = dumpPackage;
            dumpUid2 = dumpUid5;
        }
        int i9 = N12;
        if (!printedAnything) {
            printWriter.println("  (nothing)");
        }
    }

    private int getAppId(String dumpPackage) {
        if (dumpPackage == null) {
            return -1;
        }
        try {
            return UserHandle.getAppId(this.mContext.getPackageManager().getApplicationInfo(dumpPackage, 0).uid);
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
            return -1;
        }
    }

    /* access modifiers changed from: package-private */
    public boolean dumpUids(PrintWriter pw, String dumpPackage, int dumpAppId, ActiveUids uids, String header, boolean needSep) {
        boolean printed = false;
        for (int i = 0; i < uids.size(); i++) {
            UidRecord uidRec = uids.valueAt(i);
            if (dumpPackage == null || UserHandle.getAppId(uidRec.uid) == dumpAppId) {
                if (!printed) {
                    printed = true;
                    if (needSep) {
                        pw.println();
                    }
                    pw.print("  ");
                    pw.println(header);
                    needSep = true;
                }
                pw.print("    UID ");
                UserHandle.formatUid(pw, uidRec.uid);
                pw.print(": ");
                pw.println(uidRec);
            }
        }
        return printed;
    }

    /* access modifiers changed from: package-private */
    public void dumpBinderProxyInterfaceCounts(PrintWriter pw, String header) {
        BinderProxy.InterfaceCount[] proxyCounts = BinderProxy.getSortedInterfaceCounts(50);
        pw.println(header);
        for (int i = 0; i < proxyCounts.length; i++) {
            pw.println("    #" + (i + 1) + ": " + proxyCounts[i]);
        }
    }

    /* access modifiers changed from: package-private */
    public boolean dumpBinderProxiesCounts(PrintWriter pw, String header) {
        SparseIntArray counts = BinderInternal.nGetBinderProxyPerUidCounts();
        if (counts == null) {
            return false;
        }
        pw.println(header);
        for (int i = 0; i < counts.size(); i++) {
            int uid = counts.keyAt(i);
            int binderCount = counts.valueAt(i);
            pw.print("    UID ");
            pw.print(uid);
            pw.print(", binder count = ");
            pw.print(binderCount);
            pw.print(", package(s)= ");
            String[] pkgNames = this.mContext.getPackageManager().getPackagesForUid(uid);
            if (pkgNames != null) {
                for (String print : pkgNames) {
                    pw.print(print);
                    pw.print("; ");
                }
            } else {
                pw.print("NO PACKAGE NAME FOUND");
            }
            pw.println();
        }
        return true;
    }

    /* access modifiers changed from: package-private */
    public void dumpBinderProxies(PrintWriter pw, int minCountToDumpInterfaces) {
        pw.println("ACTIVITY MANAGER BINDER PROXY STATE (dumpsys activity binder-proxies)");
        int proxyCount = BinderProxy.getProxyCount();
        if (proxyCount >= minCountToDumpInterfaces) {
            dumpBinderProxyInterfaceCounts(pw, "Top proxy interface names held by SYSTEM");
        } else {
            pw.print("Not dumping proxy interface counts because size (" + Integer.toString(proxyCount) + ") looks reasonable");
            pw.println();
        }
        dumpBinderProxiesCounts(pw, "  Counts of Binder Proxies held by SYSTEM");
    }

    /* access modifiers changed from: package-private */
    public void dumpLruEntryLocked(PrintWriter pw, int index, ProcessRecord proc) {
        pw.print("    #");
        pw.print(index);
        pw.print(": ");
        pw.print(ProcessList.makeOomAdjString(proc.setAdj, false));
        pw.print(" ");
        pw.print(ProcessList.makeProcStateString(proc.getCurProcState()));
        pw.print(" ");
        pw.print(proc.toShortString());
        pw.print(" ");
        if (proc.hasActivitiesOrRecentTasks() || proc.hasClientActivities() || proc.treatLikeActivity) {
            pw.print(" activity=");
            boolean printed = false;
            if (proc.hasActivities()) {
                pw.print(ActivityTaskManagerService.DUMP_ACTIVITIES_CMD);
                printed = true;
            }
            if (proc.hasRecentTasks()) {
                if (printed) {
                    pw.print("|");
                }
                pw.print(ActivityTaskManagerService.DUMP_RECENTS_CMD);
                printed = true;
            }
            if (proc.hasClientActivities()) {
                if (printed) {
                    pw.print("|");
                }
                pw.print("client");
                printed = true;
            }
            if (proc.treatLikeActivity) {
                if (printed) {
                    pw.print("|");
                }
                pw.print("treated");
            }
        }
        pw.println();
    }

    /* access modifiers changed from: package-private */
    public void dumpLruLocked(PrintWriter pw, String dumpPackage) {
        pw.println("ACTIVITY MANAGER LRU PROCESSES (dumpsys activity lru)");
        boolean first = true;
        int i = this.mProcessList.mLruProcesses.size() - 1;
        while (i >= this.mProcessList.mLruProcessActivityStart) {
            ProcessRecord r = this.mProcessList.mLruProcesses.get(i);
            if (dumpPackage == null || r.pkgList.containsKey(dumpPackage)) {
                if (first) {
                    pw.println("  Activities:");
                    first = false;
                }
                dumpLruEntryLocked(pw, i, r);
            }
            i--;
        }
        boolean first2 = true;
        while (i >= this.mProcessList.mLruProcessServiceStart) {
            ProcessRecord r2 = this.mProcessList.mLruProcesses.get(i);
            if (dumpPackage == null || r2.pkgList.containsKey(dumpPackage)) {
                if (first2) {
                    pw.println("  Services:");
                    first2 = false;
                }
                dumpLruEntryLocked(pw, i, r2);
            }
            i--;
        }
        boolean first3 = true;
        while (i >= 0) {
            ProcessRecord r3 = this.mProcessList.mLruProcesses.get(i);
            if (dumpPackage == null || r3.pkgList.containsKey(dumpPackage)) {
                if (first3) {
                    pw.println("  Other:");
                    first3 = false;
                }
                dumpLruEntryLocked(pw, i, r3);
            }
            i--;
        }
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x01ea, code lost:
        r0 = r5;
     */
    @com.android.internal.annotations.GuardedBy({"this"})
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void dumpProcessesLocked(java.io.FileDescriptor r20, java.io.PrintWriter r21, java.lang.String[] r22, int r23, boolean r24, java.lang.String r25, int r26) {
        /*
            r19 = this;
            r9 = r19
            r15 = r21
            r14 = r24
            r13 = r25
            r0 = 0
            r1 = 0
            java.lang.String r2 = "ACTIVITY MANAGER RUNNING PROCESSES (dumpsys activity processes)"
            r15.println(r2)
            if (r14 == 0) goto L_0x0085
            com.android.server.am.ProcessList r2 = r9.mProcessList
            com.android.server.am.ProcessList$MyProcessMap r2 = r2.mProcessNames
            android.util.ArrayMap r2 = r2.getMap()
            int r2 = r2.size()
            r3 = 0
        L_0x001e:
            if (r3 >= r2) goto L_0x0083
            com.android.server.am.ProcessList r4 = r9.mProcessList
            com.android.server.am.ProcessList$MyProcessMap r4 = r4.mProcessNames
            android.util.ArrayMap r4 = r4.getMap()
            java.lang.Object r4 = r4.valueAt(r3)
            android.util.SparseArray r4 = (android.util.SparseArray) r4
            int r5 = r4.size()
            r6 = 0
        L_0x0033:
            if (r6 >= r5) goto L_0x0080
            java.lang.Object r7 = r4.valueAt(r6)
            com.android.server.am.ProcessRecord r7 = (com.android.server.am.ProcessRecord) r7
            if (r13 == 0) goto L_0x0046
            com.android.server.am.ProcessRecord$PackageList r8 = r7.pkgList
            boolean r8 = r8.containsKey(r13)
            if (r8 != 0) goto L_0x0046
            goto L_0x007d
        L_0x0046:
            if (r0 != 0) goto L_0x004e
            java.lang.String r8 = "  All known processes:"
            r15.println(r8)
            r0 = 1
        L_0x004e:
            boolean r8 = r7.isPersistent()
            if (r8 == 0) goto L_0x0057
            java.lang.String r8 = "  *PERS*"
            goto L_0x0059
        L_0x0057:
            java.lang.String r8 = "  *APP*"
        L_0x0059:
            r15.print(r8)
            java.lang.String r8 = " UID "
            r15.print(r8)
            int r8 = r4.keyAt(r6)
            r15.print(r8)
            java.lang.String r8 = " "
            r15.print(r8)
            r15.println(r7)
            java.lang.String r8 = "    "
            r7.dump(r15, r8)
            boolean r8 = r7.isPersistent()
            if (r8 == 0) goto L_0x007d
            int r1 = r1 + 1
        L_0x007d:
            int r6 = r6 + 1
            goto L_0x0033
        L_0x0080:
            int r3 = r3 + 1
            goto L_0x001e
        L_0x0083:
            r12 = r1
            goto L_0x0086
        L_0x0085:
            r12 = r1
        L_0x0086:
            com.android.server.am.ProcessList r1 = r9.mProcessList
            android.util.SparseArray<com.android.server.am.ProcessRecord> r1 = r1.mIsolatedProcesses
            int r1 = r1.size()
            if (r1 <= 0) goto L_0x00d2
            r1 = 0
            r2 = 0
        L_0x0092:
            com.android.server.am.ProcessList r3 = r9.mProcessList
            android.util.SparseArray<com.android.server.am.ProcessRecord> r3 = r3.mIsolatedProcesses
            int r3 = r3.size()
            if (r2 >= r3) goto L_0x00d2
            com.android.server.am.ProcessList r3 = r9.mProcessList
            android.util.SparseArray<com.android.server.am.ProcessRecord> r3 = r3.mIsolatedProcesses
            java.lang.Object r3 = r3.valueAt(r2)
            com.android.server.am.ProcessRecord r3 = (com.android.server.am.ProcessRecord) r3
            if (r13 == 0) goto L_0x00b1
            com.android.server.am.ProcessRecord$PackageList r4 = r3.pkgList
            boolean r4 = r4.containsKey(r13)
            if (r4 != 0) goto L_0x00b1
            goto L_0x00cf
        L_0x00b1:
            if (r1 != 0) goto L_0x00bf
            if (r0 == 0) goto L_0x00b8
            r21.println()
        L_0x00b8:
            java.lang.String r4 = "  Isolated process list (sorted by uid):"
            r15.println(r4)
            r1 = 1
            r0 = 1
        L_0x00bf:
            java.lang.String r4 = "    Isolated #"
            r15.print(r4)
            r15.print(r2)
            java.lang.String r4 = ": "
            r15.print(r4)
            r15.println(r3)
        L_0x00cf:
            int r2 = r2 + 1
            goto L_0x0092
        L_0x00d2:
            java.util.ArrayList<com.android.server.am.ActiveInstrumentation> r1 = r9.mActiveInstrumentation
            int r1 = r1.size()
            if (r1 <= 0) goto L_0x012b
            r1 = 0
            r2 = 0
        L_0x00dc:
            java.util.ArrayList<com.android.server.am.ActiveInstrumentation> r3 = r9.mActiveInstrumentation
            int r3 = r3.size()
            if (r2 >= r3) goto L_0x012b
            java.util.ArrayList<com.android.server.am.ActiveInstrumentation> r3 = r9.mActiveInstrumentation
            java.lang.Object r3 = r3.get(r2)
            com.android.server.am.ActiveInstrumentation r3 = (com.android.server.am.ActiveInstrumentation) r3
            if (r13 == 0) goto L_0x0105
            android.content.ComponentName r4 = r3.mClass
            java.lang.String r4 = r4.getPackageName()
            boolean r4 = r4.equals(r13)
            if (r4 != 0) goto L_0x0105
            android.content.pm.ApplicationInfo r4 = r3.mTargetInfo
            java.lang.String r4 = r4.packageName
            boolean r4 = r4.equals(r13)
            if (r4 != 0) goto L_0x0105
            goto L_0x0128
        L_0x0105:
            if (r1 != 0) goto L_0x0113
            if (r0 == 0) goto L_0x010c
            r21.println()
        L_0x010c:
            java.lang.String r4 = "  Active instrumentation:"
            r15.println(r4)
            r1 = 1
            r0 = 1
        L_0x0113:
            java.lang.String r4 = "    Instrumentation #"
            r15.print(r4)
            r15.print(r2)
            java.lang.String r4 = ": "
            r15.print(r4)
            r15.println(r3)
            java.lang.String r4 = "      "
            r3.dump(r15, r4)
        L_0x0128:
            int r2 = r2 + 1
            goto L_0x00dc
        L_0x012b:
            com.android.server.am.ProcessList r1 = r9.mProcessList
            com.android.server.am.ActiveUids r1 = r1.mActiveUids
            int r1 = r1.size()
            if (r1 <= 0) goto L_0x014b
            com.android.server.am.ProcessList r1 = r9.mProcessList
            com.android.server.am.ActiveUids r5 = r1.mActiveUids
            java.lang.String r6 = "UID states:"
            r1 = r19
            r2 = r21
            r3 = r25
            r4 = r26
            r7 = r0
            boolean r1 = r1.dumpUids(r2, r3, r4, r5, r6, r7)
            if (r1 == 0) goto L_0x014b
            r0 = 1
        L_0x014b:
            if (r14 == 0) goto L_0x0169
            com.android.server.am.ActiveUids r1 = r9.mValidateUids
            int r1 = r1.size()
            if (r1 <= 0) goto L_0x0169
            com.android.server.am.ActiveUids r5 = r9.mValidateUids
            java.lang.String r6 = "UID validation:"
            r1 = r19
            r2 = r21
            r3 = r25
            r4 = r26
            r7 = r0
            boolean r1 = r1.dumpUids(r2, r3, r4, r5, r6, r7)
            if (r1 == 0) goto L_0x0169
            r0 = 1
        L_0x0169:
            com.android.server.am.ProcessList r1 = r9.mProcessList
            int r1 = r1.getLruSizeLocked()
            if (r1 <= 0) goto L_0x0190
            if (r0 == 0) goto L_0x0176
            r21.println()
        L_0x0176:
            com.android.server.am.ProcessList r1 = r9.mProcessList
            r1.dumpLruListHeaderLocked(r15)
            com.android.server.am.ProcessList r1 = r9.mProcessList
            java.util.ArrayList<com.android.server.am.ProcessRecord> r3 = r1.mLruProcesses
            r7 = 0
            java.lang.String r4 = "    "
            java.lang.String r5 = "Proc"
            java.lang.String r6 = "PERS"
            r1 = r21
            r2 = r19
            r8 = r25
            dumpProcessOomList(r1, r2, r3, r4, r5, r6, r7, r8)
            r0 = 1
        L_0x0190:
            r1 = 0
            if (r14 != 0) goto L_0x0195
            if (r13 == 0) goto L_0x01eb
        L_0x0195:
            com.android.server.am.ActivityManagerService$PidMap r2 = r9.mPidsSelfLocked
            monitor-enter(r2)
            r3 = 0
            r4 = r1
            r5 = r0
        L_0x019b:
            com.android.server.am.ActivityManagerService$PidMap r0 = r9.mPidsSelfLocked     // Catch:{ all -> 0x085d }
            int r0 = r0.size()     // Catch:{ all -> 0x085d }
            if (r4 >= r0) goto L_0x01e9
            com.android.server.am.ActivityManagerService$PidMap r0 = r9.mPidsSelfLocked     // Catch:{ all -> 0x01e1 }
            com.android.server.am.ProcessRecord r0 = r0.valueAt(r4)     // Catch:{ all -> 0x01e1 }
            if (r13 == 0) goto L_0x01b4
            com.android.server.am.ProcessRecord$PackageList r6 = r0.pkgList     // Catch:{ all -> 0x01e1 }
            boolean r6 = r6.containsKey(r13)     // Catch:{ all -> 0x01e1 }
            if (r6 != 0) goto L_0x01b4
            goto L_0x01de
        L_0x01b4:
            if (r3 != 0) goto L_0x01c2
            if (r5 == 0) goto L_0x01bb
            r21.println()     // Catch:{ all -> 0x01e1 }
        L_0x01bb:
            r5 = 1
            java.lang.String r6 = "  PID mappings:"
            r15.println(r6)     // Catch:{ all -> 0x01e1 }
            r3 = 1
        L_0x01c2:
            java.lang.String r6 = "    PID #"
            r15.print(r6)     // Catch:{ all -> 0x01e1 }
            com.android.server.am.ActivityManagerService$PidMap r6 = r9.mPidsSelfLocked     // Catch:{ all -> 0x01e1 }
            int r6 = r6.keyAt(r4)     // Catch:{ all -> 0x01e1 }
            r15.print(r6)     // Catch:{ all -> 0x01e1 }
            java.lang.String r6 = ": "
            r15.print(r6)     // Catch:{ all -> 0x01e1 }
            com.android.server.am.ActivityManagerService$PidMap r6 = r9.mPidsSelfLocked     // Catch:{ all -> 0x01e1 }
            com.android.server.am.ProcessRecord r6 = r6.valueAt(r4)     // Catch:{ all -> 0x01e1 }
            r15.println(r6)     // Catch:{ all -> 0x01e1 }
        L_0x01de:
            int r4 = r4 + 1
            goto L_0x019b
        L_0x01e1:
            r0 = move-exception
            r3 = r20
            r4 = r12
            r6 = r13
            r7 = r15
            goto L_0x0863
        L_0x01e9:
            monitor-exit(r2)     // Catch:{ all -> 0x085d }
            r0 = r5
        L_0x01eb:
            android.util.SparseArray<com.android.server.am.ActivityManagerService$ImportanceToken> r2 = r9.mImportantProcesses
            int r2 = r2.size()
            if (r2 <= 0) goto L_0x0250
            com.android.server.am.ActivityManagerService$PidMap r2 = r9.mPidsSelfLocked
            monitor-enter(r2)
            r3 = 0
            r4 = r0
        L_0x01f8:
            android.util.SparseArray<com.android.server.am.ActivityManagerService$ImportanceToken> r0 = r9.mImportantProcesses     // Catch:{ all -> 0x024d }
            int r0 = r0.size()     // Catch:{ all -> 0x024d }
            if (r1 >= r0) goto L_0x024a
            com.android.server.am.ActivityManagerService$PidMap r0 = r9.mPidsSelfLocked     // Catch:{ all -> 0x024d }
            android.util.SparseArray<com.android.server.am.ActivityManagerService$ImportanceToken> r5 = r9.mImportantProcesses     // Catch:{ all -> 0x024d }
            java.lang.Object r5 = r5.valueAt(r1)     // Catch:{ all -> 0x024d }
            com.android.server.am.ActivityManagerService$ImportanceToken r5 = (com.android.server.am.ActivityManagerService.ImportanceToken) r5     // Catch:{ all -> 0x024d }
            int r5 = r5.pid     // Catch:{ all -> 0x024d }
            com.android.server.am.ProcessRecord r0 = r0.get(r5)     // Catch:{ all -> 0x024d }
            if (r13 == 0) goto L_0x021d
            if (r0 == 0) goto L_0x0247
            com.android.server.am.ProcessRecord$PackageList r5 = r0.pkgList     // Catch:{ all -> 0x024d }
            boolean r5 = r5.containsKey(r13)     // Catch:{ all -> 0x024d }
            if (r5 != 0) goto L_0x021d
            goto L_0x0247
        L_0x021d:
            if (r3 != 0) goto L_0x022b
            if (r4 == 0) goto L_0x0224
            r21.println()     // Catch:{ all -> 0x024d }
        L_0x0224:
            r4 = 1
            java.lang.String r5 = "  Foreground Processes:"
            r15.println(r5)     // Catch:{ all -> 0x024d }
            r3 = 1
        L_0x022b:
            java.lang.String r5 = "    PID #"
            r15.print(r5)     // Catch:{ all -> 0x024d }
            android.util.SparseArray<com.android.server.am.ActivityManagerService$ImportanceToken> r5 = r9.mImportantProcesses     // Catch:{ all -> 0x024d }
            int r5 = r5.keyAt(r1)     // Catch:{ all -> 0x024d }
            r15.print(r5)     // Catch:{ all -> 0x024d }
            java.lang.String r5 = ": "
            r15.print(r5)     // Catch:{ all -> 0x024d }
            android.util.SparseArray<com.android.server.am.ActivityManagerService$ImportanceToken> r5 = r9.mImportantProcesses     // Catch:{ all -> 0x024d }
            java.lang.Object r5 = r5.valueAt(r1)     // Catch:{ all -> 0x024d }
            r15.println(r5)     // Catch:{ all -> 0x024d }
        L_0x0247:
            int r1 = r1 + 1
            goto L_0x01f8
        L_0x024a:
            monitor-exit(r2)     // Catch:{ all -> 0x024d }
            r0 = r4
            goto L_0x0250
        L_0x024d:
            r0 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x024d }
            throw r0
        L_0x0250:
            java.util.ArrayList<com.android.server.am.ProcessRecord> r1 = r9.mPersistentStartingProcesses
            int r1 = r1.size()
            if (r1 <= 0) goto L_0x0274
            if (r0 == 0) goto L_0x025d
            r21.println()
        L_0x025d:
            r0 = 1
            java.lang.String r1 = "  Persisent processes that are starting:"
            r15.println(r1)
            java.util.ArrayList<com.android.server.am.ProcessRecord> r3 = r9.mPersistentStartingProcesses
            java.lang.String r4 = "    "
            java.lang.String r5 = "Starting Norm"
            java.lang.String r6 = "Restarting PERS"
            r1 = r21
            r2 = r19
            r7 = r25
            dumpProcessList(r1, r2, r3, r4, r5, r6, r7)
        L_0x0274:
            com.android.server.am.ProcessList r1 = r9.mProcessList
            java.util.ArrayList<com.android.server.am.ProcessRecord> r1 = r1.mRemovedProcesses
            int r1 = r1.size()
            if (r1 <= 0) goto L_0x029c
            if (r0 == 0) goto L_0x0283
            r21.println()
        L_0x0283:
            r0 = 1
            java.lang.String r1 = "  Processes that are being removed:"
            r15.println(r1)
            com.android.server.am.ProcessList r1 = r9.mProcessList
            java.util.ArrayList<com.android.server.am.ProcessRecord> r3 = r1.mRemovedProcesses
            java.lang.String r4 = "    "
            java.lang.String r5 = "Removed Norm"
            java.lang.String r6 = "Removed PERS"
            r1 = r21
            r2 = r19
            r7 = r25
            dumpProcessList(r1, r2, r3, r4, r5, r6, r7)
        L_0x029c:
            java.util.ArrayList<com.android.server.am.ProcessRecord> r1 = r9.mProcessesOnHold
            int r1 = r1.size()
            if (r1 <= 0) goto L_0x02c0
            if (r0 == 0) goto L_0x02a9
            r21.println()
        L_0x02a9:
            r0 = 1
            java.lang.String r1 = "  Processes that are on old until the system is ready:"
            r15.println(r1)
            java.util.ArrayList<com.android.server.am.ProcessRecord> r3 = r9.mProcessesOnHold
            java.lang.String r4 = "    "
            java.lang.String r5 = "OnHold Norm"
            java.lang.String r6 = "OnHold PERS"
            r1 = r21
            r2 = r19
            r7 = r25
            dumpProcessList(r1, r2, r3, r4, r5, r6, r7)
        L_0x02c0:
            boolean r0 = r9.dumpProcessesToGc(r15, r0, r13)
            com.android.server.am.AppErrors r1 = r9.mAppErrors
            r3 = r20
            boolean r0 = r1.dumpLocked(r3, r15, r0, r13)
            if (r13 != 0) goto L_0x02d7
            r21.println()
            r0 = 0
            com.android.server.am.UserController r1 = r9.mUserController
            r1.dump(r15, r14)
        L_0x02d7:
            com.android.server.wm.ActivityTaskManagerInternal r10 = r9.mAtmInternal
            boolean r1 = r9.mTestPssMode
            int r2 = r9.mWakefulness
            r11 = r20
            r4 = r12
            r12 = r21
            r6 = r13
            r13 = r24
            r14 = r25
            r7 = r15
            r15 = r26
            r16 = r0
            r17 = r1
            r18 = r2
            boolean r0 = r10.dumpForProcesses(r11, r12, r13, r14, r15, r16, r17, r18)
            if (r24 == 0) goto L_0x0345
            com.android.server.am.ProcessList r1 = r9.mProcessList
            android.util.LongSparseArray<com.android.server.am.ProcessRecord> r1 = r1.mPendingStarts
            int r1 = r1.size()
            if (r1 <= 0) goto L_0x0345
            if (r0 == 0) goto L_0x0305
            r21.println()
        L_0x0305:
            r0 = 1
            java.lang.String r1 = "  mPendingStarts: "
            r7.println(r1)
            r1 = 0
            com.android.server.am.ProcessList r2 = r9.mProcessList
            android.util.LongSparseArray<com.android.server.am.ProcessRecord> r2 = r2.mPendingStarts
            int r2 = r2.size()
        L_0x0314:
            if (r1 >= r2) goto L_0x0345
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r8 = "    "
            r5.append(r8)
            com.android.server.am.ProcessList r8 = r9.mProcessList
            android.util.LongSparseArray<com.android.server.am.ProcessRecord> r8 = r8.mPendingStarts
            long r10 = r8.keyAt(r1)
            r5.append(r10)
            java.lang.String r8 = ": "
            r5.append(r8)
            com.android.server.am.ProcessList r8 = r9.mProcessList
            android.util.LongSparseArray<com.android.server.am.ProcessRecord> r8 = r8.mPendingStarts
            java.lang.Object r8 = r8.valueAt(r1)
            r5.append(r8)
            java.lang.String r5 = r5.toString()
            r7.println(r5)
            int r1 = r1 + 1
            goto L_0x0314
        L_0x0345:
            if (r24 == 0) goto L_0x0495
            android.os.RemoteCallbackList<android.app.IUidObserver> r1 = r9.mUidObservers
            int r1 = r1.getRegisteredCallbackCount()
            r2 = 0
            r5 = 0
        L_0x034f:
            if (r5 >= r1) goto L_0x040a
            android.os.RemoteCallbackList<android.app.IUidObserver> r8 = r9.mUidObservers
            java.lang.Object r8 = r8.getRegisteredCallbackCookie(r5)
            com.android.server.am.ActivityManagerService$UidObserverRegistration r8 = (com.android.server.am.ActivityManagerService.UidObserverRegistration) r8
            if (r6 == 0) goto L_0x0363
            java.lang.String r10 = r8.pkg
            boolean r10 = r6.equals(r10)
            if (r10 == 0) goto L_0x0406
        L_0x0363:
            if (r2 != 0) goto L_0x036b
            java.lang.String r10 = "  mUidObservers:"
            r7.println(r10)
            r2 = 1
        L_0x036b:
            java.lang.String r10 = "    "
            r7.print(r10)
            int r10 = r8.uid
            android.os.UserHandle.formatUid(r7, r10)
            java.lang.String r10 = " "
            r7.print(r10)
            java.lang.String r10 = r8.pkg
            r7.print(r10)
            android.os.RemoteCallbackList<android.app.IUidObserver> r10 = r9.mUidObservers
            android.os.IInterface r10 = r10.getRegisteredCallbackItem(r5)
            android.app.IUidObserver r10 = (android.app.IUidObserver) r10
            java.lang.String r11 = " "
            r7.print(r11)
            java.lang.Class r11 = r10.getClass()
            java.lang.String r11 = r11.getTypeName()
            r7.print(r11)
            java.lang.String r11 = ":"
            r7.print(r11)
            int r11 = r8.which
            r11 = r11 & 4
            if (r11 == 0) goto L_0x03a7
            java.lang.String r11 = " IDLE"
            r7.print(r11)
        L_0x03a7:
            int r11 = r8.which
            r11 = r11 & 8
            if (r11 == 0) goto L_0x03b2
            java.lang.String r11 = " ACT"
            r7.print(r11)
        L_0x03b2:
            int r11 = r8.which
            r11 = r11 & 2
            if (r11 == 0) goto L_0x03bd
            java.lang.String r11 = " GONE"
            r7.print(r11)
        L_0x03bd:
            int r11 = r8.which
            r11 = r11 & 1
            if (r11 == 0) goto L_0x03d7
            java.lang.String r11 = " STATE"
            r7.print(r11)
            java.lang.String r11 = " (cut="
            r7.print(r11)
            int r11 = r8.cutpoint
            r7.print(r11)
            java.lang.String r11 = ")"
            r7.print(r11)
        L_0x03d7:
            r21.println()
            android.util.SparseIntArray r11 = r8.lastProcStates
            if (r11 == 0) goto L_0x0406
            android.util.SparseIntArray r11 = r8.lastProcStates
            int r11 = r11.size()
            r12 = 0
        L_0x03e5:
            if (r12 >= r11) goto L_0x0406
            java.lang.String r13 = "      Last "
            r7.print(r13)
            android.util.SparseIntArray r13 = r8.lastProcStates
            int r13 = r13.keyAt(r12)
            android.os.UserHandle.formatUid(r7, r13)
            java.lang.String r13 = ": "
            r7.print(r13)
            android.util.SparseIntArray r13 = r8.lastProcStates
            int r13 = r13.valueAt(r12)
            r7.println(r13)
            int r12 = r12 + 1
            goto L_0x03e5
        L_0x0406:
            int r5 = r5 + 1
            goto L_0x034f
        L_0x040a:
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r8 = "  mDeviceIdleWhitelist="
            r5.append(r8)
            int[] r8 = r9.mDeviceIdleWhitelist
            java.lang.String r8 = java.util.Arrays.toString(r8)
            r5.append(r8)
            java.lang.String r5 = r5.toString()
            r7.println(r5)
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r8 = "  mDeviceIdleExceptIdleWhitelist="
            r5.append(r8)
            int[] r8 = r9.mDeviceIdleExceptIdleWhitelist
            java.lang.String r8 = java.util.Arrays.toString(r8)
            r5.append(r8)
            java.lang.String r5 = r5.toString()
            r7.println(r5)
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r8 = "  mDeviceIdleTempWhitelist="
            r5.append(r8)
            int[] r8 = r9.mDeviceIdleTempWhitelist
            java.lang.String r8 = java.util.Arrays.toString(r8)
            r5.append(r8)
            java.lang.String r5 = r5.toString()
            r7.println(r5)
            com.android.server.am.PendingTempWhitelists r5 = r9.mPendingTempWhitelist
            int r5 = r5.size()
            if (r5 <= 0) goto L_0x0495
            java.lang.String r5 = "  mPendingTempWhitelist:"
            r7.println(r5)
            r5 = 0
        L_0x0466:
            com.android.server.am.PendingTempWhitelists r8 = r9.mPendingTempWhitelist
            int r8 = r8.size()
            if (r5 >= r8) goto L_0x0495
            com.android.server.am.PendingTempWhitelists r8 = r9.mPendingTempWhitelist
            com.android.server.am.ActivityManagerService$PendingTempWhitelist r8 = r8.valueAt(r5)
            java.lang.String r10 = "    "
            r7.print(r10)
            int r10 = r8.targetUid
            android.os.UserHandle.formatUid(r7, r10)
            java.lang.String r10 = ": "
            r7.print(r10)
            long r10 = r8.duration
            android.util.TimeUtils.formatDuration(r10, r7)
            java.lang.String r10 = " "
            r7.print(r10)
            java.lang.String r10 = r8.tag
            r7.println(r10)
            int r5 = r5 + 1
            goto L_0x0466
        L_0x0495:
            java.lang.String r1 = r9.mDebugApp
            if (r1 != 0) goto L_0x04a5
            java.lang.String r1 = r9.mOrigDebugApp
            if (r1 != 0) goto L_0x04a5
            boolean r1 = r9.mDebugTransient
            if (r1 != 0) goto L_0x04a5
            boolean r1 = r9.mOrigWaitForDebugger
            if (r1 == 0) goto L_0x04f1
        L_0x04a5:
            if (r6 == 0) goto L_0x04b7
            java.lang.String r1 = r9.mDebugApp
            boolean r1 = r6.equals(r1)
            if (r1 != 0) goto L_0x04b7
            java.lang.String r1 = r9.mOrigDebugApp
            boolean r1 = r6.equals(r1)
            if (r1 == 0) goto L_0x04f1
        L_0x04b7:
            if (r0 == 0) goto L_0x04bd
            r21.println()
            r0 = 0
        L_0x04bd:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "  mDebugApp="
            r1.append(r2)
            java.lang.String r2 = r9.mDebugApp
            r1.append(r2)
            java.lang.String r2 = "/orig="
            r1.append(r2)
            java.lang.String r2 = r9.mOrigDebugApp
            r1.append(r2)
            java.lang.String r2 = " mDebugTransient="
            r1.append(r2)
            boolean r2 = r9.mDebugTransient
            r1.append(r2)
            java.lang.String r2 = " mOrigWaitForDebugger="
            r1.append(r2)
            boolean r2 = r9.mOrigWaitForDebugger
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r7.println(r1)
        L_0x04f1:
            com.android.internal.app.ProcessMap<android.util.Pair<java.lang.Long, java.lang.String>> r1 = r9.mMemWatchProcesses
            android.util.ArrayMap r1 = r1.getMap()
            int r1 = r1.size()
            if (r1 <= 0) goto L_0x05a6
            java.lang.String r1 = "  Mem watch processes:"
            r7.println(r1)
            com.android.internal.app.ProcessMap<android.util.Pair<java.lang.Long, java.lang.String>> r1 = r9.mMemWatchProcesses
            android.util.ArrayMap r1 = r1.getMap()
            r2 = 0
        L_0x0509:
            int r5 = r1.size()
            if (r2 >= r5) goto L_0x0574
            java.lang.Object r5 = r1.keyAt(r2)
            java.lang.String r5 = (java.lang.String) r5
            java.lang.Object r8 = r1.valueAt(r2)
            android.util.SparseArray r8 = (android.util.SparseArray) r8
            r10 = 0
        L_0x051c:
            int r11 = r8.size()
            if (r10 >= r11) goto L_0x0571
            if (r0 == 0) goto L_0x0528
            r21.println()
            r0 = 0
        L_0x0528:
            java.lang.StringBuilder r11 = new java.lang.StringBuilder
            r11.<init>()
            java.lang.String r12 = "    "
            r11.append(r12)
            r11.append(r5)
            r12 = 47
            r11.append(r12)
            int r12 = r8.keyAt(r10)
            android.os.UserHandle.formatUid(r11, r12)
            java.lang.Object r12 = r8.valueAt(r10)
            android.util.Pair r12 = (android.util.Pair) r12
            java.lang.String r13 = ": "
            r11.append(r13)
            java.lang.Object r13 = r12.first
            java.lang.Long r13 = (java.lang.Long) r13
            long r13 = r13.longValue()
            android.util.DebugUtils.sizeValueToString(r13, r11)
            java.lang.Object r13 = r12.second
            if (r13 == 0) goto L_0x0567
            java.lang.String r13 = ", report to "
            r11.append(r13)
            java.lang.Object r13 = r12.second
            java.lang.String r13 = (java.lang.String) r13
            r11.append(r13)
        L_0x0567:
            java.lang.String r13 = r11.toString()
            r7.println(r13)
            int r10 = r10 + 1
            goto L_0x051c
        L_0x0571:
            int r2 = r2 + 1
            goto L_0x0509
        L_0x0574:
            java.lang.String r2 = "  mMemWatchDumpProcName="
            r7.print(r2)
            java.lang.String r2 = r9.mMemWatchDumpProcName
            r7.println(r2)
            java.lang.String r2 = "  mMemWatchDumpFile="
            r7.print(r2)
            java.lang.String r2 = r9.mMemWatchDumpFile
            r7.println(r2)
            java.lang.String r2 = "  mMemWatchDumpPid="
            r7.print(r2)
            int r2 = r9.mMemWatchDumpPid
            r7.println(r2)
            java.lang.String r2 = "  mMemWatchDumpUid="
            r7.print(r2)
            int r2 = r9.mMemWatchDumpUid
            r7.println(r2)
            java.lang.String r2 = "  mMemWatchIsUserInitiated="
            r7.print(r2)
            boolean r2 = r9.mMemWatchIsUserInitiated
            r7.println(r2)
        L_0x05a6:
            java.lang.String r1 = r9.mTrackAllocationApp
            if (r1 == 0) goto L_0x05ce
            if (r6 == 0) goto L_0x05b2
            boolean r1 = r6.equals(r1)
            if (r1 == 0) goto L_0x05ce
        L_0x05b2:
            if (r0 == 0) goto L_0x05b8
            r21.println()
            r0 = 0
        L_0x05b8:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "  mTrackAllocationApp="
            r1.append(r2)
            java.lang.String r2 = r9.mTrackAllocationApp
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r7.println(r1)
        L_0x05ce:
            com.android.server.am.ActivityManagerService$ProfileData r1 = r9.mProfileData
            java.lang.String r1 = r1.getProfileApp()
            if (r1 != 0) goto L_0x05fa
            com.android.server.am.ActivityManagerService$ProfileData r1 = r9.mProfileData
            com.android.server.am.ProcessRecord r1 = r1.getProfileProc()
            if (r1 != 0) goto L_0x05fa
            com.android.server.am.ActivityManagerService$ProfileData r1 = r9.mProfileData
            android.app.ProfilerInfo r1 = r1.getProfilerInfo()
            if (r1 == 0) goto L_0x06bc
            com.android.server.am.ActivityManagerService$ProfileData r1 = r9.mProfileData
            android.app.ProfilerInfo r1 = r1.getProfilerInfo()
            java.lang.String r1 = r1.profileFile
            if (r1 != 0) goto L_0x05fa
            com.android.server.am.ActivityManagerService$ProfileData r1 = r9.mProfileData
            android.app.ProfilerInfo r1 = r1.getProfilerInfo()
            android.os.ParcelFileDescriptor r1 = r1.profileFd
            if (r1 == 0) goto L_0x06bc
        L_0x05fa:
            if (r6 == 0) goto L_0x0608
            com.android.server.am.ActivityManagerService$ProfileData r1 = r9.mProfileData
            java.lang.String r1 = r1.getProfileApp()
            boolean r1 = r6.equals(r1)
            if (r1 == 0) goto L_0x06bc
        L_0x0608:
            if (r0 == 0) goto L_0x060e
            r21.println()
            r0 = 0
        L_0x060e:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "  mProfileApp="
            r1.append(r2)
            com.android.server.am.ActivityManagerService$ProfileData r2 = r9.mProfileData
            java.lang.String r2 = r2.getProfileApp()
            r1.append(r2)
            java.lang.String r2 = " mProfileProc="
            r1.append(r2)
            com.android.server.am.ActivityManagerService$ProfileData r2 = r9.mProfileData
            com.android.server.am.ProcessRecord r2 = r2.getProfileProc()
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r7.println(r1)
            com.android.server.am.ActivityManagerService$ProfileData r1 = r9.mProfileData
            android.app.ProfilerInfo r1 = r1.getProfilerInfo()
            if (r1 == 0) goto L_0x06bc
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "  mProfileFile="
            r1.append(r2)
            com.android.server.am.ActivityManagerService$ProfileData r2 = r9.mProfileData
            android.app.ProfilerInfo r2 = r2.getProfilerInfo()
            java.lang.String r2 = r2.profileFile
            r1.append(r2)
            java.lang.String r2 = " mProfileFd="
            r1.append(r2)
            com.android.server.am.ActivityManagerService$ProfileData r2 = r9.mProfileData
            android.app.ProfilerInfo r2 = r2.getProfilerInfo()
            android.os.ParcelFileDescriptor r2 = r2.profileFd
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r7.println(r1)
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "  mSamplingInterval="
            r1.append(r2)
            com.android.server.am.ActivityManagerService$ProfileData r2 = r9.mProfileData
            android.app.ProfilerInfo r2 = r2.getProfilerInfo()
            int r2 = r2.samplingInterval
            r1.append(r2)
            java.lang.String r2 = " mAutoStopProfiler="
            r1.append(r2)
            com.android.server.am.ActivityManagerService$ProfileData r2 = r9.mProfileData
            android.app.ProfilerInfo r2 = r2.getProfilerInfo()
            boolean r2 = r2.autoStopProfiler
            r1.append(r2)
            java.lang.String r2 = " mStreamingOutput="
            r1.append(r2)
            com.android.server.am.ActivityManagerService$ProfileData r2 = r9.mProfileData
            android.app.ProfilerInfo r2 = r2.getProfilerInfo()
            boolean r2 = r2.streamingOutput
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r7.println(r1)
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "  mProfileType="
            r1.append(r2)
            int r2 = r9.mProfileType
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r7.println(r1)
        L_0x06bc:
            java.lang.String r1 = r9.mNativeDebuggingApp
            if (r1 == 0) goto L_0x06e4
            if (r6 == 0) goto L_0x06c8
            boolean r1 = r6.equals(r1)
            if (r1 == 0) goto L_0x06e4
        L_0x06c8:
            if (r0 == 0) goto L_0x06ce
            r21.println()
            r0 = 0
        L_0x06ce:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "  mNativeDebuggingApp="
            r1.append(r2)
            java.lang.String r2 = r9.mNativeDebuggingApp
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r7.println(r1)
        L_0x06e4:
            if (r6 != 0) goto L_0x0846
            boolean r1 = r9.mAlwaysFinishActivities
            if (r1 == 0) goto L_0x0700
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "  mAlwaysFinishActivities="
            r1.append(r2)
            boolean r2 = r9.mAlwaysFinishActivities
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r7.println(r1)
        L_0x0700:
            if (r24 == 0) goto L_0x0846
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "  Total persistent processes: "
            r1.append(r2)
            r1.append(r4)
            java.lang.String r1 = r1.toString()
            r7.println(r1)
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "  mProcessesReady="
            r1.append(r2)
            boolean r2 = r9.mProcessesReady
            r1.append(r2)
            java.lang.String r2 = " mSystemReady="
            r1.append(r2)
            boolean r2 = r9.mSystemReady
            r1.append(r2)
            java.lang.String r2 = " mBooted="
            r1.append(r2)
            boolean r2 = r9.mBooted
            r1.append(r2)
            java.lang.String r2 = " mFactoryTest="
            r1.append(r2)
            int r2 = r9.mFactoryTest
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r7.println(r1)
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "  mBooting="
            r1.append(r2)
            boolean r2 = r9.mBooting
            r1.append(r2)
            java.lang.String r2 = " mCallFinishBooting="
            r1.append(r2)
            boolean r2 = r9.mCallFinishBooting
            r1.append(r2)
            java.lang.String r2 = " mBootAnimationComplete="
            r1.append(r2)
            boolean r2 = r9.mBootAnimationComplete
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r7.println(r1)
            java.lang.String r1 = "  mLastPowerCheckUptime="
            r7.print(r1)
            long r1 = r9.mLastPowerCheckUptime
            android.util.TimeUtils.formatDuration(r1, r7)
            java.lang.String r1 = ""
            r7.println(r1)
            com.android.server.am.OomAdjuster r1 = r9.mOomAdjuster
            r1.dumpSequenceNumbersLocked(r7)
            com.android.server.am.OomAdjuster r1 = r9.mOomAdjuster
            r1.dumpProcCountsLocked(r7)
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "  mAllowLowerMemLevel="
            r1.append(r2)
            boolean r2 = r9.mAllowLowerMemLevel
            r1.append(r2)
            java.lang.String r2 = " mLastMemoryLevel="
            r1.append(r2)
            int r2 = r9.mLastMemoryLevel
            r1.append(r2)
            java.lang.String r2 = " mLastNumProcesses="
            r1.append(r2)
            int r2 = r9.mLastNumProcesses
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r7.println(r1)
            long r1 = android.os.SystemClock.uptimeMillis()
            java.lang.String r5 = "  mLastIdleTime="
            r7.print(r5)
            long r10 = r9.mLastIdleTime
            android.util.TimeUtils.formatDuration(r1, r10, r7)
            java.lang.String r5 = " mLowRamSinceLastIdle="
            r7.print(r5)
            long r10 = r9.getLowRamTimeSinceIdle(r1)
            android.util.TimeUtils.formatDuration(r10, r7)
            r21.println()
            r21.println()
            java.lang.String r5 = "  mUidChangeDispatchCount="
            r7.print(r5)
            int r5 = r9.mUidChangeDispatchCount
            r7.print(r5)
            r21.println()
            java.lang.String r5 = "  Slow UID dispatches:"
            r7.println(r5)
            android.os.RemoteCallbackList<android.app.IUidObserver> r5 = r9.mUidObservers
            int r5 = r5.beginBroadcast()
            r8 = 0
        L_0x07f0:
            if (r8 >= r5) goto L_0x082f
            android.os.RemoteCallbackList<android.app.IUidObserver> r10 = r9.mUidObservers
            java.lang.Object r10 = r10.getBroadcastCookie(r8)
            com.android.server.am.ActivityManagerService$UidObserverRegistration r10 = (com.android.server.am.ActivityManagerService.UidObserverRegistration) r10
            java.lang.String r11 = "    "
            r7.print(r11)
            android.os.RemoteCallbackList<android.app.IUidObserver> r11 = r9.mUidObservers
            android.os.IInterface r11 = r11.getBroadcastItem(r8)
            android.app.IUidObserver r11 = (android.app.IUidObserver) r11
            java.lang.Class r11 = r11.getClass()
            java.lang.String r11 = r11.getTypeName()
            r7.print(r11)
            java.lang.String r11 = ": "
            r7.print(r11)
            int r11 = r10.mSlowDispatchCount
            r7.print(r11)
            java.lang.String r11 = " / Max "
            r7.print(r11)
            int r11 = r10.mMaxDispatchTime
            r7.print(r11)
            java.lang.String r11 = "ms"
            r7.println(r11)
            int r8 = r8 + 1
            goto L_0x07f0
        L_0x082f:
            android.os.RemoteCallbackList<android.app.IUidObserver> r8 = r9.mUidObservers
            r8.finishBroadcast()
            r21.println()
            java.lang.String r8 = "  ServiceManager statistics:"
            r7.println(r8)
            com.android.internal.util.StatLogger r8 = android.os.ServiceManager.sStatLogger
            java.lang.String r10 = "    "
            r8.dump(r7, r10)
            r21.println()
        L_0x0846:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "  mForceBackgroundCheck="
            r1.append(r2)
            boolean r2 = r9.mForceBackgroundCheck
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r7.println(r1)
            return
        L_0x085d:
            r0 = move-exception
            r3 = r20
            r4 = r12
            r6 = r13
            r7 = r15
        L_0x0863:
            monitor-exit(r2)     // Catch:{ all -> 0x0865 }
            throw r0
        L_0x0865:
            r0 = move-exception
            goto L_0x0863
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.dumpProcessesLocked(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[], int, boolean, java.lang.String, int):void");
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void writeProcessesToProtoLocked(ProtoOutputStream proto, String dumpPackage) {
        int numPers;
        ProtoOutputStream protoOutputStream = proto;
        String str = dumpPackage;
        int NP = this.mProcessList.mProcessNames.getMap().size();
        int numPers2 = 0;
        for (int ip = 0; ip < NP; ip++) {
            SparseArray<ProcessRecord> procs = (SparseArray) this.mProcessList.mProcessNames.getMap().valueAt(ip);
            int NA = procs.size();
            for (int ia = 0; ia < NA; ia++) {
                ProcessRecord r = procs.valueAt(ia);
                if (str == null || r.pkgList.containsKey(str)) {
                    r.writeToProto(protoOutputStream, 2246267895809L, this.mProcessList.mLruProcesses.indexOf(r));
                    if (r.isPersistent()) {
                        numPers2++;
                    }
                }
            }
        }
        for (int i = 0; i < this.mProcessList.mIsolatedProcesses.size(); i++) {
            ProcessRecord r2 = this.mProcessList.mIsolatedProcesses.valueAt(i);
            if (str == null || r2.pkgList.containsKey(str)) {
                r2.writeToProto(protoOutputStream, 2246267895810L, this.mProcessList.mLruProcesses.indexOf(r2));
            }
        }
        for (int i2 = 0; i2 < this.mActiveInstrumentation.size(); i2++) {
            ActiveInstrumentation ai = this.mActiveInstrumentation.get(i2);
            if (str == null || ai.mClass.getPackageName().equals(str) || ai.mTargetInfo.packageName.equals(str)) {
                ai.writeToProto(protoOutputStream, 2246267895811L);
            }
        }
        int whichAppId = getAppId(str);
        for (int i3 = 0; i3 < this.mProcessList.mActiveUids.size(); i3++) {
            UidRecord uidRec = this.mProcessList.mActiveUids.valueAt(i3);
            if (str == null || UserHandle.getAppId(uidRec.uid) == whichAppId) {
                uidRec.writeToProto(protoOutputStream, 2246267895812L);
            }
        }
        for (int i4 = 0; i4 < this.mValidateUids.size(); i4++) {
            UidRecord uidRec2 = this.mValidateUids.valueAt(i4);
            if (str == null || UserHandle.getAppId(uidRec2.uid) == whichAppId) {
                uidRec2.writeToProto(protoOutputStream, 2246267895813L);
            }
        }
        if (this.mProcessList.getLruSizeLocked() > 0) {
            long lruToken = protoOutputStream.start(1146756268038L);
            int total = this.mProcessList.getLruSizeLocked();
            protoOutputStream.write(1120986464257L, total);
            protoOutputStream.write(1120986464258L, total - this.mProcessList.mLruProcessActivityStart);
            protoOutputStream.write(1120986464259L, total - this.mProcessList.mLruProcessServiceStart);
            long lruToken2 = lruToken;
            int i5 = NP;
            numPers = numPers2;
            int i6 = total;
            writeProcessOomListToProto(proto, 2246267895812L, this, this.mProcessList.mLruProcesses, false, dumpPackage);
            protoOutputStream.end(lruToken2);
        } else {
            numPers = numPers2;
        }
        if (str != null) {
            synchronized (this.mPidsSelfLocked) {
                for (int i7 = 0; i7 < this.mPidsSelfLocked.size(); i7++) {
                    ProcessRecord r3 = this.mPidsSelfLocked.valueAt(i7);
                    if (r3.pkgList.containsKey(str)) {
                        r3.writeToProto(protoOutputStream, 2246267895815L);
                    }
                }
            }
        }
        if (this.mImportantProcesses.size() > 0) {
            synchronized (this.mPidsSelfLocked) {
                for (int i8 = 0; i8 < this.mImportantProcesses.size(); i8++) {
                    ImportanceToken it = this.mImportantProcesses.valueAt(i8);
                    ProcessRecord r4 = this.mPidsSelfLocked.get(it.pid);
                    if (str != null) {
                        if (r4 != null) {
                            if (!r4.pkgList.containsKey(str)) {
                            }
                        }
                    }
                    it.writeToProto(protoOutputStream, 2246267895816L);
                }
            }
        }
        for (int i9 = 0; i9 < this.mPersistentStartingProcesses.size(); i9++) {
            ProcessRecord r5 = this.mPersistentStartingProcesses.get(i9);
            if (str == null || str.equals(r5.info.packageName)) {
                r5.writeToProto(protoOutputStream, 2246267895817L);
            }
        }
        for (int i10 = 0; i10 < this.mProcessList.mRemovedProcesses.size(); i10++) {
            ProcessRecord r6 = this.mProcessList.mRemovedProcesses.get(i10);
            if (str == null || str.equals(r6.info.packageName)) {
                r6.writeToProto(protoOutputStream, 2246267895818L);
            }
        }
        for (int i11 = 0; i11 < this.mProcessesOnHold.size(); i11++) {
            ProcessRecord r7 = this.mProcessesOnHold.get(i11);
            if (str == null || str.equals(r7.info.packageName)) {
                r7.writeToProto(protoOutputStream, 2246267895819L);
            }
        }
        writeProcessesToGcToProto(protoOutputStream, 2246267895820L, str);
        this.mAppErrors.writeToProto(protoOutputStream, 1146756268045L, str);
        this.mAtmInternal.writeProcessesToProto(protoOutputStream, str, this.mWakefulness, this.mTestPssMode);
        if (str == null) {
            this.mUserController.writeToProto(protoOutputStream, 1146756268046L);
        }
        int NI = this.mUidObservers.getRegisteredCallbackCount();
        for (int i12 = 0; i12 < NI; i12++) {
            UidObserverRegistration reg = (UidObserverRegistration) this.mUidObservers.getRegisteredCallbackCookie(i12);
            if (str == null || str.equals(reg.pkg)) {
                reg.writeToProto(protoOutputStream, 2246267895831L);
            }
        }
        for (int v : this.mDeviceIdleWhitelist) {
            protoOutputStream.write(2220498092056L, v);
        }
        for (int v2 : this.mDeviceIdleTempWhitelist) {
            protoOutputStream.write(2220498092057L, v2);
        }
        if (this.mPendingTempWhitelist.size() > 0) {
            for (int i13 = 0; i13 < this.mPendingTempWhitelist.size(); i13++) {
                this.mPendingTempWhitelist.valueAt(i13).writeToProto(protoOutputStream, 2246267895834L);
            }
        }
        long j = 1138166333441L;
        if ((this.mDebugApp != null || this.mOrigDebugApp != null || this.mDebugTransient || this.mOrigWaitForDebugger) && (str == null || str.equals(this.mDebugApp) || str.equals(this.mOrigDebugApp))) {
            long debugAppToken = protoOutputStream.start(1146756268062L);
            protoOutputStream.write(1138166333441L, this.mDebugApp);
            protoOutputStream.write(1138166333442L, this.mOrigDebugApp);
            protoOutputStream.write(1133871366147L, this.mDebugTransient);
            protoOutputStream.write(1133871366148L, this.mOrigWaitForDebugger);
            protoOutputStream.end(debugAppToken);
        }
        if (this.mMemWatchProcesses.getMap().size() > 0) {
            long token = protoOutputStream.start(1146756268064L);
            ArrayMap<String, SparseArray<Pair<Long, String>>> procs2 = this.mMemWatchProcesses.getMap();
            int i14 = 0;
            while (i14 < procs2.size()) {
                String proc = procs2.keyAt(i14);
                SparseArray<Pair<Long, String>> uids = procs2.valueAt(i14);
                long token2 = token;
                long ptoken = protoOutputStream.start(2246267895809L);
                protoOutputStream.write(j, proc);
                int j2 = 0;
                while (j2 < uids.size()) {
                    long utoken = protoOutputStream.start(2246267895810L);
                    Pair<Long, String> val = uids.valueAt(j2);
                    protoOutputStream.write(1120986464257L, uids.keyAt(j2));
                    protoOutputStream.write(1138166333442L, DebugUtils.sizeValueToString(((Long) val.first).longValue(), new StringBuilder()));
                    protoOutputStream.write(1138166333443L, (String) val.second);
                    protoOutputStream.end(utoken);
                    j2++;
                    NI = NI;
                    proc = proc;
                }
                String str2 = proc;
                protoOutputStream.end(ptoken);
                i14++;
                token = token2;
                j = 1138166333441L;
            }
            int i15 = NI;
            long dtoken = protoOutputStream.start(1146756268034L);
            protoOutputStream.write(1138166333441L, this.mMemWatchDumpProcName);
            protoOutputStream.write(1138166333442L, this.mMemWatchDumpFile);
            protoOutputStream.write(1120986464259L, this.mMemWatchDumpPid);
            protoOutputStream.write(1120986464260L, this.mMemWatchDumpUid);
            protoOutputStream.write(1133871366149L, this.mMemWatchIsUserInitiated);
            protoOutputStream.end(dtoken);
            protoOutputStream.end(token);
        }
        String str3 = this.mTrackAllocationApp;
        if (str3 != null && (str == null || str.equals(str3))) {
            protoOutputStream.write(1138166333473L, this.mTrackAllocationApp);
        }
        if (!(this.mProfileData.getProfileApp() == null && this.mProfileData.getProfileProc() == null && (this.mProfileData.getProfilerInfo() == null || (this.mProfileData.getProfilerInfo().profileFile == null && this.mProfileData.getProfilerInfo().profileFd == null))) && (str == null || str.equals(this.mProfileData.getProfileApp()))) {
            long token3 = protoOutputStream.start(1146756268066L);
            protoOutputStream.write(1138166333441L, this.mProfileData.getProfileApp());
            this.mProfileData.getProfileProc().writeToProto(protoOutputStream, 1146756268034L);
            if (this.mProfileData.getProfilerInfo() != null) {
                this.mProfileData.getProfilerInfo().writeToProto(protoOutputStream, 1146756268035L);
                protoOutputStream.write(1120986464260L, this.mProfileType);
            }
            protoOutputStream.end(token3);
        }
        if (str == null || str.equals(this.mNativeDebuggingApp)) {
            protoOutputStream.write(1138166333475L, this.mNativeDebuggingApp);
        }
        if (str == null) {
            protoOutputStream.write(1133871366180L, this.mAlwaysFinishActivities);
            protoOutputStream.write(1120986464294L, numPers);
            protoOutputStream.write(1133871366183L, this.mProcessesReady);
            protoOutputStream.write(1133871366184L, this.mSystemReady);
            protoOutputStream.write(1133871366185L, this.mBooted);
            protoOutputStream.write(1120986464298L, this.mFactoryTest);
            protoOutputStream.write(1133871366187L, this.mBooting);
            protoOutputStream.write(1133871366188L, this.mCallFinishBooting);
            protoOutputStream.write(1133871366189L, this.mBootAnimationComplete);
            protoOutputStream.write(1112396529710L, this.mLastPowerCheckUptime);
            this.mOomAdjuster.dumpProcessListVariablesLocked(protoOutputStream);
            protoOutputStream.write(1133871366199L, this.mAllowLowerMemLevel);
            protoOutputStream.write(1120986464312L, this.mLastMemoryLevel);
            protoOutputStream.write(1120986464313L, this.mLastNumProcesses);
            long now = SystemClock.uptimeMillis();
            ProtoUtils.toDuration(proto, 1146756268090L, this.mLastIdleTime, now);
            protoOutputStream.write(1112396529723L, getLowRamTimeSinceIdle(now));
            return;
        }
    }

    /* access modifiers changed from: package-private */
    public void writeProcessesToGcToProto(ProtoOutputStream proto, long fieldId, String dumpPackage) {
        if (this.mProcessesToGc.size() > 0) {
            long now = SystemClock.uptimeMillis();
            for (int i = 0; i < this.mProcessesToGc.size(); i++) {
                ProcessRecord r = this.mProcessesToGc.get(i);
                if (dumpPackage == null || dumpPackage.equals(r.info.packageName)) {
                    long token = proto.start(fieldId);
                    r.writeToProto(proto, 1146756268033L);
                    proto.write(1133871366146L, r.reportLowMemory);
                    proto.write(1112396529667L, now);
                    proto.write(1112396529668L, r.lastRequestedGc);
                    proto.write(1112396529669L, r.lastLowMemory);
                    proto.end(token);
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public boolean dumpProcessesToGc(PrintWriter pw, boolean needSep, String dumpPackage) {
        if (this.mProcessesToGc.size() > 0) {
            boolean printed = false;
            long now = SystemClock.uptimeMillis();
            for (int i = 0; i < this.mProcessesToGc.size(); i++) {
                ProcessRecord proc = this.mProcessesToGc.get(i);
                if (dumpPackage == null || dumpPackage.equals(proc.info.packageName)) {
                    if (!printed) {
                        if (needSep) {
                            pw.println();
                        }
                        needSep = true;
                        pw.println("  Processes that are waiting to GC:");
                        printed = true;
                    }
                    pw.print("    Process ");
                    pw.println(proc);
                    pw.print("      lowMem=");
                    pw.print(proc.reportLowMemory);
                    pw.print(", last gced=");
                    pw.print(now - proc.lastRequestedGc);
                    pw.print(" ms ago, last lowMem=");
                    pw.print(now - proc.lastLowMemory);
                    pw.println(" ms ago");
                }
            }
        }
        return needSep;
    }

    /* access modifiers changed from: package-private */
    public void printOomLevel(PrintWriter pw, String name, int adj) {
        pw.print("    ");
        if (adj >= 0) {
            pw.print(' ');
            if (adj < 10) {
                pw.print(' ');
            }
        } else if (adj > -10) {
            pw.print(' ');
        }
        pw.print(adj);
        pw.print(": ");
        pw.print(name);
        pw.print(" (");
        pw.print(stringifySize(this.mProcessList.getMemLevel(adj), 1024));
        pw.println(")");
    }

    /* access modifiers changed from: package-private */
    public boolean dumpOomLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll) {
        boolean needSep = false;
        if (this.mProcessList.getLruSizeLocked() > 0) {
            if (0 != 0) {
                pw.println();
            }
            pw.println("  OOM levels:");
            printOomLevel(pw, "SYSTEM_ADJ", AppUsageStatsManager.ADJ_FOREGROUND);
            printOomLevel(pw, "PERSISTENT_PROC_ADJ", -800);
            printOomLevel(pw, "PERSISTENT_SERVICE_ADJ", -700);
            printOomLevel(pw, "FOREGROUND_APP_ADJ", 0);
            printOomLevel(pw, "VISIBLE_APP_ADJ", 100);
            printOomLevel(pw, "PERCEPTIBLE_APP_ADJ", 200);
            printOomLevel(pw, "PERCEPTIBLE_LOW_APP_ADJ", ScreenRotationAnimationInjector.COVER_OFFSET);
            printOomLevel(pw, "BACKUP_APP_ADJ", DisplayTransformManager.LEVEL_COLOR_MATRIX_INVERT_COLOR);
            printOomLevel(pw, "HEAVY_WEIGHT_APP_ADJ", 400);
            printOomLevel(pw, "SERVICE_ADJ", 500);
            printOomLevel(pw, "HOME_APP_ADJ", SystemService.PHASE_THIRD_PARTY_APPS_CAN_START);
            printOomLevel(pw, "PREVIOUS_APP_ADJ", 700);
            printOomLevel(pw, "SERVICE_B_ADJ", ScreenRotationAnimationInjector.COVER_EGE);
            printOomLevel(pw, "CACHED_APP_MIN_ADJ", 900);
            printOomLevel(pw, "CACHED_APP_MAX_ADJ", 999);
            if (1 != 0) {
                pw.println();
            }
            pw.print("  Process OOM control (");
            pw.print(this.mProcessList.getLruSizeLocked());
            pw.print(" total, non-act at ");
            pw.print(this.mProcessList.getLruSizeLocked() - this.mProcessList.mLruProcessActivityStart);
            pw.print(", non-svc at ");
            pw.print(this.mProcessList.getLruSizeLocked() - this.mProcessList.mLruProcessServiceStart);
            pw.println("):");
            dumpProcessOomList(pw, this, this.mProcessList.mLruProcesses, "    ", "Proc", "PERS", true, (String) null);
            needSep = true;
        }
        dumpProcessesToGc(pw, needSep, (String) null);
        pw.println();
        this.mAtmInternal.dumpForOom(pw);
        return true;
    }

    private boolean reportLmkKillAtOrBelow(PrintWriter pw, int oom_adj) {
        Integer cnt = ProcessList.getLmkdKillCount(0, oom_adj);
        if (cnt == null) {
            return false;
        }
        pw.println("    kills at or below oom_adj " + oom_adj + ": " + cnt);
        return true;
    }

    /* access modifiers changed from: package-private */
    public boolean dumpLmkLocked(PrintWriter pw) {
        pw.println("ACTIVITY MANAGER LMK KILLS (dumpsys activity lmk)");
        Integer cnt = ProcessList.getLmkdKillCount(1001, 1001);
        if (cnt == null) {
            return false;
        }
        pw.println("  Total number of kills: " + cnt);
        if (!reportLmkKillAtOrBelow(pw, 999) || !reportLmkKillAtOrBelow(pw, 900) || !reportLmkKillAtOrBelow(pw, ScreenRotationAnimationInjector.COVER_EGE) || !reportLmkKillAtOrBelow(pw, 700) || !reportLmkKillAtOrBelow(pw, SystemService.PHASE_THIRD_PARTY_APPS_CAN_START) || !reportLmkKillAtOrBelow(pw, 500) || !reportLmkKillAtOrBelow(pw, 400) || !reportLmkKillAtOrBelow(pw, DisplayTransformManager.LEVEL_COLOR_MATRIX_INVERT_COLOR) || !reportLmkKillAtOrBelow(pw, ScreenRotationAnimationInjector.COVER_OFFSET) || !reportLmkKillAtOrBelow(pw, 200) || !reportLmkKillAtOrBelow(pw, 100) || !reportLmkKillAtOrBelow(pw, 0)) {
            return false;
        }
        return true;
    }

    /* access modifiers changed from: protected */
    public boolean dumpProvider(FileDescriptor fd, PrintWriter pw, String name, String[] args, int opti, boolean dumpAll) {
        return this.mProviderMap.dumpProvider(fd, pw, name, args, opti, dumpAll);
    }

    /* access modifiers changed from: protected */
    public boolean dumpProviderProto(FileDescriptor fd, PrintWriter pw, String name, String[] args) {
        return this.mProviderMap.dumpProviderProto(fd, pw, name, args);
    }

    public static class ItemMatcher {
        boolean all = true;
        ArrayList<ComponentName> components;
        ArrayList<Integer> objects;
        ArrayList<String> strings;

        public void build(String name) {
            ComponentName componentName = ComponentName.unflattenFromString(name);
            if (componentName != null) {
                if (this.components == null) {
                    this.components = new ArrayList<>();
                }
                this.components.add(componentName);
                this.all = false;
                return;
            }
            try {
                int objectId = Integer.parseInt(name, 16);
                if (this.objects == null) {
                    this.objects = new ArrayList<>();
                }
                this.objects.add(Integer.valueOf(objectId));
                this.all = false;
            } catch (RuntimeException e) {
                if (this.strings == null) {
                    this.strings = new ArrayList<>();
                }
                this.strings.add(name);
                this.all = false;
            }
        }

        public int build(String[] args, int opti) {
            while (opti < args.length) {
                String name = args[opti];
                if ("--".equals(name)) {
                    return opti + 1;
                }
                build(name);
                opti++;
            }
            return opti;
        }

        public boolean match(Object object, ComponentName comp) {
            if (this.all) {
                return true;
            }
            if (this.components != null) {
                for (int i = 0; i < this.components.size(); i++) {
                    if (this.components.get(i).equals(comp)) {
                        return true;
                    }
                }
            }
            if (this.objects != null) {
                for (int i2 = 0; i2 < this.objects.size(); i2++) {
                    if (System.identityHashCode(object) == this.objects.get(i2).intValue()) {
                        return true;
                    }
                }
            }
            if (this.strings == null) {
                return false;
            }
            String flat = comp.flattenToString();
            for (int i3 = 0; i3 < this.strings.size(); i3++) {
                if (flat.contains(this.strings.get(i3))) {
                    return true;
                }
            }
            return false;
        }
    }

    /* access modifiers changed from: package-private */
    public void writeBroadcastsToProtoLocked(ProtoOutputStream proto) {
        ProtoOutputStream protoOutputStream = proto;
        if (this.mRegisteredReceivers.size() > 0) {
            for (ReceiverList r : this.mRegisteredReceivers.values()) {
                r.writeToProto(protoOutputStream, 2246267895809L);
            }
        }
        this.mReceiverResolver.writeToProto(protoOutputStream, 1146756268034L);
        for (BroadcastQueue q : this.mBroadcastQueues) {
            q.writeToProto(protoOutputStream, 2246267895811L);
        }
        int user = 0;
        while (true) {
            long token = 1138166333441L;
            if (user < this.mStickyBroadcasts.size()) {
                long token2 = protoOutputStream.start(2246267895812L);
                protoOutputStream.write(1120986464257L, this.mStickyBroadcasts.keyAt(user));
                for (Map.Entry<String, ArrayList<Intent>> ent : this.mStickyBroadcasts.valueAt(user).entrySet()) {
                    long actionToken = protoOutputStream.start(2246267895810L);
                    protoOutputStream.write(token, ent.getKey());
                    Iterator it = ent.getValue().iterator();
                    while (it.hasNext()) {
                        ((Intent) it.next()).writeToProto(proto, 2246267895810L, false, true, true, false);
                        actionToken = actionToken;
                        token2 = token2;
                    }
                    long j = token2;
                    protoOutputStream.end(actionToken);
                    token = 1138166333441L;
                }
                protoOutputStream.end(token2);
                user++;
            } else {
                long handlerToken = protoOutputStream.start(1146756268037L);
                protoOutputStream.write(1138166333441L, this.mHandler.toString());
                this.mHandler.getLooper().writeToProto(protoOutputStream, 1146756268034L);
                protoOutputStream.end(handlerToken);
                return;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void dumpAllowedAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        pw.println("ACTIVITY MANAGER ALLOWED ASSOCIATION STATE (dumpsys activity allowed-associations)");
        boolean printed = false;
        if (this.mAllowedAssociations != null) {
            for (int i = 0; i < this.mAllowedAssociations.size(); i++) {
                String pkg = this.mAllowedAssociations.keyAt(i);
                ArraySet<String> asc = this.mAllowedAssociations.valueAt(i).getAllowedPackageAssociations();
                boolean printedHeader = false;
                for (int j = 0; j < asc.size(); j++) {
                    if (dumpPackage == null || pkg.equals(dumpPackage) || asc.valueAt(j).equals(dumpPackage)) {
                        if (!printed) {
                            pw.println("  Allowed associations (by restricted package):");
                            printed = true;
                        }
                        if (!printedHeader) {
                            pw.print("  * ");
                            pw.print(pkg);
                            pw.println(":");
                            printedHeader = true;
                        }
                        pw.print("      Allow: ");
                        pw.println(asc.valueAt(j));
                    }
                }
                if (this.mAllowedAssociations.valueAt(i).isDebuggable()) {
                    pw.println("      (debuggable)");
                }
            }
        }
        if (!printed) {
            pw.println("  (No association restrictions)");
        }
    }

    /* access modifiers changed from: package-private */
    public void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        String dumpPackage2;
        boolean dumpAll2;
        boolean onlyHistory;
        boolean needSep;
        String str;
        String str2;
        boolean printedAnything;
        boolean needSep2;
        boolean dumpAll3;
        PrintWriter printWriter = pw;
        String[] strArr = args;
        int i = opti;
        boolean needSep3 = false;
        boolean printedAnything2 = false;
        String str3 = dumpPackage;
        if ("history".equals(str3)) {
            if (i >= strArr.length || !"-s".equals(strArr[i])) {
                dumpAll3 = dumpAll;
            } else {
                dumpAll3 = false;
            }
            onlyHistory = true;
            dumpAll2 = dumpAll3;
            dumpPackage2 = null;
        } else {
            dumpAll2 = dumpAll;
            onlyHistory = false;
            dumpPackage2 = str3;
        }
        printWriter.println("ACTIVITY MANAGER BROADCAST STATE (dumpsys activity broadcasts)");
        if (!onlyHistory && dumpAll2) {
            if (this.mRegisteredReceivers.size() > 0) {
                boolean printed = false;
                for (ReceiverList r : this.mRegisteredReceivers.values()) {
                    if (dumpPackage2 == null || (r.app != null && dumpPackage2.equals(r.app.info.packageName))) {
                        if (!printed) {
                            printWriter.println("  Registered Receivers:");
                            needSep3 = true;
                            printed = true;
                            printedAnything2 = true;
                        }
                        printWriter.print("  * ");
                        printWriter.println(r);
                        r.dump(printWriter, "    ");
                    }
                }
                needSep2 = needSep3;
                printedAnything = printedAnything2;
            } else {
                needSep2 = false;
                printedAnything = false;
            }
            if (this.mReceiverResolver.dump(pw, needSep2 ? "\n  Receiver Resolver Table:" : "  Receiver Resolver Table:", "    ", dumpPackage2, false, false)) {
                needSep3 = true;
                printedAnything2 = true;
            } else {
                needSep3 = needSep2;
                printedAnything2 = printedAnything;
            }
        }
        BroadcastQueue[] broadcastQueueArr = this.mBroadcastQueues;
        int length = broadcastQueueArr.length;
        boolean z = false;
        boolean needSep4 = needSep3;
        boolean printedAnything3 = printedAnything2;
        int i2 = 0;
        while (i2 < length) {
            needSep4 = broadcastQueueArr[i2].dumpLocked(fd, pw, args, opti, dumpAll2, dumpPackage2, needSep4);
            printedAnything3 |= needSep4;
            i2++;
            z = z;
            length = length;
            broadcastQueueArr = broadcastQueueArr;
            String[] strArr2 = args;
        }
        boolean z2 = z;
        boolean needSep5 = true;
        if (!onlyHistory && this.mStickyBroadcasts != null && dumpPackage2 == null) {
            for (int user = 0; user < this.mStickyBroadcasts.size(); user++) {
                if (needSep5) {
                    pw.println();
                }
                needSep5 = true;
                printedAnything3 = true;
                printWriter.print("  Sticky broadcasts for user ");
                printWriter.print(this.mStickyBroadcasts.keyAt(user));
                String str4 = ":";
                printWriter.println(str4);
                StringBuilder sb = new StringBuilder(128);
                for (Map.Entry<String, ArrayList<Intent>> ent : this.mStickyBroadcasts.valueAt(user).entrySet()) {
                    printWriter.print("  * Sticky action ");
                    printWriter.print(ent.getKey());
                    if (dumpAll2) {
                        printWriter.println(str4);
                        ArrayList<Intent> intents = ent.getValue();
                        int N = intents.size();
                        int i3 = 0;
                        while (i3 < N) {
                            boolean needSep6 = needSep5;
                            sb.setLength(0);
                            sb.append("    Intent: ");
                            intents.get(i3).toShortString(sb, false, true, false, false);
                            printWriter.println(sb.toString());
                            Bundle bundle = intents.get(i3).getExtras();
                            if (bundle != null) {
                                str2 = str4;
                                printWriter.print("      ");
                                printWriter.println(bundle.toString());
                            } else {
                                str2 = str4;
                            }
                            i3++;
                            needSep5 = needSep6;
                            str4 = str2;
                        }
                        needSep = needSep5;
                        str = str4;
                    } else {
                        needSep = needSep5;
                        str = str4;
                        printWriter.println("");
                    }
                    needSep5 = needSep;
                    str4 = str;
                }
            }
        }
        if (!onlyHistory && dumpAll2) {
            pw.println();
            for (BroadcastQueue queue : this.mBroadcastQueues) {
                printWriter.println("  mBroadcastsScheduled [" + queue.mQueueName + "]=" + queue.mBroadcastsScheduled);
            }
            printWriter.println("  mHandler:");
            this.mHandler.dump(new PrintWriterPrinter(printWriter), "    ");
            printedAnything3 = true;
        }
        if (!printedAnything3) {
            printWriter.println("  (nothing)");
        }
    }

    /* access modifiers changed from: package-private */
    public void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        PrintWriter printWriter = pw;
        String str = dumpPackage;
        if (this.mCurBroadcastStats != null) {
            pw.println("ACTIVITY MANAGER BROADCAST STATS STATE (dumpsys activity broadcast-stats)");
            long now = SystemClock.elapsedRealtime();
            if (this.mLastBroadcastStats != null) {
                pw.print("  Last stats (from ");
                TimeUtils.formatDuration(this.mLastBroadcastStats.mStartRealtime, now, pw);
                pw.print(" to ");
                TimeUtils.formatDuration(this.mLastBroadcastStats.mEndRealtime, now, pw);
                pw.print(", ");
                TimeUtils.formatDuration(this.mLastBroadcastStats.mEndUptime - this.mLastBroadcastStats.mStartUptime, pw);
                pw.println(" uptime):");
                if (!this.mLastBroadcastStats.dumpStats(pw, "    ", str)) {
                    pw.println("    (nothing)");
                }
                pw.println();
            }
            pw.print("  Current stats (from ");
            TimeUtils.formatDuration(this.mCurBroadcastStats.mStartRealtime, now, pw);
            pw.print(" to now, ");
            TimeUtils.formatDuration(SystemClock.uptimeMillis() - this.mCurBroadcastStats.mStartUptime, pw);
            pw.println(" uptime):");
            if (!this.mCurBroadcastStats.dumpStats(pw, "    ", str)) {
                pw.println("    (nothing)");
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean fullCheckin, String dumpPackage) {
        if (this.mCurBroadcastStats != null) {
            BroadcastStats broadcastStats = this.mLastBroadcastStats;
            if (broadcastStats != null) {
                broadcastStats.dumpCheckinStats(pw, dumpPackage);
                if (fullCheckin) {
                    this.mLastBroadcastStats = null;
                    return;
                }
            }
            this.mCurBroadcastStats.dumpCheckinStats(pw, dumpPackage);
            if (fullCheckin) {
                this.mCurBroadcastStats = null;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void dumpProvidersLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        new ItemMatcher().build(args, opti);
        pw.println("ACTIVITY MANAGER CONTENT PROVIDERS (dumpsys activity providers)");
        boolean needSep = this.mProviderMap.dumpProvidersLocked(pw, dumpAll, dumpPackage);
        boolean printedAnything = false | needSep;
        if (this.mLaunchingProviders.size() > 0) {
            boolean printed = false;
            for (int i = this.mLaunchingProviders.size() - 1; i >= 0; i--) {
                ContentProviderRecord r = this.mLaunchingProviders.get(i);
                if (dumpPackage == null || dumpPackage.equals(r.name.getPackageName())) {
                    if (!printed) {
                        if (needSep) {
                            pw.println();
                        }
                        needSep = true;
                        pw.println("  Launching content providers:");
                        printed = true;
                        printedAnything = true;
                    }
                    pw.print("  Launching #");
                    pw.print(i);
                    pw.print(": ");
                    pw.println(r);
                }
            }
        }
        if (!printedAnything) {
            pw.println("  (nothing)");
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void dumpPermissionsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        pw.println("ACTIVITY MANAGER URI PERMISSIONS (dumpsys activity permissions)");
        this.mUgmInternal.dump(pw, dumpAll, dumpPackage);
    }

    private static final int dumpProcessList(PrintWriter pw, ActivityManagerService service, List list, String prefix, String normalLabel, String persistentLabel, String dumpPackage) {
        int numPers = 0;
        for (int i = list.size() - 1; i >= 0; i--) {
            ProcessRecord r = (ProcessRecord) list.get(i);
            if (dumpPackage == null || dumpPackage.equals(r.info.packageName)) {
                Object[] objArr = new Object[4];
                objArr[0] = prefix;
                objArr[1] = r.isPersistent() ? persistentLabel : normalLabel;
                objArr[2] = Integer.valueOf(i);
                objArr[3] = r.toString();
                pw.println(String.format("%s%s #%2d: %s", objArr));
                if (r.isPersistent()) {
                    numPers++;
                }
            }
        }
        return numPers;
    }

    private static final ArrayList<Pair<ProcessRecord, Integer>> sortProcessOomList(List<ProcessRecord> origList, String dumpPackage) {
        ArrayList<Pair<ProcessRecord, Integer>> list = new ArrayList<>(origList.size());
        for (int i = 0; i < origList.size(); i++) {
            ProcessRecord r = origList.get(i);
            if (dumpPackage == null || r.pkgList.containsKey(dumpPackage)) {
                list.add(new Pair(origList.get(i), Integer.valueOf(i)));
            }
        }
        Collections.sort(list, new Comparator<Pair<ProcessRecord, Integer>>() {
            public int compare(Pair<ProcessRecord, Integer> object1, Pair<ProcessRecord, Integer> object2) {
                if (((ProcessRecord) object1.first).setAdj != ((ProcessRecord) object2.first).setAdj) {
                    if (((ProcessRecord) object1.first).setAdj > ((ProcessRecord) object2.first).setAdj) {
                        return -1;
                    }
                    return 1;
                } else if (((ProcessRecord) object1.first).setProcState != ((ProcessRecord) object2.first).setProcState) {
                    if (((ProcessRecord) object1.first).setProcState > ((ProcessRecord) object2.first).setProcState) {
                        return -1;
                    }
                    return 1;
                } else if (((Integer) object1.second).intValue() == ((Integer) object2.second).intValue()) {
                    return 0;
                } else {
                    if (((Integer) object1.second).intValue() > ((Integer) object2.second).intValue()) {
                        return -1;
                    }
                    return 1;
                }
            }
        });
        return list;
    }

    private static final boolean writeProcessOomListToProto(ProtoOutputStream proto, long fieldId, ActivityManagerService service, List<ProcessRecord> origList, boolean inclDetails, String dumpPackage) {
        long curUptime;
        ArrayList<Pair<ProcessRecord, Integer>> list;
        ProtoOutputStream protoOutputStream = proto;
        ArrayList<Pair<ProcessRecord, Integer>> list2 = sortProcessOomList(origList, dumpPackage);
        if (list2.isEmpty()) {
            return false;
        }
        long curUptime2 = SystemClock.uptimeMillis();
        boolean z = true;
        int i = list2.size() - 1;
        while (i >= 0) {
            ProcessRecord r = (ProcessRecord) list2.get(i).first;
            long token = proto.start(fieldId);
            String oomAdj = ProcessList.makeOomAdjString(r.setAdj, z);
            protoOutputStream.write(1133871366145L, r.isPersistent());
            protoOutputStream.write(1120986464258L, (origList.size() - (z ? 1 : 0)) - ((Integer) list2.get(i).second).intValue());
            protoOutputStream.write(1138166333443L, oomAdj);
            int schedGroup = -1;
            int i2 = r.setSchedGroup;
            if (i2 == 0) {
                schedGroup = 0;
            } else if (i2 == 2) {
                schedGroup = 1;
            } else if (i2 == 3) {
                schedGroup = 2;
            } else if (i2 == 4) {
                schedGroup = 3;
            }
            if (schedGroup != -1) {
                protoOutputStream.write(1159641169924L, schedGroup);
            }
            if (r.hasForegroundActivities()) {
                protoOutputStream.write(1133871366149L, z);
            } else if (r.hasForegroundServices()) {
                protoOutputStream.write(1133871366150L, z);
            }
            protoOutputStream.write(1159641169927L, ProcessList.makeProcStateProtoEnum(r.getCurProcState()));
            ProcessRecord r2 = r;
            protoOutputStream.write(1120986464264L, r2.trimMemoryLevel);
            r2.writeToProto(protoOutputStream, 1146756268041L);
            protoOutputStream.write(1138166333450L, r2.adjType);
            if (!(r2.adjSource == null && r2.adjTarget == null)) {
                if (r2.adjTarget instanceof ComponentName) {
                    ((ComponentName) r2.adjTarget).writeToProto(protoOutputStream, 1146756268043L);
                } else if (r2.adjTarget != null) {
                    protoOutputStream.write(1138166333452L, r2.adjTarget.toString());
                }
                if (r2.adjSource instanceof ProcessRecord) {
                    ((ProcessRecord) r2.adjSource).writeToProto(protoOutputStream, 1146756268045L);
                } else if (r2.adjSource != null) {
                    protoOutputStream.write(1138166333454L, r2.adjSource.toString());
                }
            }
            if (inclDetails) {
                long detailToken = protoOutputStream.start(1146756268047L);
                protoOutputStream.write(1120986464257L, r2.maxAdj);
                protoOutputStream.write(1120986464258L, r2.getCurRawAdj());
                protoOutputStream.write(1120986464259L, r2.setRawAdj);
                protoOutputStream.write(1120986464260L, r2.curAdj);
                protoOutputStream.write(1120986464261L, r2.setAdj);
                protoOutputStream.write(1159641169927L, ProcessList.makeProcStateProtoEnum(r2.getCurProcState()));
                protoOutputStream.write(1159641169928L, ProcessList.makeProcStateProtoEnum(r2.setProcState));
                protoOutputStream.write(1138166333449L, DebugUtils.sizeValueToString(r2.lastPss * 1024, new StringBuilder()));
                protoOutputStream.write(1138166333450L, DebugUtils.sizeValueToString(r2.lastSwapPss * 1024, new StringBuilder()));
                protoOutputStream.write(1138166333451L, DebugUtils.sizeValueToString(r2.lastCachedPss * 1024, new StringBuilder()));
                protoOutputStream.write(1133871366156L, r2.cached);
                protoOutputStream.write(1133871366157L, r2.empty);
                protoOutputStream.write(1133871366158L, r2.hasAboveClient);
                if (r2.setProcState < 11) {
                    list = list2;
                    curUptime = curUptime2;
                    String str = oomAdj;
                    int i3 = schedGroup;
                } else if (r2.lastCpuTime != 0) {
                    long uptimeSince = curUptime2 - service.mLastPowerCheckUptime;
                    list = list2;
                    curUptime = curUptime2;
                    long timeUsed = r2.curCpuTime - r2.lastCpuTime;
                    long cpuTimeToken = protoOutputStream.start(1146756268047L);
                    String str2 = oomAdj;
                    int i4 = schedGroup;
                    protoOutputStream.write(1112396529665L, uptimeSince);
                    protoOutputStream.write(1112396529666L, timeUsed);
                    long j = timeUsed;
                    protoOutputStream.write(1108101562371L, (((double) timeUsed) * 100.0d) / ((double) uptimeSince));
                    protoOutputStream.end(cpuTimeToken);
                } else {
                    list = list2;
                    curUptime = curUptime2;
                    String str3 = oomAdj;
                    int i5 = schedGroup;
                }
                protoOutputStream.end(detailToken);
            } else {
                list = list2;
                curUptime = curUptime2;
                String str4 = oomAdj;
                int i6 = schedGroup;
            }
            protoOutputStream.end(token);
            i--;
            List<ProcessRecord> list3 = origList;
            String str5 = dumpPackage;
            list2 = list;
            curUptime2 = curUptime;
            z = true;
        }
        return true;
    }

    private static final boolean dumpProcessOomList(PrintWriter pw, ActivityManagerService service, List<ProcessRecord> origList, String prefix, String normalLabel, String persistentLabel, boolean inclDetails, String dumpPackage) {
        char schedGroup;
        char foreground;
        char c;
        long curUptime;
        PrintWriter printWriter = pw;
        String str = prefix;
        ArrayList<Pair<ProcessRecord, Integer>> list = sortProcessOomList(origList, dumpPackage);
        boolean z = false;
        if (list.isEmpty()) {
            return false;
        }
        long curUptime2 = SystemClock.uptimeMillis();
        long uptimeSince = curUptime2 - service.mLastPowerCheckUptime;
        int i = 1;
        int i2 = list.size() - 1;
        while (i2 >= 0) {
            ProcessRecord r = (ProcessRecord) list.get(i2).first;
            String oomAdj = ProcessList.makeOomAdjString(r.setAdj, z);
            int i3 = r.setSchedGroup;
            if (i3 == 0) {
                schedGroup = 'B';
            } else if (i3 == i) {
                schedGroup = 'R';
            } else if (i3 == 2) {
                schedGroup = 'F';
            } else if (i3 != 3) {
                schedGroup = '?';
            } else {
                schedGroup = 'T';
            }
            if (r.hasForegroundActivities()) {
                foreground = 'A';
            } else if (r.hasForegroundServices() != 0) {
                foreground = 'S';
            } else {
                foreground = ' ';
            }
            String procState = ProcessList.makeProcStateString(r.getCurProcState());
            printWriter.print(str);
            printWriter.print(r.isPersistent() ? persistentLabel : normalLabel);
            printWriter.print(" #");
            int num = (origList.size() - 1) - ((Integer) list.get(i2).second).intValue();
            ArrayList<Pair<ProcessRecord, Integer>> list2 = list;
            if (num < 10) {
                printWriter.print(' ');
            }
            printWriter.print(num);
            printWriter.print(": ");
            printWriter.print(oomAdj);
            printWriter.print(' ');
            printWriter.print(schedGroup);
            printWriter.print('/');
            printWriter.print(foreground);
            printWriter.print('/');
            printWriter.print(procState);
            printWriter.print(" trm:");
            if (r.trimMemoryLevel < 10) {
                c = ' ';
                printWriter.print(' ');
            } else {
                c = ' ';
            }
            printWriter.print(r.trimMemoryLevel);
            printWriter.print(c);
            printWriter.print(r.toShortString());
            printWriter.print(" (");
            printWriter.print(r.adjType);
            printWriter.println(')');
            int i4 = num;
            if (!(r.adjSource == null && r.adjTarget == null)) {
                printWriter.print(str);
                printWriter.print("    ");
                if (r.adjTarget instanceof ComponentName) {
                    printWriter.print(((ComponentName) r.adjTarget).flattenToShortString());
                } else if (r.adjTarget != null) {
                    printWriter.print(r.adjTarget.toString());
                } else {
                    printWriter.print("{null}");
                }
                printWriter.print("<=");
                if (r.adjSource instanceof ProcessRecord) {
                    printWriter.print("Proc{");
                    printWriter.print(((ProcessRecord) r.adjSource).toShortString());
                    printWriter.println("}");
                } else if (r.adjSource != null) {
                    printWriter.println(r.adjSource.toString());
                } else {
                    printWriter.println("{null}");
                }
            }
            if (inclDetails) {
                printWriter.print(str);
                printWriter.print("    ");
                printWriter.print("oom: max=");
                printWriter.print(r.maxAdj);
                printWriter.print(" curRaw=");
                printWriter.print(r.getCurRawAdj());
                printWriter.print(" procState: max=");
                printWriter.print(r.maxProcState);
                printWriter.print(" setRaw=");
                printWriter.print(r.setRawAdj);
                printWriter.print(" cur=");
                printWriter.print(r.curAdj);
                printWriter.print(" set=");
                printWriter.println(r.setAdj);
                printWriter.print(str);
                printWriter.print("    ");
                printWriter.print("state: cur=");
                printWriter.print(ProcessList.makeProcStateString(r.getCurProcState()));
                printWriter.print(" set=");
                printWriter.print(ProcessList.makeProcStateString(r.setProcState));
                printWriter.print(" lastPss=");
                DebugUtils.printSizeValue(printWriter, r.lastPss * 1024);
                printWriter.print(" lastSwapPss=");
                DebugUtils.printSizeValue(printWriter, r.lastSwapPss * 1024);
                printWriter.print(" lastCachedPss=");
                DebugUtils.printSizeValue(printWriter, r.lastCachedPss * 1024);
                pw.println();
                printWriter.print(str);
                printWriter.print("    ");
                printWriter.print("cached=");
                printWriter.print(r.cached);
                printWriter.print(" empty=");
                printWriter.print(r.empty);
                printWriter.print(" hasAboveClient=");
                printWriter.println(r.hasAboveClient);
                if (r.setProcState < 11) {
                    curUptime = curUptime2;
                    char c2 = schedGroup;
                } else if (r.lastCpuTime != 0) {
                    curUptime = curUptime2;
                    char c3 = schedGroup;
                    long timeUsed = r.curCpuTime - r.lastCpuTime;
                    printWriter.print(str);
                    printWriter.print("    ");
                    printWriter.print("run cpu over ");
                    TimeUtils.formatDuration(uptimeSince, printWriter);
                    printWriter.print(" used ");
                    TimeUtils.formatDuration(timeUsed, printWriter);
                    printWriter.print(" (");
                    printWriter.print((100 * timeUsed) / uptimeSince);
                    printWriter.println("%)");
                } else {
                    curUptime = curUptime2;
                    char c4 = schedGroup;
                }
            } else {
                curUptime = curUptime2;
                char c5 = schedGroup;
            }
            i2--;
            ActivityManagerService activityManagerService = service;
            List<ProcessRecord> list3 = origList;
            String str2 = dumpPackage;
            list = list2;
            curUptime2 = curUptime;
            z = false;
            i = 1;
        }
        return true;
    }

    /* access modifiers changed from: package-private */
    public ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs, String[] args) {
        ArrayList<ProcessRecord> collectProcessesLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                collectProcessesLocked = this.mProcessList.collectProcessesLocked(start, allPkgs, args);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return collectProcessesLocked;
    }

    /* Debug info: failed to restart local var, previous not found, register: 10 */
    /* access modifiers changed from: package-private */
    public final void dumpGraphicsHardwareUsage(FileDescriptor fd, PrintWriter pw, String[] args) {
        TransferPipe tp;
        ArrayList<ProcessRecord> procs = collectProcesses(pw, 0, false, args);
        if (procs == null) {
            pw.println("No process found for: " + args[0]);
            return;
        }
        long uptime = SystemClock.uptimeMillis();
        long realtime = SystemClock.elapsedRealtime();
        pw.println("Applications Graphics Acceleration Info:");
        pw.println("Uptime: " + uptime + " Realtime: " + realtime);
        for (int i = procs.size() + -1; i >= 0; i--) {
            ProcessRecord r = procs.get(i);
            if (r.thread != null) {
                pw.println("\n** Graphics info for pid " + r.pid + " [" + r.processName + "] **");
                pw.flush();
                try {
                    tp = new TransferPipe();
                    tp.startFdRead(fd, "DumpGfxPipe");
                    r.thread.dumpGfxInfo(tp.getWriteFd(), args);
                    tp.go(fd, 30000);
                    tp.kill();
                } catch (IOException e) {
                    pw.println("Failure while dumping the app: " + r);
                    pw.flush();
                } catch (RemoteException e2) {
                    pw.println("Got a RemoteException while dumping the app " + r);
                    pw.flush();
                } catch (Throwable th) {
                    tp.kill();
                    throw th;
                }
            }
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 6 */
    /* access modifiers changed from: package-private */
    public final void dumpDbInfo(FileDescriptor fd, PrintWriter pw, String[] args) {
        TransferPipe tp;
        ArrayList<ProcessRecord> procs = collectProcesses(pw, 0, false, args);
        if (procs == null) {
            pw.println("No process found for: " + args[0]);
            return;
        }
        pw.println("Applications Database Info:");
        for (int i = procs.size() - 1; i >= 0; i--) {
            ProcessRecord r = procs.get(i);
            if (r.thread != null) {
                pw.println("\n** Database info for pid " + r.pid + " [" + r.processName + "] **");
                pw.flush();
                try {
                    tp = new TransferPipe();
                    r.thread.dumpDbInfo(tp.getWriteFd(), args);
                    tp.go(fd);
                    tp.kill();
                } catch (IOException e) {
                    pw.println("Failure while dumping the app: " + r);
                    pw.flush();
                } catch (RemoteException e2) {
                    pw.println("Got a RemoteException while dumping the app " + r);
                    pw.flush();
                } catch (Throwable th) {
                    tp.kill();
                    throw th;
                }
            }
        }
    }

    static final class MemItem {
        final boolean hasActivities;
        final int id;
        final boolean isProc = false;
        final String label;
        final long pss;
        final String shortLabel;
        ArrayList<MemItem> subitems;
        final long swapPss;

        public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id, boolean _hasActivities) {
            this.label = _label;
            this.shortLabel = _shortLabel;
            this.pss = _pss;
            this.swapPss = _swapPss;
            this.id = _id;
            this.hasActivities = _hasActivities;
        }

        public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id) {
            this.label = _label;
            this.shortLabel = _shortLabel;
            this.pss = _pss;
            this.swapPss = _swapPss;
            this.id = _id;
            this.hasActivities = false;
        }
    }

    private static void sortMemItems(List<MemItem> items) {
        Collections.sort(items, new Comparator<MemItem>() {
            public int compare(MemItem lhs, MemItem rhs) {
                if (lhs.pss < rhs.pss) {
                    return 1;
                }
                if (lhs.pss > rhs.pss) {
                    return -1;
                }
                return 0;
            }
        });
    }

    static final void dumpMemItems(PrintWriter pw, String prefix, String tag, ArrayList<MemItem> items, boolean sort, boolean isCompact, boolean dumpSwapPss) {
        PrintWriter printWriter = pw;
        String str = prefix;
        String str2 = tag;
        if (sort && !isCompact) {
            sortMemItems(items);
        }
        for (int i = 0; i < items.size(); i++) {
            MemItem mi = items.get(i);
            if (isCompact) {
                Object obj = "N/A";
                if (mi.isProc) {
                    pw.print("proc,");
                    pw.print(tag);
                    pw.print(",");
                    pw.print(mi.shortLabel);
                    pw.print(",");
                    pw.print(mi.id);
                    pw.print(",");
                    pw.print(mi.pss);
                    pw.print(",");
                    if (dumpSwapPss) {
                        obj = Long.valueOf(mi.swapPss);
                    }
                    pw.print(obj);
                    pw.println(mi.hasActivities ? ",a" : ",e");
                } else {
                    pw.print(tag);
                    pw.print(",");
                    pw.print(mi.shortLabel);
                    pw.print(",");
                    pw.print(mi.pss);
                    pw.print(",");
                    if (dumpSwapPss) {
                        obj = Long.valueOf(mi.swapPss);
                    }
                    pw.println(obj);
                }
            } else if (dumpSwapPss) {
                pw.printf("%s%s: %-60s (%s in swap)\n", new Object[]{str, stringifyKBSize(mi.pss), mi.label, stringifyKBSize(mi.swapPss)});
            } else {
                pw.printf("%s%s: %s\n", new Object[]{str, stringifyKBSize(mi.pss), mi.label});
            }
            if (mi.subitems != null) {
                dumpMemItems(pw, prefix + "    ", mi.shortLabel, mi.subitems, true, isCompact, dumpSwapPss);
            }
        }
        ArrayList<MemItem> arrayList = items;
    }

    static final void dumpMemItems(ProtoOutputStream proto, long fieldId, String tag, ArrayList<MemItem> items, boolean sort, boolean dumpSwapPss) {
        ProtoOutputStream protoOutputStream = proto;
        if (sort) {
            sortMemItems(items);
        }
        for (int i = 0; i < items.size(); i++) {
            MemItem mi = items.get(i);
            long token = proto.start(fieldId);
            proto.write(1138166333441L, tag);
            proto.write(1138166333442L, mi.shortLabel);
            proto.write(1133871366148L, mi.isProc);
            proto.write(1120986464259L, mi.id);
            proto.write(1133871366149L, mi.hasActivities);
            proto.write(1112396529670L, mi.pss);
            if (dumpSwapPss) {
                proto.write(1112396529671L, mi.swapPss);
            }
            if (mi.subitems != null) {
                dumpMemItems(proto, 2246267895816L, mi.shortLabel, mi.subitems, true, dumpSwapPss);
            }
            proto.end(token);
        }
        String str = tag;
        ArrayList<MemItem> arrayList = items;
    }

    static final void appendMemBucket(StringBuilder out, long memKB, String label, boolean stackLike) {
        int start;
        int start2 = label.lastIndexOf(46);
        if (start2 >= 0) {
            start = start2 + 1;
        } else {
            start = 0;
        }
        int end = label.length();
        int i = 0;
        while (true) {
            long[] jArr = DUMP_MEM_BUCKETS;
            String str = "MB.";
            if (i >= jArr.length) {
                out.append(memKB / 1024);
                if (!stackLike) {
                    str = "MB ";
                }
                out.append(str);
                out.append(label, start, end);
                return;
            } else if (jArr[i] >= memKB) {
                out.append(jArr[i] / 1024);
                if (!stackLike) {
                    str = "MB ";
                }
                out.append(str);
                out.append(label, start, end);
                return;
            } else {
                i++;
            }
        }
    }

    private final void dumpApplicationMemoryUsageHeader(PrintWriter pw, long uptime, long realtime, boolean isCheckinRequest, boolean isCompact) {
        if (isCompact) {
            pw.print("version,");
            pw.println(1);
        }
        if (isCheckinRequest || isCompact) {
            pw.print("time,");
            pw.print(uptime);
            pw.print(",");
            pw.println(realtime);
            return;
        }
        pw.println("Applications Memory Usage (in Kilobytes):");
        pw.println("Uptime: " + uptime + " Realtime: " + realtime);
    }

    private final long[] getKsmInfo() {
        int[] SINGLE_LONG_FORMAT = {8224};
        long[] longTmp = new long[1];
        Process.readProcFile("/sys/kernel/mm/ksm/pages_shared", SINGLE_LONG_FORMAT, (String[]) null, longTmp, (float[]) null);
        longTmp[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_sharing", SINGLE_LONG_FORMAT, (String[]) null, longTmp, (float[]) null);
        longTmp[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_unshared", SINGLE_LONG_FORMAT, (String[]) null, longTmp, (float[]) null);
        longTmp[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_volatile", SINGLE_LONG_FORMAT, (String[]) null, longTmp, (float[]) null);
        return new long[]{(longTmp[0] * 4096) / 1024, (longTmp[0] * 4096) / 1024, (longTmp[0] * 4096) / 1024, (longTmp[0] * 4096) / 1024};
    }

    private static String stringifySize(long size, int order) {
        Locale locale = Locale.US;
        if (order == 1) {
            return String.format(locale, "%,13d", new Object[]{Long.valueOf(size)});
        } else if (order == 1024) {
            return String.format(locale, "%,9dK", new Object[]{Long.valueOf(size / 1024)});
        } else if (order == 1048576) {
            return String.format(locale, "%,5dM", new Object[]{Long.valueOf((size / 1024) / 1024)});
        } else if (order == 1073741824) {
            return String.format(locale, "%,1dG", new Object[]{Long.valueOf(((size / 1024) / 1024) / 1024)});
        } else {
            throw new IllegalArgumentException("Invalid size order");
        }
    }

    private static String stringifyKBSize(long size) {
        return stringifySize(1024 * size, 1024);
    }

    private static class MemoryUsageDumpOptions {
        boolean dumpDalvik;
        boolean dumpDetails;
        boolean dumpFullDetails;
        boolean dumpProto;
        boolean dumpSummaryOnly;
        boolean dumpSwapPss;
        boolean dumpUnreachable;
        boolean isCheckinRequest;
        boolean isCompact;
        boolean localOnly;
        boolean oomOnly;
        boolean packages;

        private MemoryUsageDumpOptions() {
        }
    }

    /* access modifiers changed from: package-private */
    public final void dumpApplicationMemoryUsage(FileDescriptor fd, PrintWriter pw, String prefix, String[] args, boolean brief, PrintWriter categoryPw, boolean asProto) {
        String opt;
        PrintWriter printWriter = pw;
        String[] strArr = args;
        MemoryUsageDumpOptions opts = new MemoryUsageDumpOptions();
        opts.dumpDetails = false;
        opts.dumpFullDetails = false;
        opts.dumpDalvik = false;
        opts.dumpSummaryOnly = false;
        opts.dumpUnreachable = false;
        opts.oomOnly = false;
        opts.isCompact = false;
        opts.localOnly = false;
        opts.packages = false;
        opts.isCheckinRequest = false;
        opts.dumpSwapPss = false;
        opts.dumpProto = asProto;
        int opti = 0;
        while (opti < strArr.length && (opt = strArr[opti]) != null && opt.length() > 0 && opt.charAt(0) == '-') {
            opti++;
            if ("-a".equals(opt)) {
                opts.dumpDetails = true;
                opts.dumpFullDetails = true;
                opts.dumpDalvik = true;
                opts.dumpSwapPss = true;
            } else if ("-d".equals(opt)) {
                opts.dumpDalvik = true;
            } else if ("-c".equals(opt)) {
                opts.isCompact = true;
            } else if ("-s".equals(opt)) {
                opts.dumpDetails = true;
                opts.dumpSummaryOnly = true;
            } else if ("-S".equals(opt)) {
                opts.dumpSwapPss = true;
            } else if ("--unreachable".equals(opt)) {
                opts.dumpUnreachable = true;
            } else if ("--oom".equals(opt)) {
                opts.oomOnly = true;
            } else if ("--local".equals(opt)) {
                opts.localOnly = true;
            } else if ("--package".equals(opt)) {
                opts.packages = true;
            } else if ("--checkin".equals(opt)) {
                opts.isCheckinRequest = true;
            } else if (PriorityDump.PROTO_ARG.equals(opt)) {
                opts.dumpProto = true;
            } else if ("-h".equals(opt)) {
                printWriter.println("meminfo dump options: [-a] [-d] [-c] [-s] [--oom] [process]");
                printWriter.println("  -a: include all available information for each process.");
                printWriter.println("  -d: include dalvik details.");
                printWriter.println("  -c: dump in a compact machine-parseable representation.");
                printWriter.println("  -s: dump only summary of application memory usage.");
                printWriter.println("  -S: dump also SwapPss.");
                printWriter.println("  --oom: only show processes organized by oom adj.");
                printWriter.println("  --local: only collect details locally, don't call process.");
                printWriter.println("  --package: interpret process arg as package, dumping all");
                printWriter.println("             processes that have loaded that package.");
                printWriter.println("  --checkin: dump data for a checkin");
                printWriter.println("  --proto: dump data to proto");
                printWriter.println("If [process] is specified it can be the name or ");
                printWriter.println("pid of a specific process to dump.");
                return;
            } else {
                printWriter.println("Unknown argument: " + opt + "; use -h for help");
            }
        }
        String[] innerArgs = new String[(strArr.length - opti)];
        System.arraycopy(strArr, opti, innerArgs, 0, strArr.length - opti);
        ArrayList<ProcessRecord> procs = collectProcesses(printWriter, opti, opts.packages, strArr);
        if (opts.dumpProto) {
            dumpApplicationMemoryUsage(fd, opts, innerArgs, brief, procs);
        } else {
            dumpApplicationMemoryUsage(fd, pw, prefix, opts, innerArgs, brief, procs, categoryPw);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 92 */
    /* JADX INFO: finally extract failed */
    /* JADX WARNING: type inference failed for: r28v0 */
    /* JADX WARNING: type inference failed for: r28v1 */
    /* JADX WARNING: type inference failed for: r28v21 */
    /*  JADX ERROR: IndexOutOfBoundsException in pass: RegionMakerVisitor
        java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
        	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
        	at java.util.ArrayList.get(ArrayList.java:433)
        	at jadx.core.dex.nodes.InsnNode.getArg(InsnNode.java:101)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:611)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:561)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processIf(RegionMaker.java:693)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:123)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processLoop(RegionMaker.java:225)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:106)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processIf(RegionMaker.java:698)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:123)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:49)
        */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:114:0x02d0  */
    /* JADX WARNING: Removed duplicated region for block: B:157:0x03be  */
    private final void dumpApplicationMemoryUsage(java.io.FileDescriptor r93, java.io.PrintWriter r94, java.lang.String r95, com.android.server.am.ActivityManagerService.MemoryUsageDumpOptions r96, java.lang.String[] r97, boolean r98, java.util.ArrayList<com.android.server.am.ProcessRecord> r99, java.io.PrintWriter r100) {
        /*
            r92 = this;
            r9 = r92
            r11 = r94
            r10 = r96
            r15 = r97
            r14 = r99
            long r30 = android.os.SystemClock.uptimeMillis()
            long r32 = android.os.SystemClock.elapsedRealtime()
            r13 = 1
            long[] r12 = new long[r13]
            r7 = 0
            if (r14 != 0) goto L_0x016f
            java.lang.String r0 = "N/A"
            int r1 = r15.length
            if (r1 <= 0) goto L_0x0155
            r5 = r15[r7]
            char r0 = r5.charAt(r7)
            r1 = 45
            if (r0 == r1) goto L_0x014b
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r6 = r0
            r92.updateCpuStatsNow()
            r1 = -1
            r0 = r15[r7]     // Catch:{ NumberFormatException -> 0x003a }
            int r0 = java.lang.Integer.parseInt(r0)     // Catch:{ NumberFormatException -> 0x003a }
            r1 = r0
            r3 = r1
            goto L_0x003c
        L_0x003a:
            r0 = move-exception
            r3 = r1
        L_0x003c:
            com.android.internal.os.ProcessCpuTracker r1 = r9.mProcessCpuTracker
            monitor-enter(r1)
            com.android.internal.os.ProcessCpuTracker r0 = r9.mProcessCpuTracker     // Catch:{ all -> 0x013c }
            int r0 = r0.countStats()     // Catch:{ all -> 0x013c }
            r2 = 0
        L_0x0046:
            if (r2 >= r0) goto L_0x0074
            com.android.internal.os.ProcessCpuTracker r4 = r9.mProcessCpuTracker     // Catch:{ all -> 0x0067 }
            com.android.internal.os.ProcessCpuTracker$Stats r4 = r4.getStats(r2)     // Catch:{ all -> 0x0067 }
            int r8 = r4.pid     // Catch:{ all -> 0x0067 }
            if (r8 == r3) goto L_0x0060
            java.lang.String r8 = r4.baseName     // Catch:{ all -> 0x0067 }
            if (r8 == 0) goto L_0x0063
            java.lang.String r8 = r4.baseName     // Catch:{ all -> 0x0067 }
            r13 = r15[r7]     // Catch:{ all -> 0x0067 }
            boolean r8 = r8.equals(r13)     // Catch:{ all -> 0x0067 }
            if (r8 == 0) goto L_0x0063
        L_0x0060:
            r6.add(r4)     // Catch:{ all -> 0x0067 }
        L_0x0063:
            int r2 = r2 + 1
            r13 = 1
            goto L_0x0046
        L_0x0067:
            r0 = move-exception
            r34 = r3
            r35 = r5
            r5 = r6
            r4 = r10
            r8 = r11
            r37 = r12
            r7 = r14
            goto L_0x0147
        L_0x0074:
            monitor-exit(r1)     // Catch:{ all -> 0x013c }
            int r0 = r6.size()
            if (r0 <= 0) goto L_0x0131
            boolean r0 = r10.isCheckinRequest
            boolean r8 = r10.isCompact
            r1 = r92
            r2 = r94
            r34 = r3
            r3 = r30
            r35 = r5
            r13 = r6
            r5 = r32
            r36 = r7
            r7 = r0
            r15 = 0
            r1.dumpApplicationMemoryUsageHeader(r2, r3, r5, r7, r8)
            r0 = 0
            int r1 = r13.size()
            r2 = 1
            int r1 = r1 - r2
        L_0x009a:
            if (r1 < 0) goto L_0x0130
            java.lang.Object r2 = r13.get(r1)
            com.android.internal.os.ProcessCpuTracker$Stats r2 = (com.android.internal.os.ProcessCpuTracker.Stats) r2
            int r3 = r2.pid
            boolean r4 = r10.isCheckinRequest
            if (r4 != 0) goto L_0x00cf
            boolean r4 = r10.dumpDetails
            if (r4 == 0) goto L_0x00cf
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            r4.<init>()
            java.lang.String r5 = "\n** MEMINFO in pid "
            r4.append(r5)
            r4.append(r3)
            java.lang.String r5 = " ["
            r4.append(r5)
            java.lang.String r5 = r2.baseName
            r4.append(r5)
            java.lang.String r5 = "] **"
            r4.append(r5)
            java.lang.String r4 = r4.toString()
            r11.println(r4)
        L_0x00cf:
            if (r0 != 0) goto L_0x00d7
            android.os.Debug$MemoryInfo r4 = new android.os.Debug$MemoryInfo
            r4.<init>()
            r0 = r4
        L_0x00d7:
            boolean r4 = r10.dumpDetails
            if (r4 != 0) goto L_0x00ef
            if (r98 != 0) goto L_0x00e2
            boolean r4 = r10.oomOnly
            if (r4 != 0) goto L_0x00e2
            goto L_0x00ef
        L_0x00e2:
            long r4 = android.os.Debug.getPss(r3, r12, r15)
            int r4 = (int) r4
            r0.dalvikPss = r4
            r4 = r12[r36]
            int r4 = (int) r4
            r0.dalvikPrivateDirty = r4
            goto L_0x00f2
        L_0x00ef:
            android.os.Debug.getMemoryInfo(r3, r0)
        L_0x00f2:
            boolean r4 = r10.isCheckinRequest
            r8 = r12
            r12 = r4
            boolean r4 = r10.dumpFullDetails
            r5 = r13
            r13 = r4
            boolean r4 = r10.dumpDalvik
            r7 = r14
            r14 = r4
            boolean r4 = r10.dumpSummaryOnly
            r6 = r15
            r15 = r4
            java.lang.String r4 = r2.baseName
            r17 = r4
            r18 = 0
            r20 = 0
            r22 = 0
            r24 = 0
            r26 = 0
            r28 = 0
            r4 = r10
            r10 = r94
            r37 = r8
            r8 = r11
            r11 = r0
            r16 = r3
            android.app.ActivityThread.dumpMemInfoTable(r10, r11, r12, r13, r14, r15, r16, r17, r18, r20, r22, r24, r26, r28)
            boolean r10 = r4.isCheckinRequest
            if (r10 == 0) goto L_0x0125
            r94.println()
        L_0x0125:
            int r1 = r1 + -1
            r10 = r4
            r13 = r5
            r15 = r6
            r14 = r7
            r11 = r8
            r12 = r37
            goto L_0x009a
        L_0x0130:
            return
        L_0x0131:
            r34 = r3
            r35 = r5
            r5 = r6
            r4 = r10
            r8 = r11
            r37 = r12
            r7 = r14
            goto L_0x0152
        L_0x013c:
            r0 = move-exception
            r34 = r3
            r35 = r5
            r5 = r6
            r4 = r10
            r8 = r11
            r37 = r12
            r7 = r14
        L_0x0147:
            monitor-exit(r1)     // Catch:{ all -> 0x0149 }
            throw r0
        L_0x0149:
            r0 = move-exception
            goto L_0x0147
        L_0x014b:
            r35 = r5
            r4 = r10
            r8 = r11
            r37 = r12
            r7 = r14
        L_0x0152:
            r0 = r35
            goto L_0x015a
        L_0x0155:
            r4 = r10
            r8 = r11
            r37 = r12
            r7 = r14
        L_0x015a:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "No process found for: "
            r1.append(r2)
            r1.append(r0)
            java.lang.String r1 = r1.toString()
            r8.println(r1)
            return
        L_0x016f:
            r36 = r7
            r4 = r10
            r8 = r11
            r37 = r12
            r7 = r14
            r6 = 0
            if (r98 != 0) goto L_0x018f
            boolean r0 = r4.oomOnly
            if (r0 != 0) goto L_0x018f
            int r0 = r99.size()
            r1 = 1
            if (r0 == r1) goto L_0x018c
            boolean r0 = r4.isCheckinRequest
            if (r0 != 0) goto L_0x018c
            boolean r0 = r4.packages
            if (r0 == 0) goto L_0x018f
        L_0x018c:
            r1 = 1
            r4.dumpDetails = r1
        L_0x018f:
            boolean r0 = r4.isCheckinRequest
            boolean r10 = r4.isCompact
            r1 = r92
            r2 = r94
            r11 = r4
            r3 = r30
            r15 = r6
            r5 = r32
            r14 = r7
            r7 = r0
            r13 = r8
            r12 = r37
            r8 = r10
            r1.dumpApplicationMemoryUsageHeader(r2, r3, r5, r7, r8)
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r8 = r0
            android.util.SparseArray r0 = new android.util.SparseArray
            r0.<init>()
            r7 = r0
            r0 = 0
            r2 = 0
            r4 = 0
            r18 = 0
            boolean r6 = r11.dumpDalvik
            r10 = 14
            if (r6 == 0) goto L_0x01c3
            long[] r6 = new long[r10]
            goto L_0x01c5
        L_0x01c3:
            long[] r6 = libcore.util.EmptyArray.LONG
        L_0x01c5:
            boolean r15 = r11.dumpDalvik
            if (r15 == 0) goto L_0x01cd
            long[] r10 = new long[r10]
            goto L_0x01cf
        L_0x01cd:
            long[] r10 = libcore.util.EmptyArray.LONG
        L_0x01cf:
            r34 = r10
            r20 = 0
            r22 = 0
            r10 = 17
            long[] r15 = new long[r10]
            r24 = r4
            long[] r5 = new long[r10]
            java.lang.String[] r4 = DUMP_MEM_OOM_LABEL
            int r10 = r4.length
            long[] r10 = new long[r10]
            r26 = r0
            int r0 = r4.length
            long[] r1 = new long[r0]
            int r0 = r4.length
            java.util.ArrayList[] r4 = new java.util.ArrayList[r0]
            r28 = 0
            r37 = 0
            r39 = 0
            r41 = 0
            r0 = 0
            r43 = 0
            int r44 = r99.size()
            r17 = 1
            int r44 = r44 + -1
            r46 = r20
            r48 = r22
            r50 = r28
            r52 = r37
            r54 = r39
            r56 = r41
            r39 = r2
            r41 = r24
            r37 = r26
            r2 = r44
            r44 = r18
            r18 = r0
        L_0x0215:
            if (r2 < 0) goto L_0x0662
            java.lang.Object r0 = r14.get(r2)
            r3 = r0
            com.android.server.am.ProcessRecord r3 = (com.android.server.am.ProcessRecord) r3
            monitor-enter(r92)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0649 }
            android.app.IApplicationThread r0 = r3.thread     // Catch:{ all -> 0x0649 }
            r58 = r0
            int r0 = r3.pid     // Catch:{ all -> 0x0649 }
            r59 = r0
            int r0 = r3.getSetAdjWithServices()     // Catch:{ all -> 0x0649 }
            r60 = r0
            boolean r0 = r3.hasActivities()     // Catch:{ all -> 0x0649 }
            r61 = r0
            monitor-exit(r92)     // Catch:{ all -> 0x0649 }
            resetPriorityAfterLockedSection()
            if (r58 == 0) goto L_0x0619
            boolean r0 = r11.isCheckinRequest
            if (r0 != 0) goto L_0x026c
            boolean r0 = r11.dumpDetails
            if (r0 == 0) goto L_0x026c
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r62 = r10
            java.lang.String r10 = "\n** MEMINFO in pid "
            r0.append(r10)
            r10 = r59
            r0.append(r10)
            java.lang.String r14 = " ["
            r0.append(r14)
            java.lang.String r14 = r3.processName
            r0.append(r14)
            java.lang.String r14 = "] **"
            r0.append(r14)
            java.lang.String r0 = r0.toString()
            r13.println(r0)
            goto L_0x0270
        L_0x026c:
            r62 = r10
            r10 = r59
        L_0x0270:
            if (r43 != 0) goto L_0x0279
            android.os.Debug$MemoryInfo r0 = new android.os.Debug$MemoryInfo
            r0.<init>()
            r14 = r0
            goto L_0x027b
        L_0x0279:
            r14 = r43
        L_0x027b:
            boolean r0 = r11.dumpDetails
            if (r0 != 0) goto L_0x02b2
            if (r98 != 0) goto L_0x028b
            boolean r0 = r11.oomOnly
            if (r0 != 0) goto L_0x028b
            r59 = r1
            r21 = r15
            r15 = 0
            goto L_0x02b7
        L_0x028b:
            r0 = 3
            long r19 = android.os.SystemClock.currentThreadTimeMillis()
            r16 = r0
            r59 = r1
            r21 = r15
            r15 = 0
            long r0 = android.os.Debug.getPss(r10, r12, r15)
            int r0 = (int) r0
            r14.dalvikPss = r0
            long r0 = android.os.SystemClock.currentThreadTimeMillis()
            r22 = r0
            r0 = r12[r36]
            int r0 = (int) r0
            r14.dalvikPrivateDirty = r0
            r1 = r16
            r82 = r18
            r63 = r19
            r65 = r22
            goto L_0x02cc
        L_0x02b2:
            r59 = r1
            r21 = r15
            r15 = 0
        L_0x02b7:
            r0 = 4
            long r19 = android.os.SystemClock.currentThreadTimeMillis()
            android.os.Debug.getMemoryInfo(r10, r14)
            long r22 = android.os.SystemClock.currentThreadTimeMillis()
            boolean r1 = r14.hasSwappedOutPss
            r82 = r1
            r63 = r19
            r65 = r22
            r1 = r0
        L_0x02cc:
            boolean r0 = r11.dumpDetails
            if (r0 == 0) goto L_0x03be
            boolean r0 = r11.localOnly
            if (r0 == 0) goto L_0x031e
            boolean r0 = r11.isCheckinRequest
            r83 = r12
            r12 = r0
            boolean r0 = r11.dumpFullDetails
            r84 = r2
            r85 = r4
            r2 = r13
            r4 = r17
            r13 = r0
            boolean r0 = r11.dumpDalvik
            r86 = r14
            r14 = r0
            boolean r0 = r11.dumpSummaryOnly
            r87 = r21
            r15 = r0
            java.lang.String r0 = r3.processName
            r17 = r0
            r18 = 0
            r20 = 0
            r22 = 0
            r24 = 0
            r26 = 0
            r28 = 0
            r35 = r10
            r88 = r62
            r10 = r94
            r4 = r11
            r11 = r86
            r16 = r35
            android.app.ActivityThread.dumpMemInfoTable(r10, r11, r12, r13, r14, r15, r16, r17, r18, r20, r22, r24, r26, r28)
            boolean r0 = r4.isCheckinRequest
            if (r0 == 0) goto L_0x0318
            r94.println()
            r12 = r93
            r28 = r5
            goto L_0x03d2
        L_0x0318:
            r12 = r93
            r28 = r5
            goto L_0x03d2
        L_0x031e:
            r84 = r2
            r85 = r4
            r35 = r10
            r4 = r11
            r83 = r12
            r2 = r13
            r86 = r14
            r87 = r21
            r88 = r62
            r94.flush()
            com.android.internal.os.TransferPipe r0 = new com.android.internal.os.TransferPipe     // Catch:{ IOException -> 0x039d, RemoteException -> 0x037c }
            r0.<init>()     // Catch:{ IOException -> 0x039d, RemoteException -> 0x037c }
            r15 = r0
            android.os.ParcelFileDescriptor r11 = r15.getWriteFd()     // Catch:{ all -> 0x036e }
            boolean r13 = r4.isCheckinRequest     // Catch:{ all -> 0x036e }
            boolean r14 = r4.dumpFullDetails     // Catch:{ all -> 0x036e }
            boolean r0 = r4.dumpDalvik     // Catch:{ all -> 0x036e }
            boolean r12 = r4.dumpSummaryOnly     // Catch:{ all -> 0x036e }
            boolean r10 = r4.dumpUnreachable     // Catch:{ all -> 0x036e }
            r17 = r10
            r10 = r58
            r16 = r12
            r12 = r86
            r28 = r5
            r5 = r15
            r15 = r0
            r18 = r97
            r10.dumpMemInfo(r11, r12, r13, r14, r15, r16, r17, r18)     // Catch:{ all -> 0x036a }
            boolean r0 = r4.dumpUnreachable     // Catch:{ all -> 0x036a }
            if (r0 == 0) goto L_0x035d
            r10 = 30000(0x7530, double:1.4822E-319)
            goto L_0x035f
        L_0x035d:
            r10 = 5000(0x1388, double:2.4703E-320)
        L_0x035f:
            r12 = r93
            r5.go(r12, r10)     // Catch:{ all -> 0x0368 }
            r5.kill()     // Catch:{ IOException -> 0x037a, RemoteException -> 0x0378 }
            goto L_0x03bd
        L_0x0368:
            r0 = move-exception
            goto L_0x0374
        L_0x036a:
            r0 = move-exception
            r12 = r93
            goto L_0x0374
        L_0x036e:
            r0 = move-exception
            r12 = r93
            r28 = r5
            r5 = r15
        L_0x0374:
            r5.kill()     // Catch:{ IOException -> 0x037a, RemoteException -> 0x0378 }
            throw r0     // Catch:{ IOException -> 0x037a, RemoteException -> 0x0378 }
        L_0x0378:
            r0 = move-exception
            goto L_0x0381
        L_0x037a:
            r0 = move-exception
            goto L_0x03a2
        L_0x037c:
            r0 = move-exception
            r12 = r93
            r28 = r5
        L_0x0381:
            boolean r5 = r4.isCheckinRequest
            if (r5 != 0) goto L_0x03d2
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r10 = "Got RemoteException! "
            r5.append(r10)
            r5.append(r0)
            java.lang.String r5 = r5.toString()
            r2.println(r5)
            r94.flush()
            goto L_0x03d2
        L_0x039d:
            r0 = move-exception
            r12 = r93
            r28 = r5
        L_0x03a2:
            boolean r5 = r4.isCheckinRequest
            if (r5 != 0) goto L_0x03bd
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r10 = "Got IoException! "
            r5.append(r10)
            r5.append(r0)
            java.lang.String r5 = r5.toString()
            r2.println(r5)
            r94.flush()
        L_0x03bd:
            goto L_0x03d2
        L_0x03be:
            r84 = r2
            r85 = r4
            r28 = r5
            r35 = r10
            r4 = r11
            r83 = r12
            r2 = r13
            r86 = r14
            r87 = r21
            r88 = r62
            r12 = r93
        L_0x03d2:
            int r0 = r86.getTotalPss()
            long r10 = (long) r0
            int r0 = r86.getTotalUss()
            long r13 = (long) r0
            int r0 = r86.getTotalRss()
            r15 = r6
            long r5 = (long) r0
            int r0 = r86.getTotalSwappedOutPss()
            r17 = r7
            r16 = r8
            long r7 = (long) r0
            monitor-enter(r92)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x05ff }
            android.app.IApplicationThread r0 = r3.thread     // Catch:{ all -> 0x05ff }
            if (r0 == 0) goto L_0x04ca
            int r0 = r3.getSetAdjWithServices()     // Catch:{ all -> 0x04b5 }
            r12 = r60
            if (r12 != r0) goto L_0x04ae
            com.android.internal.app.procstats.ProcessState r0 = r3.baseProcessTracker     // Catch:{ all -> 0x049a }
            r74 = 1
            long r76 = r65 - r63
            r18 = r15
            com.android.server.am.ProcessRecord$PackageList r15 = r3.pkgList     // Catch:{ all -> 0x0486 }
            android.util.ArrayMap<java.lang.String, com.android.internal.app.procstats.ProcessStats$ProcessStateHolder> r15 = r15.mPkgList     // Catch:{ all -> 0x0486 }
            r67 = r0
            r68 = r10
            r70 = r13
            r72 = r5
            r75 = r1
            r78 = r15
            r67.addPss(r68, r70, r72, r74, r75, r76, r78)     // Catch:{ all -> 0x0486 }
            com.android.server.am.ProcessRecord$PackageList r0 = r3.pkgList     // Catch:{ all -> 0x0486 }
            int r0 = r0.size()     // Catch:{ all -> 0x0486 }
            r15 = 1
            int r0 = r0 - r15
        L_0x041e:
            if (r0 < 0) goto L_0x0481
            com.android.server.am.ProcessRecord$PackageList r15 = r3.pkgList     // Catch:{ all -> 0x0486 }
            com.android.internal.app.procstats.ProcessStats$ProcessStateHolder r15 = r15.valueAt(r0)     // Catch:{ all -> 0x0486 }
            r67 = 18
            android.content.pm.ApplicationInfo r2 = r3.info     // Catch:{ all -> 0x0486 }
            int r2 = r2.uid     // Catch:{ all -> 0x0486 }
            r29 = r12
            com.android.internal.app.procstats.ProcessState r12 = r15.state     // Catch:{ all -> 0x046c }
            java.lang.String r69 = r12.getName()     // Catch:{ all -> 0x046c }
            com.android.internal.app.procstats.ProcessState r12 = r15.state     // Catch:{ all -> 0x046c }
            java.lang.String r70 = r12.getPackage()     // Catch:{ all -> 0x046c }
            long r78 = r65 - r63
            r89 = r7
            long r7 = r15.appVersion     // Catch:{ all -> 0x0459 }
            r68 = r2
            r71 = r10
            r73 = r13
            r75 = r5
            r77 = r1
            r80 = r7
            android.util.StatsLog.write(r67, r68, r69, r70, r71, r73, r75, r77, r78, r80)     // Catch:{ all -> 0x0459 }
            int r0 = r0 + -1
            r2 = r94
            r12 = r29
            r7 = r89
            goto L_0x041e
        L_0x0459:
            r0 = move-exception
            r20 = r13
            r8 = r16
            r12 = r17
            r19 = r18
            r7 = r29
            r2 = r86
            r13 = r88
            r16 = r5
            goto L_0x0612
        L_0x046c:
            r0 = move-exception
            r89 = r7
            r20 = r13
            r8 = r16
            r12 = r17
            r19 = r18
            r7 = r29
            r2 = r86
            r13 = r88
            r16 = r5
            goto L_0x0612
        L_0x0481:
            r89 = r7
            r29 = r12
            goto L_0x04d0
        L_0x0486:
            r0 = move-exception
            r89 = r7
            r7 = r12
            r20 = r13
            r8 = r16
            r12 = r17
            r19 = r18
            r2 = r86
            r13 = r88
            r16 = r5
            goto L_0x0612
        L_0x049a:
            r0 = move-exception
            r89 = r7
            r7 = r12
            r20 = r13
            r19 = r15
            r8 = r16
            r12 = r17
            r2 = r86
            r13 = r88
            r16 = r5
            goto L_0x0612
        L_0x04ae:
            r89 = r7
            r29 = r12
            r18 = r15
            goto L_0x04d0
        L_0x04b5:
            r0 = move-exception
            r89 = r7
            r20 = r13
            r19 = r15
            r8 = r16
            r12 = r17
            r7 = r60
            r2 = r86
            r13 = r88
            r16 = r5
            goto L_0x0612
        L_0x04ca:
            r89 = r7
            r18 = r15
            r29 = r60
        L_0x04d0:
            monitor-exit(r92)     // Catch:{ all -> 0x05ed }
            resetPriorityAfterLockedSection()
            boolean r0 = r4.isCheckinRequest
            if (r0 != 0) goto L_0x05d6
            long r50 = r50 + r10
            long r52 = r52 + r89
            com.android.server.am.ActivityManagerService$MemItem r0 = new com.android.server.am.ActivityManagerService$MemItem
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r7 = r3.processName
            r2.append(r7)
            java.lang.String r7 = " (pid "
            r2.append(r7)
            r7 = r35
            r2.append(r7)
            if (r61 == 0) goto L_0x04f7
            java.lang.String r8 = " / activities)"
            goto L_0x04f9
        L_0x04f7:
            java.lang.String r8 = ")"
        L_0x04f9:
            r2.append(r8)
            java.lang.String r20 = r2.toString()
            java.lang.String r2 = r3.processName
            r19 = r0
            r21 = r2
            r22 = r10
            r24 = r89
            r26 = r7
            r27 = r61
            r19.<init>(r20, r21, r22, r24, r26, r27)
            r8 = r16
            r8.add(r0)
            r12 = r17
            r12.put(r7, r0)
            r2 = r86
            int r15 = r2.nativePss
            r16 = r5
            long r5 = (long) r15
            long r37 = r37 + r5
            int r5 = r2.nativeSwappedOutPss
            long r5 = (long) r5
            long r39 = r39 + r5
            int r5 = r2.dalvikPss
            long r5 = (long) r5
            long r41 = r41 + r5
            int r5 = r2.dalvikSwappedOutPss
            long r5 = (long) r5
            long r44 = r44 + r5
            r5 = 0
        L_0x0534:
            r6 = r18
            int r15 = r6.length
            if (r5 >= r15) goto L_0x0561
            r18 = r6[r5]
            int r15 = r5 + 17
            int r15 = r2.getOtherPss(r15)
            r20 = r13
            long r13 = (long) r15
            long r18 = r18 + r13
            r6[r5] = r18
            r13 = r34[r5]
            int r15 = r5 + 17
            int r15 = r2.getOtherSwappedOutPss(r15)
            r19 = r6
            r35 = r7
            long r6 = (long) r15
            long r13 = r13 + r6
            r34[r5] = r13
            int r5 = r5 + 1
            r18 = r19
            r13 = r20
            r7 = r35
            goto L_0x0534
        L_0x0561:
            r19 = r6
            r35 = r7
            r20 = r13
            int r5 = r2.otherPss
            long r5 = (long) r5
            long r46 = r46 + r5
            int r5 = r2.otherSwappedOutPss
            long r5 = (long) r5
            long r48 = r48 + r5
            r5 = 0
        L_0x0572:
            r6 = 17
            if (r5 >= r6) goto L_0x0593
            int r7 = r2.getOtherPss(r5)
            long r13 = (long) r7
            r22 = r87[r5]
            long r22 = r22 + r13
            r87[r5] = r22
            long r46 = r46 - r13
            int r7 = r2.getOtherSwappedOutPss(r5)
            long r13 = (long) r7
            r22 = r28[r5]
            long r22 = r22 + r13
            r28[r5] = r22
            long r48 = r48 - r13
            int r5 = r5 + 1
            goto L_0x0572
        L_0x0593:
            r5 = 900(0x384, float:1.261E-42)
            r7 = r29
            if (r7 < r5) goto L_0x059d
            long r54 = r54 + r10
            long r56 = r56 + r89
        L_0x059d:
            r5 = 0
        L_0x059e:
            r13 = r88
            int r14 = r13.length
            if (r5 >= r14) goto L_0x05e8
            int r14 = r13.length
            r15 = 1
            int r14 = r14 - r15
            if (r5 == r14) goto L_0x05ba
            int[] r14 = DUMP_MEM_OOM_ADJ
            r15 = r14[r5]
            if (r7 < r15) goto L_0x05b5
            int r15 = r5 + 1
            r14 = r14[r15]
            if (r7 >= r14) goto L_0x05b5
            goto L_0x05ba
        L_0x05b5:
            int r5 = r5 + 1
            r88 = r13
            goto L_0x059e
        L_0x05ba:
            r14 = r13[r5]
            long r14 = r14 + r10
            r13[r5] = r14
            r14 = r59[r5]
            long r14 = r14 + r89
            r59[r5] = r14
            r14 = r85[r5]
            if (r14 != 0) goto L_0x05d0
            java.util.ArrayList r14 = new java.util.ArrayList
            r14.<init>()
            r85[r5] = r14
        L_0x05d0:
            r14 = r85[r5]
            r14.add(r0)
            goto L_0x05e8
        L_0x05d6:
            r20 = r13
            r8 = r16
            r12 = r17
            r19 = r18
            r7 = r29
            r2 = r86
            r13 = r88
            r16 = r5
            r6 = 17
        L_0x05e8:
            r43 = r2
            r18 = r82
            goto L_0x0630
        L_0x05ed:
            r0 = move-exception
            r20 = r13
            r8 = r16
            r12 = r17
            r19 = r18
            r7 = r29
            r2 = r86
            r13 = r88
            r16 = r5
            goto L_0x0612
        L_0x05ff:
            r0 = move-exception
            r89 = r7
            r20 = r13
            r19 = r15
            r8 = r16
            r12 = r17
            r7 = r60
            r2 = r86
            r13 = r88
            r16 = r5
        L_0x0612:
            monitor-exit(r92)     // Catch:{ all -> 0x0617 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0617:
            r0 = move-exception
            goto L_0x0612
        L_0x0619:
            r84 = r2
            r85 = r4
            r28 = r5
            r19 = r6
            r13 = r10
            r4 = r11
            r83 = r12
            r87 = r15
            r35 = r59
            r6 = 17
            r59 = r1
            r12 = r7
            r7 = r60
        L_0x0630:
            int r2 = r84 + -1
            r14 = r99
            r11 = r4
            r7 = r12
            r10 = r13
            r6 = r19
            r5 = r28
            r1 = r59
            r12 = r83
            r4 = r85
            r15 = r87
            r17 = 1
            r13 = r94
            goto L_0x0215
        L_0x0649:
            r0 = move-exception
            r59 = r1
            r84 = r2
            r85 = r4
            r28 = r5
            r19 = r6
            r13 = r10
            r4 = r11
            r83 = r12
            r87 = r15
            r12 = r7
        L_0x065b:
            monitor-exit(r92)     // Catch:{ all -> 0x0660 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0660:
            r0 = move-exception
            goto L_0x065b
        L_0x0662:
            r59 = r1
            r84 = r2
            r85 = r4
            r28 = r5
            r19 = r6
            r13 = r10
            r4 = r11
            r83 = r12
            r87 = r15
            r6 = 17
            r12 = r7
            r1 = 0
            boolean r0 = r4.isCheckinRequest
            if (r0 != 0) goto L_0x0ddc
            int r0 = r99.size()
            r15 = 1
            if (r0 <= r15) goto L_0x0ddc
            boolean r0 = r4.packages
            if (r0 != 0) goto L_0x0ddc
            r92.updateCpuStatsNow()
            r3 = 0
            com.android.internal.os.ProcessCpuTracker r5 = r9.mProcessCpuTracker
            monitor-enter(r5)
            com.android.internal.os.ProcessCpuTracker r0 = r9.mProcessCpuTracker     // Catch:{ all -> 0x0dc4 }
            int r0 = r0.countStats()     // Catch:{ all -> 0x0dc4 }
            r7 = 0
            r10 = r1
            r43 = r3
        L_0x0697:
            r16 = 0
            if (r7 >= r0) goto L_0x08be
            com.android.internal.os.ProcessCpuTracker r1 = r9.mProcessCpuTracker     // Catch:{ all -> 0x08a7 }
            com.android.internal.os.ProcessCpuTracker$Stats r1 = r1.getStats(r7)     // Catch:{ all -> 0x08a7 }
            long r2 = r1.vsize     // Catch:{ all -> 0x08a7 }
            int r2 = (r2 > r16 ? 1 : (r2 == r16 ? 0 : -1))
            if (r2 <= 0) goto L_0x088a
            int r2 = r1.pid     // Catch:{ all -> 0x08a7 }
            int r2 = r12.indexOfKey(r2)     // Catch:{ all -> 0x08a7 }
            if (r2 >= 0) goto L_0x088a
            if (r43 != 0) goto L_0x06d1
            android.os.Debug$MemoryInfo r2 = new android.os.Debug$MemoryInfo     // Catch:{ all -> 0x06b8 }
            r2.<init>()     // Catch:{ all -> 0x06b8 }
            r3 = r2
            goto L_0x06d3
        L_0x06b8:
            r0 = move-exception
            r35 = r8
            r1 = r10
            r23 = r12
            r21 = r19
            r22 = r28
            r3 = r43
            r15 = r59
            r20 = r85
            r12 = r94
            r91 = r9
            r9 = r4
            r4 = r91
            goto L_0x0dd8
        L_0x06d1:
            r3 = r43
        L_0x06d3:
            if (r98 != 0) goto L_0x06fb
            boolean r2 = r4.oomOnly     // Catch:{ all -> 0x06e4 }
            if (r2 != 0) goto L_0x06fb
            int r2 = r1.pid     // Catch:{ all -> 0x06e4 }
            android.os.Debug.getMemoryInfo(r2, r3)     // Catch:{ all -> 0x06e4 }
            r20 = r7
            r14 = r83
            r15 = 0
            goto L_0x070e
        L_0x06e4:
            r0 = move-exception
            r35 = r8
            r1 = r10
            r23 = r12
            r21 = r19
            r22 = r28
            r15 = r59
            r20 = r85
            r12 = r94
            r91 = r9
            r9 = r4
            r4 = r91
            goto L_0x0dd8
        L_0x06fb:
            int r2 = r1.pid     // Catch:{ all -> 0x0875 }
            r20 = r7
            r14 = r83
            r15 = 0
            long r6 = android.os.Debug.getPss(r2, r14, r15)     // Catch:{ all -> 0x085e }
            int r2 = (int) r6     // Catch:{ all -> 0x085e }
            r3.nativePss = r2     // Catch:{ all -> 0x085e }
            r6 = r14[r36]     // Catch:{ all -> 0x085e }
            int r2 = (int) r6     // Catch:{ all -> 0x085e }
            r3.nativePrivateDirty = r2     // Catch:{ all -> 0x085e }
        L_0x070e:
            int r2 = r3.getTotalPss()     // Catch:{ all -> 0x085e }
            long r6 = (long) r2     // Catch:{ all -> 0x085e }
            int r2 = r3.getTotalSwappedOutPss()     // Catch:{ all -> 0x085e }
            r83 = r14
            long r14 = (long) r2
            long r50 = r50 + r6
            long r52 = r52 + r14
            long r10 = r10 + r6
            com.android.server.am.ActivityManagerService$MemItem r2 = new com.android.server.am.ActivityManagerService$MemItem     // Catch:{ all -> 0x0846 }
            r21 = r0
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ all -> 0x0846 }
            r0.<init>()     // Catch:{ all -> 0x0846 }
            r22 = r10
            java.lang.String r10 = r1.name     // Catch:{ all -> 0x0830 }
            r0.append(r10)     // Catch:{ all -> 0x0830 }
            java.lang.String r10 = " (pid "
            r0.append(r10)     // Catch:{ all -> 0x0830 }
            int r10 = r1.pid     // Catch:{ all -> 0x0830 }
            r0.append(r10)     // Catch:{ all -> 0x0830 }
            java.lang.String r10 = ")"
            r0.append(r10)     // Catch:{ all -> 0x0830 }
            java.lang.String r64 = r0.toString()     // Catch:{ all -> 0x0830 }
            java.lang.String r0 = r1.name     // Catch:{ all -> 0x0830 }
            int r10 = r3.getSummaryTotalSwapPss()     // Catch:{ all -> 0x0830 }
            long r10 = (long) r10
            r29 = r12
            int r12 = r1.pid     // Catch:{ all -> 0x081a }
            r71 = 0
            r63 = r2
            r65 = r0
            r66 = r6
            r68 = r10
            r70 = r12
            r63.<init>(r64, r65, r66, r68, r70, r71)     // Catch:{ all -> 0x081a }
            r0 = r2
            r8.add(r0)     // Catch:{ all -> 0x081a }
            int r2 = r3.nativePss     // Catch:{ all -> 0x081a }
            long r10 = (long) r2     // Catch:{ all -> 0x081a }
            long r37 = r37 + r10
            int r2 = r3.nativeSwappedOutPss     // Catch:{ all -> 0x081a }
            long r10 = (long) r2     // Catch:{ all -> 0x081a }
            long r39 = r39 + r10
            int r2 = r3.dalvikPss     // Catch:{ all -> 0x081a }
            long r10 = (long) r2     // Catch:{ all -> 0x081a }
            long r41 = r41 + r10
            int r2 = r3.dalvikSwappedOutPss     // Catch:{ all -> 0x081a }
            long r10 = (long) r2
            long r44 = r44 + r10
            r2 = r36
        L_0x0776:
            r12 = r19
            int r10 = r12.length     // Catch:{ all -> 0x0804 }
            if (r2 >= r10) goto L_0x07a2
            r10 = r12[r2]     // Catch:{ all -> 0x0804 }
            r19 = r1
            int r1 = r2 + 17
            int r1 = r3.getOtherPss(r1)     // Catch:{ all -> 0x0804 }
            r35 = r8
            long r8 = (long) r1
            long r10 = r10 + r8
            r12[r2] = r10     // Catch:{ all -> 0x07f0 }
            r8 = r34[r2]     // Catch:{ all -> 0x07f0 }
            int r1 = r2 + 17
            int r1 = r3.getOtherSwappedOutPss(r1)     // Catch:{ all -> 0x07f0 }
            long r10 = (long) r1     // Catch:{ all -> 0x07f0 }
            long r8 = r8 + r10
            r34[r2] = r8     // Catch:{ all -> 0x07f0 }
            int r2 = r2 + 1
            r9 = r92
            r1 = r19
            r8 = r35
            r19 = r12
            goto L_0x0776
        L_0x07a2:
            r19 = r1
            r35 = r8
            int r1 = r3.otherPss     // Catch:{ all -> 0x07f0 }
            long r1 = (long) r1     // Catch:{ all -> 0x07f0 }
            long r46 = r46 + r1
            int r1 = r3.otherSwappedOutPss     // Catch:{ all -> 0x07f0 }
            long r1 = (long) r1     // Catch:{ all -> 0x07f0 }
            long r48 = r48 + r1
            r1 = 0
        L_0x07b1:
            r2 = 17
            if (r1 >= r2) goto L_0x07d0
            int r2 = r3.getOtherPss(r1)     // Catch:{ all -> 0x07f0 }
            long r8 = (long) r2     // Catch:{ all -> 0x07f0 }
            r10 = r87[r1]     // Catch:{ all -> 0x07f0 }
            long r10 = r10 + r8
            r87[r1] = r10     // Catch:{ all -> 0x07f0 }
            long r46 = r46 - r8
            int r2 = r3.getOtherSwappedOutPss(r1)     // Catch:{ all -> 0x07f0 }
            long r8 = (long) r2     // Catch:{ all -> 0x07f0 }
            r10 = r28[r1]     // Catch:{ all -> 0x07f0 }
            long r10 = r10 + r8
            r28[r1] = r10     // Catch:{ all -> 0x07f0 }
            long r48 = r48 - r8
            int r1 = r1 + 1
            goto L_0x07b1
        L_0x07d0:
            r1 = r13[r36]     // Catch:{ all -> 0x07f0 }
            long r1 = r1 + r6
            r13[r36] = r1     // Catch:{ all -> 0x07f0 }
            r1 = r59[r36]     // Catch:{ all -> 0x07f0 }
            long r1 = r1 + r14
            r59[r36] = r1     // Catch:{ all -> 0x07f0 }
            r1 = r85[r36]     // Catch:{ all -> 0x07f0 }
            if (r1 != 0) goto L_0x07e5
            java.util.ArrayList r1 = new java.util.ArrayList     // Catch:{ all -> 0x07f0 }
            r1.<init>()     // Catch:{ all -> 0x07f0 }
            r85[r36] = r1     // Catch:{ all -> 0x07f0 }
        L_0x07e5:
            r1 = r85[r36]     // Catch:{ all -> 0x07f0 }
            r1.add(r0)     // Catch:{ all -> 0x07f0 }
            r43 = r3
            r10 = r22
            goto L_0x0896
        L_0x07f0:
            r0 = move-exception
            r9 = r4
            r21 = r12
            r1 = r22
            r22 = r28
            r23 = r29
            r15 = r59
            r20 = r85
            r4 = r92
            r12 = r94
            goto L_0x0dd8
        L_0x0804:
            r0 = move-exception
            r35 = r8
            r9 = r4
            r21 = r12
            r1 = r22
            r22 = r28
            r23 = r29
            r15 = r59
            r20 = r85
            r4 = r92
            r12 = r94
            goto L_0x0dd8
        L_0x081a:
            r0 = move-exception
            r35 = r8
            r12 = r94
            r9 = r4
            r21 = r19
            r1 = r22
            r22 = r28
            r23 = r29
            r15 = r59
            r20 = r85
            r4 = r92
            goto L_0x0dd8
        L_0x0830:
            r0 = move-exception
            r35 = r8
            r9 = r4
            r21 = r19
            r1 = r22
            r22 = r28
            r15 = r59
            r20 = r85
            r4 = r92
            r23 = r12
            r12 = r94
            goto L_0x0dd8
        L_0x0846:
            r0 = move-exception
            r35 = r8
            r22 = r10
            r9 = r4
            r21 = r19
            r1 = r22
            r22 = r28
            r15 = r59
            r20 = r85
            r4 = r92
            r23 = r12
            r12 = r94
            goto L_0x0dd8
        L_0x085e:
            r0 = move-exception
            r35 = r8
            r83 = r14
            r9 = r4
            r1 = r10
            r23 = r12
            r21 = r19
            r22 = r28
            r15 = r59
            r20 = r85
            r4 = r92
            r12 = r94
            goto L_0x0dd8
        L_0x0875:
            r0 = move-exception
            r35 = r8
            r9 = r4
            r1 = r10
            r23 = r12
            r21 = r19
            r22 = r28
            r15 = r59
            r20 = r85
            r4 = r92
            r12 = r94
            goto L_0x0dd8
        L_0x088a:
            r21 = r0
            r20 = r7
            r35 = r8
            r29 = r12
            r12 = r19
            r19 = r1
        L_0x0896:
            int r7 = r20 + 1
            r9 = r92
            r19 = r12
            r0 = r21
            r12 = r29
            r8 = r35
            r6 = 17
            r15 = 1
            goto L_0x0697
        L_0x08a7:
            r0 = move-exception
            r35 = r8
            r9 = r4
            r1 = r10
            r23 = r12
            r21 = r19
            r22 = r28
            r3 = r43
            r15 = r59
            r20 = r85
            r4 = r92
            r12 = r94
            goto L_0x0dd8
        L_0x08be:
            r21 = r0
            r20 = r7
            r35 = r8
            r29 = r12
            r12 = r19
            monitor-exit(r5)     // Catch:{ all -> 0x0db0 }
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r8 = r0
            com.android.server.am.ActivityManagerService$MemItem r0 = new com.android.server.am.ActivityManagerService$MemItem
            r27 = -1
            java.lang.String r21 = "Native"
            java.lang.String r22 = "Native"
            r20 = r0
            r23 = r37
            r25 = r39
            r20.<init>(r21, r22, r23, r25, r27)
            r8.add(r0)
            r9 = -2
            com.android.server.am.ActivityManagerService$MemItem r0 = new com.android.server.am.ActivityManagerService$MemItem
            r27 = -2
            java.lang.String r21 = "Dalvik"
            java.lang.String r22 = "Dalvik"
            r20 = r0
            r23 = r41
            r25 = r44
            r20.<init>(r21, r22, r23, r25, r27)
            r8.add(r0)
            com.android.server.am.ActivityManagerService$MemItem r0 = new com.android.server.am.ActivityManagerService$MemItem
            r27 = -3
            java.lang.String r21 = "Unknown"
            java.lang.String r22 = "Unknown"
            r20 = r0
            r23 = r46
            r25 = r48
            r20.<init>(r21, r22, r23, r25, r27)
            r8.add(r0)
            r0 = 0
        L_0x090d:
            r1 = 17
            if (r0 >= r1) goto L_0x092c
            java.lang.String r2 = android.os.Debug.MemoryInfo.getOtherLabel(r0)
            com.android.server.am.ActivityManagerService$MemItem r3 = new com.android.server.am.ActivityManagerService$MemItem
            r22 = r87[r0]
            r24 = r28[r0]
            r19 = r3
            r20 = r2
            r21 = r2
            r26 = r0
            r19.<init>(r20, r21, r22, r24, r26)
            r8.add(r3)
            int r0 = r0 + 1
            goto L_0x090d
        L_0x092c:
            int r0 = r12.length
            if (r0 <= 0) goto L_0x0990
            java.util.Iterator r0 = r8.iterator()
        L_0x0933:
            boolean r1 = r0.hasNext()
            if (r1 == 0) goto L_0x0990
            java.lang.Object r1 = r0.next()
            com.android.server.am.ActivityManagerService$MemItem r1 = (com.android.server.am.ActivityManagerService.MemItem) r1
            r2 = 0
            r3 = 0
            int r5 = r1.id
            r6 = -2
            if (r5 != r6) goto L_0x0949
            r2 = 0
            r3 = 3
            goto L_0x0966
        L_0x0949:
            int r5 = r1.id
            if (r5 != 0) goto L_0x0951
            r2 = 4
            r3 = 8
            goto L_0x0966
        L_0x0951:
            int r5 = r1.id
            r6 = 10
            if (r5 != r6) goto L_0x095c
            r2 = 9
            r3 = 11
            goto L_0x0966
        L_0x095c:
            int r5 = r1.id
            r6 = 12
            if (r5 != r6) goto L_0x0933
            r2 = 12
            r3 = 13
        L_0x0966:
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            r1.subitems = r5
            r5 = r2
        L_0x096e:
            if (r5 > r3) goto L_0x098f
            int r6 = r5 + 17
            java.lang.String r6 = android.os.Debug.MemoryInfo.getOtherLabel(r6)
            java.util.ArrayList<com.android.server.am.ActivityManagerService$MemItem> r7 = r1.subitems
            com.android.server.am.ActivityManagerService$MemItem r14 = new com.android.server.am.ActivityManagerService$MemItem
            r22 = r12[r5]
            r24 = r34[r5]
            r19 = r14
            r20 = r6
            r21 = r6
            r26 = r5
            r19.<init>(r20, r21, r22, r24, r26)
            r7.add(r14)
            int r5 = r5 + 1
            goto L_0x096e
        L_0x098f:
            goto L_0x0933
        L_0x0990:
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r14 = r0
            r0 = 0
        L_0x0997:
            int r1 = r13.length
            if (r0 >= r1) goto L_0x09cd
            r1 = r13[r0]
            int r1 = (r1 > r16 ? 1 : (r1 == r16 ? 0 : -1))
            if (r1 == 0) goto L_0x09ca
            boolean r1 = r4.isCompact
            if (r1 == 0) goto L_0x09ab
            java.lang.String[] r1 = DUMP_MEM_OOM_COMPACT_LABEL
            r1 = r1[r0]
            r20 = r1
            goto L_0x09b1
        L_0x09ab:
            java.lang.String[] r1 = DUMP_MEM_OOM_LABEL
            r1 = r1[r0]
            r20 = r1
        L_0x09b1:
            com.android.server.am.ActivityManagerService$MemItem r1 = new com.android.server.am.ActivityManagerService$MemItem
            r22 = r13[r0]
            r24 = r59[r0]
            int[] r2 = DUMP_MEM_OOM_ADJ
            r26 = r2[r0]
            r19 = r1
            r21 = r20
            r19.<init>(r20, r21, r22, r24, r26)
            r2 = r85[r0]
            r1.subitems = r2
            r14.add(r1)
        L_0x09ca:
            int r0 = r0 + 1
            goto L_0x0997
        L_0x09cd:
            boolean r0 = r4.dumpSwapPss
            if (r0 == 0) goto L_0x09d9
            if (r18 == 0) goto L_0x09d9
            int r0 = (r52 > r16 ? 1 : (r52 == r16 ? 0 : -1))
            if (r0 == 0) goto L_0x09d9
            r0 = 1
            goto L_0x09db
        L_0x09d9:
            r0 = r36
        L_0x09db:
            r4.dumpSwapPss = r0
            if (r98 != 0) goto L_0x0a15
            boolean r0 = r4.oomOnly
            if (r0 != 0) goto L_0x0a15
            boolean r0 = r4.isCompact
            if (r0 != 0) goto L_0x0a15
            r94.println()
            java.lang.String r0 = "Total PSS by process:"
            r2 = r94
            r2.println(r0)
            r5 = 1
            boolean r6 = r4.isCompact
            boolean r7 = r4.dumpSwapPss
            java.lang.String r0 = "  "
            java.lang.String r3 = "proc"
            r15 = r59
            r1 = r94
            r2 = r0
            r19 = r9
            r21 = r12
            r20 = r85
            r12 = 1
            r9 = r4
            r4 = r35
            r22 = r28
            r23 = r29
            dumpMemItems(r1, r2, r3, r4, r5, r6, r7)
            r94.println()
            goto L_0x0a23
        L_0x0a15:
            r19 = r9
            r21 = r12
            r22 = r28
            r23 = r29
            r15 = r59
            r20 = r85
            r12 = 1
            r9 = r4
        L_0x0a23:
            boolean r0 = r9.isCompact
            if (r0 != 0) goto L_0x0a2f
            java.lang.String r0 = "Total PSS by OOM adjustment:"
            r7 = r94
            r7.println(r0)
            goto L_0x0a31
        L_0x0a2f:
            r7 = r94
        L_0x0a31:
            r5 = 0
            boolean r6 = r9.isCompact
            boolean r0 = r9.dumpSwapPss
            java.lang.String r2 = "  "
            java.lang.String r3 = "oom"
            r1 = r94
            r4 = r14
            r12 = r7
            r7 = r0
            dumpMemItems(r1, r2, r3, r4, r5, r6, r7)
            if (r98 != 0) goto L_0x0a69
            boolean r0 = r9.oomOnly
            if (r0 != 0) goto L_0x0a69
            if (r100 == 0) goto L_0x0a4e
            r0 = r100
            goto L_0x0a4f
        L_0x0a4e:
            r0 = r12
        L_0x0a4f:
            boolean r1 = r9.isCompact
            if (r1 != 0) goto L_0x0a5b
            r0.println()
            java.lang.String r1 = "Total PSS by category:"
            r0.println(r1)
        L_0x0a5b:
            r5 = 1
            boolean r6 = r9.isCompact
            boolean r7 = r9.dumpSwapPss
            java.lang.String r2 = "  "
            java.lang.String r3 = "cat"
            r1 = r0
            r4 = r8
            dumpMemItems(r1, r2, r3, r4, r5, r6, r7)
        L_0x0a69:
            boolean r0 = r9.isCompact
            if (r0 != 0) goto L_0x0a70
            r94.println()
        L_0x0a70:
            com.android.internal.util.MemInfoReader r0 = new com.android.internal.util.MemInfoReader
            r0.<init>()
            r1 = r0
            r1.readMemInfo()
            int r0 = (r10 > r16 ? 1 : (r10 == r16 ? 0 : -1))
            r2 = 1024(0x400, double:5.06E-321)
            if (r0 <= 0) goto L_0x0abe
            r4 = r92
            monitor-enter(r92)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0ab8 }
            long r5 = r1.getCachedSizeKb()     // Catch:{ all -> 0x0ab8 }
            long r25 = r1.getFreeSizeKb()     // Catch:{ all -> 0x0ab8 }
            long r27 = r1.getZramTotalSizeKb()     // Catch:{ all -> 0x0ab8 }
            long r58 = r1.getKernelUsedSizeKb()     // Catch:{ all -> 0x0ab8 }
            long r60 = r5 * r2
            long r62 = r25 * r2
            long r64 = r27 * r2
            long r66 = r58 * r2
            long r68 = r10 * r2
            com.android.server.am.EventLogTags.writeAmMeminfo(r60, r62, r64, r66, r68)     // Catch:{ all -> 0x0ab8 }
            com.android.server.am.ProcessStatsService r0 = r4.mProcessStats     // Catch:{ all -> 0x0ab8 }
            r60 = r0
            r61 = r5
            r63 = r25
            r65 = r27
            r67 = r58
            r69 = r10
            r60.addSysMemUsageLocked(r61, r63, r65, r67, r69)     // Catch:{ all -> 0x0ab8 }
            monitor-exit(r92)     // Catch:{ all -> 0x0ab8 }
            resetPriorityAfterLockedSection()
            goto L_0x0ac0
        L_0x0ab8:
            r0 = move-exception
            monitor-exit(r92)     // Catch:{ all -> 0x0ab8 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0abe:
            r4 = r92
        L_0x0ac0:
            r0 = 3
            r5 = 2
            if (r98 != 0) goto L_0x0b9d
            boolean r6 = r9.isCompact
            if (r6 != 0) goto L_0x0b6c
            java.lang.String r6 = "Total RAM: "
            r12.print(r6)
            long r6 = r1.getTotalSizeKb()
            java.lang.String r6 = stringifyKBSize(r6)
            r12.print(r6)
            java.lang.String r6 = " (status "
            r12.print(r6)
            int r6 = r4.mLastMemoryLevel
            if (r6 == 0) goto L_0x0b05
            r7 = 1
            if (r6 == r7) goto L_0x0afe
            if (r6 == r5) goto L_0x0af7
            if (r6 == r0) goto L_0x0af1
            r12.print(r6)
            java.lang.String r6 = ")"
            r12.println(r6)
            goto L_0x0b0c
        L_0x0af1:
            java.lang.String r6 = "critical)"
            r12.println(r6)
            goto L_0x0b0c
        L_0x0af7:
            java.lang.String r6 = "low)"
            r12.println(r6)
            goto L_0x0b0c
        L_0x0afe:
            java.lang.String r6 = "moderate)"
            r12.println(r6)
            goto L_0x0b0c
        L_0x0b05:
            java.lang.String r6 = "normal)"
            r12.println(r6)
        L_0x0b0c:
            java.lang.String r6 = " Free RAM: "
            r12.print(r6)
            long r6 = r1.getMoreCachedSizeKb()
            long r6 = r54 + r6
            long r25 = com.android.server.am.ExtraActivityManagerService.getCachedLostRamKb()
            long r6 = r6 + r25
            long r25 = r1.getFreeSizeKb()
            long r6 = r6 + r25
            java.lang.String r6 = stringifyKBSize(r6)
            r12.print(r6)
            java.lang.String r6 = " ("
            r12.print(r6)
            java.lang.String r6 = stringifyKBSize(r54)
            r12.print(r6)
            java.lang.String r6 = " cached pss + "
            r12.print(r6)
            long r6 = r1.getMoreCachedSizeKb()
            java.lang.String r6 = stringifyKBSize(r6)
            r12.print(r6)
            java.lang.String r6 = " cached kernel + "
            r12.print(r6)
            long r6 = com.android.server.am.ExtraActivityManagerService.getCachedLostRamKb()
            java.lang.String r6 = stringifyKBSize(r6)
            r12.print(r6)
            java.lang.String r6 = " cached ion + "
            r12.print(r6)
            long r6 = r1.getFreeSizeKb()
            java.lang.String r6 = stringifyKBSize(r6)
            r12.print(r6)
            java.lang.String r6 = " free)"
            r12.println(r6)
            goto L_0x0b9d
        L_0x0b6c:
            java.lang.String r6 = "ram,"
            r12.print(r6)
            long r6 = r1.getTotalSizeKb()
            r12.print(r6)
            java.lang.String r6 = ","
            r12.print(r6)
            long r6 = r1.getMoreCachedSizeKb()
            long r6 = r54 + r6
            long r25 = com.android.server.am.ExtraActivityManagerService.getCachedLostRamKb()
            long r6 = r6 + r25
            long r25 = r1.getFreeSizeKb()
            long r6 = r6 + r25
            r12.print(r6)
            java.lang.String r6 = ","
            r12.print(r6)
            long r6 = r50 - r54
            r12.println(r6)
        L_0x0b9d:
            long r6 = r1.getTotalSizeKb()
            long r25 = r50 - r52
            long r6 = r6 - r25
            long r25 = r1.getFreeSizeKb()
            long r6 = r6 - r25
            long r25 = r1.getCachedSizeKb()
            long r6 = r6 - r25
            long r25 = r1.getKernelUsedSizeKb()
            long r6 = r6 - r25
            long r25 = r1.getZramTotalSizeKb()
            long r6 = r6 - r25
            boolean r2 = r9.isCompact
            if (r2 != 0) goto L_0x0c05
            java.lang.String r2 = " Used RAM: "
            r12.print(r2)
            long r2 = r50 - r54
            long r27 = r1.getKernelUsedSizeKb()
            long r2 = r2 + r27
            java.lang.String r2 = stringifyKBSize(r2)
            r12.print(r2)
            java.lang.String r2 = " ("
            r12.print(r2)
            long r2 = r50 - r54
            java.lang.String r2 = stringifyKBSize(r2)
            r12.print(r2)
            java.lang.String r2 = " used pss + "
            r12.print(r2)
            long r2 = r1.getKernelUsedSizeKb()
            java.lang.String r2 = stringifyKBSize(r2)
            r12.print(r2)
            java.lang.String r2 = " kernel)\n"
            r12.print(r2)
            java.lang.String r2 = " Lost RAM: "
            r12.print(r2)
            java.lang.String r2 = stringifyKBSize(r6)
            r12.println(r2)
            goto L_0x0c0e
        L_0x0c05:
            java.lang.String r2 = "lostram,"
            r12.print(r2)
            r12.println(r6)
        L_0x0c0e:
            if (r98 != 0) goto L_0x0dad
            long r2 = r1.getZramTotalSizeKb()
            int r2 = (r2 > r16 ? 1 : (r2 == r16 ? 0 : -1))
            if (r2 == 0) goto L_0x0c7d
            boolean r2 = r9.isCompact
            if (r2 != 0) goto L_0x0c58
            java.lang.String r2 = "     ZRAM: "
            r12.print(r2)
            long r2 = r1.getZramTotalSizeKb()
            java.lang.String r2 = stringifyKBSize(r2)
            r12.print(r2)
            java.lang.String r2 = " physical used for "
            r12.print(r2)
            long r2 = r1.getSwapTotalSizeKb()
            long r27 = r1.getSwapFreeSizeKb()
            long r2 = r2 - r27
            java.lang.String r2 = stringifyKBSize(r2)
            r12.print(r2)
            java.lang.String r2 = " in swap ("
            r12.print(r2)
            long r2 = r1.getSwapTotalSizeKb()
            java.lang.String r2 = stringifyKBSize(r2)
            r12.print(r2)
            java.lang.String r2 = " total swap)"
            r12.println(r2)
            goto L_0x0c7d
        L_0x0c58:
            java.lang.String r2 = "zram,"
            r12.print(r2)
            long r2 = r1.getZramTotalSizeKb()
            r12.print(r2)
            java.lang.String r2 = ","
            r12.print(r2)
            long r2 = r1.getSwapTotalSizeKb()
            r12.print(r2)
            java.lang.String r2 = ","
            r12.print(r2)
            long r2 = r1.getSwapFreeSizeKb()
            r12.println(r2)
        L_0x0c7d:
            long[] r2 = r92.getKsmInfo()
            boolean r3 = r9.isCompact
            r0 = 999(0x3e7, float:1.4E-42)
            if (r3 != 0) goto L_0x0d3b
            r3 = 1
            r25 = r2[r3]
            int r3 = (r25 > r16 ? 1 : (r25 == r16 ? 0 : -1))
            if (r3 != 0) goto L_0x0ca1
            r25 = r2[r36]
            int r3 = (r25 > r16 ? 1 : (r25 == r16 ? 0 : -1))
            if (r3 != 0) goto L_0x0ca1
            r25 = r2[r5]
            int r3 = (r25 > r16 ? 1 : (r25 == r16 ? 0 : -1))
            if (r3 != 0) goto L_0x0ca1
            r3 = 3
            r25 = r2[r3]
            int r3 = (r25 > r16 ? 1 : (r25 == r16 ? 0 : -1))
            if (r3 == 0) goto L_0x0ce0
        L_0x0ca1:
            java.lang.String r3 = "      KSM: "
            r12.print(r3)
            r3 = 1
            r16 = r2[r3]
            java.lang.String r3 = stringifyKBSize(r16)
            r12.print(r3)
            java.lang.String r3 = " saved from shared "
            r12.print(r3)
            r16 = r2[r36]
            java.lang.String r3 = stringifyKBSize(r16)
            r12.print(r3)
            java.lang.String r3 = "           "
            r12.print(r3)
            r16 = r2[r5]
            java.lang.String r3 = stringifyKBSize(r16)
            r12.print(r3)
            java.lang.String r3 = " unshared; "
            r12.print(r3)
            r3 = 3
            r16 = r2[r3]
            java.lang.String r3 = stringifyKBSize(r16)
            r12.print(r3)
            java.lang.String r3 = " volatile"
            r12.println(r3)
        L_0x0ce0:
            java.lang.String r3 = "   Tuning: "
            r12.print(r3)
            int r3 = android.app.ActivityManager.staticGetMemoryClass()
            r12.print(r3)
            java.lang.String r3 = " (large "
            r12.print(r3)
            int r3 = android.app.ActivityManager.staticGetLargeMemoryClass()
            r12.print(r3)
            java.lang.String r3 = "), oom "
            r12.print(r3)
            com.android.server.am.ProcessList r3 = r4.mProcessList
            r16 = r1
            long r0 = r3.getMemLevel(r0)
            r3 = 1024(0x400, float:1.435E-42)
            java.lang.String r0 = stringifySize(r0, r3)
            r12.print(r0)
            java.lang.String r0 = ", restore limit "
            r12.print(r0)
            com.android.server.am.ProcessList r0 = r4.mProcessList
            long r0 = r0.getCachedRestoreThresholdKb()
            java.lang.String r0 = stringifyKBSize(r0)
            r12.print(r0)
            boolean r0 = android.app.ActivityManager.isLowRamDeviceStatic()
            if (r0 == 0) goto L_0x0d2b
            java.lang.String r0 = " (low-ram)"
            r12.print(r0)
        L_0x0d2b:
            boolean r0 = android.app.ActivityManager.isHighEndGfx()
            if (r0 == 0) goto L_0x0d36
            java.lang.String r0 = " (high-end-gfx)"
            r12.print(r0)
        L_0x0d36:
            r94.println()
            goto L_0x0df0
        L_0x0d3b:
            r16 = r1
            java.lang.String r1 = "ksm,"
            r12.print(r1)
            r1 = 1
            r0 = r2[r1]
            r12.print(r0)
            java.lang.String r0 = ","
            r12.print(r0)
            r0 = r2[r36]
            r12.print(r0)
            java.lang.String r0 = ","
            r12.print(r0)
            r0 = r2[r5]
            r12.print(r0)
            java.lang.String r0 = ","
            r12.print(r0)
            r0 = 3
            r0 = r2[r0]
            r12.println(r0)
            java.lang.String r0 = "tuning,"
            r12.print(r0)
            int r0 = android.app.ActivityManager.staticGetMemoryClass()
            r12.print(r0)
            r0 = 44
            r12.print(r0)
            int r1 = android.app.ActivityManager.staticGetLargeMemoryClass()
            r12.print(r1)
            r12.print(r0)
            com.android.server.am.ProcessList r0 = r4.mProcessList
            r1 = 999(0x3e7, float:1.4E-42)
            long r0 = r0.getMemLevel(r1)
            r24 = 1024(0x400, double:5.06E-321)
            long r0 = r0 / r24
            r12.print(r0)
            boolean r0 = android.app.ActivityManager.isLowRamDeviceStatic()
            if (r0 == 0) goto L_0x0d9e
            java.lang.String r0 = ",low-ram"
            r12.print(r0)
        L_0x0d9e:
            boolean r0 = android.app.ActivityManager.isHighEndGfx()
            if (r0 == 0) goto L_0x0da9
            java.lang.String r0 = ",high-end-gfx"
            r12.print(r0)
        L_0x0da9:
            r94.println()
            goto L_0x0df0
        L_0x0dad:
            r16 = r1
            goto L_0x0df0
        L_0x0db0:
            r0 = move-exception
            r9 = r4
            r21 = r12
            r22 = r28
            r23 = r29
            r15 = r59
            r20 = r85
            r4 = r92
            r12 = r94
            r1 = r10
            r3 = r43
            goto L_0x0dd8
        L_0x0dc4:
            r0 = move-exception
            r35 = r8
            r23 = r12
            r21 = r19
            r22 = r28
            r15 = r59
            r20 = r85
            r12 = r94
            r91 = r9
            r9 = r4
            r4 = r91
        L_0x0dd8:
            monitor-exit(r5)     // Catch:{ all -> 0x0dda }
            throw r0
        L_0x0dda:
            r0 = move-exception
            goto L_0x0dd8
        L_0x0ddc:
            r35 = r8
            r23 = r12
            r21 = r19
            r22 = r28
            r15 = r59
            r20 = r85
            r12 = r94
            r91 = r9
            r9 = r4
            r4 = r91
            r10 = r1
        L_0x0df0:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.dumpApplicationMemoryUsage(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String, com.android.server.am.ActivityManagerService$MemoryUsageDumpOptions, java.lang.String[], boolean, java.util.ArrayList, java.io.PrintWriter):void");
    }

    /* Debug info: failed to restart local var, previous not found, register: 107 */
    /* JADX WARNING: type inference failed for: r20v0 */
    /* JADX WARNING: type inference failed for: r20v1 */
    /* JADX WARNING: type inference failed for: r20v3 */
    /*  JADX ERROR: IndexOutOfBoundsException in pass: RegionMakerVisitor
        java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
        	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
        	at java.util.ArrayList.get(ArrayList.java:433)
        	at jadx.core.dex.nodes.InsnNode.getArg(InsnNode.java:101)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:611)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:561)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processIf(RegionMaker.java:698)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:123)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processLoop(RegionMaker.java:225)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:106)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processIf(RegionMaker.java:698)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:123)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:49)
        */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:119:0x02f3  */
    /* JADX WARNING: Removed duplicated region for block: B:147:0x0427  */
    private final void dumpApplicationMemoryUsage(java.io.FileDescriptor r108, com.android.server.am.ActivityManagerService.MemoryUsageDumpOptions r109, java.lang.String[] r110, boolean r111, java.util.ArrayList<com.android.server.am.ProcessRecord> r112) {
        /*
            r107 = this;
            r1 = r107
            r2 = r108
            r3 = r109
            r12 = r110
            r13 = r112
            long r14 = android.os.SystemClock.uptimeMillis()
            long r10 = android.os.SystemClock.elapsedRealtime()
            r9 = 1
            long[] r8 = new long[r9]
            r9 = 0
            if (r13 != 0) goto L_0x017d
            java.lang.String r0 = "N/A"
            int r6 = r12.length
            if (r6 <= 0) goto L_0x015d
            r6 = r12[r9]
            char r0 = r6.charAt(r9)
            r7 = 45
            if (r0 == r7) goto L_0x0156
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r7 = r0
            r107.updateCpuStatsNow()
            r24 = -1
            r0 = r12[r9]     // Catch:{ NumberFormatException -> 0x003d }
            int r0 = java.lang.Integer.parseInt(r0)     // Catch:{ NumberFormatException -> 0x003d }
            r24 = r0
            r4 = r24
            goto L_0x0040
        L_0x003d:
            r0 = move-exception
            r4 = r24
        L_0x0040:
            com.android.internal.os.ProcessCpuTracker r5 = r1.mProcessCpuTracker
            monitor-enter(r5)
            com.android.internal.os.ProcessCpuTracker r0 = r1.mProcessCpuTracker     // Catch:{ all -> 0x0149 }
            int r0 = r0.countStats()     // Catch:{ all -> 0x0149 }
            r24 = 0
            r9 = r24
        L_0x004d:
            if (r9 >= r0) goto L_0x009c
            r24 = r0
            com.android.internal.os.ProcessCpuTracker r0 = r1.mProcessCpuTracker     // Catch:{ all -> 0x0091 }
            com.android.internal.os.ProcessCpuTracker$Stats r0 = r0.getStats(r9)     // Catch:{ all -> 0x0091 }
            r28 = r6
            int r6 = r0.pid     // Catch:{ all -> 0x0088 }
            if (r6 == r4) goto L_0x0073
            java.lang.String r6 = r0.baseName     // Catch:{ all -> 0x0088 }
            if (r6 == 0) goto L_0x0070
            java.lang.String r6 = r0.baseName     // Catch:{ all -> 0x0088 }
            r29 = r4
            r27 = 0
            r4 = r12[r27]     // Catch:{ all -> 0x0081 }
            boolean r4 = r6.equals(r4)     // Catch:{ all -> 0x0081 }
            if (r4 == 0) goto L_0x0078
            goto L_0x0075
        L_0x0070:
            r29 = r4
            goto L_0x0078
        L_0x0073:
            r29 = r4
        L_0x0075:
            r7.add(r0)     // Catch:{ all -> 0x0081 }
        L_0x0078:
            int r9 = r9 + 1
            r0 = r24
            r6 = r28
            r4 = r29
            goto L_0x004d
        L_0x0081:
            r0 = move-exception
            r46 = r10
            r48 = r14
            goto L_0x0152
        L_0x0088:
            r0 = move-exception
            r29 = r4
            r46 = r10
            r48 = r14
            goto L_0x0152
        L_0x0091:
            r0 = move-exception
            r29 = r4
            r28 = r6
            r46 = r10
            r48 = r14
            goto L_0x0152
        L_0x009c:
            r24 = r0
            r29 = r4
            r28 = r6
            monitor-exit(r5)     // Catch:{ all -> 0x0143 }
            int r0 = r7.size()
            if (r0 <= 0) goto L_0x013e
            android.util.proto.ProtoOutputStream r0 = new android.util.proto.ProtoOutputStream
            r0.<init>(r2)
            r4 = 1112396529665(0x10300000001, double:5.495969098605E-312)
            r0.write(r4, r14)
            r4 = 1112396529666(0x10300000002, double:5.49596909861E-312)
            r0.write(r4, r10)
            r4 = 0
            int r5 = r7.size()
            r6 = 1
            int r5 = r5 - r6
        L_0x00c5:
            if (r5 < 0) goto L_0x013a
            java.lang.Object r6 = r7.get(r5)
            com.android.internal.os.ProcessCpuTracker$Stats r6 = (com.android.internal.os.ProcessCpuTracker.Stats) r6
            int r9 = r6.pid
            r46 = r10
            r10 = 2246267895811(0x20b00000003, double:1.1098037986763E-311)
            long r10 = r0.start(r10)
            r48 = r14
            r13 = 1120986464257(0x10500000001, double:5.538409014424E-312)
            r0.write(r13, r9)
            java.lang.String r13 = r6.baseName
            r14 = 1138166333442(0x10900000002, double:5.62328884607E-312)
            r0.write(r14, r13)
            if (r4 != 0) goto L_0x00f6
            android.os.Debug$MemoryInfo r13 = new android.os.Debug$MemoryInfo
            r13.<init>()
            r4 = r13
        L_0x00f6:
            boolean r13 = r3.dumpDetails
            if (r13 != 0) goto L_0x0110
            if (r111 != 0) goto L_0x0101
            boolean r13 = r3.oomOnly
            if (r13 != 0) goto L_0x0101
            goto L_0x0110
        L_0x0101:
            r13 = 0
            long r14 = android.os.Debug.getPss(r9, r8, r13)
            int r13 = (int) r14
            r4.dalvikPss = r13
            r13 = 0
            r14 = r8[r13]
            int r13 = (int) r14
            r4.dalvikPrivateDirty = r13
            goto L_0x0113
        L_0x0110:
            android.os.Debug.getMemoryInfo(r9, r4)
        L_0x0113:
            boolean r13 = r3.dumpDalvik
            boolean r14 = r3.dumpSummaryOnly
            r34 = 0
            r36 = 0
            r38 = 0
            r40 = 0
            r42 = 0
            r44 = 0
            r30 = r0
            r31 = r4
            r32 = r13
            r33 = r14
            android.app.ActivityThread.dumpMemInfoTable(r30, r31, r32, r33, r34, r36, r38, r40, r42, r44)
            r0.end(r10)
            int r5 = r5 + -1
            r13 = r112
            r10 = r46
            r14 = r48
            goto L_0x00c5
        L_0x013a:
            r0.flush()
            return
        L_0x013e:
            r46 = r10
            r48 = r14
            goto L_0x0163
        L_0x0143:
            r0 = move-exception
            r46 = r10
            r48 = r14
            goto L_0x0152
        L_0x0149:
            r0 = move-exception
            r29 = r4
            r28 = r6
            r46 = r10
            r48 = r14
        L_0x0152:
            monitor-exit(r5)     // Catch:{ all -> 0x0154 }
            throw r0
        L_0x0154:
            r0 = move-exception
            goto L_0x0152
        L_0x0156:
            r28 = r6
            r46 = r10
            r48 = r14
            goto L_0x0163
        L_0x015d:
            r46 = r10
            r48 = r14
            r28 = r0
        L_0x0163:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r4 = "No process found for: "
            r0.append(r4)
            r4 = 0
            r4 = r12[r4]
            r0.append(r4)
            java.lang.String r0 = r0.toString()
            java.lang.String r4 = "ActivityManager"
            android.util.Log.d(r4, r0)
            return
        L_0x017d:
            r46 = r10
            r48 = r14
            if (r111 != 0) goto L_0x0199
            boolean r0 = r3.oomOnly
            if (r0 != 0) goto L_0x0199
            int r0 = r112.size()
            r4 = 1
            if (r0 == r4) goto L_0x0196
            boolean r0 = r3.isCheckinRequest
            if (r0 != 0) goto L_0x0196
            boolean r0 = r3.packages
            if (r0 == 0) goto L_0x0199
        L_0x0196:
            r4 = 1
            r3.dumpDetails = r4
        L_0x0199:
            android.util.proto.ProtoOutputStream r0 = new android.util.proto.ProtoOutputStream
            r0.<init>(r2)
            r13 = r0
            r14 = r48
            r4 = 1112396529665(0x10300000001, double:5.495969098605E-312)
            r13.write(r4, r14)
            r10 = r46
            r4 = 1112396529666(0x10300000002, double:5.49596909861E-312)
            r13.write(r4, r10)
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r9 = r0
            android.util.SparseArray r0 = new android.util.SparseArray
            r0.<init>()
            r7 = r0
            r4 = 0
            r22 = 0
            r24 = 0
            r28 = 0
            boolean r0 = r3.dumpDalvik
            r6 = 14
            if (r0 == 0) goto L_0x01d0
            long[] r0 = new long[r6]
            goto L_0x01d2
        L_0x01d0:
            long[] r0 = libcore.util.EmptyArray.LONG
        L_0x01d2:
            r26 = r0
            boolean r0 = r3.dumpDalvik
            if (r0 == 0) goto L_0x01db
            long[] r0 = new long[r6]
            goto L_0x01dd
        L_0x01db:
            long[] r0 = libcore.util.EmptyArray.LONG
        L_0x01dd:
            r44 = r0
            r30 = 0
            r32 = 0
            r6 = 17
            long[] r2 = new long[r6]
            long[] r12 = new long[r6]
            java.lang.String[] r0 = DUMP_MEM_OOM_LABEL
            int r6 = r0.length
            long[] r6 = new long[r6]
            r34 = r4
            int r4 = r0.length
            long[] r5 = new long[r4]
            int r0 = r0.length
            java.util.ArrayList[] r4 = new java.util.ArrayList[r0]
            r36 = 0
            r38 = 0
            r40 = 0
            r42 = 0
            r0 = 0
            r46 = 0
            int r47 = r112.size()
            r20 = 1
            int r47 = r47 + -1
            r48 = r14
            r50 = r24
            r52 = r28
            r54 = r30
            r56 = r32
            r58 = r36
            r60 = r38
            r62 = r40
            r64 = r42
            r14 = r47
            r15 = r0
            r24 = r22
            r22 = r34
        L_0x0222:
            if (r14 < 0) goto L_0x0716
            r35 = r15
            r15 = r112
            java.lang.Object r0 = r15.get(r14)
            r15 = r0
            com.android.server.am.ProcessRecord r15 = (com.android.server.am.ProcessRecord) r15
            monitor-enter(r107)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x06f3 }
            android.app.IApplicationThread r0 = r15.thread     // Catch:{ all -> 0x06f3 }
            r47 = r0
            int r0 = r15.pid     // Catch:{ all -> 0x06f3 }
            r75 = r0
            int r0 = r15.getSetAdjWithServices()     // Catch:{ all -> 0x06f3 }
            r76 = r0
            boolean r0 = r15.hasActivities()     // Catch:{ all -> 0x06f3 }
            r77 = r0
            monitor-exit(r107)     // Catch:{ all -> 0x06f3 }
            resetPriorityAfterLockedSection()
            if (r47 != 0) goto L_0x0276
            r17 = r2
            r18 = r4
            r100 = r5
            r102 = r8
            r105 = r9
            r103 = r10
            r79 = r12
            r16 = r13
            r78 = r14
            r5 = r26
            r99 = r35
            r15 = r46
            r21 = 0
            r42 = 1120986464257(0x10500000001, double:5.538409014424E-312)
            r45 = 1138166333442(0x10900000002, double:5.62328884607E-312)
            r11 = r3
            r14 = r7
            r7 = r6
            goto L_0x069a
        L_0x0276:
            if (r46 != 0) goto L_0x0281
            android.os.Debug$MemoryInfo r0 = new android.os.Debug$MemoryInfo
            r0.<init>()
            r78 = r14
            r14 = r0
            goto L_0x0285
        L_0x0281:
            r78 = r14
            r14 = r46
        L_0x0285:
            boolean r0 = r3.dumpDetails
            if (r0 != 0) goto L_0x02cb
            if (r111 != 0) goto L_0x029e
            boolean r0 = r3.oomOnly
            if (r0 != 0) goto L_0x029e
            r67 = r4
            r66 = r5
            r21 = r9
            r68 = r10
            r79 = r12
            r12 = r75
            r27 = 0
            goto L_0x02d9
        L_0x029e:
            r0 = 3
            long r28 = android.os.SystemClock.currentThreadTimeMillis()
            r67 = r4
            r66 = r5
            r21 = r9
            r79 = r12
            r12 = r75
            r9 = 0
            long r4 = android.os.Debug.getPss(r12, r8, r9)
            int r4 = (int) r4
            r14.dalvikPss = r4
            long r4 = android.os.SystemClock.currentThreadTimeMillis()
            r68 = r10
            r27 = 0
            r9 = r8[r27]
            int r9 = (int) r9
            r14.dalvikPrivateDirty = r9
            r75 = r0
            r97 = r4
            r95 = r28
            r99 = r35
            goto L_0x02ef
        L_0x02cb:
            r67 = r4
            r66 = r5
            r21 = r9
            r68 = r10
            r79 = r12
            r12 = r75
            r27 = 0
        L_0x02d9:
            r0 = 4
            long r28 = android.os.SystemClock.currentThreadTimeMillis()
            android.os.Debug.getMemoryInfo(r12, r14)
            long r4 = android.os.SystemClock.currentThreadTimeMillis()
            boolean r9 = r14.hasSwappedOutPss
            r75 = r0
            r97 = r4
            r99 = r9
            r95 = r28
        L_0x02ef:
            boolean r0 = r3.dumpDetails
            if (r0 == 0) goto L_0x0427
            boolean r0 = r3.localOnly
            r9 = 2246267895812(0x20b00000004, double:1.109803798677E-311)
            if (r0 == 0) goto L_0x035e
            long r4 = r13.start(r9)
            r9 = 1146756268033(0x10b00000001, double:5.66572876188E-312)
            long r9 = r13.start(r9)
            r71 = r6
            r70 = r7
            r6 = 1120986464257(0x10500000001, double:5.538409014424E-312)
            r13.write(r6, r12)
            java.lang.String r0 = r15.processName
            r6 = 1138166333442(0x10900000002, double:5.62328884607E-312)
            r13.write(r6, r0)
            boolean r0 = r3.dumpDalvik
            boolean r6 = r3.dumpSummaryOnly
            r32 = 0
            r34 = 0
            r36 = 0
            r38 = 0
            r40 = 0
            r42 = 0
            r28 = r13
            r29 = r14
            r30 = r0
            r31 = r6
            android.app.ActivityThread.dumpMemInfoTable(r28, r29, r30, r31, r32, r34, r36, r38, r40, r42)
            r13.end(r9)
            r13.end(r4)
            r17 = r2
            r102 = r8
            r105 = r21
            r21 = r27
            r100 = r66
            r18 = r67
            r103 = r68
            r20 = r70
            r101 = r71
            r42 = 1120986464257(0x10500000001, double:5.538409014424E-312)
            r45 = 1138166333442(0x10900000002, double:5.62328884607E-312)
            goto L_0x0443
        L_0x035e:
            r71 = r6
            r70 = r7
            com.android.internal.os.ByteTransferPipe r0 = new com.android.internal.os.ByteTransferPipe     // Catch:{ IOException -> 0x0402, RemoteException -> 0x03dd }
            r0.<init>()     // Catch:{ IOException -> 0x0402, RemoteException -> 0x03dd }
            r28 = r0
            android.os.ParcelFileDescriptor r5 = r28.getWriteFd()     // Catch:{ all -> 0x03b8 }
            boolean r7 = r3.dumpFullDetails     // Catch:{ all -> 0x03b8 }
            boolean r0 = r3.dumpDalvik     // Catch:{ all -> 0x03b8 }
            boolean r6 = r3.dumpSummaryOnly     // Catch:{ all -> 0x03b8 }
            boolean r4 = r3.dumpUnreachable     // Catch:{ all -> 0x03b8 }
            r19 = r4
            r18 = r67
            r42 = 1120986464257(0x10500000001, double:5.538409014424E-312)
            r4 = r47
            r100 = r66
            r17 = r2
            r16 = r6
            r101 = r71
            r2 = 17
            r45 = 1138166333442(0x10900000002, double:5.62328884607E-312)
            r6 = r14
            r2 = r70
            r102 = r8
            r8 = r0
            r20 = r2
            r2 = r9
            r11 = r21
            r21 = r27
            r10 = 0
            r9 = r16
            r103 = r68
            r10 = r19
            r105 = r11
            r11 = r110
            r4.dumpMemInfoProto(r5, r6, r7, r8, r9, r10, r11)     // Catch:{ all -> 0x03b6 }
            byte[] r0 = r28.get()     // Catch:{ all -> 0x03b6 }
            r13.write(r2, r0)     // Catch:{ all -> 0x03b6 }
            r28.kill()     // Catch:{ IOException -> 0x03db, RemoteException -> 0x03d9 }
            goto L_0x0426
        L_0x03b6:
            r0 = move-exception
            goto L_0x03d5
        L_0x03b8:
            r0 = move-exception
            r17 = r2
            r102 = r8
            r105 = r21
            r21 = r27
            r100 = r66
            r18 = r67
            r103 = r68
            r20 = r70
            r101 = r71
            r42 = 1120986464257(0x10500000001, double:5.538409014424E-312)
            r45 = 1138166333442(0x10900000002, double:5.62328884607E-312)
        L_0x03d5:
            r28.kill()     // Catch:{ IOException -> 0x03db, RemoteException -> 0x03d9 }
            throw r0     // Catch:{ IOException -> 0x03db, RemoteException -> 0x03d9 }
        L_0x03d9:
            r0 = move-exception
            goto L_0x03fa
        L_0x03db:
            r0 = move-exception
            goto L_0x041f
        L_0x03dd:
            r0 = move-exception
            r17 = r2
            r102 = r8
            r105 = r21
            r21 = r27
            r100 = r66
            r18 = r67
            r103 = r68
            r20 = r70
            r101 = r71
            r42 = 1120986464257(0x10500000001, double:5.538409014424E-312)
            r45 = 1138166333442(0x10900000002, double:5.62328884607E-312)
        L_0x03fa:
            java.lang.String r2 = "ActivityManager"
            java.lang.String r3 = "Got RemoteException!"
            android.util.Log.e(r2, r3, r0)
            goto L_0x0443
        L_0x0402:
            r0 = move-exception
            r17 = r2
            r102 = r8
            r105 = r21
            r21 = r27
            r100 = r66
            r18 = r67
            r103 = r68
            r20 = r70
            r101 = r71
            r42 = 1120986464257(0x10500000001, double:5.538409014424E-312)
            r45 = 1138166333442(0x10900000002, double:5.62328884607E-312)
        L_0x041f:
            java.lang.String r2 = "ActivityManager"
            java.lang.String r3 = "Got IOException!"
            android.util.Log.e(r2, r3, r0)
        L_0x0426:
            goto L_0x0443
        L_0x0427:
            r17 = r2
            r101 = r6
            r20 = r7
            r102 = r8
            r105 = r21
            r21 = r27
            r100 = r66
            r18 = r67
            r103 = r68
            r42 = 1120986464257(0x10500000001, double:5.538409014424E-312)
            r45 = 1138166333442(0x10900000002, double:5.62328884607E-312)
        L_0x0443:
            int r0 = r14.getTotalPss()
            long r2 = (long) r0
            int r0 = r14.getTotalUss()
            long r4 = (long) r0
            int r0 = r14.getTotalRss()
            long r6 = (long) r0
            int r0 = r14.getTotalSwappedOutPss()
            long r8 = (long) r0
            monitor-enter(r107)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x06d2 }
            android.app.IApplicationThread r0 = r15.thread     // Catch:{ all -> 0x06d2 }
            if (r0 == 0) goto L_0x0561
            int r0 = r15.getSetAdjWithServices()     // Catch:{ all -> 0x0545 }
            r10 = r76
            if (r10 != r0) goto L_0x053d
            com.android.internal.app.procstats.ProcessState r0 = r15.baseProcessTracker     // Catch:{ all -> 0x051f }
            r37 = 1
            long r39 = r97 - r95
            com.android.server.am.ProcessRecord$PackageList r11 = r15.pkgList     // Catch:{ all -> 0x051f }
            android.util.ArrayMap<java.lang.String, com.android.internal.app.procstats.ProcessStats$ProcessStateHolder> r11 = r11.mPkgList     // Catch:{ all -> 0x051f }
            r30 = r0
            r31 = r2
            r33 = r4
            r35 = r6
            r38 = r75
            r41 = r11
            r30.addPss(r31, r33, r35, r37, r38, r39, r41)     // Catch:{ all -> 0x051f }
            com.android.server.am.ProcessRecord$PackageList r0 = r15.pkgList     // Catch:{ all -> 0x051f }
            int r0 = r0.size()     // Catch:{ all -> 0x051f }
            r11 = 1
            int r0 = r0 - r11
        L_0x0488:
            if (r0 < 0) goto L_0x0517
            com.android.server.am.ProcessRecord$PackageList r11 = r15.pkgList     // Catch:{ all -> 0x051f }
            com.android.internal.app.procstats.ProcessStats$ProcessStateHolder r11 = r11.valueAt(r0)     // Catch:{ all -> 0x051f }
            r80 = 18
            r16 = r13
            android.content.pm.ApplicationInfo r13 = r15.info     // Catch:{ all -> 0x04fb }
            int r13 = r13.uid     // Catch:{ all -> 0x04fb }
            r19 = r10
            com.android.internal.app.procstats.ProcessState r10 = r11.state     // Catch:{ all -> 0x04e1 }
            java.lang.String r82 = r10.getName()     // Catch:{ all -> 0x04e1 }
            com.android.internal.app.procstats.ProcessState r10 = r11.state     // Catch:{ all -> 0x04e1 }
            java.lang.String r83 = r10.getPackage()     // Catch:{ all -> 0x04e1 }
            long r91 = r97 - r95
            r27 = r14
            r10 = r15
            long r14 = r11.appVersion     // Catch:{ all -> 0x04c8 }
            r81 = r13
            r84 = r2
            r86 = r4
            r88 = r6
            r90 = r75
            r93 = r14
            android.util.StatsLog.write(r80, r81, r82, r83, r84, r86, r88, r90, r91, r93)     // Catch:{ all -> 0x04c8 }
            int r0 = r0 + -1
            r15 = r10
            r13 = r16
            r10 = r19
            r14 = r27
            r11 = 1
            goto L_0x0488
        L_0x04c8:
            r0 = move-exception
            r11 = r109
            r30 = r6
            r6 = r19
            r14 = r20
            r15 = r27
            r7 = r101
            r27 = r4
            r20 = r10
            r5 = r26
            r26 = r12
            r12 = r62
            goto L_0x06ec
        L_0x04e1:
            r0 = move-exception
            r11 = r109
            r27 = r4
            r30 = r6
            r6 = r19
            r5 = r26
            r7 = r101
            r26 = r12
            r12 = r62
            r106 = r15
            r15 = r14
            r14 = r20
            r20 = r106
            goto L_0x06ec
        L_0x04fb:
            r0 = move-exception
            r19 = r10
            r11 = r109
            r27 = r4
            r30 = r6
            r6 = r19
            r5 = r26
            r7 = r101
            r26 = r12
            r12 = r62
            r106 = r15
            r15 = r14
            r14 = r20
            r20 = r106
            goto L_0x06ec
        L_0x0517:
            r19 = r10
            r16 = r13
            r27 = r14
            r10 = r15
            goto L_0x0568
        L_0x051f:
            r0 = move-exception
            r19 = r10
            r16 = r13
            r11 = r109
            r27 = r4
            r30 = r6
            r6 = r19
            r5 = r26
            r7 = r101
            r26 = r12
            r12 = r62
            r106 = r15
            r15 = r14
            r14 = r20
            r20 = r106
            goto L_0x06ec
        L_0x053d:
            r19 = r10
            r16 = r13
            r27 = r14
            r10 = r15
            goto L_0x0568
        L_0x0545:
            r0 = move-exception
            r16 = r13
            r11 = r109
            r27 = r4
            r30 = r6
            r5 = r26
            r6 = r76
            r7 = r101
            r26 = r12
            r12 = r62
            r106 = r15
            r15 = r14
            r14 = r20
            r20 = r106
            goto L_0x06ec
        L_0x0561:
            r16 = r13
            r27 = r14
            r10 = r15
            r19 = r76
        L_0x0568:
            monitor-exit(r107)     // Catch:{ all -> 0x06ba }
            resetPriorityAfterLockedSection()
            r11 = r109
            boolean r0 = r11.isCheckinRequest
            if (r0 != 0) goto L_0x0684
            long r58 = r58 + r2
            long r60 = r60 + r8
            com.android.server.am.ActivityManagerService$MemItem r0 = new com.android.server.am.ActivityManagerService$MemItem
            java.lang.StringBuilder r13 = new java.lang.StringBuilder
            r13.<init>()
            java.lang.String r14 = r10.processName
            r13.append(r14)
            java.lang.String r14 = " (pid "
            r13.append(r14)
            r13.append(r12)
            if (r77 == 0) goto L_0x058f
            java.lang.String r14 = " / activities)"
            goto L_0x0591
        L_0x058f:
            java.lang.String r14 = ")"
        L_0x0591:
            r13.append(r14)
            java.lang.String r67 = r13.toString()
            java.lang.String r13 = r10.processName
            r66 = r0
            r68 = r13
            r69 = r2
            r71 = r8
            r73 = r12
            r74 = r77
            r66.<init>(r67, r68, r69, r71, r73, r74)
            r13 = r105
            r13.add(r0)
            r14 = r20
            r14.put(r12, r0)
            r15 = r27
            r27 = r4
            int r4 = r15.nativePss
            long r4 = (long) r4
            long r22 = r22 + r4
            int r4 = r15.nativeSwappedOutPss
            long r4 = (long) r4
            long r24 = r24 + r4
            int r4 = r15.dalvikPss
            long r4 = (long) r4
            long r50 = r50 + r4
            int r4 = r15.dalvikSwappedOutPss
            long r4 = (long) r4
            long r52 = r52 + r4
            r4 = 0
        L_0x05cc:
            r30 = r6
            r5 = r26
            int r6 = r5.length
            if (r4 >= r6) goto L_0x05fe
            r6 = r5[r4]
            r20 = r10
            int r10 = r4 + 17
            int r10 = r15.getOtherPss(r10)
            r26 = r12
            r105 = r13
            long r12 = (long) r10
            long r6 = r6 + r12
            r5[r4] = r6
            r6 = r44[r4]
            int r10 = r4 + 17
            int r10 = r15.getOtherSwappedOutPss(r10)
            long r12 = (long) r10
            long r6 = r6 + r12
            r44[r4] = r6
            int r4 = r4 + 1
            r10 = r20
            r12 = r26
            r6 = r30
            r13 = r105
            r26 = r5
            goto L_0x05cc
        L_0x05fe:
            r20 = r10
            r26 = r12
            r105 = r13
            int r4 = r15.otherPss
            long r6 = (long) r4
            long r54 = r54 + r6
            int r4 = r15.otherSwappedOutPss
            long r6 = (long) r4
            long r56 = r56 + r6
            r4 = 0
        L_0x060f:
            r6 = 17
            if (r4 >= r6) goto L_0x062e
            int r6 = r15.getOtherPss(r4)
            long r6 = (long) r6
            r12 = r17[r4]
            long r12 = r12 + r6
            r17[r4] = r12
            long r54 = r54 - r6
            int r10 = r15.getOtherSwappedOutPss(r4)
            long r6 = (long) r10
            r12 = r79[r4]
            long r12 = r12 + r6
            r79[r4] = r12
            long r56 = r56 - r6
            int r4 = r4 + 1
            goto L_0x060f
        L_0x062e:
            r4 = 900(0x384, float:1.261E-42)
            r6 = r19
            if (r6 < r4) goto L_0x063d
            r12 = r62
            long r62 = r12 + r2
            long r64 = r64 + r8
            r12 = r62
            goto L_0x063f
        L_0x063d:
            r12 = r62
        L_0x063f:
            r4 = 0
        L_0x0640:
            r7 = r101
            int r10 = r7.length
            if (r4 >= r10) goto L_0x067f
            int r10 = r7.length
            r19 = 1
            int r10 = r10 + -1
            if (r4 == r10) goto L_0x0662
            int[] r10 = DUMP_MEM_OOM_ADJ
            r32 = r12
            r12 = r10[r4]
            if (r6 < r12) goto L_0x065b
            int r12 = r4 + 1
            r10 = r10[r12]
            if (r6 >= r10) goto L_0x065b
            goto L_0x0664
        L_0x065b:
            int r4 = r4 + 1
            r101 = r7
            r12 = r32
            goto L_0x0640
        L_0x0662:
            r32 = r12
        L_0x0664:
            r12 = r7[r4]
            long r12 = r12 + r2
            r7[r4] = r12
            r12 = r100[r4]
            long r12 = r12 + r8
            r100[r4] = r12
            r10 = r18[r4]
            if (r10 != 0) goto L_0x0679
            java.util.ArrayList r10 = new java.util.ArrayList
            r10.<init>()
            r18[r4] = r10
        L_0x0679:
            r10 = r18[r4]
            r10.add(r0)
            goto L_0x0681
        L_0x067f:
            r32 = r12
        L_0x0681:
            r62 = r32
            goto L_0x069a
        L_0x0684:
            r30 = r6
            r6 = r19
            r14 = r20
            r15 = r27
            r7 = r101
            r27 = r4
            r20 = r10
            r5 = r26
            r26 = r12
            r12 = r62
            r62 = r12
        L_0x069a:
            int r0 = r78 + -1
            r26 = r5
            r6 = r7
            r3 = r11
            r7 = r14
            r46 = r15
            r13 = r16
            r2 = r17
            r4 = r18
            r12 = r79
            r15 = r99
            r5 = r100
            r8 = r102
            r10 = r103
            r9 = r105
            r20 = 1
            r14 = r0
            goto L_0x0222
        L_0x06ba:
            r0 = move-exception
            r11 = r109
            r30 = r6
            r6 = r19
            r14 = r20
            r15 = r27
            r7 = r101
            r27 = r4
            r20 = r10
            r5 = r26
            r26 = r12
            r12 = r62
            goto L_0x06ec
        L_0x06d2:
            r0 = move-exception
            r11 = r109
            r27 = r4
            r30 = r6
            r16 = r13
            r5 = r26
            r6 = r76
            r7 = r101
            r26 = r12
            r12 = r62
            r106 = r15
            r15 = r14
            r14 = r20
            r20 = r106
        L_0x06ec:
            monitor-exit(r107)     // Catch:{ all -> 0x06f1 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x06f1:
            r0 = move-exception
            goto L_0x06ec
        L_0x06f3:
            r0 = move-exception
            r17 = r2
            r18 = r4
            r100 = r5
            r102 = r8
            r105 = r9
            r103 = r10
            r79 = r12
            r16 = r13
            r78 = r14
            r20 = r15
            r5 = r26
            r12 = r62
            r11 = r3
            r14 = r7
            r7 = r6
        L_0x070f:
            monitor-exit(r107)     // Catch:{ all -> 0x0714 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0714:
            r0 = move-exception
            goto L_0x070f
        L_0x0716:
            r17 = r2
            r18 = r4
            r100 = r5
            r102 = r8
            r105 = r9
            r103 = r10
            r79 = r12
            r16 = r13
            r78 = r14
            r35 = r15
            r5 = r26
            r12 = r62
            r21 = 0
            r11 = r3
            r14 = r7
            r7 = r6
            r2 = 0
            int r0 = r112.size()
            r4 = 1
            if (r0 <= r4) goto L_0x0c0f
            boolean r0 = r11.packages
            if (r0 != 0) goto L_0x0c0f
            r107.updateCpuStatsNow()
            r4 = 0
            com.android.internal.os.ProcessCpuTracker r6 = r1.mProcessCpuTracker
            monitor-enter(r6)
            com.android.internal.os.ProcessCpuTracker r0 = r1.mProcessCpuTracker     // Catch:{ all -> 0x0c02 }
            int r0 = r0.countStats()     // Catch:{ all -> 0x0c02 }
            r8 = 0
            r46 = r4
        L_0x0750:
            if (r8 >= r0) goto L_0x08f8
            com.android.internal.os.ProcessCpuTracker r4 = r1.mProcessCpuTracker     // Catch:{ all -> 0x08ea }
            com.android.internal.os.ProcessCpuTracker$Stats r4 = r4.getStats(r8)     // Catch:{ all -> 0x08ea }
            long r9 = r4.vsize     // Catch:{ all -> 0x08ea }
            r19 = 0
            int r9 = (r9 > r19 ? 1 : (r9 == r19 ? 0 : -1))
            if (r9 <= 0) goto L_0x08d6
            int r9 = r4.pid     // Catch:{ all -> 0x08ea }
            int r9 = r14.indexOfKey(r9)     // Catch:{ all -> 0x08ea }
            if (r9 >= 0) goto L_0x08d6
            if (r46 != 0) goto L_0x077d
            android.os.Debug$MemoryInfo r9 = new android.os.Debug$MemoryInfo     // Catch:{ all -> 0x0770 }
            r9.<init>()     // Catch:{ all -> 0x0770 }
            goto L_0x077f
        L_0x0770:
            r0 = move-exception
            r29 = r5
            r8 = r11
            r26 = r14
            r10 = r16
            r4 = r46
            r13 = r12
            goto L_0x0c0b
        L_0x077d:
            r9 = r46
        L_0x077f:
            if (r111 != 0) goto L_0x079e
            boolean r10 = r11.oomOnly     // Catch:{ all -> 0x0792 }
            if (r10 != 0) goto L_0x079e
            int r10 = r4.pid     // Catch:{ all -> 0x0792 }
            android.os.Debug.getMemoryInfo(r10, r9)     // Catch:{ all -> 0x0792 }
            r62 = r12
            r26 = r14
            r15 = r102
            r14 = 0
            goto L_0x07b3
        L_0x0792:
            r0 = move-exception
            r29 = r5
            r4 = r9
            r8 = r11
            r26 = r14
            r10 = r16
            r13 = r12
            goto L_0x0c0b
        L_0x079e:
            int r10 = r4.pid     // Catch:{ all -> 0x08c9 }
            r62 = r12
            r26 = r14
            r15 = r102
            r14 = 0
            long r12 = android.os.Debug.getPss(r10, r15, r14)     // Catch:{ all -> 0x08bb }
            int r10 = (int) r12     // Catch:{ all -> 0x08bb }
            r9.nativePss = r10     // Catch:{ all -> 0x08bb }
            r12 = r15[r21]     // Catch:{ all -> 0x08bb }
            int r10 = (int) r12     // Catch:{ all -> 0x08bb }
            r9.nativePrivateDirty = r10     // Catch:{ all -> 0x08bb }
        L_0x07b3:
            int r10 = r9.getTotalPss()     // Catch:{ all -> 0x08bb }
            long r12 = (long) r10     // Catch:{ all -> 0x08bb }
            int r10 = r9.getTotalSwappedOutPss()     // Catch:{ all -> 0x08bb }
            r102 = r15
            long r14 = (long) r10
            long r58 = r58 + r12
            long r2 = r2 + r12
            com.android.server.am.ActivityManagerService$MemItem r10 = new com.android.server.am.ActivityManagerService$MemItem     // Catch:{ all -> 0x08ad }
            r27 = r0
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ all -> 0x08ad }
            r0.<init>()     // Catch:{ all -> 0x08ad }
            r19 = r2
            java.lang.String r2 = r4.name     // Catch:{ all -> 0x089f }
            r0.append(r2)     // Catch:{ all -> 0x089f }
            java.lang.String r2 = " (pid "
            r0.append(r2)     // Catch:{ all -> 0x089f }
            int r2 = r4.pid     // Catch:{ all -> 0x089f }
            r0.append(r2)     // Catch:{ all -> 0x089f }
            java.lang.String r2 = ")"
            r0.append(r2)     // Catch:{ all -> 0x089f }
            java.lang.String r67 = r0.toString()     // Catch:{ all -> 0x089f }
            java.lang.String r0 = r4.name     // Catch:{ all -> 0x089f }
            int r2 = r9.getSummaryTotalSwapPss()     // Catch:{ all -> 0x089f }
            long r2 = (long) r2     // Catch:{ all -> 0x089f }
            int r11 = r4.pid     // Catch:{ all -> 0x089f }
            r74 = 0
            r66 = r10
            r68 = r0
            r69 = r12
            r71 = r2
            r73 = r11
            r66.<init>(r67, r68, r69, r71, r73, r74)     // Catch:{ all -> 0x089f }
            r0 = r10
            r10 = r105
            r10.add(r0)     // Catch:{ all -> 0x088f }
            int r2 = r9.nativePss     // Catch:{ all -> 0x088f }
            long r2 = (long) r2     // Catch:{ all -> 0x088f }
            long r22 = r22 + r2
            int r2 = r9.nativeSwappedOutPss     // Catch:{ all -> 0x088f }
            long r2 = (long) r2     // Catch:{ all -> 0x088f }
            long r24 = r24 + r2
            int r2 = r9.dalvikPss     // Catch:{ all -> 0x088f }
            long r2 = (long) r2     // Catch:{ all -> 0x088f }
            long r50 = r50 + r2
            int r2 = r9.dalvikSwappedOutPss     // Catch:{ all -> 0x088f }
            long r2 = (long) r2     // Catch:{ all -> 0x088f }
            long r52 = r52 + r2
            r2 = r21
        L_0x0819:
            int r3 = r5.length     // Catch:{ all -> 0x088f }
            if (r2 >= r3) goto L_0x0841
            r30 = r5[r2]     // Catch:{ all -> 0x088f }
            int r3 = r2 + 17
            int r3 = r9.getOtherPss(r3)     // Catch:{ all -> 0x088f }
            r11 = r4
            long r3 = (long) r3     // Catch:{ all -> 0x088f }
            long r30 = r30 + r3
            r5[r2] = r30     // Catch:{ all -> 0x088f }
            r3 = r44[r2]     // Catch:{ all -> 0x088f }
            r28 = r11
            int r11 = r2 + 17
            int r11 = r9.getOtherSwappedOutPss(r11)     // Catch:{ all -> 0x088f }
            r105 = r10
            long r10 = (long) r11
            long r3 = r3 + r10
            r44[r2] = r3     // Catch:{ all -> 0x089f }
            int r2 = r2 + 1
            r4 = r28
            r10 = r105
            goto L_0x0819
        L_0x0841:
            r28 = r4
            r105 = r10
            int r2 = r9.otherPss     // Catch:{ all -> 0x089f }
            long r2 = (long) r2     // Catch:{ all -> 0x089f }
            long r54 = r54 + r2
            int r2 = r9.otherSwappedOutPss     // Catch:{ all -> 0x089f }
            long r2 = (long) r2     // Catch:{ all -> 0x089f }
            long r56 = r56 + r2
            r2 = 0
        L_0x0850:
            r3 = 17
            if (r2 >= r3) goto L_0x086f
            int r3 = r9.getOtherPss(r2)     // Catch:{ all -> 0x089f }
            long r3 = (long) r3     // Catch:{ all -> 0x089f }
            r10 = r17[r2]     // Catch:{ all -> 0x089f }
            long r10 = r10 + r3
            r17[r2] = r10     // Catch:{ all -> 0x089f }
            long r54 = r54 - r3
            int r10 = r9.getOtherSwappedOutPss(r2)     // Catch:{ all -> 0x089f }
            long r3 = (long) r10     // Catch:{ all -> 0x089f }
            r10 = r79[r2]     // Catch:{ all -> 0x089f }
            long r10 = r10 + r3
            r79[r2] = r10     // Catch:{ all -> 0x089f }
            long r56 = r56 - r3
            int r2 = r2 + 1
            goto L_0x0850
        L_0x086f:
            r2 = r7[r21]     // Catch:{ all -> 0x089f }
            long r2 = r2 + r12
            r7[r21] = r2     // Catch:{ all -> 0x089f }
            r2 = r100[r21]     // Catch:{ all -> 0x089f }
            long r2 = r2 + r14
            r100[r21] = r2     // Catch:{ all -> 0x089f }
            r2 = r18[r21]     // Catch:{ all -> 0x089f }
            if (r2 != 0) goto L_0x0884
            java.util.ArrayList r2 = new java.util.ArrayList     // Catch:{ all -> 0x089f }
            r2.<init>()     // Catch:{ all -> 0x089f }
            r18[r21] = r2     // Catch:{ all -> 0x089f }
        L_0x0884:
            r2 = r18[r21]     // Catch:{ all -> 0x089f }
            r2.add(r0)     // Catch:{ all -> 0x089f }
            r46 = r9
            r2 = r19
            goto L_0x08de
        L_0x088f:
            r0 = move-exception
            r105 = r10
            r8 = r109
            r29 = r5
            r4 = r9
            r10 = r16
            r2 = r19
            r13 = r62
            goto L_0x0c0b
        L_0x089f:
            r0 = move-exception
            r8 = r109
            r29 = r5
            r4 = r9
            r10 = r16
            r2 = r19
            r13 = r62
            goto L_0x0c0b
        L_0x08ad:
            r0 = move-exception
            r19 = r2
            r8 = r109
            r29 = r5
            r4 = r9
            r10 = r16
            r13 = r62
            goto L_0x0c0b
        L_0x08bb:
            r0 = move-exception
            r102 = r15
            r8 = r109
            r29 = r5
            r4 = r9
            r10 = r16
            r13 = r62
            goto L_0x0c0b
        L_0x08c9:
            r0 = move-exception
            r26 = r14
            r8 = r109
            r29 = r5
            r4 = r9
            r13 = r12
            r10 = r16
            goto L_0x0c0b
        L_0x08d6:
            r27 = r0
            r28 = r4
            r62 = r12
            r26 = r14
        L_0x08de:
            int r8 = r8 + 1
            r11 = r109
            r14 = r26
            r0 = r27
            r12 = r62
            goto L_0x0750
        L_0x08ea:
            r0 = move-exception
            r26 = r14
            r8 = r109
            r29 = r5
            r13 = r12
            r10 = r16
            r4 = r46
            goto L_0x0c0b
        L_0x08f8:
            r27 = r0
            r62 = r12
            r26 = r14
            monitor-exit(r6)     // Catch:{ all -> 0x0bf5 }
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r4 = r0
            com.android.server.am.ActivityManagerService$MemItem r0 = new com.android.server.am.ActivityManagerService$MemItem
            r43 = -1
            java.lang.String r37 = "Native"
            java.lang.String r38 = "Native"
            r36 = r0
            r39 = r22
            r41 = r24
            r36.<init>(r37, r38, r39, r41, r43)
            r4.add(r0)
            r6 = -2
            com.android.server.am.ActivityManagerService$MemItem r0 = new com.android.server.am.ActivityManagerService$MemItem
            r43 = -2
            java.lang.String r37 = "Dalvik"
            java.lang.String r38 = "Dalvik"
            r36 = r0
            r39 = r50
            r41 = r52
            r36.<init>(r37, r38, r39, r41, r43)
            r4.add(r0)
            com.android.server.am.ActivityManagerService$MemItem r0 = new com.android.server.am.ActivityManagerService$MemItem
            r43 = -3
            java.lang.String r37 = "Unknown"
            java.lang.String r38 = "Unknown"
            r36 = r0
            r39 = r54
            r41 = r56
            r36.<init>(r37, r38, r39, r41, r43)
            r4.add(r0)
            r0 = 0
        L_0x0943:
            r15 = 17
            if (r0 >= r15) goto L_0x0969
            java.lang.String r27 = android.os.Debug.MemoryInfo.getOtherLabel(r0)
            com.android.server.am.ActivityManagerService$MemItem r13 = new com.android.server.am.ActivityManagerService$MemItem
            r11 = r17[r0]
            r28 = r79[r0]
            r8 = r13
            r9 = r27
            r10 = r27
            r36 = r6
            r6 = r13
            r13 = r28
            r28 = r15
            r15 = r0
            r8.<init>(r9, r10, r11, r13, r15)
            r4.add(r6)
            int r0 = r0 + 1
            r6 = r36
            goto L_0x0943
        L_0x0969:
            r36 = r6
            int r0 = r5.length
            if (r0 <= 0) goto L_0x09cf
            java.util.Iterator r0 = r4.iterator()
        L_0x0972:
            boolean r6 = r0.hasNext()
            if (r6 == 0) goto L_0x09cf
            java.lang.Object r6 = r0.next()
            com.android.server.am.ActivityManagerService$MemItem r6 = (com.android.server.am.ActivityManagerService.MemItem) r6
            r8 = 0
            r9 = 0
            int r10 = r6.id
            r11 = -2
            if (r10 != r11) goto L_0x0988
            r8 = 0
            r9 = 3
            goto L_0x09a5
        L_0x0988:
            int r10 = r6.id
            if (r10 != 0) goto L_0x0990
            r8 = 4
            r9 = 8
            goto L_0x09a5
        L_0x0990:
            int r10 = r6.id
            r11 = 10
            if (r10 != r11) goto L_0x099b
            r8 = 9
            r9 = 11
            goto L_0x09a5
        L_0x099b:
            int r10 = r6.id
            r11 = 12
            if (r10 != r11) goto L_0x0972
            r8 = 12
            r9 = 13
        L_0x09a5:
            java.util.ArrayList r10 = new java.util.ArrayList
            r10.<init>()
            r6.subitems = r10
            r10 = r8
        L_0x09ad:
            if (r10 > r9) goto L_0x09ce
            int r11 = r10 + 17
            java.lang.String r11 = android.os.Debug.MemoryInfo.getOtherLabel(r11)
            java.util.ArrayList<com.android.server.am.ActivityManagerService$MemItem> r12 = r6.subitems
            com.android.server.am.ActivityManagerService$MemItem r13 = new com.android.server.am.ActivityManagerService$MemItem
            r30 = r5[r10]
            r32 = r44[r10]
            r27 = r13
            r28 = r11
            r29 = r11
            r34 = r10
            r27.<init>(r28, r29, r30, r32, r34)
            r12.add(r13)
            int r10 = r10 + 1
            goto L_0x09ad
        L_0x09ce:
            goto L_0x0972
        L_0x09cf:
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r6 = r0
            r0 = 0
        L_0x09d6:
            int r8 = r7.length
            if (r0 >= r8) goto L_0x0a13
            r8 = r7[r0]
            r10 = 0
            int r8 = (r8 > r10 ? 1 : (r8 == r10 ? 0 : -1))
            if (r8 == 0) goto L_0x0a0e
            r8 = r109
            boolean r9 = r8.isCompact
            if (r9 == 0) goto L_0x09ee
            java.lang.String[] r9 = DUMP_MEM_OOM_COMPACT_LABEL
            r9 = r9[r0]
            r28 = r9
            goto L_0x09f4
        L_0x09ee:
            java.lang.String[] r9 = DUMP_MEM_OOM_LABEL
            r9 = r9[r0]
            r28 = r9
        L_0x09f4:
            com.android.server.am.ActivityManagerService$MemItem r9 = new com.android.server.am.ActivityManagerService$MemItem
            r30 = r7[r0]
            r32 = r100[r0]
            int[] r10 = DUMP_MEM_OOM_ADJ
            r34 = r10[r0]
            r27 = r9
            r29 = r28
            r27.<init>(r28, r29, r30, r32, r34)
            r10 = r18[r0]
            r9.subitems = r10
            r6.add(r9)
            goto L_0x0a10
        L_0x0a0e:
            r8 = r109
        L_0x0a10:
            int r0 = r0 + 1
            goto L_0x09d6
        L_0x0a13:
            r8 = r109
            boolean r0 = r8.dumpSwapPss
            if (r0 == 0) goto L_0x0a23
            if (r35 == 0) goto L_0x0a23
            r9 = 0
            int r0 = (r60 > r9 ? 1 : (r60 == r9 ? 0 : -1))
            if (r0 == 0) goto L_0x0a23
            r0 = 1
            goto L_0x0a25
        L_0x0a23:
            r0 = r21
        L_0x0a25:
            r8.dumpSwapPss = r0
            boolean r0 = r8.oomOnly
            if (r0 != 0) goto L_0x0a40
            r29 = 2246267895813(0x20b00000005, double:1.1098037986773E-311)
            r33 = 1
            boolean r0 = r8.dumpSwapPss
            java.lang.String r31 = "proc"
            r28 = r16
            r32 = r105
            r34 = r0
            dumpMemItems(r28, r29, r31, r32, r33, r34)
        L_0x0a40:
            r29 = 2246267895814(0x20b00000006, double:1.109803798678E-311)
            r33 = 0
            boolean r0 = r8.dumpSwapPss
            java.lang.String r31 = "oom"
            r28 = r16
            r32 = r6
            r34 = r0
            dumpMemItems(r28, r29, r31, r32, r33, r34)
            if (r111 != 0) goto L_0x0a6f
            boolean r0 = r8.oomOnly
            if (r0 != 0) goto L_0x0a6f
            r29 = 2246267895815(0x20b00000007, double:1.1098037986783E-311)
            r33 = 1
            boolean r0 = r8.dumpSwapPss
            java.lang.String r31 = "cat"
            r28 = r16
            r32 = r4
            r34 = r0
            dumpMemItems(r28, r29, r31, r32, r33, r34)
        L_0x0a6f:
            com.android.internal.util.MemInfoReader r0 = new com.android.internal.util.MemInfoReader
            r0.<init>()
            r9 = r0
            r9.readMemInfo()
            r10 = 0
            int r0 = (r2 > r10 ? 1 : (r2 == r10 ? 0 : -1))
            r10 = 1024(0x400, double:5.06E-321)
            if (r0 <= 0) goto L_0x0abd
            monitor-enter(r107)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0ab7 }
            long r12 = r9.getCachedSizeKb()     // Catch:{ all -> 0x0ab7 }
            long r14 = r9.getFreeSizeKb()     // Catch:{ all -> 0x0ab7 }
            long r27 = r9.getZramTotalSizeKb()     // Catch:{ all -> 0x0ab7 }
            long r29 = r9.getKernelUsedSizeKb()     // Catch:{ all -> 0x0ab7 }
            long r66 = r12 * r10
            long r68 = r14 * r10
            long r70 = r27 * r10
            long r72 = r29 * r10
            long r74 = r2 * r10
            com.android.server.am.EventLogTags.writeAmMeminfo(r66, r68, r70, r72, r74)     // Catch:{ all -> 0x0ab7 }
            com.android.server.am.ProcessStatsService r0 = r1.mProcessStats     // Catch:{ all -> 0x0ab7 }
            r66 = r0
            r67 = r12
            r69 = r14
            r71 = r27
            r73 = r29
            r75 = r2
            r66.addSysMemUsageLocked(r67, r69, r71, r73, r75)     // Catch:{ all -> 0x0ab7 }
            monitor-exit(r107)     // Catch:{ all -> 0x0ab7 }
            resetPriorityAfterLockedSection()
            goto L_0x0abd
        L_0x0ab7:
            r0 = move-exception
            monitor-exit(r107)     // Catch:{ all -> 0x0ab7 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0abd:
            if (r111 != 0) goto L_0x0afb
            r12 = 1112396529672(0x10300000008, double:5.49596909864E-312)
            long r14 = r9.getTotalSizeKb()
            r10 = r16
            r10.write(r12, r14)
            r11 = 1159641169929(0x10e00000009, double:5.72938863565E-312)
            int r0 = r1.mLastMemoryLevel
            r10.write(r11, r0)
            r11 = 1112396529674(0x1030000000a, double:5.49596909865E-312)
            r13 = r62
            r10.write(r11, r13)
            r11 = 1112396529675(0x1030000000b, double:5.495969098654E-312)
            r15 = r2
            long r2 = r9.getCachedSizeKb()
            r10.write(r11, r2)
            r2 = 1112396529676(0x1030000000c, double:5.49596909866E-312)
            long r11 = r9.getFreeSizeKb()
            r10.write(r2, r11)
            goto L_0x0b00
        L_0x0afb:
            r10 = r16
            r13 = r62
            r15 = r2
        L_0x0b00:
            long r2 = r9.getTotalSizeKb()
            long r11 = r58 - r60
            long r2 = r2 - r11
            long r11 = r9.getFreeSizeKb()
            long r2 = r2 - r11
            long r11 = r9.getCachedSizeKb()
            long r2 = r2 - r11
            long r11 = r9.getKernelUsedSizeKb()
            long r2 = r2 - r11
            long r11 = r9.getZramTotalSizeKb()
            long r2 = r2 - r11
            r11 = 1112396529677(0x1030000000d, double:5.495969098664E-312)
            r30 = r4
            r29 = r5
            long r4 = r58 - r13
            r10.write(r11, r4)
            r4 = 1112396529678(0x1030000000e, double:5.49596909867E-312)
            long r11 = r9.getKernelUsedSizeKb()
            r10.write(r4, r11)
            r4 = 1112396529679(0x1030000000f, double:5.495969098674E-312)
            r10.write(r4, r2)
            if (r111 != 0) goto L_0x0c18
            long r4 = r9.getZramTotalSizeKb()
            r11 = 0
            int r0 = (r4 > r11 ? 1 : (r4 == r11 ? 0 : -1))
            if (r0 == 0) goto L_0x0b73
            r4 = 1112396529680(0x10300000010, double:5.49596909868E-312)
            long r11 = r9.getZramTotalSizeKb()
            r10.write(r4, r11)
            r4 = 1112396529681(0x10300000011, double:5.495969098684E-312)
            long r11 = r9.getSwapTotalSizeKb()
            long r19 = r9.getSwapFreeSizeKb()
            long r11 = r11 - r19
            r10.write(r4, r11)
            r4 = 1112396529682(0x10300000012, double:5.49596909869E-312)
            long r11 = r9.getSwapTotalSizeKb()
            r10.write(r4, r11)
        L_0x0b73:
            long[] r0 = r107.getKsmInfo()
            r4 = 1112396529683(0x10300000013, double:5.495969098694E-312)
            r11 = 1
            r11 = r0[r11]
            r10.write(r4, r11)
            r4 = 1112396529684(0x10300000014, double:5.4959690987E-312)
            r11 = r0[r21]
            r10.write(r4, r11)
            r4 = 1112396529685(0x10300000015, double:5.495969098704E-312)
            r11 = 2
            r11 = r0[r11]
            r10.write(r4, r11)
            r4 = 1112396529686(0x10300000016, double:5.49596909871E-312)
            r11 = 3
            r11 = r0[r11]
            r10.write(r4, r11)
            r4 = 1120986464279(0x10500000017, double:5.538409014533E-312)
            int r11 = android.app.ActivityManager.staticGetMemoryClass()
            r10.write(r4, r11)
            r4 = 1120986464280(0x10500000018, double:5.53840901454E-312)
            int r11 = android.app.ActivityManager.staticGetLargeMemoryClass()
            r10.write(r4, r11)
            r4 = 1112396529689(0x10300000019, double:5.495969098724E-312)
            com.android.server.am.ProcessList r11 = r1.mProcessList
            r12 = 999(0x3e7, float:1.4E-42)
            long r11 = r11.getMemLevel(r12)
            r19 = 1024(0x400, double:5.06E-321)
            long r11 = r11 / r19
            r10.write(r4, r11)
            r4 = 1112396529690(0x1030000001a, double:5.49596909873E-312)
            com.android.server.am.ProcessList r11 = r1.mProcessList
            long r11 = r11.getCachedRestoreThresholdKb()
            r10.write(r4, r11)
            r4 = 1133871366171(0x1080000001b, double:5.60206888828E-312)
            boolean r11 = android.app.ActivityManager.isLowRamDeviceStatic()
            r10.write(r4, r11)
            r4 = 1133871366172(0x1080000001c, double:5.602068888287E-312)
            boolean r11 = android.app.ActivityManager.isHighEndGfx()
            r10.write(r4, r11)
            goto L_0x0c18
        L_0x0bf5:
            r0 = move-exception
            r8 = r109
            r29 = r5
            r10 = r16
            r13 = r62
            r15 = r2
            r4 = r46
            goto L_0x0c0b
        L_0x0c02:
            r0 = move-exception
            r29 = r5
            r8 = r11
            r26 = r14
            r10 = r16
            r13 = r12
        L_0x0c0b:
            monitor-exit(r6)     // Catch:{ all -> 0x0c0d }
            throw r0
        L_0x0c0d:
            r0 = move-exception
            goto L_0x0c0b
        L_0x0c0f:
            r29 = r5
            r8 = r11
            r26 = r14
            r10 = r16
            r13 = r12
            r15 = r2
        L_0x0c18:
            r10.flush()
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.dumpApplicationMemoryUsage(java.io.FileDescriptor, com.android.server.am.ActivityManagerService$MemoryUsageDumpOptions, java.lang.String[], boolean, java.util.ArrayList):void");
    }

    private void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss, long memtrack, String name) {
        sb.append("  ");
        sb.append(ProcessList.makeOomAdjString(oomAdj, false));
        sb.append(' ');
        sb.append(ProcessList.makeProcStateString(procState));
        sb.append(' ');
        ProcessList.appendRamKb(sb, pss);
        sb.append(": ");
        sb.append(name);
        if (memtrack > 0) {
            sb.append(" (");
            sb.append(stringifyKBSize(memtrack));
            sb.append(" memtrack)");
        }
    }

    private void appendMemInfo(StringBuilder sb, ProcessMemInfo mi) {
        appendBasicMemEntry(sb, mi.oomAdj, mi.procState, mi.pss, mi.memtrack, mi.name);
        sb.append(" (pid ");
        sb.append(mi.pid);
        sb.append(") ");
        sb.append(mi.adjType);
        sb.append(10);
        if (mi.adjReason != null) {
            sb.append("                      ");
            sb.append(mi.adjReason);
            sb.append(10);
        }
    }

    /* JADX INFO: finally extract failed */
    /* JADX WARNING: type inference failed for: r2v30 */
    /* JADX WARNING: type inference failed for: r2v31 */
    /* JADX WARNING: type inference failed for: r2v32 */
    /* JADX WARNING: type inference failed for: r2v57 */
    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:110:0x051d, code lost:
        resetPriorityAfterLockedSection();
        r11.append(r16.toString());
        android.util.StatsLog.write(81);
        r40 = r9;
        r44 = r10;
        r23 = r24;
        r24 = r39;
        r39 = r11;
        addErrorToDropBox("lowmem", (com.android.server.am.ProcessRecord) null, "system_server", (java.lang.String) null, (java.lang.String) null, (com.android.server.am.ProcessRecord) null, r37.toString(), r11.toString(), (java.io.File) null, (android.app.ApplicationErrorReport.CrashInfo) null);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:111:0x0556, code lost:
        monitor-enter(r54);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:113:?, code lost:
        boostPriorityForLockedSection();
        r0 = android.os.SystemClock.uptimeMillis();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:114:0x0562, code lost:
        if (r12.mLastMemUsageReportTime >= r0) goto L_0x0566;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:115:0x0564, code lost:
        r12.mLastMemUsageReportTime = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:116:0x0566, code lost:
        monitor-exit(r54);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:117:0x0567, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:118:0x056a, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:119:0x056b, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:122:0x056d, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:123:0x0570, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:140:0x05ae, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x03bf, code lost:
        if (r38[3] == 0) goto L_0x0402;
     */
    /* JADX WARNING: Incorrect type for immutable var: ssa=int, code=?, for r2v25, types: [boolean, int] */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void reportMemUsage(java.util.ArrayList<com.android.server.am.ProcessMemInfo> r55) {
        /*
            r54 = this;
            r12 = r54
            r13 = r55
            android.util.SparseArray r0 = new android.util.SparseArray
            int r1 = r55.size()
            r0.<init>(r1)
            r14 = r0
            r0 = 0
            int r1 = r55.size()
        L_0x0013:
            if (r0 >= r1) goto L_0x0023
            java.lang.Object r2 = r13.get(r0)
            com.android.server.am.ProcessMemInfo r2 = (com.android.server.am.ProcessMemInfo) r2
            int r3 = r2.pid
            r14.put(r3, r2)
            int r0 = r0 + 1
            goto L_0x0013
        L_0x0023:
            r54.updateCpuStatsNow()
            r0 = 1
            long[] r15 = new long[r0]
            r10 = 2
            long[] r11 = new long[r10]
            com.android.internal.os.ProcessCpuTracker r1 = r12.mProcessCpuTracker
            monitor-enter(r1)
            com.android.internal.os.ProcessCpuTracker r2 = r12.mProcessCpuTracker     // Catch:{ all -> 0x05a9 }
            com.android.server.am.-$$Lambda$ActivityManagerService$XMDHDkKdzWb8nQlDZRKevGp6Oa8 r3 = com.android.server.am.$$Lambda$ActivityManagerService$XMDHDkKdzWb8nQlDZRKevGp6Oa8.INSTANCE     // Catch:{ all -> 0x05a9 }
            java.util.List r2 = r2.getStats(r3)     // Catch:{ all -> 0x05a9 }
            r9 = r2
            monitor-exit(r1)     // Catch:{ all -> 0x05a9 }
            int r7 = r9.size()
            r1 = 0
        L_0x003e:
            r16 = 0
            if (r1 >= r7) goto L_0x008a
            java.lang.Object r2 = r9.get(r1)
            com.android.internal.os.ProcessCpuTracker$Stats r2 = (com.android.internal.os.ProcessCpuTracker.Stats) r2
            int r3 = r2.pid
            long r3 = android.os.Debug.getPss(r3, r11, r15)
            int r5 = (r3 > r16 ? 1 : (r3 == r16 ? 0 : -1))
            if (r5 <= 0) goto L_0x0084
            int r5 = r2.pid
            int r5 = r14.indexOfKey(r5)
            if (r5 >= 0) goto L_0x0082
            com.android.server.am.ProcessMemInfo r5 = new com.android.server.am.ProcessMemInfo
            java.lang.String r6 = r2.name
            int r10 = r2.pid
            r19 = -1000(0xfffffffffffffc18, float:NaN)
            r20 = -1
            r22 = 0
            java.lang.String r21 = "native"
            r16 = r5
            r17 = r6
            r18 = r10
            r16.<init>(r17, r18, r19, r20, r21, r22)
            r5.pss = r3
            r10 = r9
            r8 = r11[r0]
            r5.swapPss = r8
            r6 = 0
            r8 = r15[r6]
            r5.memtrack = r8
            r13.add(r5)
            goto L_0x0085
        L_0x0082:
            r10 = r9
            goto L_0x0085
        L_0x0084:
            r10 = r9
        L_0x0085:
            int r1 = r1 + 1
            r9 = r10
            r10 = 2
            goto L_0x003e
        L_0x008a:
            r10 = r9
            r1 = 0
            r3 = 0
            r5 = 0
            r8 = 0
            int r9 = r55.size()
            r19 = r3
            r21 = r5
            r5 = r1
        L_0x009b:
            if (r8 >= r9) goto L_0x00c8
            java.lang.Object r1 = r13.get(r8)
            com.android.server.am.ProcessMemInfo r1 = (com.android.server.am.ProcessMemInfo) r1
            long r2 = r1.pss
            int r2 = (r2 > r16 ? 1 : (r2 == r16 ? 0 : -1))
            if (r2 != 0) goto L_0x00ba
            int r2 = r1.pid
            long r2 = android.os.Debug.getPss(r2, r11, r15)
            r1.pss = r2
            r2 = r11[r0]
            r1.swapPss = r2
            r2 = 0
            r3 = r15[r2]
            r1.memtrack = r3
        L_0x00ba:
            long r2 = r1.pss
            long r5 = r5 + r2
            long r2 = r1.swapPss
            long r19 = r19 + r2
            long r2 = r1.memtrack
            long r21 = r21 + r2
            int r8 = r8 + 1
            goto L_0x009b
        L_0x00c8:
            com.android.server.am.ActivityManagerService$25 r1 = new com.android.server.am.ActivityManagerService$25
            r1.<init>()
            java.util.Collections.sort(r13, r1)
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r2 = 128(0x80, float:1.794E-43)
            r1.<init>(r2)
            r9 = r1
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>(r2)
            r8 = r1
            java.lang.String r1 = "Low on memory -- "
            r9.append(r1)
            java.lang.String r1 = "total"
            r2 = 0
            appendMemBucket(r9, r5, r1, r2)
            java.lang.String r1 = "total"
            appendMemBucket(r8, r5, r1, r0)
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r4 = 1024(0x400, float:1.435E-42)
            r1.<init>(r4)
            r3 = r1
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>(r4)
            r2 = r1
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>(r4)
            r24 = 1
            r25 = -2147483648(0xffffffff80000000, float:-0.0)
            r26 = 0
            r28 = 0
            r30 = 0
            r32 = 0
            int r4 = r55.size()
            r0 = r32
            r53 = r24
            r24 = r11
            r11 = r25
            r25 = r53
        L_0x011d:
            r32 = r10
            if (r0 >= r4) goto L_0x0281
            java.lang.Object r35 = r13.get(r0)
            r10 = r35
            com.android.server.am.ProcessMemInfo r10 = (com.android.server.am.ProcessMemInfo) r10
            r35 = r1
            int r1 = r10.oomAdj
            r37 = r5
            r5 = 900(0x384, float:1.261E-42)
            if (r1 < r5) goto L_0x0137
            long r5 = r10.pss
            long r30 = r30 + r5
        L_0x0137:
            int r1 = r10.oomAdj
            r5 = -1000(0xfffffffffffffc18, float:NaN)
            if (r1 == r5) goto L_0x01e1
            int r1 = r10.oomAdj
            r6 = 500(0x1f4, float:7.0E-43)
            if (r1 < r6) goto L_0x0154
            int r1 = r10.oomAdj
            r6 = 600(0x258, float:8.41E-43)
            if (r1 == r6) goto L_0x0154
            int r1 = r10.oomAdj
            r6 = 700(0x2bc, float:9.81E-43)
            if (r1 != r6) goto L_0x0150
            goto L_0x0154
        L_0x0150:
            r40 = r7
            goto L_0x01e3
        L_0x0154:
            int r1 = r10.oomAdj
            if (r11 == r1) goto L_0x017c
            int r11 = r10.oomAdj
            int r1 = r10.oomAdj
            if (r1 > 0) goto L_0x0163
            java.lang.String r1 = " / "
            r9.append(r1)
        L_0x0163:
            int r1 = r10.oomAdj
            if (r1 < 0) goto L_0x0176
            if (r25 == 0) goto L_0x0170
            java.lang.String r1 = ":"
            r8.append(r1)
            r25 = 0
        L_0x0170:
            java.lang.String r1 = "\n\t at "
            r8.append(r1)
            goto L_0x0186
        L_0x0176:
            java.lang.String r1 = "$"
            r8.append(r1)
            goto L_0x0186
        L_0x017c:
            java.lang.String r1 = " "
            r9.append(r1)
            java.lang.String r1 = "$"
            r8.append(r1)
        L_0x0186:
            int r1 = r10.oomAdj
            if (r1 > 0) goto L_0x0195
            long r5 = r10.pss
            java.lang.String r1 = r10.name
            r40 = r7
            r7 = 0
            appendMemBucket(r9, r5, r1, r7)
            goto L_0x0198
        L_0x0195:
            r40 = r7
            r7 = 0
        L_0x0198:
            long r5 = r10.pss
            java.lang.String r1 = r10.name
            r7 = 1
            appendMemBucket(r8, r5, r1, r7)
            int r1 = r10.oomAdj
            if (r1 < 0) goto L_0x01e3
            int r1 = r0 + 1
            if (r1 >= r4) goto L_0x01b4
            int r1 = r0 + 1
            java.lang.Object r1 = r13.get(r1)
            com.android.server.am.ProcessMemInfo r1 = (com.android.server.am.ProcessMemInfo) r1
            int r1 = r1.oomAdj
            if (r1 == r11) goto L_0x01e3
        L_0x01b4:
            java.lang.String r1 = "("
            r8.append(r1)
            r1 = 0
        L_0x01ba:
            int[] r5 = DUMP_MEM_OOM_ADJ
            int r6 = r5.length
            if (r1 >= r6) goto L_0x01db
            r5 = r5[r1]
            int r6 = r10.oomAdj
            if (r5 != r6) goto L_0x01d8
            java.lang.String[] r5 = DUMP_MEM_OOM_LABEL
            r5 = r5[r1]
            r8.append(r5)
            java.lang.String r5 = ":"
            r8.append(r5)
            int[] r5 = DUMP_MEM_OOM_ADJ
            r5 = r5[r1]
            r8.append(r5)
        L_0x01d8:
            int r1 = r1 + 1
            goto L_0x01ba
        L_0x01db:
            java.lang.String r1 = ")"
            r8.append(r1)
            goto L_0x01e3
        L_0x01e1:
            r40 = r7
        L_0x01e3:
            r12.appendMemInfo(r3, r10)
            int r1 = r10.oomAdj
            r5 = -1000(0xfffffffffffffc18, float:NaN)
            if (r1 != r5) goto L_0x0222
            long r5 = r10.pss
            r41 = 512(0x200, double:2.53E-321)
            int r1 = (r5 > r41 ? 1 : (r5 == r41 ? 0 : -1))
            if (r1 < 0) goto L_0x0209
            r12.appendMemInfo(r2, r10)
            r33 = r4
            r46 = r8
            r41 = r11
            r8 = r35
            r43 = r37
            r18 = r40
            r11 = r3
            r37 = r9
            r9 = r2
            goto L_0x026c
        L_0x0209:
            long r5 = r10.pss
            long r26 = r26 + r5
            long r5 = r10.memtrack
            long r28 = r28 + r5
            r33 = r4
            r46 = r8
            r41 = r11
            r8 = r35
            r43 = r37
            r18 = r40
            r11 = r3
            r37 = r9
            r9 = r2
            goto L_0x026c
        L_0x0222:
            int r1 = (r26 > r16 ? 1 : (r26 == r16 ? 0 : -1))
            if (r1 <= 0) goto L_0x0257
            r5 = -1000(0xfffffffffffffc18, float:NaN)
            r6 = -1
            java.lang.String r39 = "(Other native)"
            r7 = r35
            r1 = r54
            r35 = r2
            r41 = r11
            r11 = r3
            r3 = r5
            r33 = r4
            r5 = 1024(0x400, float:1.435E-42)
            r4 = r6
            r43 = r37
            r5 = r26
            r47 = r7
            r46 = r8
            r18 = r40
            r7 = r28
            r37 = r9
            r9 = r39
            r1.appendBasicMemEntry(r2, r3, r4, r5, r7, r9)
            r9 = r35
            r1 = 10
            r9.append(r1)
            r26 = 0
            goto L_0x0267
        L_0x0257:
            r33 = r4
            r46 = r8
            r41 = r11
            r47 = r35
            r43 = r37
            r18 = r40
            r11 = r3
            r37 = r9
            r9 = r2
        L_0x0267:
            r8 = r47
            r12.appendMemInfo(r8, r10)
        L_0x026c:
            int r0 = r0 + 1
            r1 = r8
            r2 = r9
            r3 = r11
            r7 = r18
            r10 = r32
            r4 = r33
            r9 = r37
            r11 = r41
            r5 = r43
            r8 = r46
            goto L_0x011d
        L_0x0281:
            r33 = r4
            r43 = r5
            r18 = r7
            r46 = r8
            r37 = r9
            r41 = r11
            r8 = r1
            r9 = r2
            r11 = r3
            java.lang.String r0 = "           "
            r8.append(r0)
            r6 = r43
            com.android.server.am.ProcessList.appendRamKb(r8, r6)
            java.lang.String r0 = ": TOTAL"
            r8.append(r0)
            int r0 = (r21 > r16 ? 1 : (r21 == r16 ? 0 : -1))
            if (r0 <= 0) goto L_0x02b4
            java.lang.String r0 = " ("
            r8.append(r0)
            java.lang.String r0 = stringifyKBSize(r21)
            r8.append(r0)
            java.lang.String r0 = " memtrack)"
            r8.append(r0)
        L_0x02b4:
            java.lang.String r0 = "\n"
            r8.append(r0)
            com.android.internal.util.MemInfoReader r0 = new com.android.internal.util.MemInfoReader
            r0.<init>()
            r33 = r0
            r33.readMemInfo()
            long[] r35 = r33.getRawInfo()
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r1 = 1024(0x400, float:1.435E-42)
            r0.<init>(r1)
            r10 = r0
            android.os.Debug.getMemInfo(r35)
            java.lang.String r0 = "  MemInfo: "
            r10.append(r0)
            r0 = 5
            r2 = r35[r0]
            java.lang.String r0 = stringifyKBSize(r2)
            r10.append(r0)
            java.lang.String r0 = " slab, "
            r10.append(r0)
            r0 = 4
            r2 = r35[r0]
            java.lang.String r0 = stringifyKBSize(r2)
            r10.append(r0)
            java.lang.String r0 = " shmem, "
            r10.append(r0)
            r0 = 12
            r2 = r35[r0]
            java.lang.String r0 = stringifyKBSize(r2)
            r10.append(r0)
            java.lang.String r0 = " vm alloc, "
            r10.append(r0)
            r0 = 13
            r2 = r35[r0]
            java.lang.String r0 = stringifyKBSize(r2)
            r10.append(r0)
            java.lang.String r0 = " page tables "
            r10.append(r0)
            r0 = 14
            r2 = r35[r0]
            java.lang.String r0 = stringifyKBSize(r2)
            r10.append(r0)
            java.lang.String r0 = " kernel stack\n"
            r10.append(r0)
            java.lang.String r0 = "           "
            r10.append(r0)
            r0 = 2
            r2 = r35[r0]
            java.lang.String r0 = stringifyKBSize(r2)
            r10.append(r0)
            java.lang.String r0 = " buffers, "
            r10.append(r0)
            r0 = 3
            r2 = r35[r0]
            java.lang.String r2 = stringifyKBSize(r2)
            r10.append(r2)
            java.lang.String r2 = " cached, "
            r10.append(r2)
            r2 = 11
            r2 = r35[r2]
            java.lang.String r2 = stringifyKBSize(r2)
            r10.append(r2)
            java.lang.String r2 = " mapped, "
            r10.append(r2)
            r2 = 1
            r3 = r35[r2]
            java.lang.String r2 = stringifyKBSize(r3)
            r10.append(r2)
            java.lang.String r2 = " free\n"
            r10.append(r2)
            r2 = 10
            r3 = r35[r2]
            int r3 = (r3 > r16 ? 1 : (r3 == r16 ? 0 : -1))
            if (r3 == 0) goto L_0x03a2
            java.lang.String r3 = "  ZRAM: "
            r10.append(r3)
            r3 = r35[r2]
            java.lang.String r2 = stringifyKBSize(r3)
            r10.append(r2)
            java.lang.String r2 = " RAM, "
            r10.append(r2)
            r2 = 8
            r2 = r35[r2]
            java.lang.String r2 = stringifyKBSize(r2)
            r10.append(r2)
            java.lang.String r2 = " swap total, "
            r10.append(r2)
            r2 = 9
            r2 = r35[r2]
            java.lang.String r2 = stringifyKBSize(r2)
            r10.append(r2)
            java.lang.String r2 = " swap free\n"
            r10.append(r2)
        L_0x03a2:
            long[] r38 = r54.getKsmInfo()
            r2 = 1
            r3 = r38[r2]
            int r2 = (r3 > r16 ? 1 : (r3 == r16 ? 0 : -1))
            if (r2 != 0) goto L_0x03c2
            r2 = 0
            r3 = r38[r2]
            int r3 = (r3 > r16 ? 1 : (r3 == r16 ? 0 : -1))
            if (r3 != 0) goto L_0x03c3
            r3 = 2
            r4 = r38[r3]
            int r3 = (r4 > r16 ? 1 : (r4 == r16 ? 0 : -1))
            if (r3 != 0) goto L_0x03c3
            r3 = r38[r0]
            int r3 = (r3 > r16 ? 1 : (r3 == r16 ? 0 : -1))
            if (r3 == 0) goto L_0x0402
            goto L_0x03c3
        L_0x03c2:
            r2 = 0
        L_0x03c3:
            java.lang.String r3 = "  KSM: "
            r10.append(r3)
            r3 = 1
            r3 = r38[r3]
            java.lang.String r3 = stringifyKBSize(r3)
            r10.append(r3)
            java.lang.String r3 = " saved from shared "
            r10.append(r3)
            r3 = r38[r2]
            java.lang.String r3 = stringifyKBSize(r3)
            r10.append(r3)
            java.lang.String r3 = "\n       "
            r10.append(r3)
            r3 = 2
            r3 = r38[r3]
            java.lang.String r3 = stringifyKBSize(r3)
            r10.append(r3)
            java.lang.String r3 = " unshared; "
            r10.append(r3)
            r3 = r38[r0]
            java.lang.String r0 = stringifyKBSize(r3)
            r10.append(r0)
            java.lang.String r0 = " volatile\n"
            r10.append(r0)
        L_0x0402:
            java.lang.String r0 = "  Free RAM: "
            r10.append(r0)
            long r3 = r33.getCachedSizeKb()
            long r3 = r30 + r3
            long r16 = r33.getFreeSizeKb()
            long r3 = r3 + r16
            java.lang.String r0 = stringifyKBSize(r3)
            r10.append(r0)
            java.lang.String r0 = "\n"
            r10.append(r0)
            java.lang.String r0 = "  Used RAM: "
            r10.append(r0)
            long r3 = r6 - r30
            long r16 = r33.getKernelUsedSizeKb()
            long r3 = r3 + r16
            java.lang.String r0 = stringifyKBSize(r3)
            r10.append(r0)
            java.lang.String r0 = "\n"
            r10.append(r0)
            java.lang.String r0 = "  Lost RAM: "
            r10.append(r0)
            long r3 = r33.getTotalSizeKb()
            long r16 = r6 - r19
            long r3 = r3 - r16
            long r16 = r33.getFreeSizeKb()
            long r3 = r3 - r16
            long r16 = r33.getCachedSizeKb()
            long r3 = r3 - r16
            long r16 = r33.getKernelUsedSizeKb()
            long r3 = r3 - r16
            long r16 = r33.getZramTotalSizeKb()
            long r3 = r3 - r16
            java.lang.String r0 = stringifyKBSize(r3)
            r10.append(r0)
            java.lang.String r0 = "\n"
            r10.append(r0)
            java.lang.String r0 = "ActivityManager"
            java.lang.String r3 = "Low on memory:"
            android.util.Slog.i(r0, r3)
            java.lang.String r0 = r9.toString()
            java.lang.String r3 = "ActivityManager"
            android.util.Slog.i(r3, r0)
            java.lang.String r0 = r8.toString()
            java.lang.String r3 = "ActivityManager"
            android.util.Slog.i(r3, r0)
            java.lang.String r0 = r10.toString()
            java.lang.String r3 = "ActivityManager"
            android.util.Slog.i(r3, r0)
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>(r1)
            r5 = r0
            java.lang.String r0 = "Low on memory:"
            r5.append(r0)
            r1 = r46
            r5.append(r1)
            r0 = 10
            r5.append(r0)
            r5.append(r11)
            r5.append(r8)
            r5.append(r0)
            r5.append(r10)
            r5.append(r0)
            java.io.StringWriter r0 = new java.io.StringWriter
            r0.<init>()
            r4 = r0
            monitor-enter(r54)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x058f }
            com.android.internal.util.FastPrintWriter r3 = new com.android.internal.util.FastPrintWriter     // Catch:{ all -> 0x058f }
            r0 = 256(0x100, float:3.59E-43)
            r3.<init>(r4, r2, r0)     // Catch:{ all -> 0x058f }
            java.lang.String[] r0 = new java.lang.String[r2]     // Catch:{ all -> 0x058f }
            r16 = r4
            r4 = r0
            r3.println()     // Catch:{ all -> 0x057d }
            r2 = 0
            r0 = 0
            r17 = 0
            r23 = 0
            r34 = -1
            r36 = r1
            r1 = r54
            r39 = r11
            r11 = r5
            r5 = r0
            r42 = r6
            r6 = r17
            r7 = r23
            r17 = r8
            r8 = r34
            r1.dumpProcessesLocked(r2, r3, r4, r5, r6, r7, r8)     // Catch:{ all -> 0x0571 }
            r3.println()     // Catch:{ all -> 0x0571 }
            com.android.server.am.ActiveServices r0 = r12.mServices     // Catch:{ all -> 0x0571 }
            r45 = 0
            r48 = 0
            r49 = 0
            r50 = 0
            r44 = r0
            r46 = r3
            r47 = r4
            com.android.server.am.ActiveServices$ServiceDumper r0 = r44.newServiceDumperLocked(r45, r46, r47, r48, r49, r50)     // Catch:{ all -> 0x0571 }
            r0.dumpLocked()     // Catch:{ all -> 0x0571 }
            r3.println()     // Catch:{ all -> 0x0571 }
            com.android.server.wm.ActivityTaskManagerInternal r0 = r12.mAtmInternal     // Catch:{ all -> 0x0571 }
            java.lang.String r45 = "activities"
            r46 = 0
            r49 = 0
            r50 = 0
            r51 = 0
            r52 = 0
            r44 = r0
            r47 = r3
            r48 = r4
            r44.dump(r45, r46, r47, r48, r49, r50, r51, r52)     // Catch:{ all -> 0x0571 }
            r3.flush()     // Catch:{ all -> 0x0571 }
            monitor-exit(r54)     // Catch:{ all -> 0x0571 }
            resetPriorityAfterLockedSection()
            java.lang.String r0 = r16.toString()
            r11.append(r0)
            r0 = 81
            android.util.StatsLog.write(r0)
            r3 = 0
            r5 = 0
            r6 = 0
            r7 = 0
            java.lang.String r8 = r37.toString()
            java.lang.String r0 = r11.toString()
            r23 = 0
            r34 = 0
            java.lang.String r2 = "lowmem"
            java.lang.String r4 = "system_server"
            r1 = r54
            r40 = r9
            r9 = r0
            r44 = r10
            r10 = r23
            r23 = r24
            r24 = r39
            r39 = r11
            r11 = r34
            r1.addErrorToDropBox(r2, r3, r4, r5, r6, r7, r8, r9, r10, r11)
            monitor-enter(r54)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x056b }
            long r0 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x056b }
            long r2 = r12.mLastMemUsageReportTime     // Catch:{ all -> 0x056b }
            int r2 = (r2 > r0 ? 1 : (r2 == r0 ? 0 : -1))
            if (r2 >= 0) goto L_0x0566
            r12.mLastMemUsageReportTime = r0     // Catch:{ all -> 0x056b }
        L_0x0566:
            monitor-exit(r54)     // Catch:{ all -> 0x056b }
            resetPriorityAfterLockedSection()
            return
        L_0x056b:
            r0 = move-exception
            monitor-exit(r54)     // Catch:{ all -> 0x056b }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0571:
            r0 = move-exception
            r40 = r9
            r44 = r10
            r23 = r24
            r24 = r39
            r39 = r11
            goto L_0x05a2
        L_0x057d:
            r0 = move-exception
            r36 = r1
            r39 = r5
            r42 = r6
            r17 = r8
            r40 = r9
            r44 = r10
            r23 = r24
            r24 = r11
            goto L_0x05a2
        L_0x058f:
            r0 = move-exception
            r36 = r1
            r16 = r4
            r39 = r5
            r42 = r6
            r17 = r8
            r40 = r9
            r44 = r10
            r23 = r24
            r24 = r11
        L_0x05a2:
            monitor-exit(r54)     // Catch:{ all -> 0x05a7 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x05a7:
            r0 = move-exception
            goto L_0x05a2
        L_0x05a9:
            r0 = move-exception
            r23 = r11
        L_0x05ac:
            monitor-exit(r1)     // Catch:{ all -> 0x05ae }
            throw r0
        L_0x05ae:
            r0 = move-exception
            goto L_0x05ac
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.reportMemUsage(java.util.ArrayList):void");
    }

    static /* synthetic */ boolean lambda$reportMemUsage$3(ProcessCpuTracker.Stats st) {
        return st.vsize > 0;
    }

    private static boolean scanArgs(String[] args, String value) {
        if (args != null) {
            for (String arg : args) {
                if (value.equals(arg)) {
                    return true;
                }
            }
        }
        return false;
    }

    private final boolean removeDyingProviderLocked(ProcessRecord proc, ContentProviderRecord cpr, boolean always) {
        ProcessRecord processRecord = proc;
        ContentProviderRecord contentProviderRecord = cpr;
        boolean inLaunching = this.mLaunchingProviders.contains(contentProviderRecord);
        if (!inLaunching || always) {
            synchronized (cpr) {
                contentProviderRecord.launchingApp = null;
                cpr.notifyAll();
            }
            this.mProviderMap.removeProviderByClass(contentProviderRecord.name, UserHandle.getUserId(contentProviderRecord.uid));
            String[] names = contentProviderRecord.info.authority.split(";");
            for (String removeProviderByName : names) {
                this.mProviderMap.removeProviderByName(removeProviderByName, UserHandle.getUserId(contentProviderRecord.uid));
            }
        }
        for (int i = contentProviderRecord.connections.size() - 1; i >= 0; i--) {
            ContentProviderConnection conn = contentProviderRecord.connections.get(i);
            if (!conn.waiting || !inLaunching || always) {
                ProcessRecord capp = conn.client;
                conn.dead = true;
                if (conn.stableCount > 0) {
                    if (!(capp.isPersistent() || capp.thread == null || capp.pid == 0 || capp.pid == MY_PID || !ActivityManagerServiceInjector.isKillProvider(contentProviderRecord, processRecord, capp))) {
                        StringBuilder sb = new StringBuilder();
                        sb.append("depends on provider ");
                        sb.append(contentProviderRecord.name.flattenToShortString());
                        sb.append(" in dying proc ");
                        sb.append(processRecord != null ? processRecord.processName : "??");
                        sb.append(" (adj ");
                        sb.append(processRecord != null ? Integer.valueOf(processRecord.setAdj) : "??");
                        sb.append(")");
                        capp.kill(sb.toString(), true);
                    }
                } else if (capp.thread == null || conn.provider.provider == null) {
                } else {
                    try {
                        capp.thread.unstableProviderDied(conn.provider.provider.asBinder());
                    } catch (RemoteException e) {
                    }
                    contentProviderRecord.connections.remove(i);
                    if (conn.client.conProviders.remove(conn)) {
                        ProcessRecord processRecord2 = capp;
                        stopAssociationLocked(capp.uid, capp.processName, contentProviderRecord.uid, contentProviderRecord.appInfo.longVersionCode, contentProviderRecord.name, contentProviderRecord.info.processName);
                    }
                }
            }
        }
        if (inLaunching && always) {
            this.mLaunchingProviders.remove(contentProviderRecord);
        }
        return inLaunching;
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final boolean cleanUpApplicationRecordLocked(ProcessRecord app, boolean restarting, boolean allowRestart, int index, boolean replacingPid) {
        boolean restart;
        final ProcessRecord processRecord = app;
        boolean z = allowRestart;
        if (index >= 0) {
            removeLruProcessLocked(app);
            ProcessList.remove(processRecord.pid);
        }
        this.mProcessesToGc.remove(processRecord);
        this.mPendingPssProcesses.remove(processRecord);
        ProcessList.abortNextPssTime(processRecord.procStateMemTracker);
        if (processRecord.crashDialog != null && !processRecord.forceCrashReport) {
            processRecord.crashDialog.dismiss();
            processRecord.crashDialog = null;
        }
        if (processRecord.anrDialog != null) {
            processRecord.anrDialog.dismiss();
            processRecord.anrDialog = null;
        }
        if (processRecord.waitDialog != null) {
            processRecord.waitDialog.dismiss();
            processRecord.waitDialog = null;
        }
        processRecord.setCrashing(false);
        processRecord.setNotResponding(false);
        processRecord.resetPackageList(this.mProcessStats);
        app.unlinkDeathRecipient();
        processRecord.makeInactive(this.mProcessStats);
        processRecord.waitingToKill = null;
        processRecord.forcingToImportant = null;
        updateProcessForegroundLocked(processRecord, false, 0, false);
        processRecord.setHasForegroundActivities(false);
        processRecord.hasShownUi = false;
        processRecord.treatLikeActivity = false;
        processRecord.hasAboveClient = false;
        processRecord.setHasClientActivities(false);
        ProcessRecordInjector.reportCleanUpAppRecord(app);
        this.mServices.killServicesLocked(processRecord, z);
        boolean restart2 = false;
        for (int i = processRecord.pubProviders.size() - 1; i >= 0; i--) {
            ContentProviderRecord cpr = processRecord.pubProviders.valueAt(i);
            boolean always = processRecord.bad || !z;
            if ((removeDyingProviderLocked(processRecord, cpr, always) || always) && cpr.hasConnectionOrHandle()) {
                restart2 = true;
            }
            cpr.provider = null;
            cpr.setProcess((ProcessRecord) null);
        }
        processRecord.pubProviders.clear();
        if (cleanupAppInLaunchingProvidersLocked(processRecord, false)) {
            restart = true;
        } else {
            restart = restart2;
        }
        if (!processRecord.conProviders.isEmpty()) {
            for (int i2 = processRecord.conProviders.size() - 1; i2 >= 0; i2--) {
                ContentProviderConnection conn = processRecord.conProviders.get(i2);
                conn.provider.connections.remove(conn);
                ContentProviderConnection contentProviderConnection = conn;
                stopAssociationLocked(processRecord.uid, processRecord.processName, conn.provider.uid, conn.provider.appInfo.longVersionCode, conn.provider.name, conn.provider.info.processName);
            }
            processRecord.conProviders.clear();
        }
        skipCurrentReceiverLocked(app);
        for (int i3 = processRecord.receivers.size() - 1; i3 >= 0; i3--) {
            removeReceiverLocked(processRecord.receivers.valueAt(i3));
        }
        processRecord.receivers.clear();
        BackupRecord backupTarget = this.mBackupTargets.get(processRecord.userId);
        if (backupTarget != null && processRecord.pid == backupTarget.app.pid) {
            this.mHandler.post(new Runnable() {
                public void run() {
                    try {
                        IBackupManager.Stub.asInterface(ServiceManager.getService(BatteryService.HealthServiceWrapper.INSTANCE_HEALTHD)).agentDisconnectedForUser(processRecord.userId, processRecord.info.packageName);
                    } catch (RemoteException e) {
                    }
                }
            });
        }
        for (int i4 = this.mPendingProcessChanges.size() - 1; i4 >= 0; i4--) {
            ProcessChangeItem item = this.mPendingProcessChanges.get(i4);
            if (processRecord.pid > 0 && item.pid == processRecord.pid) {
                this.mPendingProcessChanges.remove(i4);
                this.mAvailProcessChanges.add(item);
            }
        }
        this.mUiHandler.obtainMessage(32, processRecord.pid, processRecord.info.uid, (Object) null).sendToTarget();
        if (restarting) {
            return false;
        }
        if (!app.isPersistent() || processRecord.isolated) {
            if (!replacingPid) {
                this.mProcessList.removeProcessNameLocked(processRecord.processName, processRecord.uid, processRecord);
            }
            this.mAtmInternal.clearHeavyWeightProcessIfEquals(app.getWindowProcessController());
        } else if (!processRecord.removed && this.mPersistentStartingProcesses.indexOf(processRecord) < 0) {
            this.mPersistentStartingProcesses.add(processRecord);
            restart = true;
        }
        this.mProcessesOnHold.remove(processRecord);
        this.mAtmInternal.onCleanUpApplicationRecord(app.getWindowProcessController());
        if (!restart || processRecord.isolated) {
            if (processRecord.pid > 0 && processRecord.pid != MY_PID) {
                this.mPidsSelfLocked.remove(processRecord);
                this.mHandler.removeMessages(20, processRecord);
                this.mBatteryStatsService.noteProcessFinish(processRecord.processName, processRecord.info.uid);
                if (processRecord.isolated) {
                    this.mBatteryStatsService.removeIsolatedUid(processRecord.uid, processRecord.info.uid);
                }
                processRecord.setPid(0);
            }
            return false;
        }
        if (index < 0) {
            ProcessList.remove(processRecord.pid);
        }
        this.mProcessList.addProcessNameLocked(processRecord);
        processRecord.pendingStart = false;
        this.mProcessList.startProcessLocked(processRecord, new HostingRecord("restart", processRecord.processName));
        return true;
    }

    /* access modifiers changed from: package-private */
    public boolean checkAppInLaunchingProvidersLocked(ProcessRecord app) {
        for (int i = this.mLaunchingProviders.size() - 1; i >= 0; i--) {
            if (this.mLaunchingProviders.get(i).launchingApp == app) {
                return true;
            }
        }
        return false;
    }

    /* access modifiers changed from: package-private */
    public boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord app, boolean alwaysBad) {
        boolean restart = false;
        for (int i = this.mLaunchingProviders.size() - 1; i >= 0; i--) {
            ContentProviderRecord cpr = this.mLaunchingProviders.get(i);
            if (cpr.launchingApp == app) {
                if (alwaysBad || app.bad || !cpr.hasConnectionOrHandle()) {
                    removeDyingProviderLocked(app, cpr, true);
                } else {
                    restart = true;
                }
            }
        }
        return restart;
    }

    public List<ActivityManager.RunningServiceInfo> getServices(int maxNum, int flags) {
        List<ActivityManager.RunningServiceInfo> runningServiceInfoLocked;
        enforceNotIsolatedCaller("getServices");
        int callingUid = Binder.getCallingUid();
        boolean canInteractAcrossUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        boolean allowed = this.mAtmInternal.isGetTasksAllowed("getServices", Binder.getCallingPid(), callingUid);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                runningServiceInfoLocked = this.mServices.getRunningServiceInfoLocked(maxNum, flags, callingUid, allowed, canInteractAcrossUsers);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return runningServiceInfoLocked;
    }

    public PendingIntent getRunningServiceControlPanel(ComponentName name) {
        PendingIntent runningServiceControlPanelLocked;
        enforceNotIsolatedCaller("getRunningServiceControlPanel");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                runningServiceControlPanelLocked = this.mServices.getRunningServiceControlPanelLocked(name);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return runningServiceControlPanelLocked;
    }

    /* Debug info: failed to restart local var, previous not found, register: 18 */
    public ComponentName startService(IApplicationThread caller, Intent service, String resolvedType, boolean requireForeground, String callingPackage, int userId) throws TransactionTooLargeException {
        long origId;
        ComponentName res;
        enforceNotIsolatedCaller("startService");
        if (service == null || !service.hasFileDescriptors()) {
            if (!ExtraActivityManagerService.checkRunningCompatibility(this.mContext, this, caller, service, resolvedType, UserHandle.getUserId(Binder.getCallingUid()), callingPackage)) {
                return null;
            }
            if (callingPackage != null) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        int callingPid = Binder.getCallingPid();
                        int callingUid = Binder.getCallingUid();
                        origId = Binder.clearCallingIdentity();
                        res = this.mServices.startServiceLocked(caller, service, resolvedType, callingPid, callingUid, requireForeground, callingPackage, userId);
                        Binder.restoreCallingIdentity(origId);
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterLockedSection();
                return res;
            }
            throw new IllegalArgumentException("callingPackage cannot be null");
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    public int stopService(IApplicationThread caller, Intent service, String resolvedType, int userId) {
        int stopServiceLocked;
        enforceNotIsolatedCaller("stopService");
        if (service == null || !service.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    stopServiceLocked = this.mServices.stopServiceLocked(caller, service, resolvedType, userId);
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return stopServiceLocked;
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    public IBinder peekService(Intent service, String resolvedType, String callingPackage) {
        IBinder peekServiceLocked;
        enforceNotIsolatedCaller("peekService");
        if (service != null && service.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        } else if (callingPackage != null) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    peekServiceLocked = this.mServices.peekServiceLocked(service, resolvedType, callingPackage);
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return peekServiceLocked;
        } else {
            throw new IllegalArgumentException("callingPackage cannot be null");
        }
    }

    public boolean stopServiceToken(ComponentName className, IBinder token, int startId) {
        boolean stopServiceTokenLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                stopServiceTokenLocked = this.mServices.stopServiceTokenLocked(className, token, startId);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return stopServiceTokenLocked;
    }

    public void setServiceForeground(ComponentName className, IBinder token, int id, Notification notification, int flags, int foregroundServiceType) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mServices.setServiceForegroundLocked(className, token, id, notification, flags, foregroundServiceType);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public int getForegroundServiceType(ComponentName className, IBinder token) {
        int foregroundServiceTypeLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                foregroundServiceTypeLocked = this.mServices.getForegroundServiceTypeLocked(className, token);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return foregroundServiceTypeLocked;
    }

    public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll, boolean requireFull, String name, String callerPackage) {
        return this.mUserController.handleIncomingUser(callingPid, callingUid, userId, allowAll, requireFull ? 2 : 0, name, callerPackage);
    }

    /* access modifiers changed from: package-private */
    public boolean isSingleton(String componentProcessName, ApplicationInfo aInfo, String className, int flags) {
        if (UserHandle.getAppId(aInfo.uid) >= 10000) {
            if ((flags & 1073741824) == 0) {
                return false;
            }
            if (ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS", aInfo.uid) == 0) {
                return true;
            }
            ComponentName comp = new ComponentName(aInfo.packageName, className);
            String msg = "Permission Denial: Component " + comp.flattenToShortString() + " requests FLAG_SINGLE_USER, but app does not hold " + "android.permission.INTERACT_ACROSS_USERS";
            Slog.w("ActivityManager", msg);
            throw new SecurityException(msg);
        } else if ("system".equals(componentProcessName)) {
            return true;
        } else {
            if ((flags & 1073741824) == 0) {
                return false;
            }
            return UserHandle.isSameApp(aInfo.uid, 1001) || (aInfo.flags & 8) != 0;
        }
    }

    /* access modifiers changed from: package-private */
    public boolean isValidSingletonCall(int callingUid, int componentUid) {
        int componentAppId = UserHandle.getAppId(componentUid);
        return UserHandle.isSameApp(callingUid, componentUid) || componentAppId == 1000 || componentAppId == 1001 || ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", componentUid) == 0;
    }

    public int bindService(IApplicationThread caller, IBinder token, Intent service, String resolvedType, IServiceConnection connection, int flags, String callingPackage, int userId) throws TransactionTooLargeException {
        return bindIsolatedService(caller, token, service, resolvedType, connection, flags, (String) null, callingPackage, userId);
    }

    public int bindIsolatedService(IApplicationThread caller, IBinder token, Intent service, String resolvedType, IServiceConnection connection, int flags, String instanceName, String callingPackage, int userId) throws TransactionTooLargeException {
        int bindServiceLocked;
        String str = instanceName;
        enforceNotIsolatedCaller("bindService");
        if (service == null || !service.hasFileDescriptors()) {
            if (!ExtraActivityManagerService.checkRunningCompatibility(this.mContext, this, caller, service, resolvedType, UserHandle.getUserId(Binder.getCallingUid()), callingPackage)) {
                return 0;
            }
            if (callingPackage != null) {
                if (str != null) {
                    for (int i = 0; i < instanceName.length(); i++) {
                        char c = str.charAt(i);
                        if ((c < 'a' || c > 'z') && ((c < 'A' || c > 'Z') && !((c >= '0' && c <= CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG) || c == '_' || c == '.'))) {
                            throw new IllegalArgumentException("Illegal instanceName");
                        }
                    }
                }
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        bindServiceLocked = this.mServices.bindServiceLocked(caller, token, service, resolvedType, connection, flags, instanceName, callingPackage, userId);
                    } catch (Throwable th) {
                        while (true) {
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                }
                resetPriorityAfterLockedSection();
                return bindServiceLocked;
            }
            throw new IllegalArgumentException("callingPackage cannot be null");
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    public void updateServiceGroup(IServiceConnection connection, int group, int importance) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mServices.updateServiceGroupLocked(connection, group, importance);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean unbindService(IServiceConnection connection) {
        boolean unbindServiceLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                unbindServiceLocked = this.mServices.unbindServiceLocked(connection);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return unbindServiceLocked;
    }

    /* Debug info: failed to restart local var, previous not found, register: 2 */
    public void publishService(IBinder token, Intent intent, IBinder service) {
        if (intent == null || !intent.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (token instanceof ServiceRecord) {
                        this.mServices.publishServiceLocked((ServiceRecord) token, intent, service);
                    } else {
                        throw new IllegalArgumentException("Invalid service token");
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    public void unbindFinished(IBinder token, Intent intent, boolean doRebind) {
        if (intent == null || !intent.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mServices.unbindFinishedLocked((ServiceRecord) token, intent, doRebind);
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    /* Debug info: failed to restart local var, previous not found, register: 3 */
    public void serviceDoneExecuting(IBinder token, int type, int startId, int res) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (token instanceof ServiceRecord) {
                    this.mServices.serviceDoneExecutingLocked((ServiceRecord) token, type, startId, res);
                } else {
                    Slog.e("ActivityManager", "serviceDoneExecuting: Invalid service token=" + token);
                    throw new IllegalArgumentException("Invalid service token");
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:66:0x013a, code lost:
        resetPriorityAfterLockedSection();
        r0 = (com.android.server.job.JobSchedulerInternal) com.android.server.LocalServices.getService(com.android.server.job.JobSchedulerInternal.class);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:67:0x0145, code lost:
        if (r6 == -1) goto L_0x014a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:68:0x0147, code lost:
        r0.removeBackingUpUid(r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:69:0x014a, code lost:
        if (r7 == -1) goto L_0x014f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:70:0x014c, code lost:
        r0.addBackingUpUid(r7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:71:0x014f, code lost:
        return true;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean bindBackupAgent(java.lang.String r23, int r24, int r25) {
        /*
            r22 = this;
            r11 = r22
            r12 = r23
            r13 = r24
            r14 = r25
            java.lang.String r0 = "android.permission.CONFIRM_FULL_BACKUP"
            java.lang.String r1 = "bindBackupAgent"
            r11.enforceCallingPermission(r0, r1)
            java.lang.String r0 = "android"
            boolean r0 = r0.equals(r12)
            r15 = 0
            if (r0 == 0) goto L_0x001a
            r0 = r15
            goto L_0x001b
        L_0x001a:
            r0 = r14
        L_0x001b:
            r10 = r0
            android.content.pm.IPackageManager r9 = android.app.AppGlobals.getPackageManager()
            r1 = 0
            r0 = 1024(0x400, float:1.435E-42)
            android.content.pm.ApplicationInfo r0 = r9.getApplicationInfo(r12, r0, r10)     // Catch:{ RemoteException -> 0x0029 }
            r8 = r0
            goto L_0x002b
        L_0x0029:
            r0 = move-exception
            r8 = r1
        L_0x002b:
            if (r8 != 0) goto L_0x0044
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "Unable to bind backup agent for "
            r0.append(r1)
            r0.append(r12)
            java.lang.String r0 = r0.toString()
            java.lang.String r1 = "ActivityManager"
            android.util.Slog.w(r1, r0)
            return r15
        L_0x0044:
            monitor-enter(r22)
            boostPriorityForLockedSection()     // Catch:{ RemoteException -> 0x0082, IllegalArgumentException -> 0x0060 }
            android.content.pm.IPackageManager r0 = android.app.AppGlobals.getPackageManager()     // Catch:{ RemoteException -> 0x0082, IllegalArgumentException -> 0x0060 }
            java.lang.String r1 = r8.packageName     // Catch:{ RemoteException -> 0x0082, IllegalArgumentException -> 0x0060 }
            int r2 = r8.uid     // Catch:{ RemoteException -> 0x0082, IllegalArgumentException -> 0x0060 }
            int r2 = android.os.UserHandle.getUserId(r2)     // Catch:{ RemoteException -> 0x0082, IllegalArgumentException -> 0x0060 }
            r0.setPackageStoppedState(r1, r15, r2)     // Catch:{ RemoteException -> 0x0082, IllegalArgumentException -> 0x0060 }
            goto L_0x0083
        L_0x0058:
            r0 = move-exception
            r2 = r8
            r16 = r9
            r17 = r10
            goto L_0x015a
        L_0x0060:
            r0 = move-exception
            java.lang.String r1 = "ActivityManager"
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x0058 }
            r2.<init>()     // Catch:{ all -> 0x0058 }
            java.lang.String r3 = "Failed trying to unstop package "
            r2.append(r3)     // Catch:{ all -> 0x0058 }
            java.lang.String r3 = r8.packageName     // Catch:{ all -> 0x0058 }
            r2.append(r3)     // Catch:{ all -> 0x0058 }
            java.lang.String r3 = ": "
            r2.append(r3)     // Catch:{ all -> 0x0058 }
            r2.append(r0)     // Catch:{ all -> 0x0058 }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x0058 }
            android.util.Slog.w(r1, r2)     // Catch:{ all -> 0x0058 }
            goto L_0x0084
        L_0x0082:
            r0 = move-exception
        L_0x0083:
        L_0x0084:
            com.android.server.am.BackupRecord r0 = new com.android.server.am.BackupRecord     // Catch:{ all -> 0x0154 }
            r0.<init>(r8, r13, r14)     // Catch:{ all -> 0x0154 }
            r7 = r0
            if (r13 != 0) goto L_0x0096
            android.content.ComponentName r0 = new android.content.ComponentName     // Catch:{ all -> 0x0058 }
            java.lang.String r1 = r8.packageName     // Catch:{ all -> 0x0058 }
            java.lang.String r2 = r8.backupAgentName     // Catch:{ all -> 0x0058 }
            r0.<init>(r1, r2)     // Catch:{ all -> 0x0058 }
            goto L_0x009f
        L_0x0096:
            android.content.ComponentName r0 = new android.content.ComponentName     // Catch:{ all -> 0x0154 }
            java.lang.String r1 = "android"
            java.lang.String r2 = "FullBackupAgent"
            r0.<init>(r1, r2)     // Catch:{ all -> 0x0154 }
        L_0x009f:
            r6 = r0
            java.lang.String r2 = r8.processName     // Catch:{ all -> 0x0154 }
            r4 = 0
            r5 = 0
            com.android.server.am.HostingRecord r0 = new com.android.server.am.HostingRecord     // Catch:{ all -> 0x0154 }
            java.lang.String r1 = "backup"
            r0.<init>((java.lang.String) r1, (android.content.ComponentName) r6)     // Catch:{ all -> 0x0154 }
            r16 = 0
            r17 = 0
            r18 = 0
            java.lang.String r19 = "Backup"
            r1 = r22
            r3 = r8
            r20 = r6
            r6 = r0
            r15 = r7
            r7 = r16
            r21 = r8
            r8 = r17
            r16 = r9
            r9 = r18
            r17 = r10
            r10 = r19
            com.android.server.am.ProcessRecord r0 = r1.startProcessLocked(r2, r3, r4, r5, r6, r7, r8, r9, r10)     // Catch:{ all -> 0x0150 }
            r1 = r0
            if (r1 != 0) goto L_0x00f0
            java.lang.String r0 = "ActivityManager"
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x00eb }
            r2.<init>()     // Catch:{ all -> 0x00eb }
            java.lang.String r3 = "Unable to start backup agent process "
            r2.append(r3)     // Catch:{ all -> 0x00eb }
            r2.append(r15)     // Catch:{ all -> 0x00eb }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x00eb }
            android.util.Slog.e(r0, r2)     // Catch:{ all -> 0x00eb }
            monitor-exit(r22)     // Catch:{ all -> 0x00eb }
            resetPriorityAfterLockedSection()
            r2 = 0
            return r2
        L_0x00eb:
            r0 = move-exception
            r2 = r21
            goto L_0x015a
        L_0x00f0:
            r2 = r21
            int r0 = r2.uid     // Catch:{ all -> 0x015f }
            boolean r0 = android.os.UserHandle.isApp(r0)     // Catch:{ all -> 0x015f }
            r3 = 1
            if (r0 == 0) goto L_0x00ff
            if (r13 != r3) goto L_0x00ff
            r1.inFullBackup = r3     // Catch:{ all -> 0x015f }
        L_0x00ff:
            r15.app = r1     // Catch:{ all -> 0x015f }
            android.util.SparseArray<com.android.server.am.BackupRecord> r0 = r11.mBackupTargets     // Catch:{ all -> 0x015f }
            java.lang.Object r0 = r0.get(r14)     // Catch:{ all -> 0x015f }
            com.android.server.am.BackupRecord r0 = (com.android.server.am.BackupRecord) r0     // Catch:{ all -> 0x015f }
            r4 = r0
            r5 = -1
            if (r4 == 0) goto L_0x0112
            android.content.pm.ApplicationInfo r0 = r4.appInfo     // Catch:{ all -> 0x015f }
            int r0 = r0.uid     // Catch:{ all -> 0x015f }
            goto L_0x0113
        L_0x0112:
            r0 = r5
        L_0x0113:
            r6 = r0
            boolean r0 = r1.inFullBackup     // Catch:{ all -> 0x015f }
            if (r0 == 0) goto L_0x011d
            android.content.pm.ApplicationInfo r0 = r15.appInfo     // Catch:{ all -> 0x015f }
            int r0 = r0.uid     // Catch:{ all -> 0x015f }
            goto L_0x011e
        L_0x011d:
            r0 = r5
        L_0x011e:
            r7 = r0
            android.util.SparseArray<com.android.server.am.BackupRecord> r0 = r11.mBackupTargets     // Catch:{ all -> 0x015f }
            r0.put(r14, r15)     // Catch:{ all -> 0x015f }
            java.lang.String r0 = "updateOomAdj_meh"
            r11.updateOomAdjLocked(r1, r3, r0)     // Catch:{ all -> 0x015f }
            android.app.IApplicationThread r0 = r1.thread     // Catch:{ all -> 0x015f }
            if (r0 == 0) goto L_0x0139
            android.app.IApplicationThread r0 = r1.thread     // Catch:{ RemoteException -> 0x0138 }
            android.content.res.CompatibilityInfo r8 = r11.compatibilityInfoForPackage(r2)     // Catch:{ RemoteException -> 0x0138 }
            r0.scheduleCreateBackupAgent(r2, r8, r13, r14)     // Catch:{ RemoteException -> 0x0138 }
            goto L_0x0139
        L_0x0138:
            r0 = move-exception
        L_0x0139:
            monitor-exit(r22)     // Catch:{ all -> 0x015f }
            resetPriorityAfterLockedSection()
            java.lang.Class<com.android.server.job.JobSchedulerInternal> r0 = com.android.server.job.JobSchedulerInternal.class
            java.lang.Object r0 = com.android.server.LocalServices.getService(r0)
            com.android.server.job.JobSchedulerInternal r0 = (com.android.server.job.JobSchedulerInternal) r0
            if (r6 == r5) goto L_0x014a
            r0.removeBackingUpUid(r6)
        L_0x014a:
            if (r7 == r5) goto L_0x014f
            r0.addBackingUpUid(r7)
        L_0x014f:
            return r3
        L_0x0150:
            r0 = move-exception
            r2 = r21
            goto L_0x015a
        L_0x0154:
            r0 = move-exception
            r2 = r8
            r16 = r9
            r17 = r10
        L_0x015a:
            monitor-exit(r22)     // Catch:{ all -> 0x015f }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x015f:
            r0 = move-exception
            goto L_0x015a
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.bindBackupAgent(java.lang.String, int, int):boolean");
    }

    /* access modifiers changed from: private */
    public void clearPendingBackup(int userId) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mBackupTargets.delete(userId);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        ((JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class)).clearAllBackingUpUids();
    }

    /* JADX WARNING: Code restructure failed: missing block: B:15:0x004f, code lost:
        resetPriorityAfterLockedSection();
        r0 = android.os.Binder.clearCallingIdentity();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:17:?, code lost:
        android.app.backup.IBackupManager.Stub.asInterface(android.os.ServiceManager.getService(com.android.server.BatteryService.HealthServiceWrapper.INSTANCE_HEALTHD)).agentConnectedForUser(r11, r9, r10);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:18:0x0064, code lost:
        r2 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:19:0x0066, code lost:
        r2 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:?, code lost:
        android.util.Slog.w("ActivityManager", "Exception trying to deliver BackupAgent binding: ");
        r2.printStackTrace();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x0072, code lost:
        android.os.Binder.restoreCallingIdentity(r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x0075, code lost:
        throw r2;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void backupAgentCreated(java.lang.String r9, android.os.IBinder r10, int r11) {
        /*
            r8 = this;
            com.android.server.am.UserController r0 = r8.mUserController
            int r1 = android.os.Binder.getCallingPid()
            int r2 = android.os.Binder.getCallingUid()
            r4 = 0
            r5 = 2
            java.lang.String r6 = "backupAgentCreated"
            r7 = 0
            r3 = r11
            int r11 = r0.handleIncomingUser(r1, r2, r3, r4, r5, r6, r7)
            monitor-enter(r8)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x007c }
            android.util.SparseArray<com.android.server.am.BackupRecord> r0 = r8.mBackupTargets     // Catch:{ all -> 0x007c }
            java.lang.Object r0 = r0.get(r11)     // Catch:{ all -> 0x007c }
            com.android.server.am.BackupRecord r0 = (com.android.server.am.BackupRecord) r0     // Catch:{ all -> 0x007c }
            if (r0 != 0) goto L_0x0024
            r1 = 0
            goto L_0x0028
        L_0x0024:
            android.content.pm.ApplicationInfo r1 = r0.appInfo     // Catch:{ all -> 0x007c }
            java.lang.String r1 = r1.packageName     // Catch:{ all -> 0x007c }
        L_0x0028:
            boolean r2 = r9.equals(r1)     // Catch:{ all -> 0x007c }
            if (r2 != 0) goto L_0x004e
            java.lang.String r2 = "ActivityManager"
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x007c }
            r3.<init>()     // Catch:{ all -> 0x007c }
            java.lang.String r4 = "Backup agent created for "
            r3.append(r4)     // Catch:{ all -> 0x007c }
            r3.append(r9)     // Catch:{ all -> 0x007c }
            java.lang.String r4 = " but not requested!"
            r3.append(r4)     // Catch:{ all -> 0x007c }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x007c }
            android.util.Slog.e(r2, r3)     // Catch:{ all -> 0x007c }
            monitor-exit(r8)     // Catch:{ all -> 0x007c }
            resetPriorityAfterLockedSection()
            return
        L_0x004e:
            monitor-exit(r8)     // Catch:{ all -> 0x007c }
            resetPriorityAfterLockedSection()
            long r0 = android.os.Binder.clearCallingIdentity()
            java.lang.String r2 = "backup"
            android.os.IBinder r2 = android.os.ServiceManager.getService(r2)     // Catch:{ RemoteException -> 0x0076, Exception -> 0x0066 }
            android.app.backup.IBackupManager r2 = android.app.backup.IBackupManager.Stub.asInterface(r2)     // Catch:{ RemoteException -> 0x0076, Exception -> 0x0066 }
            r2.agentConnectedForUser(r11, r9, r10)     // Catch:{ RemoteException -> 0x0076, Exception -> 0x0066 }
            goto L_0x0077
        L_0x0064:
            r2 = move-exception
            goto L_0x0072
        L_0x0066:
            r2 = move-exception
            java.lang.String r3 = "ActivityManager"
            java.lang.String r4 = "Exception trying to deliver BackupAgent binding: "
            android.util.Slog.w(r3, r4)     // Catch:{ all -> 0x0064 }
            r2.printStackTrace()     // Catch:{ all -> 0x0064 }
            goto L_0x0077
        L_0x0072:
            android.os.Binder.restoreCallingIdentity(r0)
            throw r2
        L_0x0076:
            r2 = move-exception
        L_0x0077:
            android.os.Binder.restoreCallingIdentity(r0)
            return
        L_0x007c:
            r0 = move-exception
            monitor-exit(r8)     // Catch:{ all -> 0x007c }
            resetPriorityAfterLockedSection()
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.backupAgentCreated(java.lang.String, android.os.IBinder, int):void");
    }

    /* Debug info: failed to restart local var, previous not found, register: 8 */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x008b, code lost:
        r5 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:37:?, code lost:
        android.util.Slog.e("ActivityManager", "Exception when unbinding backup agent:");
        r5.printStackTrace();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x009d, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x00a1, code lost:
        if (r4 == -1) goto L_?;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:0x00a3, code lost:
        ((com.android.server.job.JobSchedulerInternal) com.android.server.LocalServices.getService(com.android.server.job.JobSchedulerInternal.class)).removeBackingUpUid(r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:0x00af, code lost:
        r3 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:46:?, code lost:
        r8.mBackupTargets.delete(r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:0x00b5, code lost:
        throw r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:52:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:53:?, code lost:
        return;
     */
    /* JADX WARNING: Exception block dominator not found, dom blocks: [B:13:0x0033, B:32:0x0081] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void unbindBackupAgent(android.content.pm.ApplicationInfo r9) {
        /*
            r8 = this;
            java.lang.String r0 = "android.permission.CONFIRM_FULL_BACKUP"
            java.lang.String r1 = "unbindBackupAgent"
            r8.enforceCallingPermission(r0, r1)
            if (r9 != 0) goto L_0x0013
            java.lang.String r0 = "ActivityManager"
            java.lang.String r1 = "unbind backup agent for null app"
            android.util.Slog.w(r0, r1)
            return
        L_0x0013:
            int r0 = r9.uid
            int r0 = android.os.UserHandle.getUserId(r0)
            monitor-enter(r8)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x00b6 }
            android.util.SparseArray<com.android.server.am.BackupRecord> r1 = r8.mBackupTargets     // Catch:{ all -> 0x00b6 }
            java.lang.Object r1 = r1.get(r0)     // Catch:{ all -> 0x00b6 }
            com.android.server.am.BackupRecord r1 = (com.android.server.am.BackupRecord) r1     // Catch:{ all -> 0x00b6 }
            if (r1 != 0) goto L_0x0029
            r2 = 0
            goto L_0x002d
        L_0x0029:
            android.content.pm.ApplicationInfo r2 = r1.appInfo     // Catch:{ all -> 0x00b6 }
            java.lang.String r2 = r2.packageName     // Catch:{ all -> 0x00b6 }
        L_0x002d:
            if (r2 != 0) goto L_0x0040
            java.lang.String r3 = "ActivityManager"
            java.lang.String r4 = "Unbinding backup agent with no active backup"
            android.util.Slog.w(r3, r4)     // Catch:{ all -> 0x00af }
            android.util.SparseArray<com.android.server.am.BackupRecord> r3 = r8.mBackupTargets     // Catch:{ all -> 0x00b6 }
            r3.delete(r0)     // Catch:{ all -> 0x00b6 }
            monitor-exit(r8)     // Catch:{ all -> 0x00b6 }
            resetPriorityAfterLockedSection()
            return
        L_0x0040:
            java.lang.String r3 = r9.packageName     // Catch:{ all -> 0x00af }
            boolean r3 = r2.equals(r3)     // Catch:{ all -> 0x00af }
            if (r3 != 0) goto L_0x006d
            java.lang.String r3 = "ActivityManager"
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x00af }
            r4.<init>()     // Catch:{ all -> 0x00af }
            java.lang.String r5 = "Unbind of "
            r4.append(r5)     // Catch:{ all -> 0x00af }
            r4.append(r9)     // Catch:{ all -> 0x00af }
            java.lang.String r5 = " but is not the current backup target"
            r4.append(r5)     // Catch:{ all -> 0x00af }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x00af }
            android.util.Slog.e(r3, r4)     // Catch:{ all -> 0x00af }
            android.util.SparseArray<com.android.server.am.BackupRecord> r3 = r8.mBackupTargets     // Catch:{ all -> 0x00b6 }
            r3.delete(r0)     // Catch:{ all -> 0x00b6 }
            monitor-exit(r8)     // Catch:{ all -> 0x00b6 }
            resetPriorityAfterLockedSection()
            return
        L_0x006d:
            com.android.server.am.ProcessRecord r3 = r1.app     // Catch:{ all -> 0x00af }
            r4 = 1
            java.lang.String r5 = "updateOomAdj_meh"
            r8.updateOomAdjLocked(r3, r4, r5)     // Catch:{ all -> 0x00af }
            r4 = 0
            r3.inFullBackup = r4     // Catch:{ all -> 0x00af }
            android.content.pm.ApplicationInfo r4 = r1.appInfo     // Catch:{ all -> 0x00af }
            int r4 = r4.uid     // Catch:{ all -> 0x00af }
            android.app.IApplicationThread r5 = r3.thread     // Catch:{ all -> 0x00af }
            if (r5 == 0) goto L_0x0096
            android.app.IApplicationThread r5 = r3.thread     // Catch:{ Exception -> 0x008b }
            android.content.res.CompatibilityInfo r6 = r8.compatibilityInfoForPackage(r9)     // Catch:{ Exception -> 0x008b }
            r5.scheduleDestroyBackupAgent(r9, r6, r0)     // Catch:{ Exception -> 0x008b }
            goto L_0x0096
        L_0x008b:
            r5 = move-exception
            java.lang.String r6 = "ActivityManager"
            java.lang.String r7 = "Exception when unbinding backup agent:"
            android.util.Slog.e(r6, r7)     // Catch:{ all -> 0x00af }
            r5.printStackTrace()     // Catch:{ all -> 0x00af }
        L_0x0096:
            android.util.SparseArray<com.android.server.am.BackupRecord> r3 = r8.mBackupTargets     // Catch:{ all -> 0x00b6 }
            r3.delete(r0)     // Catch:{ all -> 0x00b6 }
            monitor-exit(r8)     // Catch:{ all -> 0x00b6 }
            resetPriorityAfterLockedSection()
            r1 = -1
            if (r4 == r1) goto L_0x00ae
            java.lang.Class<com.android.server.job.JobSchedulerInternal> r1 = com.android.server.job.JobSchedulerInternal.class
            java.lang.Object r1 = com.android.server.LocalServices.getService(r1)
            com.android.server.job.JobSchedulerInternal r1 = (com.android.server.job.JobSchedulerInternal) r1
            r1.removeBackingUpUid(r4)
        L_0x00ae:
            return
        L_0x00af:
            r3 = move-exception
            android.util.SparseArray<com.android.server.am.BackupRecord> r4 = r8.mBackupTargets     // Catch:{ all -> 0x00b6 }
            r4.delete(r0)     // Catch:{ all -> 0x00b6 }
            throw r3     // Catch:{ all -> 0x00b6 }
        L_0x00b6:
            r1 = move-exception
            monitor-exit(r8)     // Catch:{ all -> 0x00b6 }
            resetPriorityAfterLockedSection()
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.unbindBackupAgent(android.content.pm.ApplicationInfo):void");
    }

    /* Debug info: failed to restart local var, previous not found, register: 4 */
    private boolean isInstantApp(ProcessRecord record, String callerPackage, int uid) {
        if (UserHandle.getAppId(uid) < 10000) {
            return false;
        }
        if (record != null) {
            return record.info.isInstantApp();
        }
        IPackageManager pm = AppGlobals.getPackageManager();
        if (callerPackage == null) {
            try {
                String[] packageNames = pm.getPackagesForUid(uid);
                if (packageNames == null || packageNames.length == 0) {
                    throw new IllegalArgumentException("Unable to determine caller package name");
                }
                callerPackage = packageNames[0];
            } catch (RemoteException e) {
                Slog.e("ActivityManager", "Error looking up if " + callerPackage + " is an instant app.", e);
                return true;
            }
        }
        this.mAppOpsService.checkPackage(uid, callerPackage);
        return pm.isInstantApp(callerPackage, UserHandle.getUserId(uid));
    }

    /* access modifiers changed from: package-private */
    public boolean isPendingBroadcastProcessLocked(int pid) {
        return this.mFgBroadcastQueue.isPendingBroadcastProcessLocked(pid) || this.mBgBroadcastQueue.isPendingBroadcastProcessLocked(pid) || this.mOffloadBroadcastQueue.isPendingBroadcastProcessLocked(pid);
    }

    /* access modifiers changed from: package-private */
    public void skipPendingBroadcastLocked(int pid) {
        Slog.w("ActivityManager", "Unattached app died before broadcast acknowledged, skipping");
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.skipPendingBroadcastLocked(pid);
        }
    }

    /* access modifiers changed from: package-private */
    public boolean sendPendingBroadcastsLocked(ProcessRecord app) {
        boolean didSomething = false;
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            didSomething |= queue.sendPendingBroadcastsLocked(app);
        }
        return didSomething;
    }

    /* Debug info: failed to restart local var, previous not found, register: 53 */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v21, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v22, resolved type: android.content.Intent} */
    /* JADX WARNING: Code restructure failed: missing block: B:100:?, code lost:
        boostPriorityForLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:101:0x01d0, code lost:
        if (r14 == null) goto L_0x01f4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:104:0x01d4, code lost:
        if (r14.thread == null) goto L_0x01e2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:106:0x01e0, code lost:
        if (r14.thread.asBinder() == r54.asBinder()) goto L_0x01f4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:107:0x01e2, code lost:
        monitor-exit(r53);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:108:0x01e3, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:109:0x01e7, code lost:
        return null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:110:0x01e8, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:111:0x01e9, code lost:
        r23 = r55;
        r3 = r5;
        r9 = r6;
        r10 = r7;
        r2 = r12;
        r4 = r13;
        r5 = r14;
        r6 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:113:?, code lost:
        r0 = r8.mRegisteredReceivers.get(r56.asBinder());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:114:0x0200, code lost:
        if (r0 != null) goto L_0x028e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:117:0x0204, code lost:
        r1 = r1;
        r23 = r55;
        r55 = r5;
        r9 = r6;
        r10 = r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:119:?, code lost:
        r1 = new com.android.server.am.ReceiverList(r53, r14, r6, r7, r55, r56);
        r1 = r1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:120:0x021a, code lost:
        if (r1.app == null) goto L_0x025a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:121:0x021c, code lost:
        r0 = r1.app.receivers.size();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:122:0x0226, code lost:
        if (r0 >= 1000) goto L_0x0231;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:123:0x0228, code lost:
        r1.app.receivers.add(r1);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:125:0x0259, code lost:
        throw new java.lang.IllegalStateException("Too many receivers, total of " + r0 + ", registered for pid: " + r1.pid + ", callerPackage: " + r13);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:127:?, code lost:
        r56.asBinder().linkToDeath(r1, 0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:130:?, code lost:
        r1.linkedToDeath = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:131:0x0266, code lost:
        r8.mRegisteredReceivers.put(r56.asBinder(), r1);
        r3 = r55;
        r0 = r1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:134:0x0275, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:135:0x0278, code lost:
        return r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:136:0x0279, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:137:0x027a, code lost:
        r3 = r55;
        r2 = r12;
        r4 = r13;
        r5 = r14;
        r6 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:138:0x0282, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:139:0x0283, code lost:
        r23 = r55;
        r9 = r6;
        r10 = r7;
        r3 = r5;
        r2 = r12;
        r4 = r13;
        r5 = r14;
        r6 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:140:0x028e, code lost:
        r23 = r55;
        r55 = r5;
        r9 = r6;
        r10 = r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:143:0x0296, code lost:
        if (r0.uid != r10) goto L_0x03bb;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:145:0x029a, code lost:
        if (r0.pid != r9) goto L_0x038c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:147:0x029e, code lost:
        r3 = r55;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:148:0x02a0, code lost:
        if (r0.userId != r3) goto L_0x035f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:151:0x02a4, code lost:
        r11 = r11;
        r2 = r12;
        r4 = r13;
        r5 = r14;
        r6 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:153:?, code lost:
        r11 = new com.android.server.am.BroadcastFilter(r57, r0, r4, r58, r10, r3, r28, r19);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:154:0x02bc, code lost:
        if (r0.containsFilter(r6) == false) goto L_0x02e7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:155:0x02be, code lost:
        android.util.Slog.w("ActivityManager", "Receiver with filter " + r6 + " already registered for pid " + r0.pid + ", callerPackage is " + r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:156:0x02e7, code lost:
        r0.add(r11);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:157:0x02ee, code lost:
        if (r11.debugCheck() != false) goto L_0x02f7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:158:0x02f0, code lost:
        android.util.Slog.w("ActivityManager", "==> For Dynamic broadcast");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:159:0x02f7, code lost:
        r8.mReceiverResolver.addFilter(r11);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:160:0x02fc, code lost:
        if (r2 == null) goto L_0x0353;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:161:0x02fe, code lost:
        r7 = new java.util.ArrayList();
        r7.add(r11);
        r11 = r2.size();
        r12 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:162:0x030b, code lost:
        if (r12 >= r11) goto L_0x0353;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:163:0x030d, code lost:
        r13 = r2.get(r12);
        r14 = broadcastQueueForIntent(r13);
        r14.enqueueParallelBroadcastLocked(new com.android.server.am.BroadcastRecord(r14, r13, (com.android.server.am.ProcessRecord) null, (java.lang.String) null, -1, -1, false, (java.lang.String) null, (java.lang.String[]) null, -1, (android.app.BroadcastOptions) null, r7, (android.content.IIntentReceiver) null, 0, (java.lang.String) null, (android.os.Bundle) null, false, true, true, -1, false, false));
        r14.scheduleBroadcastsLocked();
        r12 = r12 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:164:0x0353, code lost:
        monitor-exit(r53);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:165:0x0354, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:166:0x0357, code lost:
        return r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:167:0x0358, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:168:0x0359, code lost:
        r2 = r12;
        r4 = r13;
        r5 = r14;
        r6 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:169:0x035f, code lost:
        r2 = r12;
        r5 = r14;
        r6 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:172:0x038b, code lost:
        throw new java.lang.IllegalArgumentException("Receiver requested to register for user " + r3 + " was previously registered for user " + r0.userId + " callerPackage is " + r13);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:173:0x038c, code lost:
        r3 = r55;
        r2 = r12;
        r5 = r14;
        r6 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:174:0x03ba, code lost:
        throw new java.lang.IllegalArgumentException("Receiver requested to register for pid " + r9 + " was previously registered for pid " + r0.pid + " callerPackage is " + r13);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:175:0x03bb, code lost:
        r3 = r55;
        r2 = r12;
        r5 = r14;
        r6 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:176:0x03e9, code lost:
        throw new java.lang.IllegalArgumentException("Receiver requested to register for uid " + r10 + " was previously registered for uid " + r0.uid + " callerPackage is " + r13);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:177:0x03ea, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:178:0x03eb, code lost:
        r3 = r55;
        r2 = r12;
        r4 = r13;
        r5 = r14;
        r6 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:179:0x03f2, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:180:0x03f3, code lost:
        r23 = r55;
        r3 = r5;
        r9 = r6;
        r10 = r7;
        r2 = r12;
        r4 = r13;
        r5 = r14;
        r6 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:181:0x03fc, code lost:
        monitor-exit(r53);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:182:0x03fd, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:183:0x0400, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:184:0x0401, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:75:0x0171, code lost:
        resetPriorityAfterLockedSection();
        r0 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:76:0x0175, code lost:
        if (r2 == null) goto L_0x01b8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:77:0x0177, code lost:
        r1 = r8.mContext.getContentResolver();
        r3 = 0;
        r4 = r2.size();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:78:0x0182, code lost:
        if (r3 >= r4) goto L_0x01b4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:79:0x0184, code lost:
        r11 = r2.get(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:80:0x018a, code lost:
        if (r28 == false) goto L_0x0199;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:82:0x0194, code lost:
        if ((r11.getFlags() & com.android.server.pm.DumpState.DUMP_COMPILER_STATS) != 0) goto L_0x0199;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:83:0x0196, code lost:
        r55 = r2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:84:0x0199, code lost:
        r55 = r2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:85:0x01a2, code lost:
        if (r15.match(r1, r11, true, "ActivityManager") < 0) goto L_0x01af;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:86:0x01a4, code lost:
        if (r0 != null) goto L_0x01ac;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:87:0x01a6, code lost:
        r0 = new java.util.ArrayList<>();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:88:0x01ac, code lost:
        r0.add(r11);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:89:0x01af, code lost:
        r3 = r3 + 1;
        r2 = r55;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:90:0x01b4, code lost:
        r55 = r2;
        r12 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:91:0x01b8, code lost:
        r55 = r2;
        r12 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:92:0x01bb, code lost:
        if (r12 == null) goto L_0x01c6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:93:0x01bd, code lost:
        r3 = r12.get(0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:94:0x01c6, code lost:
        r3 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:95:0x01c7, code lost:
        r22 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x01c9, code lost:
        if (r10 != null) goto L_0x01cc;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:97:0x01cb, code lost:
        return r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:98:0x01cc, code lost:
        monitor-enter(r53);
     */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public android.content.Intent registerReceiver(android.app.IApplicationThread r54, java.lang.String r55, android.content.IIntentReceiver r56, android.content.IntentFilter r57, java.lang.String r58, int r59, int r60) {
        /*
            r53 = this;
            r8 = r53
            r9 = r54
            r1 = r55
            r10 = r56
            r15 = r57
            java.lang.String r0 = "registerReceiver"
            r8.enforceNotIsolatedCaller(r0)
            r2 = 0
            r3 = 0
            r0 = r60 & 1
            r11 = 0
            r12 = 1
            if (r0 == 0) goto L_0x001b
            r19 = r12
            goto L_0x001d
        L_0x001b:
            r19 = r11
        L_0x001d:
            monitor-enter(r53)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x042b }
            r0 = 1000(0x3e8, float:1.401E-42)
            if (r9 == 0) goto L_0x009e
            com.android.server.am.ProcessRecord r4 = r53.getRecordForAppLocked(r54)     // Catch:{ all -> 0x0098 }
            r3 = r4
            if (r3 == 0) goto L_0x006d
            android.content.pm.ApplicationInfo r4 = r3.info     // Catch:{ all -> 0x0098 }
            int r4 = r4.uid     // Catch:{ all -> 0x0098 }
            if (r4 == r0) goto L_0x0062
            com.android.server.am.ProcessRecord$PackageList r4 = r3.pkgList     // Catch:{ all -> 0x0098 }
            boolean r4 = r4.containsKey(r1)     // Catch:{ all -> 0x0098 }
            if (r4 != 0) goto L_0x0062
            java.lang.String r4 = "android"
            boolean r4 = r4.equals(r1)     // Catch:{ all -> 0x0098 }
            if (r4 == 0) goto L_0x0043
            goto L_0x0062
        L_0x0043:
            java.lang.SecurityException r0 = new java.lang.SecurityException     // Catch:{ all -> 0x0098 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x0098 }
            r4.<init>()     // Catch:{ all -> 0x0098 }
            java.lang.String r5 = "Given caller package "
            r4.append(r5)     // Catch:{ all -> 0x0098 }
            r4.append(r1)     // Catch:{ all -> 0x0098 }
            java.lang.String r5 = " is not running in process "
            r4.append(r5)     // Catch:{ all -> 0x0098 }
            r4.append(r3)     // Catch:{ all -> 0x0098 }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x0098 }
            r0.<init>(r4)     // Catch:{ all -> 0x0098 }
            throw r0     // Catch:{ all -> 0x0098 }
        L_0x0062:
            android.content.pm.ApplicationInfo r4 = r3.info     // Catch:{ all -> 0x0098 }
            int r4 = r4.uid     // Catch:{ all -> 0x0098 }
            int r5 = r3.pid     // Catch:{ all -> 0x0098 }
            r13 = r1
            r14 = r3
            r7 = r4
            r6 = r5
            goto L_0x00ab
        L_0x006d:
            java.lang.SecurityException r0 = new java.lang.SecurityException     // Catch:{ all -> 0x0098 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x0098 }
            r4.<init>()     // Catch:{ all -> 0x0098 }
            java.lang.String r5 = "Unable to find app for caller "
            r4.append(r5)     // Catch:{ all -> 0x0098 }
            r4.append(r9)     // Catch:{ all -> 0x0098 }
            java.lang.String r5 = " (pid="
            r4.append(r5)     // Catch:{ all -> 0x0098 }
            int r5 = android.os.Binder.getCallingPid()     // Catch:{ all -> 0x0098 }
            r4.append(r5)     // Catch:{ all -> 0x0098 }
            java.lang.String r5 = ") when registering receiver "
            r4.append(r5)     // Catch:{ all -> 0x0098 }
            r4.append(r10)     // Catch:{ all -> 0x0098 }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x0098 }
            r0.<init>(r4)     // Catch:{ all -> 0x0098 }
            throw r0     // Catch:{ all -> 0x0098 }
        L_0x0098:
            r0 = move-exception
            r5 = r59
            r6 = r15
            goto L_0x042f
        L_0x009e:
            r1 = 0
            int r4 = android.os.Binder.getCallingUid()     // Catch:{ all -> 0x0426 }
            int r5 = android.os.Binder.getCallingPid()     // Catch:{ all -> 0x0426 }
            r13 = r1
            r14 = r3
            r7 = r4
            r6 = r5
        L_0x00ab:
            boolean r1 = r8.isInstantApp(r14, r13, r7)     // Catch:{ all -> 0x041d }
            r28 = r1
            com.android.server.am.UserController r1 = r8.mUserController     // Catch:{ all -> 0x041d }
            r24 = 1
            r25 = 2
            java.lang.String r26 = "registerReceiver"
            r20 = r1
            r21 = r6
            r22 = r7
            r23 = r59
            r27 = r13
            int r1 = r20.handleIncomingUser(r21, r22, r23, r24, r25, r26, r27)     // Catch:{ all -> 0x041d }
            r5 = r1
            java.util.Iterator r1 = r57.actionsIterator()     // Catch:{ all -> 0x0411 }
            r3 = 0
            if (r1 != 0) goto L_0x00e5
            java.util.ArrayList r4 = new java.util.ArrayList     // Catch:{ all -> 0x00df }
            r4.<init>(r12)     // Catch:{ all -> 0x00df }
            r4.add(r3)     // Catch:{ all -> 0x00df }
            java.util.Iterator r16 = r4.iterator()     // Catch:{ all -> 0x00df }
            r1 = r16
            goto L_0x00e5
        L_0x00df:
            r0 = move-exception
            r1 = r13
            r3 = r14
            r6 = r15
            goto L_0x042f
        L_0x00e5:
            r4 = 2
            int[] r4 = new int[r4]     // Catch:{ all -> 0x0411 }
            r16 = -1
            r4[r11] = r16     // Catch:{ all -> 0x0411 }
            int r16 = android.os.UserHandle.getUserId(r7)     // Catch:{ all -> 0x0411 }
            r4[r12] = r16     // Catch:{ all -> 0x0411 }
        L_0x00f2:
            boolean r16 = r1.hasNext()     // Catch:{ all -> 0x0403 }
            if (r16 == 0) goto L_0x016e
            java.lang.Object r16 = r1.next()     // Catch:{ all -> 0x00df }
            java.lang.String r16 = (java.lang.String) r16     // Catch:{ all -> 0x00df }
            r55 = r16
            int r0 = r4.length     // Catch:{ all -> 0x00df }
            r17 = r2
            r2 = r11
        L_0x0104:
            if (r2 >= r0) goto L_0x0162
            r18 = r4[r2]     // Catch:{ all -> 0x015a }
            r59 = r18
            android.util.SparseArray<android.util.ArrayMap<java.lang.String, java.util.ArrayList<android.content.Intent>>> r3 = r8.mStickyBroadcasts     // Catch:{ all -> 0x015a }
            r11 = r59
            java.lang.Object r3 = r3.get(r11)     // Catch:{ all -> 0x015a }
            android.util.ArrayMap r3 = (android.util.ArrayMap) r3     // Catch:{ all -> 0x015a }
            if (r3 == 0) goto L_0x0148
            r12 = r55
            java.lang.Object r22 = r3.get(r12)     // Catch:{ all -> 0x015a }
            java.util.ArrayList r22 = (java.util.ArrayList) r22     // Catch:{ all -> 0x015a }
            r55 = r22
            r22 = r0
            r0 = r55
            if (r0 == 0) goto L_0x0145
            if (r17 != 0) goto L_0x0134
            java.util.ArrayList r23 = new java.util.ArrayList     // Catch:{ all -> 0x015a }
            r23.<init>()     // Catch:{ all -> 0x015a }
            r17 = r23
            r55 = r1
            r1 = r17
            goto L_0x0138
        L_0x0134:
            r55 = r1
            r1 = r17
        L_0x0138:
            r1.addAll(r0)     // Catch:{ all -> 0x013e }
            r17 = r1
            goto L_0x014e
        L_0x013e:
            r0 = move-exception
            r2 = r1
            r1 = r13
            r3 = r14
            r6 = r15
            goto L_0x042f
        L_0x0145:
            r55 = r1
            goto L_0x014e
        L_0x0148:
            r12 = r55
            r22 = r0
            r55 = r1
        L_0x014e:
            int r2 = r2 + 1
            r1 = r55
            r55 = r12
            r0 = r22
            r3 = 0
            r11 = 0
            r12 = 1
            goto L_0x0104
        L_0x015a:
            r0 = move-exception
            r1 = r13
            r3 = r14
            r6 = r15
            r2 = r17
            goto L_0x042f
        L_0x0162:
            r12 = r55
            r55 = r1
            r2 = r17
            r0 = 1000(0x3e8, float:1.401E-42)
            r3 = 0
            r11 = 0
            r12 = 1
            goto L_0x00f2
        L_0x016e:
            r55 = r1
            monitor-exit(r53)     // Catch:{ all -> 0x0403 }
            resetPriorityAfterLockedSection()
            r0 = 0
            if (r2 == 0) goto L_0x01b8
            android.content.Context r1 = r8.mContext
            android.content.ContentResolver r1 = r1.getContentResolver()
            r3 = 0
            int r4 = r2.size()
        L_0x0182:
            if (r3 >= r4) goto L_0x01b4
            java.lang.Object r11 = r2.get(r3)
            android.content.Intent r11 = (android.content.Intent) r11
            if (r28 == 0) goto L_0x0199
            int r12 = r11.getFlags()
            r17 = 2097152(0x200000, float:2.938736E-39)
            r12 = r12 & r17
            if (r12 != 0) goto L_0x0199
            r55 = r2
            goto L_0x01af
        L_0x0199:
            java.lang.String r12 = "ActivityManager"
            r55 = r2
            r2 = 1
            int r12 = r15.match(r1, r11, r2, r12)
            if (r12 < 0) goto L_0x01af
            if (r0 != 0) goto L_0x01ac
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r0 = r2
        L_0x01ac:
            r0.add(r11)
        L_0x01af:
            int r3 = r3 + 1
            r2 = r55
            goto L_0x0182
        L_0x01b4:
            r55 = r2
            r12 = r0
            goto L_0x01bb
        L_0x01b8:
            r55 = r2
            r12 = r0
        L_0x01bb:
            if (r12 == 0) goto L_0x01c6
            r0 = 0
            java.lang.Object r1 = r12.get(r0)
            r3 = r1
            android.content.Intent r3 = (android.content.Intent) r3
            goto L_0x01c7
        L_0x01c6:
            r3 = 0
        L_0x01c7:
            r22 = r3
            if (r10 != 0) goto L_0x01cc
            return r22
        L_0x01cc:
            monitor-enter(r53)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x03f2 }
            if (r14 == 0) goto L_0x01f4
            android.app.IApplicationThread r0 = r14.thread     // Catch:{ all -> 0x01e8 }
            if (r0 == 0) goto L_0x01e2
            android.app.IApplicationThread r0 = r14.thread     // Catch:{ all -> 0x01e8 }
            android.os.IBinder r0 = r0.asBinder()     // Catch:{ all -> 0x01e8 }
            android.os.IBinder r1 = r54.asBinder()     // Catch:{ all -> 0x01e8 }
            if (r0 == r1) goto L_0x01f4
        L_0x01e2:
            monitor-exit(r53)     // Catch:{ all -> 0x01e8 }
            resetPriorityAfterLockedSection()
            r0 = 0
            return r0
        L_0x01e8:
            r0 = move-exception
            r23 = r55
            r3 = r5
            r9 = r6
            r10 = r7
            r2 = r12
            r4 = r13
            r5 = r14
            r6 = r15
            goto L_0x03fc
        L_0x01f4:
            java.util.HashMap<android.os.IBinder, com.android.server.am.ReceiverList> r0 = r8.mRegisteredReceivers     // Catch:{ all -> 0x03f2 }
            android.os.IBinder r1 = r56.asBinder()     // Catch:{ all -> 0x03f2 }
            java.lang.Object r0 = r0.get(r1)     // Catch:{ all -> 0x03f2 }
            com.android.server.am.ReceiverList r0 = (com.android.server.am.ReceiverList) r0     // Catch:{ all -> 0x03f2 }
            if (r0 != 0) goto L_0x028e
            com.android.server.am.ReceiverList r11 = new com.android.server.am.ReceiverList     // Catch:{ all -> 0x0282 }
            r1 = r11
            r23 = r55
            r2 = r53
            r3 = r14
            r4 = r6
            r55 = r5
            r5 = r7
            r9 = r6
            r6 = r55
            r10 = r7
            r7 = r56
            r1.<init>(r2, r3, r4, r5, r6, r7)     // Catch:{ all -> 0x0279 }
            r1 = r11
            com.android.server.am.ProcessRecord r0 = r1.app     // Catch:{ all -> 0x0279 }
            if (r0 == 0) goto L_0x025a
            com.android.server.am.ProcessRecord r0 = r1.app     // Catch:{ all -> 0x0279 }
            android.util.ArraySet<com.android.server.am.ReceiverList> r0 = r0.receivers     // Catch:{ all -> 0x0279 }
            int r0 = r0.size()     // Catch:{ all -> 0x0279 }
            r2 = 1000(0x3e8, float:1.401E-42)
            if (r0 >= r2) goto L_0x0231
            com.android.server.am.ProcessRecord r2 = r1.app     // Catch:{ all -> 0x0279 }
            android.util.ArraySet<com.android.server.am.ReceiverList> r2 = r2.receivers     // Catch:{ all -> 0x0279 }
            r2.add(r1)     // Catch:{ all -> 0x0279 }
            goto L_0x0266
        L_0x0231:
            java.lang.IllegalStateException r2 = new java.lang.IllegalStateException     // Catch:{ all -> 0x0279 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x0279 }
            r3.<init>()     // Catch:{ all -> 0x0279 }
            java.lang.String r4 = "Too many receivers, total of "
            r3.append(r4)     // Catch:{ all -> 0x0279 }
            r3.append(r0)     // Catch:{ all -> 0x0279 }
            java.lang.String r4 = ", registered for pid: "
            r3.append(r4)     // Catch:{ all -> 0x0279 }
            int r4 = r1.pid     // Catch:{ all -> 0x0279 }
            r3.append(r4)     // Catch:{ all -> 0x0279 }
            java.lang.String r4 = ", callerPackage: "
            r3.append(r4)     // Catch:{ all -> 0x0279 }
            r3.append(r13)     // Catch:{ all -> 0x0279 }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x0279 }
            r2.<init>(r3)     // Catch:{ all -> 0x0279 }
            throw r2     // Catch:{ all -> 0x0279 }
        L_0x025a:
            android.os.IBinder r0 = r56.asBinder()     // Catch:{ RemoteException -> 0x0273 }
            r2 = 0
            r0.linkToDeath(r1, r2)     // Catch:{ RemoteException -> 0x0273 }
            r0 = 1
            r1.linkedToDeath = r0     // Catch:{ all -> 0x0279 }
        L_0x0266:
            java.util.HashMap<android.os.IBinder, com.android.server.am.ReceiverList> r0 = r8.mRegisteredReceivers     // Catch:{ all -> 0x0279 }
            android.os.IBinder r2 = r56.asBinder()     // Catch:{ all -> 0x0279 }
            r0.put(r2, r1)     // Catch:{ all -> 0x0279 }
            r3 = r55
            r0 = r1
            goto L_0x02a2
        L_0x0273:
            r0 = move-exception
            monitor-exit(r53)     // Catch:{ all -> 0x0279 }
            resetPriorityAfterLockedSection()
            return r22
        L_0x0279:
            r0 = move-exception
            r3 = r55
            r2 = r12
            r4 = r13
            r5 = r14
            r6 = r15
            goto L_0x03fc
        L_0x0282:
            r0 = move-exception
            r23 = r55
            r9 = r6
            r10 = r7
            r3 = r5
            r2 = r12
            r4 = r13
            r5 = r14
            r6 = r15
            goto L_0x03fc
        L_0x028e:
            r23 = r55
            r55 = r5
            r9 = r6
            r10 = r7
            int r1 = r0.uid     // Catch:{ all -> 0x03ea }
            if (r1 != r10) goto L_0x03bb
            int r1 = r0.pid     // Catch:{ all -> 0x03ea }
            if (r1 != r9) goto L_0x038c
            int r1 = r0.userId     // Catch:{ all -> 0x03ea }
            r3 = r55
            if (r1 != r3) goto L_0x035f
        L_0x02a2:
            com.android.server.am.BroadcastFilter r1 = new com.android.server.am.BroadcastFilter     // Catch:{ all -> 0x0358 }
            r11 = r1
            r2 = r12
            r12 = r57
            r4 = r13
            r13 = r0
            r5 = r14
            r14 = r4
            r6 = r15
            r15 = r58
            r16 = r10
            r17 = r3
            r18 = r28
            r11.<init>(r12, r13, r14, r15, r16, r17, r18, r19)     // Catch:{ all -> 0x0401 }
            boolean r7 = r0.containsFilter(r6)     // Catch:{ all -> 0x0401 }
            if (r7 == 0) goto L_0x02e7
            java.lang.String r7 = "ActivityManager"
            java.lang.StringBuilder r11 = new java.lang.StringBuilder     // Catch:{ all -> 0x0401 }
            r11.<init>()     // Catch:{ all -> 0x0401 }
            java.lang.String r12 = "Receiver with filter "
            r11.append(r12)     // Catch:{ all -> 0x0401 }
            r11.append(r6)     // Catch:{ all -> 0x0401 }
            java.lang.String r12 = " already registered for pid "
            r11.append(r12)     // Catch:{ all -> 0x0401 }
            int r12 = r0.pid     // Catch:{ all -> 0x0401 }
            r11.append(r12)     // Catch:{ all -> 0x0401 }
            java.lang.String r12 = ", callerPackage is "
            r11.append(r12)     // Catch:{ all -> 0x0401 }
            r11.append(r4)     // Catch:{ all -> 0x0401 }
            java.lang.String r11 = r11.toString()     // Catch:{ all -> 0x0401 }
            android.util.Slog.w(r7, r11)     // Catch:{ all -> 0x0401 }
            goto L_0x02fc
        L_0x02e7:
            r0.add(r1)     // Catch:{ all -> 0x0401 }
            boolean r7 = r1.debugCheck()     // Catch:{ all -> 0x0401 }
            if (r7 != 0) goto L_0x02f7
            java.lang.String r7 = "ActivityManager"
            java.lang.String r11 = "==> For Dynamic broadcast"
            android.util.Slog.w(r7, r11)     // Catch:{ all -> 0x0401 }
        L_0x02f7:
            com.android.server.IntentResolver<com.android.server.am.BroadcastFilter, com.android.server.am.BroadcastFilter> r7 = r8.mReceiverResolver     // Catch:{ all -> 0x0401 }
            r7.addFilter(r1)     // Catch:{ all -> 0x0401 }
        L_0x02fc:
            if (r2 == 0) goto L_0x0353
            java.util.ArrayList r7 = new java.util.ArrayList     // Catch:{ all -> 0x0401 }
            r7.<init>()     // Catch:{ all -> 0x0401 }
            r7.add(r1)     // Catch:{ all -> 0x0401 }
            int r11 = r2.size()     // Catch:{ all -> 0x0401 }
            r12 = 0
        L_0x030b:
            if (r12 >= r11) goto L_0x0353
            java.lang.Object r13 = r2.get(r12)     // Catch:{ all -> 0x0401 }
            android.content.Intent r13 = (android.content.Intent) r13     // Catch:{ all -> 0x0401 }
            com.android.server.am.BroadcastQueue r14 = r8.broadcastQueueForIntent(r13)     // Catch:{ all -> 0x0401 }
            com.android.server.am.BroadcastRecord r15 = new com.android.server.am.BroadcastRecord     // Catch:{ all -> 0x0401 }
            r32 = 0
            r33 = 0
            r34 = -1
            r35 = -1
            r36 = 0
            r37 = 0
            r38 = 0
            r39 = -1
            r40 = 0
            r42 = 0
            r43 = 0
            r44 = 0
            r45 = 0
            r46 = 0
            r47 = 1
            r48 = 1
            r49 = -1
            r50 = 0
            r51 = 0
            r29 = r15
            r30 = r14
            r31 = r13
            r41 = r7
            r29.<init>(r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51)     // Catch:{ all -> 0x0401 }
            r14.enqueueParallelBroadcastLocked(r15)     // Catch:{ all -> 0x0401 }
            r14.scheduleBroadcastsLocked()     // Catch:{ all -> 0x0401 }
            int r12 = r12 + 1
            goto L_0x030b
        L_0x0353:
            monitor-exit(r53)     // Catch:{ all -> 0x0401 }
            resetPriorityAfterLockedSection()
            return r22
        L_0x0358:
            r0 = move-exception
            r2 = r12
            r4 = r13
            r5 = r14
            r6 = r15
            goto L_0x03fc
        L_0x035f:
            r2 = r12
            r4 = r13
            r5 = r14
            r6 = r15
            java.lang.IllegalArgumentException r1 = new java.lang.IllegalArgumentException     // Catch:{ all -> 0x0401 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x0401 }
            r7.<init>()     // Catch:{ all -> 0x0401 }
            java.lang.String r11 = "Receiver requested to register for user "
            r7.append(r11)     // Catch:{ all -> 0x0401 }
            r7.append(r3)     // Catch:{ all -> 0x0401 }
            java.lang.String r11 = " was previously registered for user "
            r7.append(r11)     // Catch:{ all -> 0x0401 }
            int r11 = r0.userId     // Catch:{ all -> 0x0401 }
            r7.append(r11)     // Catch:{ all -> 0x0401 }
            java.lang.String r11 = " callerPackage is "
            r7.append(r11)     // Catch:{ all -> 0x0401 }
            r7.append(r4)     // Catch:{ all -> 0x0401 }
            java.lang.String r7 = r7.toString()     // Catch:{ all -> 0x0401 }
            r1.<init>(r7)     // Catch:{ all -> 0x0401 }
            throw r1     // Catch:{ all -> 0x0401 }
        L_0x038c:
            r3 = r55
            r2 = r12
            r4 = r13
            r5 = r14
            r6 = r15
            java.lang.IllegalArgumentException r1 = new java.lang.IllegalArgumentException     // Catch:{ all -> 0x0401 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x0401 }
            r7.<init>()     // Catch:{ all -> 0x0401 }
            java.lang.String r11 = "Receiver requested to register for pid "
            r7.append(r11)     // Catch:{ all -> 0x0401 }
            r7.append(r9)     // Catch:{ all -> 0x0401 }
            java.lang.String r11 = " was previously registered for pid "
            r7.append(r11)     // Catch:{ all -> 0x0401 }
            int r11 = r0.pid     // Catch:{ all -> 0x0401 }
            r7.append(r11)     // Catch:{ all -> 0x0401 }
            java.lang.String r11 = " callerPackage is "
            r7.append(r11)     // Catch:{ all -> 0x0401 }
            r7.append(r4)     // Catch:{ all -> 0x0401 }
            java.lang.String r7 = r7.toString()     // Catch:{ all -> 0x0401 }
            r1.<init>(r7)     // Catch:{ all -> 0x0401 }
            throw r1     // Catch:{ all -> 0x0401 }
        L_0x03bb:
            r3 = r55
            r2 = r12
            r4 = r13
            r5 = r14
            r6 = r15
            java.lang.IllegalArgumentException r1 = new java.lang.IllegalArgumentException     // Catch:{ all -> 0x0401 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x0401 }
            r7.<init>()     // Catch:{ all -> 0x0401 }
            java.lang.String r11 = "Receiver requested to register for uid "
            r7.append(r11)     // Catch:{ all -> 0x0401 }
            r7.append(r10)     // Catch:{ all -> 0x0401 }
            java.lang.String r11 = " was previously registered for uid "
            r7.append(r11)     // Catch:{ all -> 0x0401 }
            int r11 = r0.uid     // Catch:{ all -> 0x0401 }
            r7.append(r11)     // Catch:{ all -> 0x0401 }
            java.lang.String r11 = " callerPackage is "
            r7.append(r11)     // Catch:{ all -> 0x0401 }
            r7.append(r4)     // Catch:{ all -> 0x0401 }
            java.lang.String r7 = r7.toString()     // Catch:{ all -> 0x0401 }
            r1.<init>(r7)     // Catch:{ all -> 0x0401 }
            throw r1     // Catch:{ all -> 0x0401 }
        L_0x03ea:
            r0 = move-exception
            r3 = r55
            r2 = r12
            r4 = r13
            r5 = r14
            r6 = r15
            goto L_0x03fc
        L_0x03f2:
            r0 = move-exception
            r23 = r55
            r3 = r5
            r9 = r6
            r10 = r7
            r2 = r12
            r4 = r13
            r5 = r14
            r6 = r15
        L_0x03fc:
            monitor-exit(r53)     // Catch:{ all -> 0x0401 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0401:
            r0 = move-exception
            goto L_0x03fc
        L_0x0403:
            r0 = move-exception
            r23 = r2
            r3 = r5
            r4 = r13
            r5 = r14
            r6 = r15
            r1 = r4
            r52 = r5
            r5 = r3
            r3 = r52
            goto L_0x042f
        L_0x0411:
            r0 = move-exception
            r3 = r5
            r4 = r13
            r5 = r14
            r6 = r15
            r1 = r4
            r52 = r5
            r5 = r3
            r3 = r52
            goto L_0x042f
        L_0x041d:
            r0 = move-exception
            r4 = r13
            r5 = r14
            r6 = r15
            r1 = r4
            r3 = r5
            r5 = r59
            goto L_0x042f
        L_0x0426:
            r0 = move-exception
            r6 = r15
            r5 = r59
            goto L_0x042f
        L_0x042b:
            r0 = move-exception
            r6 = r15
            r5 = r59
        L_0x042f:
            monitor-exit(r53)     // Catch:{ all -> 0x0434 }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0434:
            r0 = move-exception
            goto L_0x042f
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.registerReceiver(android.app.IApplicationThread, java.lang.String, android.content.IIntentReceiver, android.content.IntentFilter, java.lang.String, int, int):android.content.Intent");
    }

    /* Debug info: failed to restart local var, previous not found, register: 13 */
    public void unregisterReceiver(IIntentReceiver receiver) {
        long origId = Binder.clearCallingIdentity();
        boolean doTrim = false;
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ReceiverList rl = this.mRegisteredReceivers.get(receiver.asBinder());
                if (rl != null) {
                    BroadcastRecord r = rl.curBroadcast;
                    if (r != null && r == r.queue.getMatchingOrderedReceiver(r)) {
                        if (r.queue.finishReceiverLocked(r, r.resultCode, r.resultData, r.resultExtras, r.resultAbort, false)) {
                            doTrim = true;
                            r.queue.processNextBroadcast(false);
                        }
                    }
                    if (rl.app != null) {
                        rl.app.receivers.remove(rl);
                    }
                    removeReceiverLocked(rl);
                    if (rl.linkedToDeath) {
                        rl.linkedToDeath = false;
                        rl.receiver.asBinder().unlinkToDeath(rl, 0);
                    }
                }
            }
            resetPriorityAfterLockedSection();
            if (doTrim) {
                trimApplications("updateOomAdj_finishReceiver");
                Binder.restoreCallingIdentity(origId);
                return;
            }
            Binder.restoreCallingIdentity(origId);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
            throw th;
        }
    }

    /* access modifiers changed from: package-private */
    public void removeReceiverLocked(ReceiverList rl) {
        this.mRegisteredReceivers.remove(rl.receiver.asBinder());
        for (int i = rl.size() - 1; i >= 0; i--) {
            this.mReceiverResolver.removeFilter((BroadcastFilter) rl.get(i));
        }
    }

    private final void sendPackageBroadcastLocked(int cmd, String[] packages, int userId) {
        this.mProcessList.sendPackageBroadcastLocked(cmd, packages, userId);
    }

    private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType, int callingUid, int[] users) {
        int pmFlags;
        int pmFlags2;
        int[] iArr = users;
        int pmFlags3 = 268436480;
        boolean scannedFirstReceivers = false;
        try {
            int length = iArr.length;
            int i = 0;
            List<ResolveInfo> receivers = null;
            HashSet<ComponentName> singleUserReceivers = null;
            int i2 = 0;
            while (i2 < length) {
                try {
                    int user = iArr[i2];
                    if (callingUid == NATIVE_DUMP_TIMEOUT_MS) {
                        try {
                            if (this.mUserController.hasUserRestriction("no_debugging_features", user) && !isPermittedShellBroadcast(intent)) {
                                Intent intent2 = intent;
                                String str = resolvedType;
                                pmFlags = pmFlags3;
                                i2++;
                                iArr = users;
                                pmFlags3 = pmFlags;
                                i = 0;
                            }
                        } catch (RemoteException e) {
                            Intent intent3 = intent;
                            String str2 = resolvedType;
                            int i3 = pmFlags3;
                            return receivers;
                        }
                    }
                    try {
                        try {
                            List<ResolveInfo> newReceivers = AppGlobals.getPackageManager().queryIntentReceivers(intent, resolvedType, pmFlags3, user).getList();
                            if (!(user == 0 || newReceivers == null)) {
                                int i4 = i;
                                while (i4 < newReceivers.size()) {
                                    try {
                                        if ((newReceivers.get(i4).activityInfo.flags & 536870912) != 0) {
                                            newReceivers.remove(i4);
                                            i4--;
                                        }
                                        i4++;
                                    } catch (RemoteException e2) {
                                        int i32 = pmFlags3;
                                        return receivers;
                                    }
                                }
                            }
                            if (newReceivers != null && newReceivers.size() == 0) {
                                newReceivers = null;
                            }
                            if (receivers == null) {
                                pmFlags = pmFlags3;
                                receivers = newReceivers;
                            } else if (newReceivers != null) {
                                if (!scannedFirstReceivers) {
                                    scannedFirstReceivers = true;
                                    int i5 = 0;
                                    while (i5 < receivers.size()) {
                                        ResolveInfo ri = receivers.get(i5);
                                        if ((ri.activityInfo.flags & 1073741824) != 0) {
                                            pmFlags2 = pmFlags3;
                                            try {
                                                ComponentName cn = new ComponentName(ri.activityInfo.packageName, ri.activityInfo.name);
                                                if (singleUserReceivers == null) {
                                                    singleUserReceivers = new HashSet<>();
                                                }
                                                singleUserReceivers.add(cn);
                                            } catch (RemoteException e3) {
                                                return receivers;
                                            }
                                        } else {
                                            pmFlags2 = pmFlags3;
                                        }
                                        i5++;
                                        int[] iArr2 = users;
                                        pmFlags3 = pmFlags2;
                                    }
                                    pmFlags = pmFlags3;
                                } else {
                                    pmFlags = pmFlags3;
                                }
                                for (int i6 = 0; i6 < newReceivers.size(); i6++) {
                                    ResolveInfo ri2 = newReceivers.get(i6);
                                    if ((ri2.activityInfo.flags & 1073741824) != 0) {
                                        ComponentName cn2 = new ComponentName(ri2.activityInfo.packageName, ri2.activityInfo.name);
                                        if (singleUserReceivers == null) {
                                            singleUserReceivers = new HashSet<>();
                                        }
                                        if (!singleUserReceivers.contains(cn2)) {
                                            singleUserReceivers.add(cn2);
                                            receivers.add(ri2);
                                        }
                                    } else {
                                        receivers.add(ri2);
                                    }
                                }
                            } else {
                                pmFlags = pmFlags3;
                            }
                            i2++;
                            iArr = users;
                            pmFlags3 = pmFlags;
                            i = 0;
                        } catch (RemoteException e4) {
                            int i7 = pmFlags3;
                            return receivers;
                        }
                    } catch (RemoteException e5) {
                        Intent intent4 = intent;
                        String str3 = resolvedType;
                        int i8 = pmFlags3;
                        return receivers;
                    }
                } catch (RemoteException e6) {
                    Intent intent5 = intent;
                    String str4 = resolvedType;
                    int i9 = callingUid;
                    int i10 = pmFlags3;
                    return receivers;
                }
            }
            Intent intent6 = intent;
            String str5 = resolvedType;
            int i11 = callingUid;
            int i12 = pmFlags3;
            return receivers;
        } catch (RemoteException e7) {
            Intent intent7 = intent;
            String str6 = resolvedType;
            int i13 = callingUid;
            return null;
        }
    }

    private boolean isPermittedShellBroadcast(Intent intent) {
        return INTENT_REMOTE_BUGREPORT_FINISHED.equals(intent.getAction());
    }

    private void checkBroadcastFromSystem(Intent intent, ProcessRecord callerApp, String callerPackage, int callingUid, boolean isProtectedBroadcast, List receivers, String[] requiredPermissions) {
        if ((intent.getFlags() & DumpState.DUMP_CHANGES) == 0) {
            String action = intent.getAction();
            if (!isProtectedBroadcast && !"android.intent.action.CLOSE_SYSTEM_DIALOGS".equals(action) && !"com.android.intent.action.DISMISS_KEYBOARD_SHORTCUTS".equals(action) && !"android.intent.action.MEDIA_BUTTON".equals(action) && !"android.intent.action.MEDIA_SCANNER_SCAN_FILE".equals(action) && !"com.android.intent.action.SHOW_KEYBOARD_SHORTCUTS".equals(action) && !"android.intent.action.MASTER_CLEAR".equals(action) && !"android.intent.action.FACTORY_RESET".equals(action) && !"android.intent.action.ENTER_CAST_MODE".equals(action) && !"android.intent.action.EXIT_CAST_MODE".equals(action) && !"android.appwidget.action.APPWIDGET_CONFIGURE".equals(action) && !"android.appwidget.action.APPWIDGET_UPDATE".equals(action) && !"android.location.HIGH_POWER_REQUEST_CHANGE".equals(action) && !"com.android.omadm.service.CONFIGURATION_UPDATE".equals(action) && !"android.text.style.SUGGESTION_PICKED".equals(action) && !"android.media.action.OPEN_AUDIO_EFFECT_CONTROL_SESSION".equals(action) && !"android.media.action.CLOSE_AUDIO_EFFECT_CONTROL_SESSION".equals(action)) {
                if (!(intent.getPackage() == null && intent.getComponent() == null)) {
                    if (receivers != null && receivers.size() != 0) {
                        boolean allProtected = true;
                        int i = receivers.size() - 1;
                        while (true) {
                            if (i < 0) {
                                break;
                            }
                            Object target = receivers.get(i);
                            if (target instanceof ResolveInfo) {
                                ResolveInfo ri = (ResolveInfo) target;
                                if (ri.activityInfo.exported && ri.activityInfo.permission == null) {
                                    allProtected = false;
                                    break;
                                }
                            } else if (((BroadcastFilter) target).requiredPermission == null) {
                                allProtected = false;
                                break;
                            }
                            i--;
                        }
                        if (!allProtected) {
                            if (requiredPermissions != null && requiredPermissions.length > 0) {
                                return;
                            }
                        } else {
                            return;
                        }
                    } else {
                        return;
                    }
                }
                if (callerApp != null) {
                    StringBuilder sb = new StringBuilder();
                    sb.append("Sending non-protected broadcast ");
                    sb.append(action);
                    sb.append(" from system ");
                    sb.append(callerApp.toShortString());
                    sb.append(" pkg ");
                    sb.append(callerPackage);
                    sb.append(". Callers=");
                    sb.append((callerPackage == null || PackageManagerService.PLATFORM_PACKAGE_NAME.equals(callerPackage)) ? Debug.getCallers(5) : "");
                    Log.w("ActivityManager", sb.toString());
                    return;
                }
                Log.w("ActivityManager", "Sending non-protected broadcast " + action + " from system uid " + UserHandle.formatUid(callingUid) + " pkg " + callerPackage + ". Callers=" + Debug.getCallers(5));
            }
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final int broadcastIntentLocked(ProcessRecord callerApp, String callerPackage, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String[] requiredPermissions, int appOp, Bundle bOptions, boolean ordered, boolean sticky, int callingPid, int callingUid, int realCallingUid, int realCallingPid, int userId) {
        return broadcastIntentLocked(callerApp, callerPackage, intent, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermissions, appOp, bOptions, ordered, sticky, callingPid, callingUid, realCallingUid, realCallingPid, userId, false);
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:241:0x05da, code lost:
        if (r7.equals("android.intent.action.PACKAGE_CHANGED") != false) goto L_0x0613;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:254:0x0611, code lost:
        r18 = 65535;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:255:0x0613, code lost:
        switch(r18) {
            case 0: goto L_0x07d7;
            case 1: goto L_0x0771;
            case 2: goto L_0x0760;
            case 3: goto L_0x0644;
            case 4: goto L_0x0644;
            case 5: goto L_0x061e;
            case 6: goto L_0x061e;
            default: goto L_0x0616;
        };
     */
    /* JADX WARNING: Code restructure failed: missing block: B:256:0x0616, code lost:
        r10 = r5;
        r46 = r7;
        r9 = r8;
        r2 = -1;
        r15 = 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:257:0x061e, code lost:
        r11.mAtmInternal.onPackagesSuspendedChanged(r5.getStringArrayExtra("android.intent.extra.changed_package_list"), "android.intent.action.PACKAGES_SUSPENDED".equals(r5.getAction()), r5.getIntExtra("android.intent.extra.user_handle", com.android.server.wm.ScreenRotationAnimationInjector.BLACK_SURFACE_INVALID_POSITION));
        r10 = r5;
        r46 = r7;
        r9 = r8;
        r2 = -1;
        r15 = 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:258:0x0644, code lost:
        r0 = r5.getData();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:259:0x0648, code lost:
        if (r0 == null) goto L_0x0754;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:260:0x064a, code lost:
        r1 = r0.getSchemeSpecificPart();
        r4 = r1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:261:0x064f, code lost:
        if (r1 == null) goto L_0x0747;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:262:0x0651, code lost:
        r16 = "android.intent.action.PACKAGE_REMOVED".equals(r7);
        r24 = r5.getBooleanExtra("android.intent.extra.REPLACING", false);
        r25 = !r5.getBooleanExtra("android.intent.extra.DONT_KILL_APP", false);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:263:0x066c, code lost:
        if (r16 == false) goto L_0x0673;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:264:0x066e, code lost:
        if (r24 != false) goto L_0x0673;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:265:0x0670, code lost:
        r1 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:266:0x0673, code lost:
        r1 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:267:0x0674, code lost:
        r26 = r1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:268:0x0676, code lost:
        if (r16 == false) goto L_0x0705;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:269:0x0678, code lost:
        if (r25 == false) goto L_0x06ba;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:270:0x067a, code lost:
        r18 = android.os.UserHandle.getAppId(r5.getIntExtra("android.intent.extra.UID", -1));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:271:0x068e, code lost:
        if (r16 == false) goto L_0x0694;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:272:0x0690, code lost:
        r1 = com.android.server.am.ProcessRecordInjector.POLICY_UNINSTALL_PKG;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:273:0x0694, code lost:
        r1 = com.android.server.am.ProcessRecordInjector.POLICY_CHANGED_PKG;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:274:0x0697, code lost:
        r44 = r4;
        r45 = r5;
        r46 = r7;
        r53 = r8;
        forceStopPackageLocked(r4, r18, false, true, true, false, r26, r53, r1);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:275:0x06ba, code lost:
        r44 = r4;
        r45 = r5;
        r46 = r7;
        r53 = r8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:276:0x06c2, code lost:
        if (r25 == false) goto L_0x06c8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:277:0x06c4, code lost:
        r19 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:278:0x06c8, code lost:
        r10 = 1;
        r3 = r44;
        r8 = r53;
        sendPackageBroadcastLocked(r19, new java.lang.String[]{r3}, r8);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:279:0x06d7, code lost:
        if (r26 == false) goto L_0x0701;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:280:0x06d9, code lost:
        r7 = r45;
        r6 = -1;
        r11.mAppOpsService.packageRemoved(r7.getIntExtra("android.intent.extra.UID", -1), r3);
        r11.mUgmInternal.removeUriPermissionsForPackage(r3, r8, true, false);
        r11.mAtmInternal.removeRecentTasksByPackageName(r3, r8);
        r11.mServices.forceStopPackageLocked(r3, r8);
        r11.mAtmInternal.onPackageUninstalled(r3);
        r11.mBatteryStatsService.notePackageUninstalled(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:281:0x0701, code lost:
        r7 = r45;
        r6 = -1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:282:0x0705, code lost:
        r3 = r4;
        r46 = r7;
        r10 = 1;
        r6 = -1;
        r7 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:283:0x070d, code lost:
        if (r25 == false) goto L_0x0737;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:284:0x070f, code lost:
        r1 = r7.getIntExtra("android.intent.extra.UID", -1);
        r11.mProcessList.killPackageProcessesLocked(r3, android.os.UserHandle.getAppId(r1), r8, com.android.server.wm.ScreenRotationAnimationInjector.BLACK_SURFACE_INVALID_POSITION, "change " + r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:285:0x0737, code lost:
        cleanupDisabledPackageComponentsLocked(r3, r8, r7.getStringArrayExtra("android.intent.extra.changed_component_name_list"));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:286:0x0741, code lost:
        r2 = r6;
        r9 = r8;
        r15 = r10;
        r10 = r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:287:0x0747, code lost:
        r3 = r4;
        r46 = r7;
        r2 = -1;
        r9 = r8;
        r15 = 1;
        r10 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:288:0x0754, code lost:
        r46 = r7;
        r2 = -1;
        r9 = r8;
        r15 = 1;
        r10 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:289:0x0760, code lost:
        r46 = r7;
        r11.mAtmInternal.cleanupRecentTasksForUser(-1);
        r2 = -1;
        r9 = r8;
        r15 = 1;
        r10 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:290:0x0771, code lost:
        r46 = r7;
        r10 = 1;
        r7 = r5;
        r0 = r7.getStringArrayExtra("android.intent.extra.changed_package_list");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:291:0x077d, code lost:
        if (r0 == null) goto L_0x07cf;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:293:0x0780, code lost:
        if (r0.length <= 0) goto L_0x07cf;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:294:0x0782, code lost:
        r5 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:296:0x0785, code lost:
        if (r5 >= r0.length) goto L_0x07ba;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:297:0x0787, code lost:
        r53 = r8;
        forceStopPackageLocked(r0[r5], -1, false, true, true, false, false, r53, "storage unmount");
        r5 = r5 + 1;
        r8 = r53;
        r10 = r10;
        r7 = r7;
        r15 = r51;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:298:0x07ba, code lost:
        r21 = r5;
        r15 = r10;
        r2 = -1;
        r11.mAtmInternal.cleanupRecentTasksForUser(-1);
        r9 = r8;
        sendPackageBroadcastLocked(r15, r0, r9);
        r10 = r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:299:0x07cf, code lost:
        r2 = -1;
        r9 = r8;
        r15 = 1;
        r10 = r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:300:0x07d7, code lost:
        r46 = r7;
        r9 = r8;
        r2 = -1;
        r15 = 1;
        r10 = r5;
        r0 = getUidFromIntent(r10);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:301:0x07e4, code lost:
        if (r0 < 0) goto L_0x07f0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:302:0x07e6, code lost:
        r11.mBatteryStatsService.removeUid(r0);
        r11.mAppOpsService.uidRemoved(r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:303:0x07f0, code lost:
        r8 = r65;
     */
    @com.android.internal.annotations.GuardedBy({"this"})
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final int broadcastIntentLocked(com.android.server.am.ProcessRecord r51, java.lang.String r52, android.content.Intent r53, java.lang.String r54, android.content.IIntentReceiver r55, int r56, java.lang.String r57, android.os.Bundle r58, java.lang.String[] r59, int r60, android.os.Bundle r61, boolean r62, boolean r63, int r64, int r65, int r66, int r67, int r68, boolean r69) {
        /*
            r50 = this;
            r11 = r50
            r15 = r51
            r14 = r52
            r12 = r54
            r13 = r59
            r10 = r60
            r9 = r61
            r8 = r64
            r7 = r65
            r6 = r66
            r5 = r67
            android.content.Intent r0 = new android.content.Intent
            r1 = r53
            r0.<init>(r1)
            r4 = r0
            boolean r35 = r11.isInstantApp(r15, r14, r7)
            if (r35 == 0) goto L_0x002f
            int r0 = r4.getFlags()
            r1 = -2097153(0xffffffffffdfffff, float:NaN)
            r0 = r0 & r1
            r4.setFlags(r0)
        L_0x002f:
            r4.setSender(r14)
            r3 = -1
            if (r10 < r3) goto L_0x0c52
            r0 = 91
            if (r10 >= r0) goto L_0x0c52
            r0 = 16
            r4.addFlags(r0)
            boolean r1 = r11.mProcessesReady
            r16 = 33554432(0x2000000, float:9.403955E-38)
            r2 = 1073741824(0x40000000, float:2.0)
            if (r1 != 0) goto L_0x0051
            int r1 = r4.getFlags()
            r1 = r1 & r16
            if (r1 != 0) goto L_0x0051
            r4.addFlags(r2)
        L_0x0051:
            if (r55 == 0) goto L_0x0070
            if (r62 != 0) goto L_0x0070
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r0 = "Broadcast "
            r1.append(r0)
            r1.append(r4)
            java.lang.String r0 = " not ordered but result callback requested!"
            r1.append(r0)
            java.lang.String r0 = r1.toString()
            java.lang.String r1 = "ActivityManager"
            android.util.Slog.w(r1, r0)
        L_0x0070:
            com.android.server.am.UserController r1 = r11.mUserController
            r0 = 1
            r17 = 0
            java.lang.String r18 = "broadcast"
            r2 = r64
            r3 = r65
            r38 = r4
            r4 = r68
            r12 = r5
            r5 = r0
            r6 = r17
            r7 = r18
            r13 = r8
            r8 = r52
            int r8 = r1.handleIncomingUser(r2, r3, r4, r5, r6, r7, r8)
            r7 = -1
            if (r8 == r7) goto L_0x00e0
            com.android.server.am.UserController r0 = r11.mUserController
            boolean r0 = r0.isUserOrItsParentRunning(r8)
            if (r0 != 0) goto L_0x00e0
            r0 = 1000(0x3e8, float:1.401E-42)
            r6 = r65
            if (r6 != r0) goto L_0x00a9
            int r0 = r38.getFlags()
            r0 = r0 & r16
            if (r0 != 0) goto L_0x00a6
            goto L_0x00a9
        L_0x00a6:
            r5 = r38
            goto L_0x00e4
        L_0x00a9:
            java.lang.String r0 = r38.getAction()
            java.lang.String r1 = "android.intent.action.ACTION_SHUTDOWN"
            boolean r0 = r1.equals(r0)
            if (r0 != 0) goto L_0x00dd
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "Skipping broadcast of "
            r0.append(r1)
            r5 = r38
            r0.append(r5)
            java.lang.String r1 = ": user "
            r0.append(r1)
            r0.append(r8)
            java.lang.String r1 = " and its parent (if any) are stopped"
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            java.lang.String r1 = "ActivityManager"
            android.util.Slog.w(r1, r0)
            r0 = -2
            return r0
        L_0x00dd:
            r5 = r38
            goto L_0x00e4
        L_0x00e0:
            r6 = r65
            r5 = r38
        L_0x00e4:
            java.lang.String r4 = r5.getAction()
            r0 = 0
            r1 = 0
            if (r9 == 0) goto L_0x01df
            android.app.BroadcastOptions r3 = new android.app.BroadcastOptions
            r3.<init>(r9)
            r0 = r3
            long r16 = r0.getTemporaryAppWhitelistDuration()
            int r3 = (r16 > r1 ? 1 : (r16 == r1 ? 0 : -1))
            if (r3 <= 0) goto L_0x0149
            java.lang.String r3 = "android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST"
            r10 = r66
            r1 = 1
            int r2 = checkComponentPermission(r3, r12, r10, r7, r1)
            if (r2 != 0) goto L_0x0107
            goto L_0x014b
        L_0x0107:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "Permission Denial: "
            r1.append(r2)
            java.lang.String r2 = r5.getAction()
            r1.append(r2)
            java.lang.String r2 = " broadcast from "
            r1.append(r2)
            r1.append(r14)
            java.lang.String r2 = " (pid="
            r1.append(r2)
            r1.append(r13)
            java.lang.String r2 = ", uid="
            r1.append(r2)
            r1.append(r6)
            java.lang.String r2 = ") requires "
            r1.append(r2)
            java.lang.String r2 = "android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST"
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            java.lang.String r2 = "ActivityManager"
            android.util.Slog.w(r2, r1)
            java.lang.SecurityException r2 = new java.lang.SecurityException
            r2.<init>(r1)
            throw r2
        L_0x0149:
            r10 = r66
        L_0x014b:
            boolean r1 = r0.isDontSendToRestrictedApps()
            if (r1 == 0) goto L_0x0183
            boolean r1 = r11.isUidActiveLocked(r6)
            if (r1 != 0) goto L_0x0183
            boolean r1 = r11.isBackgroundRestrictedNoCheck(r6, r14)
            if (r1 == 0) goto L_0x0183
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "Not sending broadcast "
            r1.append(r2)
            r1.append(r4)
            java.lang.String r2 = " - app "
            r1.append(r2)
            r1.append(r14)
            java.lang.String r2 = " has background restrictions"
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            java.lang.String r2 = "ActivityManager"
            android.util.Slog.i(r2, r1)
            r1 = -96
            return r1
        L_0x0183:
            boolean r1 = r0.allowsBackgroundActivityStarts()
            if (r1 == 0) goto L_0x01da
            java.lang.String r1 = "android.permission.START_ACTIVITIES_FROM_BACKGROUND"
            r2 = 1
            int r1 = checkComponentPermission(r1, r12, r10, r7, r2)
            if (r1 != 0) goto L_0x0198
            r1 = 1
            r37 = r0
            r38 = r1
            goto L_0x01e5
        L_0x0198:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "Permission Denial: "
            r1.append(r2)
            java.lang.String r2 = r5.getAction()
            r1.append(r2)
            java.lang.String r2 = " broadcast from "
            r1.append(r2)
            r1.append(r14)
            java.lang.String r2 = " (pid="
            r1.append(r2)
            r1.append(r13)
            java.lang.String r2 = ", uid="
            r1.append(r2)
            r1.append(r6)
            java.lang.String r2 = ") requires "
            r1.append(r2)
            java.lang.String r2 = "android.permission.START_ACTIVITIES_FROM_BACKGROUND"
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            java.lang.String r2 = "ActivityManager"
            android.util.Slog.w(r2, r1)
            java.lang.SecurityException r2 = new java.lang.SecurityException
            r2.<init>(r1)
            throw r2
        L_0x01da:
            r38 = r69
            r37 = r0
            goto L_0x01e5
        L_0x01df:
            r10 = r66
            r38 = r69
            r37 = r0
        L_0x01e5:
            r3 = 0
            android.content.pm.IPackageManager r0 = android.app.AppGlobals.getPackageManager()     // Catch:{ RemoteException -> 0x0c43 }
            boolean r0 = r0.isProtectedBroadcast(r4)     // Catch:{ RemoteException -> 0x0c43 }
            r39 = r0
            if (r15 == 0) goto L_0x01fb
            boolean r0 = r51.isPersistent()
            if (r0 == 0) goto L_0x01fb
            r0 = 1
            goto L_0x01fc
        L_0x01fb:
            r0 = r3
        L_0x01fc:
            r40 = r0
            int r0 = android.os.UserHandle.getAppId(r65)
            if (r0 == 0) goto L_0x0217
            r1 = 1027(0x403, float:1.439E-42)
            if (r0 == r1) goto L_0x0217
            r1 = 1068(0x42c, float:1.497E-42)
            if (r0 == r1) goto L_0x0217
            r1 = 1073(0x431, float:1.504E-42)
            if (r0 == r1) goto L_0x0217
            switch(r0) {
                case 1000: goto L_0x0217;
                case 1001: goto L_0x0217;
                case 1002: goto L_0x0217;
                default: goto L_0x0213;
            }
        L_0x0213:
            r0 = 0
            r41 = r0
            goto L_0x021a
        L_0x0217:
            r0 = 1
            r41 = r0
        L_0x021a:
            if (r41 != 0) goto L_0x02cd
            if (r40 != 0) goto L_0x02cd
            if (r39 != 0) goto L_0x02a1
            java.lang.String r0 = "android.appwidget.action.APPWIDGET_CONFIGURE"
            boolean r0 = r0.equals(r4)
            if (r0 != 0) goto L_0x0230
            java.lang.String r0 = "android.appwidget.action.APPWIDGET_UPDATE"
            boolean r0 = r0.equals(r4)
            if (r0 == 0) goto L_0x02cd
        L_0x0230:
            if (r14 == 0) goto L_0x0280
            android.content.ComponentName r0 = r5.getComponent()
            if (r0 == 0) goto L_0x027c
            android.content.ComponentName r0 = r5.getComponent()
            java.lang.String r0 = r0.getPackageName()
            boolean r0 = r0.equals(r14)
            if (r0 == 0) goto L_0x0248
            goto L_0x02cd
        L_0x0248:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "Permission Denial: not allowed to send broadcast "
            r0.append(r1)
            r0.append(r4)
            java.lang.String r1 = " to "
            r0.append(r1)
            android.content.ComponentName r1 = r5.getComponent()
            java.lang.String r1 = r1.getPackageName()
            r0.append(r1)
            java.lang.String r1 = " from "
            r0.append(r1)
            r0.append(r14)
            java.lang.String r0 = r0.toString()
            java.lang.String r1 = "ActivityManager"
            android.util.Slog.w(r1, r0)
            java.lang.SecurityException r1 = new java.lang.SecurityException
            r1.<init>(r0)
            throw r1
        L_0x027c:
            r5.setPackage(r14)
            goto L_0x02cd
        L_0x0280:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "Permission Denial: not allowed to send broadcast "
            r0.append(r1)
            r0.append(r4)
            java.lang.String r1 = " from unknown caller."
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            java.lang.String r1 = "ActivityManager"
            android.util.Slog.w(r1, r0)
            java.lang.SecurityException r1 = new java.lang.SecurityException
            r1.<init>(r0)
            throw r1
        L_0x02a1:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "Permission Denial: not allowed to send broadcast "
            r0.append(r1)
            r0.append(r4)
            java.lang.String r1 = " from pid="
            r0.append(r1)
            r0.append(r13)
            java.lang.String r1 = ", uid="
            r0.append(r1)
            r0.append(r6)
            java.lang.String r0 = r0.toString()
            java.lang.String r1 = "ActivityManager"
            android.util.Slog.w(r1, r0)
            java.lang.SecurityException r1 = new java.lang.SecurityException
            r1.<init>(r0)
            throw r1
        L_0x02cd:
            r23 = 0
            if (r4 == 0) goto L_0x0867
            android.util.ArraySet r0 = r50.getBackgroundLaunchBroadcasts()
            boolean r0 = r0.contains(r4)
            if (r0 == 0) goto L_0x02e0
            r0 = 16777216(0x1000000, float:2.3509887E-38)
            r5.addFlags(r0)
        L_0x02e0:
            int r0 = r4.hashCode()
            r18 = 4
            r1 = 13
            r19 = 2
            switch(r0) {
                case -2098526293: goto L_0x03b8;
                case -2074848843: goto L_0x03ad;
                case -1749672628: goto L_0x03a3;
                case -1403934493: goto L_0x0399;
                case -1338021860: goto L_0x038e;
                case -1001645458: goto L_0x0384;
                case -810471698: goto L_0x037a;
                case 172491798: goto L_0x036f;
                case 183904262: goto L_0x0365;
                case 267468725: goto L_0x0359;
                case 502473491: goto L_0x034d;
                case 505380757: goto L_0x0341;
                case 525384130: goto L_0x0336;
                case 555021408: goto L_0x032a;
                case 789737439: goto L_0x031e;
                case 920338478: goto L_0x0312;
                case 1290767157: goto L_0x0307;
                case 1544582882: goto L_0x02fb;
                case 1862858502: goto L_0x02ef;
                default: goto L_0x02ed;
            }
        L_0x02ed:
            goto L_0x03c3
        L_0x02ef:
            java.lang.String r0 = "android.security.action.TRUST_STORE_CHANGED"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = 16
            goto L_0x03c4
        L_0x02fb:
            java.lang.String r0 = "android.intent.action.PACKAGE_ADDED"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = 8
            goto L_0x03c4
        L_0x0307:
            java.lang.String r0 = "android.intent.action.PACKAGES_UNSUSPENDED"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = 6
            goto L_0x03c4
        L_0x0312:
            java.lang.String r0 = "android.hardware.action.NEW_PICTURE"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = 14
            goto L_0x03c4
        L_0x031e:
            java.lang.String r0 = "android.intent.action.PRE_BOOT_COMPLETED"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = 18
            goto L_0x03c4
        L_0x032a:
            java.lang.String r0 = "com.android.launcher.action.INSTALL_SHORTCUT"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = 17
            goto L_0x03c4
        L_0x0336:
            java.lang.String r0 = "android.intent.action.PACKAGE_REMOVED"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = 1
            goto L_0x03c4
        L_0x0341:
            java.lang.String r0 = "android.intent.action.TIME_SET"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = 11
            goto L_0x03c4
        L_0x034d:
            java.lang.String r0 = "android.intent.action.TIMEZONE_CHANGED"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = 10
            goto L_0x03c4
        L_0x0359:
            java.lang.String r0 = "android.intent.action.PACKAGE_DATA_CLEARED"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = 9
            goto L_0x03c4
        L_0x0365:
            java.lang.String r0 = "android.intent.action.PROXY_CHANGE"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = r1
            goto L_0x03c4
        L_0x036f:
            java.lang.String r0 = "android.intent.action.PACKAGE_CHANGED"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = r19
            goto L_0x03c4
        L_0x037a:
            java.lang.String r0 = "android.intent.action.PACKAGE_REPLACED"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = 7
            goto L_0x03c4
        L_0x0384:
            java.lang.String r0 = "android.intent.action.PACKAGES_SUSPENDED"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = 5
            goto L_0x03c4
        L_0x038e:
            java.lang.String r0 = "android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = r18
            goto L_0x03c4
        L_0x0399:
            java.lang.String r0 = "android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = 3
            goto L_0x03c4
        L_0x03a3:
            java.lang.String r0 = "android.intent.action.UID_REMOVED"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = r3
            goto L_0x03c4
        L_0x03ad:
            java.lang.String r0 = "android.intent.action.CLEAR_DNS_CACHE"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = 12
            goto L_0x03c4
        L_0x03b8:
            java.lang.String r0 = "android.hardware.action.NEW_VIDEO"
            boolean r0 = r4.equals(r0)
            if (r0 == 0) goto L_0x02ed
            r0 = 15
            goto L_0x03c4
        L_0x03c3:
            r0 = r7
        L_0x03c4:
            switch(r0) {
                case 0: goto L_0x059f;
                case 1: goto L_0x059f;
                case 2: goto L_0x059f;
                case 3: goto L_0x059f;
                case 4: goto L_0x059f;
                case 5: goto L_0x059f;
                case 6: goto L_0x059f;
                case 7: goto L_0x0529;
                case 8: goto L_0x04be;
                case 9: goto L_0x048b;
                case 10: goto L_0x047b;
                case 11: goto L_0x0449;
                case 12: goto L_0x0435;
                case 13: goto L_0x041d;
                case 14: goto L_0x040d;
                case 15: goto L_0x040d;
                case 16: goto L_0x03fb;
                case 17: goto L_0x03df;
                case 18: goto L_0x03d2;
                default: goto L_0x03c7;
            }
        L_0x03c7:
            r46 = r4
            r10 = r5
            r2 = r7
            r9 = r8
            r15 = 1
            r36 = 1073741824(0x40000000, float:2.0)
            r8 = r6
            goto L_0x0839
        L_0x03d2:
            r23 = 1
            r46 = r4
            r10 = r5
            r2 = r7
            r9 = r8
            r15 = 1
            r36 = 1073741824(0x40000000, float:2.0)
            r8 = r6
            goto L_0x0839
        L_0x03df:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "Broadcast "
            r0.append(r1)
            r0.append(r4)
            java.lang.String r1 = " no longer supported. It will not be delivered."
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            java.lang.String r1 = "ActivityManager"
            android.util.Log.w(r1, r0)
            return r3
        L_0x03fb:
            com.android.server.am.ActivityManagerService$MainHandler r0 = r11.mHandler
            r1 = 63
            r0.sendEmptyMessage(r1)
            r46 = r4
            r10 = r5
            r2 = r7
            r9 = r8
            r15 = 1
            r36 = 1073741824(0x40000000, float:2.0)
            r8 = r6
            goto L_0x0839
        L_0x040d:
            r2 = 1073741824(0x40000000, float:2.0)
            r5.addFlags(r2)
            r36 = r2
            r46 = r4
            r10 = r5
            r2 = r7
            r9 = r8
            r15 = 1
            r8 = r6
            goto L_0x0839
        L_0x041d:
            r2 = 1073741824(0x40000000, float:2.0)
            com.android.server.am.ActivityManagerService$MainHandler r0 = r11.mHandler
            r1 = 29
            android.os.Message r1 = r0.obtainMessage(r1)
            r0.sendMessage(r1)
            r36 = r2
            r46 = r4
            r10 = r5
            r2 = r7
            r9 = r8
            r15 = 1
            r8 = r6
            goto L_0x0839
        L_0x0435:
            r2 = 1073741824(0x40000000, float:2.0)
            com.android.server.am.ActivityManagerService$MainHandler r0 = r11.mHandler
            r1 = 28
            r0.sendEmptyMessage(r1)
            r36 = r2
            r46 = r4
            r10 = r5
            r2 = r7
            r9 = r8
            r15 = 1
            r8 = r6
            goto L_0x0839
        L_0x0449:
            r2 = 1073741824(0x40000000, float:2.0)
            r16 = -1
            java.lang.String r0 = "android.intent.extra.TIME_PREF_24_HOUR_FORMAT"
            int r1 = r5.getIntExtra(r0, r7)
            if (r1 == r7) goto L_0x0462
            com.android.server.am.ActivityManagerService$MainHandler r0 = r11.mHandler
            r2 = 41
            android.os.Message r0 = r0.obtainMessage(r2, r1, r3)
            com.android.server.am.ActivityManagerService$MainHandler r2 = r11.mHandler
            r2.sendMessage(r0)
        L_0x0462:
            com.android.server.am.BatteryStatsService r0 = r11.mBatteryStatsService
            com.android.internal.os.BatteryStatsImpl r2 = r0.getActiveStatistics()
            monitor-enter(r2)
            r2.noteCurrentTimeChangedLocked()     // Catch:{ all -> 0x0478 }
            monitor-exit(r2)     // Catch:{ all -> 0x0478 }
            r46 = r4
            r10 = r5
            r2 = r7
            r9 = r8
            r15 = 1
            r36 = 1073741824(0x40000000, float:2.0)
            r8 = r6
            goto L_0x0839
        L_0x0478:
            r0 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x0478 }
            throw r0
        L_0x047b:
            com.android.server.am.ActivityManagerService$MainHandler r0 = r11.mHandler
            r0.sendEmptyMessage(r1)
            r46 = r4
            r10 = r5
            r2 = r7
            r9 = r8
            r15 = 1
            r36 = 1073741824(0x40000000, float:2.0)
            r8 = r6
            goto L_0x0839
        L_0x048b:
            android.net.Uri r0 = r5.getData()
            if (r0 == 0) goto L_0x04b3
            java.lang.String r1 = r0.getSchemeSpecificPart()
            r2 = r1
            if (r1 == 0) goto L_0x04a8
            com.android.server.wm.ActivityTaskManagerInternal r1 = r11.mAtmInternal
            r1.onPackageDataCleared(r2)
            r46 = r4
            r10 = r5
            r2 = r7
            r9 = r8
            r15 = 1
            r36 = 1073741824(0x40000000, float:2.0)
            r8 = r6
            goto L_0x0839
        L_0x04a8:
            r46 = r4
            r10 = r5
            r2 = r7
            r9 = r8
            r15 = 1
            r36 = 1073741824(0x40000000, float:2.0)
            r8 = r6
            goto L_0x0839
        L_0x04b3:
            r46 = r4
            r10 = r5
            r2 = r7
            r9 = r8
            r15 = 1
            r36 = 1073741824(0x40000000, float:2.0)
            r8 = r6
            goto L_0x0839
        L_0x04be:
            r36 = 1073741824(0x40000000, float:2.0)
            android.net.Uri r1 = r5.getData()
            if (r1 == 0) goto L_0x051c
            java.lang.String r0 = r1.getSchemeSpecificPart()
            r53 = r0
            if (r0 == 0) goto L_0x050d
            java.lang.String r0 = "android.intent.extra.REPLACING"
            boolean r7 = r5.getBooleanExtra(r0, r3)
            com.android.server.wm.ActivityTaskManagerInternal r0 = r11.mAtmInternal
            r2 = r53
            r0.onPackageAdded(r2, r7)
            android.content.pm.IPackageManager r0 = android.app.AppGlobals.getPackageManager()     // Catch:{ RemoteException -> 0x04ff }
            r53 = r1
            r1 = 1024(0x400, float:1.435E-42)
            android.content.pm.ApplicationInfo r0 = r0.getApplicationInfo(r2, r1, r3)     // Catch:{ RemoteException -> 0x04fb }
            com.android.server.am.BatteryStatsService r1 = r11.mBatteryStatsService     // Catch:{ RemoteException -> 0x04fb }
            if (r0 == 0) goto L_0x04f3
            r24 = r4
            long r3 = r0.longVersionCode     // Catch:{ RemoteException -> 0x04f1 }
            goto L_0x04f7
        L_0x04f1:
            r0 = move-exception
            goto L_0x0504
        L_0x04f3:
            r24 = r4
            r3 = 0
        L_0x04f7:
            r1.notePackageInstalled(r2, r3)     // Catch:{ RemoteException -> 0x04f1 }
            goto L_0x0504
        L_0x04fb:
            r0 = move-exception
            r24 = r4
            goto L_0x0504
        L_0x04ff:
            r0 = move-exception
            r53 = r1
            r24 = r4
        L_0x0504:
            r10 = r5
            r9 = r8
            r46 = r24
            r2 = -1
            r15 = 1
            r8 = r6
            goto L_0x0839
        L_0x050d:
            r2 = r53
            r53 = r1
            r24 = r4
            r10 = r5
            r9 = r8
            r46 = r24
            r2 = -1
            r15 = 1
            r8 = r6
            goto L_0x0839
        L_0x051c:
            r53 = r1
            r24 = r4
            r10 = r5
            r9 = r8
            r46 = r24
            r2 = -1
            r15 = 1
            r8 = r6
            goto L_0x0839
        L_0x0529:
            r24 = r4
            r36 = 1073741824(0x40000000, float:2.0)
            android.net.Uri r1 = r5.getData()
            if (r1 == 0) goto L_0x0595
            java.lang.String r0 = r1.getSchemeSpecificPart()
            r2 = r0
            if (r0 == 0) goto L_0x058b
            r3 = 0
            android.content.pm.IPackageManager r0 = android.app.AppGlobals.getPackageManager()     // Catch:{ RemoteException -> 0x0547 }
            r4 = 1024(0x400, float:1.435E-42)
            android.content.pm.ApplicationInfo r0 = r0.getApplicationInfo(r2, r4, r8)     // Catch:{ RemoteException -> 0x0547 }
            r3 = r0
            goto L_0x0548
        L_0x0547:
            r0 = move-exception
        L_0x0548:
            if (r3 != 0) goto L_0x056b
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r4 = "Dropping ACTION_PACKAGE_REPLACED for non-existent pkg: ssp="
            r0.append(r4)
            r0.append(r2)
            java.lang.String r4 = " data="
            r0.append(r4)
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            java.lang.String r4 = "ActivityManager"
            android.util.Slog.w(r4, r0)
            r4 = 0
            return r4
        L_0x056b:
            r4 = 0
            r11.updateAssociationForApp(r3)
            com.android.server.wm.ActivityTaskManagerInternal r0 = r11.mAtmInternal
            r0.onPackageReplaced(r3)
            com.android.server.am.ActiveServices r0 = r11.mServices
            r0.updateServiceApplicationInfoLocked(r3)
            r7 = 1
            java.lang.String[] r0 = new java.lang.String[r7]
            r0[r4] = r2
            r4 = 3
            r11.sendPackageBroadcastLocked(r4, r0, r8)
            r10 = r5
            r15 = r7
            r9 = r8
            r46 = r24
            r2 = -1
            r8 = r6
            goto L_0x0839
        L_0x058b:
            r7 = 1
            r10 = r5
            r15 = r7
            r9 = r8
            r46 = r24
            r2 = -1
            r8 = r6
            goto L_0x0839
        L_0x0595:
            r7 = 1
            r10 = r5
            r15 = r7
            r9 = r8
            r46 = r24
            r2 = -1
            r8 = r6
            goto L_0x0839
        L_0x059f:
            r24 = r4
            r4 = 3
            r7 = 1
            r36 = 1073741824(0x40000000, float:2.0)
            java.lang.String r0 = "android.permission.BROADCAST_PACKAGE_REMOVED"
            r1 = -1
            int r0 = checkComponentPermission(r0, r13, r6, r1, r7)
            if (r0 != 0) goto L_0x07f3
            int r0 = r24.hashCode()
            switch(r0) {
                case -1749672628: goto L_0x0604;
                case -1403934493: goto L_0x05f7;
                case -1338021860: goto L_0x05ea;
                case -1001645458: goto L_0x05dd;
                case 172491798: goto L_0x05d2;
                case 525384130: goto L_0x05c5;
                case 1290767157: goto L_0x05b8;
                default: goto L_0x05b5;
            }
        L_0x05b5:
            r7 = r24
            goto L_0x0611
        L_0x05b8:
            java.lang.String r0 = "android.intent.action.PACKAGES_UNSUSPENDED"
            r7 = r24
            boolean r0 = r7.equals(r0)
            if (r0 == 0) goto L_0x0611
            r18 = 6
            goto L_0x0613
        L_0x05c5:
            r7 = r24
            java.lang.String r0 = "android.intent.action.PACKAGE_REMOVED"
            boolean r0 = r7.equals(r0)
            if (r0 == 0) goto L_0x0611
            r18 = r4
            goto L_0x0613
        L_0x05d2:
            r7 = r24
            java.lang.String r0 = "android.intent.action.PACKAGE_CHANGED"
            boolean r0 = r7.equals(r0)
            if (r0 == 0) goto L_0x0611
            goto L_0x0613
        L_0x05dd:
            r7 = r24
            java.lang.String r0 = "android.intent.action.PACKAGES_SUSPENDED"
            boolean r0 = r7.equals(r0)
            if (r0 == 0) goto L_0x0611
            r18 = 5
            goto L_0x0613
        L_0x05ea:
            r7 = r24
            java.lang.String r0 = "android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE"
            boolean r0 = r7.equals(r0)
            if (r0 == 0) goto L_0x0611
            r18 = r19
            goto L_0x0613
        L_0x05f7:
            r7 = r24
            java.lang.String r0 = "android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE"
            boolean r0 = r7.equals(r0)
            if (r0 == 0) goto L_0x0611
            r18 = 1
            goto L_0x0613
        L_0x0604:
            r7 = r24
            java.lang.String r0 = "android.intent.action.UID_REMOVED"
            boolean r0 = r7.equals(r0)
            if (r0 == 0) goto L_0x0611
            r18 = 0
            goto L_0x0613
        L_0x0611:
            r18 = -1
        L_0x0613:
            switch(r18) {
                case 0: goto L_0x07d7;
                case 1: goto L_0x0771;
                case 2: goto L_0x0760;
                case 3: goto L_0x0644;
                case 4: goto L_0x0644;
                case 5: goto L_0x061e;
                case 6: goto L_0x061e;
                default: goto L_0x0616;
            }
        L_0x0616:
            r10 = r5
            r46 = r7
            r9 = r8
            r2 = -1
            r15 = 1
            goto L_0x07f0
        L_0x061e:
            java.lang.String r0 = r5.getAction()
            java.lang.String r1 = "android.intent.action.PACKAGES_SUSPENDED"
            boolean r0 = r1.equals(r0)
            java.lang.String r1 = "android.intent.extra.changed_package_list"
            java.lang.String[] r1 = r5.getStringArrayExtra(r1)
            r2 = -10000(0xffffffffffffd8f0, float:NaN)
            java.lang.String r3 = "android.intent.extra.user_handle"
            int r2 = r5.getIntExtra(r3, r2)
            com.android.server.wm.ActivityTaskManagerInternal r3 = r11.mAtmInternal
            r3.onPackagesSuspendedChanged(r1, r0, r2)
            r10 = r5
            r46 = r7
            r9 = r8
            r2 = -1
            r15 = 1
            goto L_0x07f0
        L_0x0644:
            android.net.Uri r0 = r5.getData()
            if (r0 == 0) goto L_0x0754
            java.lang.String r1 = r0.getSchemeSpecificPart()
            r4 = r1
            if (r1 == 0) goto L_0x0747
            java.lang.String r1 = "android.intent.action.PACKAGE_REMOVED"
            boolean r16 = r1.equals(r7)
            java.lang.String r1 = "android.intent.extra.REPLACING"
            r3 = 0
            boolean r24 = r5.getBooleanExtra(r1, r3)
            java.lang.String r1 = "android.intent.extra.DONT_KILL_APP"
            boolean r1 = r5.getBooleanExtra(r1, r3)
            r17 = 1
            r1 = r1 ^ 1
            r25 = r1
            if (r16 == 0) goto L_0x0673
            if (r24 != 0) goto L_0x0673
            r1 = r17
            goto L_0x0674
        L_0x0673:
            r1 = r3
        L_0x0674:
            r26 = r1
            if (r16 == 0) goto L_0x0705
            if (r25 == 0) goto L_0x06ba
            java.lang.String r1 = "android.intent.extra.UID"
            r2 = -1
            int r1 = r5.getIntExtra(r1, r2)
            int r18 = android.os.UserHandle.getAppId(r1)
            r20 = 0
            r21 = 1
            r22 = 1
            r27 = 0
            if (r16 == 0) goto L_0x0694
            java.lang.String r1 = "pkg removed"
            goto L_0x0697
        L_0x0694:
            java.lang.String r1 = "pkg changed"
        L_0x0697:
            r28 = r1
            r1 = r50
            r29 = r2
            r2 = r4
            r3 = r18
            r44 = r4
            r4 = r20
            r45 = r5
            r5 = r21
            r6 = r22
            r46 = r7
            r7 = r27
            r53 = r8
            r8 = r26
            r9 = r53
            r10 = r28
            r1.forceStopPackageLocked(r2, r3, r4, r5, r6, r7, r8, r9, r10)
            goto L_0x06c2
        L_0x06ba:
            r44 = r4
            r45 = r5
            r46 = r7
            r53 = r8
        L_0x06c2:
            if (r25 == 0) goto L_0x06c7
            r19 = 0
            goto L_0x06c8
        L_0x06c7:
        L_0x06c8:
            r1 = r19
            r10 = 1
            java.lang.String[] r2 = new java.lang.String[r10]
            r3 = r44
            r9 = 0
            r2[r9] = r3
            r8 = r53
            r11.sendPackageBroadcastLocked(r1, r2, r8)
            if (r26 == 0) goto L_0x0701
            com.android.server.appop.AppOpsService r2 = r11.mAppOpsService
            java.lang.String r4 = "android.intent.extra.UID"
            r7 = r45
            r6 = -1
            int r4 = r7.getIntExtra(r4, r6)
            r2.packageRemoved(r4, r3)
            com.android.server.uri.UriGrantsManagerInternal r2 = r11.mUgmInternal
            r2.removeUriPermissionsForPackage(r3, r8, r10, r9)
            com.android.server.wm.ActivityTaskManagerInternal r2 = r11.mAtmInternal
            r2.removeRecentTasksByPackageName(r3, r8)
            com.android.server.am.ActiveServices r2 = r11.mServices
            r2.forceStopPackageLocked(r3, r8)
            com.android.server.wm.ActivityTaskManagerInternal r2 = r11.mAtmInternal
            r2.onPackageUninstalled(r3)
            com.android.server.am.BatteryStatsService r2 = r11.mBatteryStatsService
            r2.notePackageUninstalled(r3)
            goto L_0x0704
        L_0x0701:
            r7 = r45
            r6 = -1
        L_0x0704:
            goto L_0x0741
        L_0x0705:
            r9 = r3
            r3 = r4
            r46 = r7
            r10 = r17
            r6 = -1
            r7 = r5
            if (r25 == 0) goto L_0x0737
            java.lang.String r1 = "android.intent.extra.UID"
            int r1 = r7.getIntExtra(r1, r6)
            com.android.server.am.ProcessList r2 = r11.mProcessList
            int r19 = android.os.UserHandle.getAppId(r1)
            r21 = -10000(0xffffffffffffd8f0, float:NaN)
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            r4.<init>()
            java.lang.String r5 = "change "
            r4.append(r5)
            r4.append(r3)
            java.lang.String r22 = r4.toString()
            r17 = r2
            r18 = r3
            r20 = r8
            r17.killPackageProcessesLocked(r18, r19, r20, r21, r22)
        L_0x0737:
            java.lang.String r1 = "android.intent.extra.changed_component_name_list"
            java.lang.String[] r1 = r7.getStringArrayExtra(r1)
            r11.cleanupDisabledPackageComponentsLocked(r3, r8, r1)
        L_0x0741:
            r2 = r6
            r9 = r8
            r15 = r10
            r10 = r7
            goto L_0x07f0
        L_0x0747:
            r3 = r4
            r46 = r7
            r6 = -1
            r9 = 0
            r10 = 1
            r7 = r5
            r2 = r6
            r9 = r8
            r15 = r10
            r10 = r7
            goto L_0x07f0
        L_0x0754:
            r46 = r7
            r6 = -1
            r9 = 0
            r10 = 1
            r7 = r5
            r2 = r6
            r9 = r8
            r15 = r10
            r10 = r7
            goto L_0x07f0
        L_0x0760:
            r46 = r7
            r6 = -1
            r9 = 0
            r10 = 1
            r7 = r5
            com.android.server.wm.ActivityTaskManagerInternal r0 = r11.mAtmInternal
            r0.cleanupRecentTasksForUser(r6)
            r2 = r6
            r9 = r8
            r15 = r10
            r10 = r7
            goto L_0x07f0
        L_0x0771:
            r46 = r7
            r6 = -1
            r9 = 0
            r10 = 1
            r7 = r5
            java.lang.String r0 = "android.intent.extra.changed_package_list"
            java.lang.String[] r0 = r7.getStringArrayExtra(r0)
            if (r0 == 0) goto L_0x07cf
            int r1 = r0.length
            if (r1 <= 0) goto L_0x07cf
            r1 = 0
            r5 = r1
        L_0x0784:
            int r1 = r0.length
            if (r5 >= r1) goto L_0x07ba
            r2 = r0[r5]
            r3 = -1
            r4 = 0
            r16 = 1
            r17 = 1
            r18 = 0
            r19 = 0
            java.lang.String r20 = "storage unmount"
            r1 = r50
            r21 = r5
            r5 = r16
            r6 = r17
            r49 = r7
            r7 = r18
            r53 = r8
            r8 = r19
            r9 = r53
            r15 = r10
            r10 = r20
            r1.forceStopPackageLocked(r2, r3, r4, r5, r6, r7, r8, r9, r10)
            int r5 = r21 + 1
            r8 = r53
            r10 = r15
            r7 = r49
            r6 = -1
            r9 = 0
            r15 = r51
            goto L_0x0784
        L_0x07ba:
            r21 = r5
            r49 = r7
            r53 = r8
            r15 = r10
            com.android.server.wm.ActivityTaskManagerInternal r1 = r11.mAtmInternal
            r2 = -1
            r1.cleanupRecentTasksForUser(r2)
            r9 = r53
            r11.sendPackageBroadcastLocked(r15, r0, r9)
            r10 = r49
            goto L_0x07f0
        L_0x07cf:
            r2 = r6
            r49 = r7
            r9 = r8
            r15 = r10
            r10 = r49
            goto L_0x07f0
        L_0x07d7:
            r49 = r5
            r46 = r7
            r9 = r8
            r2 = -1
            r15 = 1
            r10 = r49
            int r0 = r11.getUidFromIntent(r10)
            if (r0 < 0) goto L_0x07f0
            com.android.server.am.BatteryStatsService r1 = r11.mBatteryStatsService
            r1.removeUid(r0)
            com.android.server.appop.AppOpsService r1 = r11.mAppOpsService
            r1.uidRemoved(r0)
        L_0x07f0:
            r8 = r65
            goto L_0x0839
        L_0x07f3:
            r10 = r5
            r9 = r8
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "Permission Denial: "
            r0.append(r1)
            java.lang.String r1 = r10.getAction()
            r0.append(r1)
            java.lang.String r1 = " broadcast from "
            r0.append(r1)
            r0.append(r14)
            java.lang.String r1 = " (pid="
            r0.append(r1)
            r0.append(r13)
            java.lang.String r1 = ", uid="
            r0.append(r1)
            r8 = r65
            r0.append(r8)
            java.lang.String r1 = ") requires "
            r0.append(r1)
            java.lang.String r1 = "android.permission.BROADCAST_PACKAGE_REMOVED"
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            java.lang.String r1 = "ActivityManager"
            android.util.Slog.w(r1, r0)
            java.lang.SecurityException r1 = new java.lang.SecurityException
            r1.<init>(r0)
            throw r1
        L_0x0839:
            java.lang.String r0 = "android.intent.action.PACKAGE_ADDED"
            r7 = r46
            boolean r0 = r0.equals(r7)
            if (r0 != 0) goto L_0x0853
            java.lang.String r0 = "android.intent.action.PACKAGE_REMOVED"
            boolean r0 = r0.equals(r7)
            if (r0 != 0) goto L_0x0853
            java.lang.String r0 = "android.intent.action.PACKAGE_REPLACED"
            boolean r0 = r0.equals(r7)
            if (r0 == 0) goto L_0x0864
        L_0x0853:
            int r0 = r11.getUidFromIntent(r10)
            if (r0 == r2) goto L_0x0864
            com.android.server.am.ProcessList r1 = r11.mProcessList
            com.android.server.am.UidRecord r1 = r1.getUidRecordLocked(r0)
            if (r1 == 0) goto L_0x0864
            r1.updateHasInternetPermission()
        L_0x0864:
            r42 = r23
            goto L_0x0871
        L_0x0867:
            r10 = r5
            r2 = r7
            r9 = r8
            r15 = 1
            r36 = 1073741824(0x40000000, float:2.0)
            r7 = r4
            r8 = r6
            r42 = r23
        L_0x0871:
            if (r63 == 0) goto L_0x098f
            java.lang.String r0 = "android.permission.BROADCAST_STICKY"
            int r0 = r11.checkPermission(r0, r13, r8)
            if (r0 != 0) goto L_0x095e
            r6 = r13
            r13 = r59
            if (r13 == 0) goto L_0x08a6
            int r0 = r13.length
            if (r0 <= 0) goto L_0x08a6
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "Can't broadcast sticky intent "
            r0.append(r1)
            r0.append(r10)
            java.lang.String r1 = " and enforce permissions "
            r0.append(r1)
            java.lang.String r1 = java.util.Arrays.toString(r59)
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            java.lang.String r1 = "ActivityManager"
            android.util.Slog.w(r1, r0)
            return r2
        L_0x08a6:
            android.content.ComponentName r0 = r10.getComponent()
            if (r0 != 0) goto L_0x0956
            if (r9 == r2) goto L_0x08fe
            android.util.SparseArray<android.util.ArrayMap<java.lang.String, java.util.ArrayList<android.content.Intent>>> r0 = r11.mStickyBroadcasts
            java.lang.Object r0 = r0.get(r2)
            android.util.ArrayMap r0 = (android.util.ArrayMap) r0
            if (r0 == 0) goto L_0x08fe
            java.lang.String r1 = r10.getAction()
            java.lang.Object r1 = r0.get(r1)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            if (r1 == 0) goto L_0x08fe
            int r3 = r1.size()
            r4 = 0
        L_0x08c9:
            if (r4 >= r3) goto L_0x08fe
            java.lang.Object r5 = r1.get(r4)
            android.content.Intent r5 = (android.content.Intent) r5
            boolean r5 = r10.filterEquals(r5)
            if (r5 != 0) goto L_0x08da
            int r4 = r4 + 1
            goto L_0x08c9
        L_0x08da:
            java.lang.IllegalArgumentException r2 = new java.lang.IllegalArgumentException
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r15 = "Sticky broadcast "
            r5.append(r15)
            r5.append(r10)
            java.lang.String r15 = " for user "
            r5.append(r15)
            r5.append(r9)
            java.lang.String r15 = " conflicts with existing global broadcast"
            r5.append(r15)
            java.lang.String r5 = r5.toString()
            r2.<init>(r5)
            throw r2
        L_0x08fe:
            android.util.SparseArray<android.util.ArrayMap<java.lang.String, java.util.ArrayList<android.content.Intent>>> r0 = r11.mStickyBroadcasts
            java.lang.Object r0 = r0.get(r9)
            android.util.ArrayMap r0 = (android.util.ArrayMap) r0
            if (r0 != 0) goto L_0x0913
            android.util.ArrayMap r1 = new android.util.ArrayMap
            r1.<init>()
            r0 = r1
            android.util.SparseArray<android.util.ArrayMap<java.lang.String, java.util.ArrayList<android.content.Intent>>> r1 = r11.mStickyBroadcasts
            r1.put(r9, r0)
        L_0x0913:
            java.lang.String r1 = r10.getAction()
            java.lang.Object r1 = r0.get(r1)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            if (r1 != 0) goto L_0x092c
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r1 = r3
            java.lang.String r3 = r10.getAction()
            r0.put(r3, r1)
        L_0x092c:
            int r3 = r1.size()
            r4 = 0
        L_0x0931:
            if (r4 >= r3) goto L_0x094b
            java.lang.Object r5 = r1.get(r4)
            android.content.Intent r5 = (android.content.Intent) r5
            boolean r5 = r10.filterEquals(r5)
            if (r5 == 0) goto L_0x0948
            android.content.Intent r5 = new android.content.Intent
            r5.<init>(r10)
            r1.set(r4, r5)
            goto L_0x094b
        L_0x0948:
            int r4 = r4 + 1
            goto L_0x0931
        L_0x094b:
            if (r4 < r3) goto L_0x0992
            android.content.Intent r5 = new android.content.Intent
            r5.<init>(r10)
            r1.add(r5)
            goto L_0x0992
        L_0x0956:
            java.lang.SecurityException r0 = new java.lang.SecurityException
            java.lang.String r1 = "Sticky broadcasts can't target a specific component"
            r0.<init>(r1)
            throw r0
        L_0x095e:
            r6 = r13
            r13 = r59
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "Permission Denial: broadcastIntent() requesting a sticky broadcast from pid="
            r0.append(r1)
            r0.append(r6)
            java.lang.String r1 = ", uid="
            r0.append(r1)
            r0.append(r8)
            java.lang.String r1 = " requires "
            r0.append(r1)
            java.lang.String r1 = "android.permission.BROADCAST_STICKY"
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            java.lang.String r1 = "ActivityManager"
            android.util.Slog.w(r1, r0)
            java.lang.SecurityException r1 = new java.lang.SecurityException
            r1.<init>(r0)
            throw r1
        L_0x098f:
            r6 = r13
            r13 = r59
        L_0x0992:
            if (r9 != r2) goto L_0x099d
            com.android.server.am.UserController r0 = r11.mUserController
            int[] r0 = r0.getStartedUserArray()
            r4 = r0
            r5 = 0
            goto L_0x09a3
        L_0x099d:
            int[] r0 = new int[r15]
            r5 = 0
            r0[r5] = r9
            r4 = r0
        L_0x09a3:
            r0 = 0
            r1 = 0
            int r3 = r10.getFlags()
            r3 = r3 & r36
            if (r3 != 0) goto L_0x09b4
            r12 = r54
            java.util.List r0 = r11.collectReceiverComponents(r10, r12, r8, r4)
            goto L_0x09b6
        L_0x09b4:
            r12 = r54
        L_0x09b6:
            android.content.ComponentName r3 = r10.getComponent()
            if (r3 != 0) goto L_0x09f9
            if (r9 != r2) goto L_0x09ef
            r2 = 2000(0x7d0, float:2.803E-42)
            if (r8 != r2) goto L_0x09ef
            r2 = 0
        L_0x09c3:
            int r3 = r4.length
            if (r2 >= r3) goto L_0x09eb
            com.android.server.am.UserController r3 = r11.mUserController
            r15 = r4[r2]
            java.lang.String r5 = "no_debugging_features"
            boolean r3 = r3.hasUserRestriction(r5, r15)
            if (r3 == 0) goto L_0x09d4
            goto L_0x09e6
        L_0x09d4:
            com.android.server.IntentResolver<com.android.server.am.BroadcastFilter, com.android.server.am.BroadcastFilter> r3 = r11.mReceiverResolver
            r5 = r4[r2]
            r15 = 0
            java.util.List r3 = r3.queryIntent(r10, r12, r15, r5)
            if (r1 != 0) goto L_0x09e1
            r1 = r3
            goto L_0x09e6
        L_0x09e1:
            if (r3 == 0) goto L_0x09e6
            r1.addAll(r3)
        L_0x09e6:
            int r2 = r2 + 1
            r5 = 0
            r15 = 1
            goto L_0x09c3
        L_0x09eb:
            r44 = r1
            r15 = 0
            goto L_0x09fc
        L_0x09ef:
            com.android.server.IntentResolver<com.android.server.am.BroadcastFilter, com.android.server.am.BroadcastFilter> r2 = r11.mReceiverResolver
            r15 = 0
            java.util.List r1 = r2.queryIntent(r10, r12, r15, r9)
            r44 = r1
            goto L_0x09fc
        L_0x09f9:
            r15 = r5
            r44 = r1
        L_0x09fc:
            int r1 = r10.getFlags()
            r2 = 536870912(0x20000000, float:1.0842022E-19)
            r1 = r1 & r2
            if (r1 == 0) goto L_0x0a08
            r1 = 1
            goto L_0x0a09
        L_0x0a08:
            r1 = r15
        L_0x0a09:
            r45 = r1
            if (r44 == 0) goto L_0x0a12
            int r3 = r44.size()
            goto L_0x0a13
        L_0x0a12:
            r3 = r15
        L_0x0a13:
            r46 = r3
            if (r62 != 0) goto L_0x0a8c
            if (r46 <= 0) goto L_0x0a8c
            if (r41 == 0) goto L_0x0a34
            r1 = r50
            r2 = r10
            r3 = r51
            r47 = r4
            r4 = r52
            r48 = r15
            r5 = r65
            r6 = r39
            r49 = r7
            r7 = r44
            r8 = r59
            r1.checkBroadcastFromSystem(r2, r3, r4, r5, r6, r7, r8)
            goto L_0x0a3a
        L_0x0a34:
            r47 = r4
            r49 = r7
            r48 = r15
        L_0x0a3a:
            com.android.server.am.BroadcastQueue r1 = r11.broadcastQueueForIntent(r10)
            r13 = r1
            com.android.server.am.BroadcastRecord r2 = new com.android.server.am.BroadcastRecord
            r12 = r2
            r31 = 0
            r14 = r10
            r3 = 1
            r15 = r51
            r16 = r52
            r17 = r64
            r18 = r65
            r19 = r35
            r20 = r54
            r21 = r59
            r22 = r60
            r23 = r37
            r24 = r44
            r25 = r55
            r26 = r56
            r27 = r57
            r28 = r58
            r29 = r62
            r30 = r63
            r32 = r9
            r33 = r38
            r34 = r42
            r12.<init>(r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34)
            if (r45 == 0) goto L_0x0a79
            com.android.server.am.BroadcastRecord r4 = r1.replaceParallelBroadcastLocked(r2)
            if (r4 == 0) goto L_0x0a79
            r4 = r3
            goto L_0x0a7b
        L_0x0a79:
            r4 = r48
        L_0x0a7b:
            if (r4 != 0) goto L_0x0a83
            r1.enqueueParallelBroadcastLocked(r2)
            r1.scheduleBroadcastsLocked()
        L_0x0a83:
            r44 = 0
            r46 = 0
            r14 = r44
            r15 = r46
            goto L_0x0a97
        L_0x0a8c:
            r47 = r4
            r49 = r7
            r48 = r15
            r3 = 1
            r14 = r44
            r15 = r46
        L_0x0a97:
            r1 = 0
            if (r0 == 0) goto L_0x0b4e
            r2 = 0
            java.lang.String r4 = r10.getAction()
            java.lang.String r5 = "android.intent.action.PACKAGE_ADDED"
            boolean r4 = r5.equals(r4)
            if (r4 != 0) goto L_0x0ad3
            java.lang.String r4 = r10.getAction()
            java.lang.String r5 = "android.intent.action.PACKAGE_RESTARTED"
            boolean r4 = r5.equals(r4)
            if (r4 != 0) goto L_0x0ad3
            java.lang.String r4 = r10.getAction()
            java.lang.String r5 = "android.intent.action.PACKAGE_DATA_CLEARED"
            boolean r4 = r5.equals(r4)
            if (r4 == 0) goto L_0x0ac0
            goto L_0x0ad3
        L_0x0ac0:
            java.lang.String r4 = r10.getAction()
            java.lang.String r5 = "android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE"
            boolean r4 = r5.equals(r4)
            if (r4 == 0) goto L_0x0ae4
            java.lang.String r4 = "android.intent.extra.changed_package_list"
            java.lang.String[] r2 = r10.getStringArrayExtra(r4)
            goto L_0x0ae5
        L_0x0ad3:
            android.net.Uri r4 = r10.getData()
            if (r4 == 0) goto L_0x0ae4
            java.lang.String r5 = r4.getSchemeSpecificPart()
            if (r5 == 0) goto L_0x0ae4
            java.lang.String[] r6 = new java.lang.String[r3]
            r6[r48] = r5
            r2 = r6
        L_0x0ae4:
        L_0x0ae5:
            if (r2 == 0) goto L_0x0b16
            int r4 = r2.length
            if (r4 <= 0) goto L_0x0b16
            int r4 = r2.length
            r5 = r48
        L_0x0aed:
            if (r5 >= r4) goto L_0x0b16
            r6 = r2[r5]
            if (r6 == 0) goto L_0x0b13
            int r7 = r0.size()
            r8 = 0
        L_0x0af8:
            if (r8 >= r7) goto L_0x0b13
            java.lang.Object r12 = r0.get(r8)
            android.content.pm.ResolveInfo r12 = (android.content.pm.ResolveInfo) r12
            android.content.pm.ActivityInfo r13 = r12.activityInfo
            java.lang.String r13 = r13.packageName
            boolean r13 = r13.equals(r6)
            if (r13 == 0) goto L_0x0b11
            r0.remove(r8)
            int r8 = r8 + -1
            int r7 = r7 + -1
        L_0x0b11:
            int r8 = r8 + r3
            goto L_0x0af8
        L_0x0b13:
            int r5 = r5 + 1
            goto L_0x0aed
        L_0x0b16:
            int r3 = r0.size()
            r4 = 0
            r5 = 0
            r6 = 0
        L_0x0b1d:
            if (r4 >= r3) goto L_0x0b4a
            if (r1 >= r15) goto L_0x0b4a
            if (r5 != 0) goto L_0x0b2a
            java.lang.Object r7 = r0.get(r4)
            r5 = r7
            android.content.pm.ResolveInfo r5 = (android.content.pm.ResolveInfo) r5
        L_0x0b2a:
            if (r6 != 0) goto L_0x0b33
            java.lang.Object r7 = r14.get(r1)
            r6 = r7
            com.android.server.am.BroadcastFilter r6 = (com.android.server.am.BroadcastFilter) r6
        L_0x0b33:
            int r7 = r6.getPriority()
            int r8 = r5.priority
            if (r7 < r8) goto L_0x0b46
            r0.add(r4, r6)
            int r1 = r1 + 1
            r6 = 0
            int r4 = r4 + 1
            int r3 = r3 + 1
            goto L_0x0b1d
        L_0x0b46:
            int r4 = r4 + 1
            r5 = 0
            goto L_0x0b1d
        L_0x0b4a:
            r43 = r0
            r12 = r1
            goto L_0x0b51
        L_0x0b4e:
            r43 = r0
            r12 = r1
        L_0x0b51:
            if (r12 >= r15) goto L_0x0b6b
            if (r43 != 0) goto L_0x0b5d
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r43 = r0
            goto L_0x0b5f
        L_0x0b5d:
            r0 = r43
        L_0x0b5f:
            java.lang.Object r1 = r14.get(r12)
            r0.add(r1)
            int r12 = r12 + 1
            r43 = r0
            goto L_0x0b51
        L_0x0b6b:
            if (r41 == 0) goto L_0x0b7f
            r1 = r50
            r2 = r10
            r3 = r51
            r4 = r52
            r5 = r65
            r6 = r39
            r7 = r43
            r8 = r59
            r1.checkBroadcastFromSystem(r2, r3, r4, r5, r6, r7, r8)
        L_0x0b7f:
            if (r43 == 0) goto L_0x0b87
            int r0 = r43.size()
            if (r0 > 0) goto L_0x0b89
        L_0x0b87:
            if (r55 == 0) goto L_0x0c1a
        L_0x0b89:
            com.android.server.am.BroadcastQueue r1 = r11.broadcastQueueForIntent(r10)
            r13 = r1
            com.android.server.am.BroadcastRecord r0 = new com.android.server.am.BroadcastRecord
            r8 = r12
            r12 = r0
            r31 = 0
            r44 = r14
            r14 = r10
            r46 = r15
            r15 = r51
            r16 = r52
            r17 = r64
            r18 = r65
            r19 = r35
            r20 = r54
            r21 = r59
            r22 = r60
            r23 = r37
            r24 = r43
            r25 = r55
            r26 = r56
            r27 = r57
            r28 = r58
            r29 = r62
            r30 = r63
            r32 = r9
            r33 = r38
            r34 = r42
            r12.<init>(r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34)
            r2 = r0
            if (r45 == 0) goto L_0x0bca
            com.android.server.am.BroadcastRecord r0 = r1.replaceOrderedBroadcastLocked(r2)
            goto L_0x0bcb
        L_0x0bca:
            r0 = 0
        L_0x0bcb:
            r3 = r0
            if (r3 == 0) goto L_0x0c13
            android.content.IIntentReceiver r0 = r3.resultTo
            if (r0 == 0) goto L_0x0c19
            android.content.Intent r0 = r3.intent
            com.android.server.am.BroadcastQueue r4 = r11.broadcastQueueForIntent(r0)
            com.android.server.am.ProcessRecord r13 = r3.callerApp     // Catch:{ RemoteException -> 0x0bf1 }
            android.content.IIntentReceiver r14 = r3.resultTo     // Catch:{ RemoteException -> 0x0bf1 }
            android.content.Intent r15 = r3.intent     // Catch:{ RemoteException -> 0x0bf1 }
            r16 = 0
            r17 = 0
            r18 = 0
            r19 = 0
            r20 = 0
            int r0 = r3.userId     // Catch:{ RemoteException -> 0x0bf1 }
            r12 = r4
            r21 = r0
            r12.performReceiveLocked(r13, r14, r15, r16, r17, r18, r19, r20, r21)     // Catch:{ RemoteException -> 0x0bf1 }
            goto L_0x0c12
        L_0x0bf1:
            r0 = move-exception
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r6 = "Failure ["
            r5.append(r6)
            java.lang.String r6 = r1.mQueueName
            r5.append(r6)
            java.lang.String r6 = "] sending broadcast result of "
            r5.append(r6)
            r5.append(r10)
            java.lang.String r5 = r5.toString()
            java.lang.String r6 = "ActivityManager"
            android.util.Slog.w(r6, r5, r0)
        L_0x0c12:
            goto L_0x0c19
        L_0x0c13:
            r1.enqueueOrderedBroadcastLocked(r2)
            r1.scheduleBroadcastsLocked()
        L_0x0c19:
            goto L_0x0c42
        L_0x0c1a:
            r8 = r12
            r44 = r14
            r46 = r15
            android.content.ComponentName r0 = r10.getComponent()
            if (r0 != 0) goto L_0x0c42
            java.lang.String r0 = r10.getPackage()
            if (r0 != 0) goto L_0x0c42
            int r0 = r10.getFlags()
            r0 = r0 & r36
            if (r0 != 0) goto L_0x0c42
            java.lang.String r2 = r10.getAction()
            r4 = 0
            r5 = 0
            r6 = 0
            r1 = r50
            r3 = r52
            r1.addBroadcastStatLocked(r2, r3, r4, r5, r6)
        L_0x0c42:
            return r48
        L_0x0c43:
            r0 = move-exception
            r48 = r3
            r49 = r4
            r10 = r5
            r9 = r8
            java.lang.String r1 = "ActivityManager"
            java.lang.String r2 = "Remote exception"
            android.util.Slog.w(r1, r2, r0)
            return r48
        L_0x0c52:
            r10 = r4
            java.lang.IllegalArgumentException r0 = new java.lang.IllegalArgumentException
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "Bad appOps #"
            r1.append(r2)
            r2 = r60
            r1.append(r2)
            java.lang.String r3 = " when send Broadcast :"
            r1.append(r3)
            r1.append(r10)
            java.lang.String r1 = r1.toString()
            r0.<init>(r1)
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.broadcastIntentLocked(com.android.server.am.ProcessRecord, java.lang.String, android.content.Intent, java.lang.String, android.content.IIntentReceiver, int, java.lang.String, android.os.Bundle, java.lang.String[], int, android.os.Bundle, boolean, boolean, int, int, int, int, int, boolean):int");
    }

    private int getUidFromIntent(Intent intent) {
        if (intent == null) {
            return -1;
        }
        Bundle intentExtras = intent.getExtras();
        if (intent.hasExtra("android.intent.extra.UID")) {
            return intentExtras.getInt("android.intent.extra.UID");
        }
        return -1;
    }

    /* access modifiers changed from: package-private */
    public final void rotateBroadcastStatsIfNeededLocked() {
        long now = SystemClock.elapsedRealtime();
        BroadcastStats broadcastStats = this.mCurBroadcastStats;
        if (broadcastStats == null || broadcastStats.mStartRealtime + 86400000 < now) {
            this.mLastBroadcastStats = this.mCurBroadcastStats;
            BroadcastStats broadcastStats2 = this.mLastBroadcastStats;
            if (broadcastStats2 != null) {
                broadcastStats2.mEndRealtime = SystemClock.elapsedRealtime();
                this.mLastBroadcastStats.mEndUptime = SystemClock.uptimeMillis();
            }
            this.mCurBroadcastStats = new BroadcastStats();
        }
    }

    /* access modifiers changed from: package-private */
    public final void addBroadcastStatLocked(String action, String srcPackage, int receiveCount, int skipCount, long dispatchTime) {
        rotateBroadcastStatsIfNeededLocked();
        this.mCurBroadcastStats.addBroadcast(action, srcPackage, receiveCount, skipCount, dispatchTime);
    }

    /* access modifiers changed from: package-private */
    public final void addBackgroundCheckViolationLocked(String action, String targetPackage) {
        rotateBroadcastStatsIfNeededLocked();
        this.mCurBroadcastStats.addBackgroundCheckViolation(action, targetPackage);
    }

    /* access modifiers changed from: package-private */
    public final Intent verifyBroadcastLocked(Intent intent) {
        int callingUid;
        if (intent == null || !intent.hasFileDescriptors()) {
            int flags = intent.getFlags();
            if (!this.mProcessesReady && (67108864 & flags) == 0 && (1073741824 & flags) == 0) {
                Slog.e("ActivityManager", "Attempt to launch receivers of broadcast intent " + intent + " before boot completion");
                throw new IllegalStateException("Cannot broadcast before boot completed");
            } else if ((33554432 & flags) == 0) {
                if (!((flags & DumpState.DUMP_CHANGES) == 0 || (callingUid = Binder.getCallingUid()) == 0 || callingUid == NATIVE_DUMP_TIMEOUT_MS)) {
                    Slog.w("ActivityManager", "Removing FLAG_RECEIVER_FROM_SHELL because caller is UID " + Binder.getCallingUid());
                    intent.removeFlags(DumpState.DUMP_CHANGES);
                }
                return intent;
            } else {
                throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 23 */
    public final int broadcastIntent(IApplicationThread caller, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String[] requiredPermissions, int appOp, Bundle bOptions, boolean serialized, boolean sticky, int userId) {
        Intent intent2;
        String str;
        enforceNotIsolatedCaller("broadcastIntent");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                intent2 = intent;
                try {
                    Intent intent3 = verifyBroadcastLocked(intent2);
                    ProcessRecord callerApp = getRecordForAppLocked(caller);
                    int callingPid = Binder.getCallingPid();
                    int callingUid = Binder.getCallingUid();
                    long origId = Binder.clearCallingIdentity();
                    if (callerApp != null) {
                        try {
                            str = callerApp.info.packageName;
                        } catch (Throwable th) {
                            th = th;
                            ProcessRecord processRecord = callerApp;
                        }
                    } else {
                        str = null;
                    }
                    ProcessRecord processRecord2 = callerApp;
                    try {
                        int broadcastIntentLocked = broadcastIntentLocked(callerApp, str, intent3, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermissions, appOp, bOptions, serialized, sticky, callingPid, callingUid, callingUid, callingPid, userId);
                        Binder.restoreCallingIdentity(origId);
                        resetPriorityAfterLockedSection();
                        return broadcastIntentLocked;
                    } catch (Throwable th2) {
                        th = th2;
                        Binder.restoreCallingIdentity(origId);
                        throw th;
                    }
                } catch (Throwable th3) {
                    th = th3;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th4) {
                th = th4;
                intent2 = intent;
                Intent intent4 = intent2;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 23 */
    /* access modifiers changed from: package-private */
    public int broadcastIntentInPackage(String packageName, int uid, int realCallingUid, int realCallingPid, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String requiredPermission, Bundle bOptions, boolean serialized, boolean sticky, int userId, boolean allowBackgroundActivityStarts) {
        Intent intent2;
        long origId;
        String[] requiredPermissions;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                intent2 = intent;
                try {
                    Intent intent3 = verifyBroadcastLocked(intent2);
                    try {
                        origId = Binder.clearCallingIdentity();
                        if (requiredPermission == null) {
                            requiredPermissions = null;
                        } else {
                            requiredPermissions = new String[]{requiredPermission};
                        }
                        int broadcastIntentLocked = broadcastIntentLocked((ProcessRecord) null, packageName, intent3, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermissions, -1, bOptions, serialized, sticky, -1, uid, realCallingUid, realCallingPid, userId, allowBackgroundActivityStarts);
                        Binder.restoreCallingIdentity(origId);
                        resetPriorityAfterLockedSection();
                        return broadcastIntentLocked;
                    } catch (Throwable th) {
                        th = th;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    Intent intent4 = intent2;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th3) {
                th = th3;
                intent2 = intent;
                Intent intent42 = intent2;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 10 */
    public final void unbroadcastIntent(IApplicationThread caller, Intent intent, int userId) {
        if (intent == null || !intent.hasFileDescriptors()) {
            int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 0, "removeStickyBroadcast", (String) null);
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (checkCallingPermission("android.permission.BROADCAST_STICKY") == 0) {
                        ArrayMap<String, ArrayList<Intent>> stickies = this.mStickyBroadcasts.get(userId2);
                        if (stickies != null) {
                            ArrayList<Intent> list = stickies.get(intent.getAction());
                            if (list != null) {
                                int N = list.size();
                                int i = 0;
                                while (true) {
                                    if (i >= N) {
                                        break;
                                    } else if (intent.filterEquals(list.get(i))) {
                                        list.remove(i);
                                        break;
                                    } else {
                                        i++;
                                    }
                                }
                                if (list.size() <= 0) {
                                    stickies.remove(intent.getAction());
                                }
                            }
                            if (stickies.size() <= 0) {
                                this.mStickyBroadcasts.remove(userId2);
                            }
                        }
                    } else {
                        String msg = "Permission Denial: unbroadcastIntent() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.BROADCAST_STICKY";
                        Slog.w("ActivityManager", msg);
                        throw new SecurityException(msg);
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    /* access modifiers changed from: package-private */
    public void backgroundServicesFinishedLocked(int userId) {
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.backgroundServicesFinishedLocked(userId);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 15 */
    public void finishReceiver(IBinder who, int resultCode, String resultData, Bundle resultExtras, boolean resultAbort, int flags) {
        BroadcastQueue queue;
        int i = flags;
        if (resultExtras == null || !resultExtras.hasFileDescriptors()) {
            long origId = Binder.clearCallingIdentity();
            boolean doNext = false;
            try {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        if (isOnOffloadQueue(i)) {
                            queue = this.mOffloadBroadcastQueue;
                        } else {
                            queue = (268435456 & i) != 0 ? this.mFgBroadcastQueue : this.mBgBroadcastQueue;
                        }
                        try {
                            BroadcastRecord r = queue.getMatchingOrderedReceiver(who);
                            if (r != null) {
                                doNext = r.queue.finishReceiverLocked(r, resultCode, resultData, resultExtras, resultAbort, true);
                            }
                            if (doNext) {
                                r.queue.processNextBroadcastLocked(false, true);
                            }
                            trimApplicationsLocked("updateOomAdj_finishReceiver");
                        } catch (Throwable th) {
                            th = th;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                        try {
                            resetPriorityAfterLockedSection();
                            Binder.restoreCallingIdentity(origId);
                        } catch (Throwable th2) {
                            th = th2;
                            Binder.restoreCallingIdentity(origId);
                            throw th;
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        IBinder iBinder = who;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            } catch (Throwable th4) {
                th = th4;
                IBinder iBinder2 = who;
                Binder.restoreCallingIdentity(origId);
                throw th;
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Bundle");
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 30 */
    /* JADX WARNING: Removed duplicated region for block: B:104:0x0211 A[Catch:{ all -> 0x022f }] */
    /* JADX WARNING: Removed duplicated region for block: B:65:0x016d A[Catch:{ all -> 0x0224 }] */
    /* JADX WARNING: Removed duplicated region for block: B:66:0x016f A[Catch:{ all -> 0x0224 }] */
    /* JADX WARNING: Removed duplicated region for block: B:71:0x017d  */
    /* JADX WARNING: Removed duplicated region for block: B:72:0x017f  */
    /* JADX WARNING: Removed duplicated region for block: B:75:0x0184  */
    /* JADX WARNING: Removed duplicated region for block: B:83:0x0195 A[Catch:{ all -> 0x0224 }] */
    /* JADX WARNING: Removed duplicated region for block: B:84:0x0198 A[Catch:{ all -> 0x0224 }] */
    /* JADX WARNING: Removed duplicated region for block: B:90:0x01d3 A[SYNTHETIC, Splitter:B:90:0x01d3] */
    /* JADX WARNING: Removed duplicated region for block: B:99:0x01e8  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean startInstrumentation(android.content.ComponentName r31, java.lang.String r32, int r33, android.os.Bundle r34, android.app.IInstrumentationWatcher r35, android.app.IUiAutomationConnection r36, int r37, java.lang.String r38) {
        /*
            r30 = this;
            r15 = r30
            r14 = r31
            r13 = r34
            r12 = r35
            java.lang.String r0 = "startInstrumentation"
            r15.enforceNotIsolatedCaller(r0)
            int r11 = android.os.Binder.getCallingUid()
            int r10 = android.os.Binder.getCallingPid()
            com.android.server.am.UserController r1 = r15.mUserController
            r5 = 0
            r6 = 2
            java.lang.String r7 = "startInstrumentation"
            r8 = 0
            r2 = r10
            r3 = r11
            r4 = r37
            int r9 = r1.handleIncomingUser(r2, r3, r4, r5, r6, r7, r8)
            if (r13 == 0) goto L_0x0037
            boolean r0 = r34.hasFileDescriptors()
            if (r0 != 0) goto L_0x002f
            goto L_0x0037
        L_0x002f:
            java.lang.IllegalArgumentException r0 = new java.lang.IllegalArgumentException
            java.lang.String r1 = "File descriptors passed in Bundle"
            r0.<init>(r1)
            throw r0
        L_0x0037:
            monitor-enter(r30)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x0224 }
            r1 = 0
            r2 = 0
            android.content.Context r0 = r15.mContext     // Catch:{ NameNotFoundException -> 0x0063, RemoteException -> 0x005f }
            android.content.pm.PackageManager r0 = r0.getPackageManager()     // Catch:{ NameNotFoundException -> 0x0063, RemoteException -> 0x005f }
            r3 = 1024(0x400, float:1.435E-42)
            android.content.pm.InstrumentationInfo r0 = r0.getInstrumentationInfo(r14, r3)     // Catch:{ NameNotFoundException -> 0x0063, RemoteException -> 0x005f }
            r1 = r0
            android.content.pm.IPackageManager r0 = android.app.AppGlobals.getPackageManager()     // Catch:{ NameNotFoundException -> 0x0063, RemoteException -> 0x005f }
            java.lang.String r4 = r1.targetPackage     // Catch:{ NameNotFoundException -> 0x0063, RemoteException -> 0x005f }
            android.content.pm.ApplicationInfo r0 = r0.getApplicationInfo(r4, r3, r9)     // Catch:{ NameNotFoundException -> 0x0063, RemoteException -> 0x005f }
            r8 = r0
            r0 = r1
            goto L_0x0066
        L_0x0057:
            r0 = move-exception
            r4 = r9
            r24 = r10
            r2 = r11
            r1 = r15
            goto L_0x022a
        L_0x005f:
            r0 = move-exception
            r0 = r1
            r8 = r2
            goto L_0x0066
        L_0x0063:
            r0 = move-exception
            r0 = r1
            r8 = r2
        L_0x0066:
            r7 = 0
            if (r0 != 0) goto L_0x0082
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x0057 }
            r1.<init>()     // Catch:{ all -> 0x0057 }
            java.lang.String r2 = "Unable to find instrumentation info for: "
            r1.append(r2)     // Catch:{ all -> 0x0057 }
            r1.append(r14)     // Catch:{ all -> 0x0057 }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x0057 }
            r15.reportStartInstrumentationFailureLocked(r12, r14, r1)     // Catch:{ all -> 0x0057 }
            monitor-exit(r30)     // Catch:{ all -> 0x0057 }
            resetPriorityAfterLockedSection()
            return r7
        L_0x0082:
            if (r8 != 0) goto L_0x009f
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x0057 }
            r1.<init>()     // Catch:{ all -> 0x0057 }
            java.lang.String r2 = "Unable to find instrumentation target package: "
            r1.append(r2)     // Catch:{ all -> 0x0057 }
            java.lang.String r2 = r0.targetPackage     // Catch:{ all -> 0x0057 }
            r1.append(r2)     // Catch:{ all -> 0x0057 }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x0057 }
            r15.reportStartInstrumentationFailureLocked(r12, r14, r1)     // Catch:{ all -> 0x0057 }
            monitor-exit(r30)     // Catch:{ all -> 0x0057 }
            resetPriorityAfterLockedSection()
            return r7
        L_0x009f:
            boolean r1 = r8.hasCode()     // Catch:{ all -> 0x0224 }
            if (r1 != 0) goto L_0x00c0
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x0057 }
            r1.<init>()     // Catch:{ all -> 0x0057 }
            java.lang.String r2 = "Instrumentation target has no code: "
            r1.append(r2)     // Catch:{ all -> 0x0057 }
            java.lang.String r2 = r0.targetPackage     // Catch:{ all -> 0x0057 }
            r1.append(r2)     // Catch:{ all -> 0x0057 }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x0057 }
            r15.reportStartInstrumentationFailureLocked(r12, r14, r1)     // Catch:{ all -> 0x0057 }
            monitor-exit(r30)     // Catch:{ all -> 0x0057 }
            resetPriorityAfterLockedSection()
            return r7
        L_0x00c0:
            android.content.Context r1 = r15.mContext     // Catch:{ all -> 0x0224 }
            android.content.pm.PackageManager r1 = r1.getPackageManager()     // Catch:{ all -> 0x0224 }
            java.lang.String r2 = r0.targetPackage     // Catch:{ all -> 0x0224 }
            java.lang.String r3 = r0.packageName     // Catch:{ all -> 0x0224 }
            int r1 = r1.checkSignatures(r2, r3)     // Catch:{ all -> 0x0224 }
            r6 = r1
            if (r6 >= 0) goto L_0x011b
            r1 = -1
            if (r6 != r1) goto L_0x00d5
            goto L_0x011b
        L_0x00d5:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x0057 }
            r1.<init>()     // Catch:{ all -> 0x0057 }
            java.lang.String r2 = "Permission Denial: starting instrumentation "
            r1.append(r2)     // Catch:{ all -> 0x0057 }
            r1.append(r14)     // Catch:{ all -> 0x0057 }
            java.lang.String r2 = " from pid="
            r1.append(r2)     // Catch:{ all -> 0x0057 }
            int r2 = android.os.Binder.getCallingPid()     // Catch:{ all -> 0x0057 }
            r1.append(r2)     // Catch:{ all -> 0x0057 }
            java.lang.String r2 = ", uid="
            r1.append(r2)     // Catch:{ all -> 0x0057 }
            int r2 = android.os.Binder.getCallingPid()     // Catch:{ all -> 0x0057 }
            r1.append(r2)     // Catch:{ all -> 0x0057 }
            java.lang.String r2 = " not allowed because package "
            r1.append(r2)     // Catch:{ all -> 0x0057 }
            java.lang.String r2 = r0.packageName     // Catch:{ all -> 0x0057 }
            r1.append(r2)     // Catch:{ all -> 0x0057 }
            java.lang.String r2 = " does not have a signature matching the target "
            r1.append(r2)     // Catch:{ all -> 0x0057 }
            java.lang.String r2 = r0.targetPackage     // Catch:{ all -> 0x0057 }
            r1.append(r2)     // Catch:{ all -> 0x0057 }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x0057 }
            r15.reportStartInstrumentationFailureLocked(r12, r14, r1)     // Catch:{ all -> 0x0057 }
            java.lang.SecurityException r2 = new java.lang.SecurityException     // Catch:{ all -> 0x0057 }
            r2.<init>(r1)     // Catch:{ all -> 0x0057 }
            throw r2     // Catch:{ all -> 0x0057 }
        L_0x011b:
            com.android.server.am.ActiveInstrumentation r1 = new com.android.server.am.ActiveInstrumentation     // Catch:{ all -> 0x0224 }
            r1.<init>(r15)     // Catch:{ all -> 0x0224 }
            r5 = r1
            r5.mClass = r14     // Catch:{ all -> 0x0224 }
            java.lang.String r1 = r8.processName     // Catch:{ all -> 0x0224 }
            java.lang.String r2 = r0.targetProcesses     // Catch:{ all -> 0x0224 }
            r4 = 1
            if (r2 != 0) goto L_0x0133
            java.lang.String[] r2 = new java.lang.String[r4]     // Catch:{ all -> 0x0057 }
            java.lang.String r3 = r8.processName     // Catch:{ all -> 0x0057 }
            r2[r7] = r3     // Catch:{ all -> 0x0057 }
            r5.mTargetProcesses = r2     // Catch:{ all -> 0x0057 }
            goto L_0x0141
        L_0x0133:
            java.lang.String r2 = r0.targetProcesses     // Catch:{ all -> 0x0224 }
            java.lang.String r3 = "*"
            boolean r2 = r2.equals(r3)     // Catch:{ all -> 0x0224 }
            if (r2 == 0) goto L_0x0144
            java.lang.String[] r2 = new java.lang.String[r7]     // Catch:{ all -> 0x0057 }
            r5.mTargetProcesses = r2     // Catch:{ all -> 0x0057 }
        L_0x0141:
            r18 = r1
            goto L_0x0155
        L_0x0144:
            java.lang.String r2 = r0.targetProcesses     // Catch:{ all -> 0x0224 }
            java.lang.String r3 = ","
            java.lang.String[] r2 = r2.split(r3)     // Catch:{ all -> 0x0224 }
            r5.mTargetProcesses = r2     // Catch:{ all -> 0x0224 }
            java.lang.String[] r2 = r5.mTargetProcesses     // Catch:{ all -> 0x0224 }
            r2 = r2[r7]     // Catch:{ all -> 0x0224 }
            r1 = r2
            r18 = r1
        L_0x0155:
            r5.mTargetInfo = r8     // Catch:{ all -> 0x0224 }
            r3 = r32
            r5.mProfileFile = r3     // Catch:{ all -> 0x0224 }
            r5.mArguments = r13     // Catch:{ all -> 0x0224 }
            r5.mWatcher = r12     // Catch:{ all -> 0x0224 }
            r2 = r36
            r5.mUiAutomationConnection = r2     // Catch:{ all -> 0x0224 }
            r5.mResultClass = r14     // Catch:{ all -> 0x0224 }
            java.lang.String r1 = "android.permission.START_ACTIVITIES_FROM_BACKGROUND"
            int r1 = r15.checkPermission(r1, r10, r11)     // Catch:{ all -> 0x0224 }
            if (r1 != 0) goto L_0x016f
            r1 = r4
            goto L_0x0170
        L_0x016f:
            r1 = r7
        L_0x0170:
            r5.mHasBackgroundActivityStartsPermission = r1     // Catch:{ all -> 0x0224 }
            boolean r1 = r8.usesNonSdkApi()     // Catch:{ all -> 0x0224 }
            if (r1 != 0) goto L_0x017f
            r1 = r33 & 1
            if (r1 == 0) goto L_0x017d
            goto L_0x017f
        L_0x017d:
            r1 = r7
            goto L_0x0180
        L_0x017f:
            r1 = r4
        L_0x0180:
            r19 = r1
            if (r19 == 0) goto L_0x018b
            java.lang.String r1 = "android.permission.DISABLE_HIDDEN_API_CHECKS"
            java.lang.String r4 = "disable hidden API checks"
            r15.enforceCallingPermission(r1, r4)     // Catch:{ all -> 0x0057 }
        L_0x018b:
            boolean r1 = r30.isCallerShell()     // Catch:{ all -> 0x0224 }
            if (r1 == 0) goto L_0x0198
            r1 = r33 & 2
            if (r1 == 0) goto L_0x0198
            r16 = 1
            goto L_0x019a
        L_0x0198:
            r16 = r7
        L_0x019a:
            long r20 = android.os.Binder.clearCallingIdentity()     // Catch:{ all -> 0x0224 }
            java.lang.String r4 = r0.targetPackage     // Catch:{ all -> 0x0224 }
            r17 = -1
            r22 = 1
            r23 = 0
            r24 = 1
            r25 = 1
            r26 = 0
            java.lang.String r27 = "start instr"
            r1 = r30
            r2 = r4
            r3 = r17
            r28 = 1
            r4 = r22
            r29 = r5
            r5 = r23
            r22 = r6
            r6 = r24
            r7 = r25
            r23 = r8
            r8 = r26
            r37 = r9
            r24 = r10
            r10 = r27
            r1.forceStopPackageLocked(r2, r3, r4, r5, r6, r7, r8, r9, r10)     // Catch:{ all -> 0x021e }
            android.app.usage.UsageStatsManagerInternal r1 = r15.mUsageStatsService     // Catch:{ all -> 0x021e }
            if (r1 == 0) goto L_0x01e8
            android.app.usage.UsageStatsManagerInternal r1 = r15.mUsageStatsService     // Catch:{ all -> 0x01e2 }
            java.lang.String r2 = r0.targetPackage     // Catch:{ all -> 0x01e2 }
            r3 = 6
            r4 = r37
            r1.reportEvent(r2, r4, r3)     // Catch:{ all -> 0x01de }
            goto L_0x01ea
        L_0x01de:
            r0 = move-exception
            r2 = r11
            r1 = r15
            goto L_0x022a
        L_0x01e2:
            r0 = move-exception
            r4 = r37
            r2 = r11
            r1 = r15
            goto L_0x022a
        L_0x01e8:
            r4 = r37
        L_0x01ea:
            r1 = 0
            r2 = r11
            r11 = r30
            r12 = r23
            r13 = r18
            r14 = r1
            r1 = r15
            r15 = r19
            r17 = r38
            com.android.server.am.ProcessRecord r3 = r11.addAppLocked(r12, r13, r14, r15, r16, r17)     // Catch:{ all -> 0x022f }
            r5 = r29
            r3.setActiveInstrumentation(r5)     // Catch:{ all -> 0x022f }
            r6 = 0
            r5.mFinished = r6     // Catch:{ all -> 0x022f }
            java.util.ArrayList<com.android.server.am.ProcessRecord> r6 = r5.mRunningProcesses     // Catch:{ all -> 0x022f }
            r6.add(r3)     // Catch:{ all -> 0x022f }
            java.util.ArrayList<com.android.server.am.ActiveInstrumentation> r6 = r1.mActiveInstrumentation     // Catch:{ all -> 0x022f }
            boolean r6 = r6.contains(r5)     // Catch:{ all -> 0x022f }
            if (r6 != 0) goto L_0x0216
            java.util.ArrayList<com.android.server.am.ActiveInstrumentation> r6 = r1.mActiveInstrumentation     // Catch:{ all -> 0x022f }
            r6.add(r5)     // Catch:{ all -> 0x022f }
        L_0x0216:
            android.os.Binder.restoreCallingIdentity(r20)     // Catch:{ all -> 0x022f }
            monitor-exit(r30)     // Catch:{ all -> 0x022f }
            resetPriorityAfterLockedSection()
            return r28
        L_0x021e:
            r0 = move-exception
            r4 = r37
            r2 = r11
            r1 = r15
            goto L_0x022a
        L_0x0224:
            r0 = move-exception
            r4 = r9
            r24 = r10
            r2 = r11
            r1 = r15
        L_0x022a:
            monitor-exit(r30)     // Catch:{ all -> 0x022f }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x022f:
            r0 = move-exception
            goto L_0x022a
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.startInstrumentation(android.content.ComponentName, java.lang.String, int, android.os.Bundle, android.app.IInstrumentationWatcher, android.app.IUiAutomationConnection, int, java.lang.String):boolean");
    }

    private boolean isCallerShell() {
        int callingUid = Binder.getCallingUid();
        return callingUid == NATIVE_DUMP_TIMEOUT_MS || callingUid == 0;
    }

    private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher, ComponentName cn, String report) {
        Slog.w("ActivityManager", report);
        if (watcher != null) {
            Bundle results = new Bundle();
            results.putString("id", "ActivityManagerService");
            results.putString("Error", report);
            this.mInstrumentationReporter.reportStatus(watcher, cn, -1, results);
        }
    }

    /* access modifiers changed from: package-private */
    public void addInstrumentationResultsLocked(ProcessRecord app, Bundle results) {
        ActiveInstrumentation instr = app.getActiveInstrumentation();
        if (instr == null) {
            Slog.w("ActivityManager", "finishInstrumentation called on non-instrumented: " + app);
        } else if (!instr.mFinished && results != null) {
            if (instr.mCurResults == null) {
                instr.mCurResults = new Bundle(results);
            } else {
                instr.mCurResults.putAll(results);
            }
        }
    }

    public void addInstrumentationResults(IApplicationThread target, Bundle results) {
        int callingUserId = UserHandle.getCallingUserId();
        if (results == null || !results.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord app = getRecordForAppLocked(target);
                    if (app == null) {
                        Slog.w("ActivityManager", "addInstrumentationResults: no app for " + target);
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    long origId = Binder.clearCallingIdentity();
                    addInstrumentationResultsLocked(app, results);
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results) {
        ActiveInstrumentation instr = app.getActiveInstrumentation();
        if (instr == null) {
            Slog.w("ActivityManager", "finishInstrumentation called on non-instrumented: " + app);
            return;
        }
        if (!instr.mFinished) {
            if (instr.mWatcher != null) {
                Bundle finalResults = instr.mCurResults;
                if (finalResults == null) {
                    finalResults = results;
                } else if (!(instr.mCurResults == null || results == null)) {
                    finalResults.putAll(results);
                }
                this.mInstrumentationReporter.reportFinished(instr.mWatcher, instr.mClass, resultCode, finalResults);
            }
            if (instr.mUiAutomationConnection != null) {
                this.mAppOpsService.setAppOpsServiceDelegate((AppOpsManagerInternal.CheckOpsDelegate) null);
                getPackageManagerInternalLocked().setCheckPermissionDelegate((PackageManagerInternal.CheckPermissionDelegate) null);
                this.mHandler.obtainMessage(56, instr.mUiAutomationConnection).sendToTarget();
            }
            instr.mFinished = true;
        }
        instr.removeProcess(app);
        app.setActiveInstrumentation((ActiveInstrumentation) null);
        forceStopPackageLocked(app.info.packageName, -1, false, false, true, true, false, app.userId, "finished inst");
    }

    public void finishInstrumentation(IApplicationThread target, int resultCode, Bundle results) {
        int callingUserId = UserHandle.getCallingUserId();
        if (results == null || !results.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord app = getRecordForAppLocked(target);
                    if (app == null) {
                        Slog.w("ActivityManager", "finishInstrumentation: no app for " + target);
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    long origId = Binder.clearCallingIdentity();
                    finishInstrumentationLocked(app, resultCode, results);
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
    }

    public ActivityManager.StackInfo getFocusedStackInfo() throws RemoteException {
        return this.mActivityTaskManager.getFocusedStackInfo();
    }

    public Configuration getConfiguration() {
        return this.mActivityTaskManager.getConfiguration();
    }

    public void suppressResizeConfigChanges(boolean suppress) throws RemoteException {
        this.mActivityTaskManager.suppressResizeConfigChanges(suppress);
    }

    public void updatePersistentConfiguration(Configuration values) {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updatePersistentConfiguration()");
        enforceWriteSettingsPermission("updatePersistentConfiguration()");
        if (values != null) {
            this.mActivityTaskManager.updatePersistentConfiguration(values, UserHandle.getCallingUserId());
            return;
        }
        throw new NullPointerException("Configuration must not be null");
    }

    private void enforceWriteSettingsPermission(String func) {
        int uid = Binder.getCallingUid();
        if (uid != 0) {
            Context context = this.mContext;
            if (!Settings.checkAndNoteWriteSettingsOperation(context, uid, Settings.getPackageNameForUid(context, uid), false)) {
                String msg = "Permission Denial: " + func + " from pid=" + Binder.getCallingPid() + ", uid=" + uid + " requires " + "android.permission.WRITE_SETTINGS";
                Slog.w("ActivityManager", msg);
                throw new SecurityException(msg);
            }
        }
    }

    public boolean updateConfiguration(Configuration values) {
        return this.mActivityTaskManager.updateConfiguration(values);
    }

    public int getLaunchedFromUid(IBinder activityToken) {
        return this.mActivityTaskManager.getLaunchedFromUid(activityToken);
    }

    public String getLaunchedFromPackage(IBinder activityToken) {
        return this.mActivityTaskManager.getLaunchedFromPackage(activityToken);
    }

    /* access modifiers changed from: package-private */
    public boolean isReceivingBroadcastLocked(ProcessRecord app, ArraySet<BroadcastQueue> receivingQueues) {
        int N = app.curReceivers.size();
        if (N > 0) {
            for (int i = 0; i < N; i++) {
                receivingQueues.add(app.curReceivers.valueAt(i).queue);
            }
            return true;
        }
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            BroadcastRecord r = queue.mPendingBroadcast;
            if (r != null && r.curApp == app) {
                receivingQueues.add(queue);
            }
        }
        return true ^ receivingQueues.isEmpty();
    }

    /* access modifiers changed from: package-private */
    public Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState, int targetUid, long targetVersionCode, ComponentName targetComponent, String targetProcess) {
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components;
        SparseArray<ArrayMap<String, Association>> sourceUids;
        ArrayMap<String, Association> sourceProcesses;
        int i = sourceUid;
        String str = sourceProcess;
        int i2 = targetUid;
        ComponentName componentName = targetComponent;
        if (!this.mTrackingAssociations) {
            return null;
        }
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components2 = this.mAssociations.get(i2);
        if (components2 == null) {
            ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components3 = new ArrayMap<>();
            this.mAssociations.put(i2, components3);
            components = components3;
        } else {
            components = components2;
        }
        SparseArray<ArrayMap<String, Association>> sourceUids2 = components.get(componentName);
        if (sourceUids2 == null) {
            SparseArray<ArrayMap<String, Association>> sourceUids3 = new SparseArray<>();
            components.put(componentName, sourceUids3);
            sourceUids = sourceUids3;
        } else {
            sourceUids = sourceUids2;
        }
        ArrayMap<String, Association> sourceProcesses2 = sourceUids.get(i);
        if (sourceProcesses2 == null) {
            ArrayMap<String, Association> sourceProcesses3 = new ArrayMap<>();
            sourceUids.put(i, sourceProcesses3);
            sourceProcesses = sourceProcesses3;
        } else {
            sourceProcesses = sourceProcesses2;
        }
        Association ass = sourceProcesses.get(str);
        if (ass == null) {
            ass = new Association(sourceUid, sourceProcess, targetUid, targetComponent, targetProcess);
            sourceProcesses.put(str, ass);
        }
        ass.mCount++;
        ass.mNesting++;
        if (ass.mNesting == 1) {
            long uptimeMillis = SystemClock.uptimeMillis();
            ass.mLastStateUptime = uptimeMillis;
            ass.mStartTime = uptimeMillis;
            ass.mLastState = sourceState;
        } else {
            int i3 = sourceState;
        }
        return ass;
    }

    /* access modifiers changed from: package-private */
    public void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid, long targetVersionCode, ComponentName targetComponent, String targetProcess) {
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components;
        SparseArray<ArrayMap<String, Association>> sourceUids;
        ArrayMap<String, Association> sourceProcesses;
        if (this.mTrackingAssociations && (components = this.mAssociations.get(targetUid)) != null && (sourceUids = components.get(targetComponent)) != null && (sourceProcesses = sourceUids.get(sourceUid)) != null) {
            Association ass = sourceProcesses.get(sourceProcess);
            if (ass == null) {
            } else if (ass.mNesting <= 0) {
                ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> arrayMap = components;
            } else {
                ass.mNesting--;
                if (ass.mNesting == 0) {
                    long uptime = SystemClock.uptimeMillis();
                    ass.mTime += uptime - ass.mStartTime;
                    long[] jArr = ass.mStateTimes;
                    int i = ass.mLastState + 0;
                    ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> arrayMap2 = components;
                    jArr[i] = jArr[i] + (uptime - ass.mLastStateUptime);
                    ass.mLastState = 23;
                    return;
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void noteUidProcessState(int uid, int state) {
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents;
        int N1;
        ActivityManagerService activityManagerService = this;
        int i = uid;
        int i2 = state;
        activityManagerService.mBatteryStatsService.noteUidProcessState(i, i2);
        activityManagerService.mAppOpsService.updateUidProcState(i, i2);
        if (activityManagerService.mTrackingAssociations) {
            int i1 = 0;
            int N12 = activityManagerService.mAssociations.size();
            while (i1 < N12) {
                ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents2 = activityManagerService.mAssociations.valueAt(i1);
                int i22 = 0;
                int N2 = targetComponents2.size();
                while (i22 < N2) {
                    ArrayMap<String, Association> sourceProcesses = targetComponents2.valueAt(i22).get(i);
                    if (sourceProcesses != null) {
                        int i4 = 0;
                        int N4 = sourceProcesses.size();
                        while (i4 < N4) {
                            Association ass = sourceProcesses.valueAt(i4);
                            if (ass.mNesting >= 1) {
                                long uptime = SystemClock.uptimeMillis();
                                long[] jArr = ass.mStateTimes;
                                int i3 = ass.mLastState + 0;
                                N1 = N12;
                                targetComponents = targetComponents2;
                                jArr[i3] = jArr[i3] + (uptime - ass.mLastStateUptime);
                                ass.mLastState = i2;
                                ass.mLastStateUptime = uptime;
                            } else {
                                N1 = N12;
                                targetComponents = targetComponents2;
                            }
                            i4++;
                            N12 = N1;
                            targetComponents2 = targetComponents;
                        }
                    }
                    i22++;
                    N12 = N12;
                    targetComponents2 = targetComponents2;
                }
                ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> arrayMap = targetComponents2;
                i1++;
                activityManagerService = this;
            }
        }
    }

    private static final class RecordPssRunnable implements Runnable {
        private final File mHeapdumpFile;
        private final ProcessRecord mProc;
        private final ActivityManagerService mService;

        RecordPssRunnable(ActivityManagerService service, ProcessRecord proc, File heapdumpFile) {
            this.mService = service;
            this.mProc = proc;
            this.mHeapdumpFile = heapdumpFile;
        }

        public void run() {
            this.mService.revokeUriPermission(ActivityThread.currentActivityThread().getApplicationThread(), (String) null, DumpHeapActivity.JAVA_URI, 3, UserHandle.myUserId());
            ParcelFileDescriptor fd = null;
            try {
                this.mHeapdumpFile.delete();
                fd = ParcelFileDescriptor.open(this.mHeapdumpFile, 771751936);
                IApplicationThread thread = this.mProc.thread;
                if (thread != null) {
                    try {
                        thread.dumpHeap(true, false, false, this.mHeapdumpFile.toString(), fd, (RemoteCallback) null);
                    } catch (RemoteException e) {
                    }
                }
                if (fd != null) {
                    try {
                        fd.close();
                    } catch (IOException e2) {
                    }
                }
            } catch (FileNotFoundException e3) {
                e3.printStackTrace();
                if (fd != null) {
                    fd.close();
                }
            } catch (Throwable th) {
                if (fd != null) {
                    try {
                        fd.close();
                    } catch (IOException e4) {
                    }
                }
                throw th;
            }
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v11, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v3, resolved type: java.lang.Long} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v12, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v14, resolved type: android.util.Pair} */
    /* access modifiers changed from: package-private */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void recordPssSampleLocked(com.android.server.am.ProcessRecord r34, int r35, long r36, long r38, long r40, long r42, int r44, long r45, long r47) {
        /*
            r33 = this;
            r0 = r33
            r1 = r34
            r14 = r36
            r11 = r40
            int r2 = r1.pid
            int r3 = r1.uid
            java.lang.String r4 = r1.processName
            r31 = 1024(0x400, double:5.06E-321)
            long r19 = r14 * r31
            long r21 = r38 * r31
            long r23 = r11 * r31
            long r25 = r42 * r31
            r16 = r2
            r17 = r3
            r18 = r4
            r27 = r44
            r28 = r35
            r29 = r45
            com.android.server.am.EventLogTags.writeAmPss(r16, r17, r18, r19, r21, r23, r25, r27, r28, r29)
            r9 = r47
            r1.lastPssTime = r9
            com.android.internal.app.procstats.ProcessState r2 = r1.baseProcessTracker
            com.android.server.am.ProcessRecord$PackageList r3 = r1.pkgList
            android.util.ArrayMap<java.lang.String, com.android.internal.app.procstats.ProcessStats$ProcessStateHolder> r13 = r3.mPkgList
            r16 = 1
            r3 = r36
            r5 = r38
            r7 = r42
            r9 = r16
            r10 = r44
            r11 = r45
            r2.addPss(r3, r5, r7, r9, r10, r11, r13)
            com.android.server.am.ProcessRecord$PackageList r2 = r1.pkgList
            android.util.ArrayMap<java.lang.String, com.android.internal.app.procstats.ProcessStats$ProcessStateHolder> r2 = r2.mPkgList
            int r2 = r2.size()
            int r2 = r2 + -1
            r13 = r2
        L_0x004d:
            if (r13 < 0) goto L_0x0083
            com.android.server.am.ProcessRecord$PackageList r2 = r1.pkgList
            com.android.internal.app.procstats.ProcessStats$ProcessStateHolder r12 = r2.valueAt(r13)
            r2 = 18
            android.content.pm.ApplicationInfo r3 = r1.info
            int r3 = r3.uid
            com.android.internal.app.procstats.ProcessState r4 = r12.state
            java.lang.String r4 = r4.getName()
            com.android.internal.app.procstats.ProcessState r5 = r12.state
            java.lang.String r5 = r5.getPackage()
            long r10 = r12.appVersion
            r6 = r36
            r8 = r38
            r16 = r10
            r10 = r42
            r18 = r12
            r12 = r44
            r19 = r13
            r13 = r45
            r15 = r16
            android.util.StatsLog.write(r2, r3, r4, r5, r6, r8, r10, r12, r13, r15)
            int r13 = r19 + -1
            r14 = r36
            goto L_0x004d
        L_0x0083:
            r19 = r13
            long r2 = r1.initialIdlePss
            r4 = 0
            int r2 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r2 != 0) goto L_0x0092
            r2 = r36
            r1.initialIdlePss = r2
            goto L_0x0094
        L_0x0092:
            r2 = r36
        L_0x0094:
            r1.lastPss = r2
            r4 = r40
            r1.lastSwapPss = r4
            r6 = 15
            r7 = r35
            if (r7 < r6) goto L_0x00a4
            r1.lastCachedPss = r2
            r1.lastCachedSwapPss = r4
        L_0x00a4:
            com.android.internal.app.ProcessMap<android.util.Pair<java.lang.Long, java.lang.String>> r6 = r0.mMemWatchProcesses
            android.util.ArrayMap r6 = r6.getMap()
            java.lang.String r8 = r1.processName
            java.lang.Object r6 = r6.get(r8)
            android.util.SparseArray r6 = (android.util.SparseArray) r6
            r8 = 0
            r9 = 0
            if (r6 == 0) goto L_0x00ce
            int r10 = r1.uid
            java.lang.Object r10 = r6.get(r10)
            android.util.Pair r10 = (android.util.Pair) r10
            if (r10 != 0) goto L_0x00c7
            java.lang.Object r11 = r6.get(r9)
            r10 = r11
            android.util.Pair r10 = (android.util.Pair) r10
        L_0x00c7:
            if (r10 == 0) goto L_0x00ce
            java.lang.Object r11 = r10.first
            r8 = r11
            java.lang.Long r8 = (java.lang.Long) r8
        L_0x00ce:
            if (r8 == 0) goto L_0x0142
            long r10 = r2 * r31
            long r12 = r8.longValue()
            int r10 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1))
            if (r10 < 0) goto L_0x0142
            android.app.IApplicationThread r10 = r1.thread
            if (r10 == 0) goto L_0x0142
            java.lang.String r10 = r0.mMemWatchDumpProcName
            if (r10 != 0) goto L_0x0142
            java.lang.String r10 = "ro.debuggable"
            java.lang.String r11 = "0"
            java.lang.String r10 = android.os.SystemProperties.get(r10, r11)
            java.lang.String r11 = "1"
            boolean r10 = r11.equals(r10)
            if (r10 != 0) goto L_0x00fc
            android.content.pm.ApplicationInfo r11 = r1.info
            int r11 = r11.flags
            r11 = r11 & 2
            if (r11 == 0) goto L_0x00fc
            r10 = 1
        L_0x00fc:
            java.lang.String r11 = " exceeded pss limit "
            java.lang.String r12 = "Process "
            java.lang.String r13 = "ActivityManager"
            if (r10 == 0) goto L_0x0125
            java.lang.StringBuilder r14 = new java.lang.StringBuilder
            r14.<init>()
            r14.append(r12)
            r14.append(r1)
            r14.append(r11)
            r14.append(r8)
            java.lang.String r11 = "; reporting"
            r14.append(r11)
            java.lang.String r11 = r14.toString()
            android.util.Slog.w(r13, r11)
            r0.startHeapDumpLocked(r1, r9)
            goto L_0x0142
        L_0x0125:
            java.lang.StringBuilder r9 = new java.lang.StringBuilder
            r9.<init>()
            r9.append(r12)
            r9.append(r1)
            r9.append(r11)
            r9.append(r8)
            java.lang.String r11 = ", but debugging not enabled"
            r9.append(r11)
            java.lang.String r9 = r9.toString()
            android.util.Slog.w(r13, r9)
        L_0x0142:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.recordPssSampleLocked(com.android.server.am.ProcessRecord, int, long, long, long, long, int, long, long):void");
    }

    private void startHeapDumpLocked(ProcessRecord proc, boolean isUserInitiated) {
        File heapdumpFile = DumpHeapProvider.getJavaFile();
        this.mMemWatchDumpProcName = proc.processName;
        this.mMemWatchDumpFile = heapdumpFile.toString();
        this.mMemWatchDumpPid = proc.pid;
        this.mMemWatchDumpUid = proc.uid;
        this.mMemWatchIsUserInitiated = isUserInitiated;
        BackgroundThread.getHandler().post(new RecordPssRunnable(this, proc, heapdumpFile));
    }

    /* access modifiers changed from: package-private */
    public boolean requestPssLocked(ProcessRecord proc, int procState) {
        if (this.mPendingPssProcesses.contains(proc)) {
            return false;
        }
        if (this.mPendingPssProcesses.size() == 0) {
            long deferral = 0;
            if (this.mPssDeferralTime > 0 && this.mActivityStartingNesting.get() > 0) {
                deferral = this.mPssDeferralTime;
            }
            this.mBgHandler.sendEmptyMessageDelayed(1, deferral);
        }
        proc.pssProcState = procState;
        proc.pssStatType = 0;
        this.mPendingPssProcesses.add(proc);
        return true;
    }

    private void deferPssIfNeededLocked() {
        if (this.mPendingPssProcesses.size() > 0) {
            this.mBgHandler.removeMessages(1);
            this.mBgHandler.sendEmptyMessageDelayed(1, this.mPssDeferralTime);
        }
    }

    /* access modifiers changed from: private */
    public void deferPssForActivityStart() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mPssDeferralTime > 0) {
                    deferPssIfNeededLocked();
                    this.mActivityStartingNesting.getAndIncrement();
                    this.mBgHandler.sendEmptyMessageDelayed(3, this.mPssDeferralTime);
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void requestPssAllProcsLocked(long now, boolean always, boolean memLowered) {
        int i;
        long j;
        if (!always) {
            long j2 = this.mLastFullPssTime;
            if (memLowered) {
                j = this.mConstants.FULL_PSS_LOWERED_INTERVAL;
            } else {
                j = this.mConstants.FULL_PSS_MIN_INTERVAL;
            }
            if (now < j2 + j) {
                return;
            }
        }
        this.mLastFullPssTime = now;
        this.mFullPssPending = true;
        for (int i2 = this.mPendingPssProcesses.size() - 1; i2 >= 0; i2--) {
            ProcessList.abortNextPssTime(this.mPendingPssProcesses.get(i2).procStateMemTracker);
        }
        this.mPendingPssProcesses.ensureCapacity(this.mProcessList.getLruSizeLocked());
        this.mPendingPssProcesses.clear();
        for (int i3 = this.mProcessList.getLruSizeLocked() - 1; i3 >= 0; i3--) {
            ProcessRecord app = this.mProcessList.mLruProcesses.get(i3);
            if (!(app.thread == null || app.getCurProcState() == 21 || (!memLowered && ((!always || now <= app.lastStateTime + 1000) && now <= app.lastStateTime + 1200000)))) {
                app.pssProcState = app.setProcState;
                if (always) {
                    i = 2;
                } else {
                    i = 1;
                }
                app.pssStatType = i;
                app.nextPssTime = ProcessList.computeNextPssTime(app.getCurProcState(), app.procStateMemTracker, this.mTestPssMode, this.mAtmInternal.isSleeping(), now);
                this.mPendingPssProcesses.add(app);
            }
        }
        if (!this.mBgHandler.hasMessages(1)) {
            this.mBgHandler.sendEmptyMessage(1);
        }
    }

    public void setTestPssMode(boolean enabled) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mTestPssMode = enabled;
                if (enabled) {
                    requestPssAllProcsLocked(SystemClock.uptimeMillis(), true, true);
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public final void performAppGcLocked(ProcessRecord app) {
        try {
            app.lastRequestedGc = SystemClock.uptimeMillis();
            if (app.thread == null) {
                return;
            }
            if (app.reportLowMemory) {
                app.reportLowMemory = false;
                app.thread.scheduleLowMemory();
                return;
            }
            app.thread.processInBackground();
        } catch (Exception e) {
        }
    }

    private final boolean canGcNowLocked() {
        for (BroadcastQueue q : this.mBroadcastQueues) {
            if (!q.mParallelBroadcasts.isEmpty() || !q.mDispatcher.isEmpty()) {
                return false;
            }
        }
        return this.mAtmInternal.canGcNow();
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Removed duplicated region for block: B:17:0x0047 A[EDGE_INSN: B:17:0x0047->B:16:0x0047 ?: BREAK  , SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:7:0x0017  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void performAppGcsLocked() {
        /*
            r6 = this;
            java.util.ArrayList<com.android.server.am.ProcessRecord> r0 = r6.mProcessesToGc
            int r0 = r0.size()
            if (r0 > 0) goto L_0x0009
            return
        L_0x0009:
            boolean r1 = r6.canGcNowLocked()
            if (r1 == 0) goto L_0x004a
        L_0x000f:
            java.util.ArrayList<com.android.server.am.ProcessRecord> r1 = r6.mProcessesToGc
            int r1 = r1.size()
            if (r1 <= 0) goto L_0x0047
            java.util.ArrayList<com.android.server.am.ProcessRecord> r1 = r6.mProcessesToGc
            r2 = 0
            java.lang.Object r1 = r1.remove(r2)
            com.android.server.am.ProcessRecord r1 = (com.android.server.am.ProcessRecord) r1
            int r2 = r1.getCurRawAdj()
            r3 = 200(0xc8, float:2.8E-43)
            if (r2 > r3) goto L_0x002e
            boolean r2 = r1.reportLowMemory
            if (r2 == 0) goto L_0x002d
            goto L_0x002e
        L_0x002d:
            goto L_0x000f
        L_0x002e:
            long r2 = r1.lastRequestedGc
            com.android.server.am.ActivityManagerConstants r4 = r6.mConstants
            long r4 = r4.GC_MIN_INTERVAL
            long r2 = r2 + r4
            long r4 = android.os.SystemClock.uptimeMillis()
            int r2 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r2 > 0) goto L_0x0044
            r6.performAppGcLocked(r1)
            r6.scheduleAppGcsLocked()
            return
        L_0x0044:
            r6.addProcessToGcListLocked(r1)
        L_0x0047:
            r6.scheduleAppGcsLocked()
        L_0x004a:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.performAppGcsLocked():void");
    }

    /* access modifiers changed from: package-private */
    public final void performAppGcsIfAppropriateLocked() {
        if (canGcNowLocked()) {
            performAppGcsLocked();
        } else {
            scheduleAppGcsLocked();
        }
    }

    /* access modifiers changed from: package-private */
    public final void scheduleAppGcsLocked() {
        this.mHandler.removeMessages(5);
        if (this.mProcessesToGc.size() > 0) {
            Message msg = this.mHandler.obtainMessage(5);
            long when = this.mProcessesToGc.get(0).lastRequestedGc + this.mConstants.GC_MIN_INTERVAL;
            long now = SystemClock.uptimeMillis();
            if (when < this.mConstants.GC_TIMEOUT + now) {
                when = now + this.mConstants.GC_TIMEOUT;
            }
            this.mHandler.sendMessageAtTime(msg, when);
        }
    }

    /* access modifiers changed from: package-private */
    public final void addProcessToGcListLocked(ProcessRecord proc) {
        boolean added = false;
        int i = this.mProcessesToGc.size() - 1;
        while (true) {
            if (i < 0) {
                break;
            } else if (this.mProcessesToGc.get(i).lastRequestedGc < proc.lastRequestedGc) {
                added = true;
                this.mProcessesToGc.add(i + 1, proc);
                break;
            } else {
                i--;
            }
        }
        if (!added) {
            this.mProcessesToGc.add(0, proc);
        }
    }

    /* access modifiers changed from: package-private */
    public final void scheduleAppGcLocked(ProcessRecord app) {
        if (app.lastRequestedGc + this.mConstants.GC_MIN_INTERVAL <= SystemClock.uptimeMillis() && !this.mProcessesToGc.contains(app)) {
            addProcessToGcListLocked(app);
            scheduleAppGcsLocked();
        }
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:36:0x00c2, code lost:
        r1.kill("excessive cpu " + r10 + " during " + r12 + " dur=" + r22 + " limit=" + r21, true);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:37:0x00f5, code lost:
        if (r1.baseProcessTracker == null) goto L_0x0100;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x00f7, code lost:
        r1.baseProcessTracker.reportExcessiveCpu(r1.pkgList.mPkgList);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:0x0100, code lost:
        r0 = r1.pkgList.size() - 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x0107, code lost:
        if (r0 < 0) goto L_0x0161;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x0109, code lost:
        r5 = r1.pkgList.valueAt(r0);
        r6 = r1.info.uid;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x0117, code lost:
        if (r5.state == null) goto L_0x0120;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:0x0119, code lost:
        r7 = r5.state.getName();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:0x0120, code lost:
        r7 = "";
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:0x0122, code lost:
        r23 = r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:46:0x0126, code lost:
        if (r5.state == null) goto L_0x012f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:0x0128, code lost:
        r7 = r5.state.getPackage();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:48:0x012f, code lost:
        r7 = "";
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x0131, code lost:
        android.util.StatsLog.write(16, r6, r23, r7, r5.appVersion);
        r0 = r0 - 1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void checkExcessivePowerUsageLocked() {
        /*
            r27 = this;
            r1 = r27
            r27.updateCpuStatsNow()
            com.android.server.am.BatteryStatsService r0 = r1.mBatteryStatsService
            com.android.internal.os.BatteryStatsImpl r9 = r0.getActiveStatistics()
            r0 = 1
            long r2 = r1.mLastPowerCheckUptime
            r10 = 0
            int r2 = (r2 > r10 ? 1 : (r2 == r10 ? 0 : -1))
            if (r2 != 0) goto L_0x0017
            r0 = 0
            r12 = r0
            goto L_0x0018
        L_0x0017:
            r12 = r0
        L_0x0018:
            long r13 = android.os.SystemClock.uptimeMillis()
            long r2 = r1.mLastPowerCheckUptime
            long r7 = r13 - r2
            r1.mLastPowerCheckUptime = r13
            com.android.server.am.ProcessList r0 = r1.mProcessList
            java.util.ArrayList<com.android.server.am.ProcessRecord> r0 = r0.mLruProcesses
            int r0 = r0.size()
        L_0x002a:
            if (r0 <= 0) goto L_0x017b
            int r15 = r0 + -1
            com.android.server.am.ProcessList r0 = r1.mProcessList
            java.util.ArrayList<com.android.server.am.ProcessRecord> r0 = r0.mLruProcesses
            java.lang.Object r0 = r0.get(r15)
            r5 = r0
            com.android.server.am.ProcessRecord r5 = (com.android.server.am.ProcessRecord) r5
            int r0 = r5.setProcState
            r2 = 15
            if (r0 < r2) goto L_0x0166
            long r3 = r5.lastCpuTime
            int r0 = (r3 > r10 ? 1 : (r3 == r10 ? 0 : -1))
            if (r0 > 0) goto L_0x004e
            r16 = r10
            r18 = r12
            r19 = r13
            r12 = r7
            goto L_0x016f
        L_0x004e:
            long r3 = r5.curCpuTime
            long r10 = r5.lastCpuTime
            long r10 = r3 - r10
            if (r12 == 0) goto L_0x0159
            r16 = 0
            int r0 = (r7 > r16 ? 1 : (r7 == r16 ? 0 : -1))
            if (r0 <= 0) goto L_0x0153
            long r3 = r5.getWhenUnimportant()
            long r3 = r13 - r3
            com.android.server.am.ActivityManagerConstants r0 = r1.mConstants
            r18 = r12
            r19 = r13
            long r12 = r0.POWER_CHECK_INTERVAL
            int r0 = (r3 > r12 ? 1 : (r3 == r12 ? 0 : -1))
            if (r0 > 0) goto L_0x0074
            com.android.server.am.ActivityManagerConstants r0 = r1.mConstants
            int r0 = r0.POWER_CHECK_MAX_CPU_1
            r12 = r0
            goto L_0x00a2
        L_0x0074:
            com.android.server.am.ActivityManagerConstants r0 = r1.mConstants
            long r12 = r0.POWER_CHECK_INTERVAL
            r21 = 2
            long r12 = r12 * r21
            int r0 = (r3 > r12 ? 1 : (r3 == r12 ? 0 : -1))
            if (r0 <= 0) goto L_0x009d
            int r0 = r5.setProcState
            if (r0 > r2) goto L_0x0085
            goto L_0x009d
        L_0x0085:
            com.android.server.am.ActivityManagerConstants r0 = r1.mConstants
            long r12 = r0.POWER_CHECK_INTERVAL
            r21 = 3
            long r12 = r12 * r21
            int r0 = (r3 > r12 ? 1 : (r3 == r12 ? 0 : -1))
            if (r0 > 0) goto L_0x0097
            com.android.server.am.ActivityManagerConstants r0 = r1.mConstants
            int r0 = r0.POWER_CHECK_MAX_CPU_3
            r12 = r0
            goto L_0x00a2
        L_0x0097:
            com.android.server.am.ActivityManagerConstants r0 = r1.mConstants
            int r0 = r0.POWER_CHECK_MAX_CPU_4
            r12 = r0
            goto L_0x00a2
        L_0x009d:
            com.android.server.am.ActivityManagerConstants r0 = r1.mConstants
            int r0 = r0.POWER_CHECK_MAX_CPU_2
            r12 = r0
        L_0x00a2:
            r13 = 100
            long r13 = r13 * r10
            long r13 = r13 / r7
            long r0 = (long) r12
            int r0 = (r13 > r0 ? 1 : (r13 == r0 ? 0 : -1))
            if (r0 < 0) goto L_0x014e
            monitor-enter(r9)
            android.content.pm.ApplicationInfo r0 = r5.info     // Catch:{ all -> 0x0145 }
            int r0 = r0.uid     // Catch:{ all -> 0x0145 }
            java.lang.String r1 = r5.processName     // Catch:{ all -> 0x0145 }
            r2 = r9
            r13 = r3
            r3 = r0
            r4 = r1
            r1 = r5
            r5 = r7
            r21 = r12
            r22 = r13
            r12 = r7
            r7 = r10
            r2.reportExcessiveCpuLocked(r3, r4, r5, r7)     // Catch:{ all -> 0x013f }
            monitor-exit(r9)     // Catch:{ all -> 0x013f }
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r2 = "excessive cpu "
            r0.append(r2)
            r0.append(r10)
            java.lang.String r2 = " during "
            r0.append(r2)
            r0.append(r12)
            java.lang.String r2 = " dur="
            r0.append(r2)
            r2 = r22
            r0.append(r2)
            java.lang.String r4 = " limit="
            r0.append(r4)
            r4 = r21
            r0.append(r4)
            java.lang.String r0 = r0.toString()
            r5 = 1
            r1.kill(r0, r5)
            com.android.internal.app.procstats.ProcessState r0 = r1.baseProcessTracker
            if (r0 == 0) goto L_0x0100
            com.android.internal.app.procstats.ProcessState r0 = r1.baseProcessTracker
            com.android.server.am.ProcessRecord$PackageList r6 = r1.pkgList
            android.util.ArrayMap<java.lang.String, com.android.internal.app.procstats.ProcessStats$ProcessStateHolder> r6 = r6.mPkgList
            r0.reportExcessiveCpu(r6)
        L_0x0100:
            com.android.server.am.ProcessRecord$PackageList r0 = r1.pkgList
            int r0 = r0.size()
            int r0 = r0 - r5
        L_0x0107:
            if (r0 < 0) goto L_0x0161
            com.android.server.am.ProcessRecord$PackageList r5 = r1.pkgList
            com.android.internal.app.procstats.ProcessStats$ProcessStateHolder r5 = r5.valueAt(r0)
            r21 = 16
            android.content.pm.ApplicationInfo r6 = r1.info
            int r6 = r6.uid
            com.android.internal.app.procstats.ProcessState r7 = r5.state
            if (r7 == 0) goto L_0x0120
            com.android.internal.app.procstats.ProcessState r7 = r5.state
            java.lang.String r7 = r7.getName()
            goto L_0x0122
        L_0x0120:
            java.lang.String r7 = ""
        L_0x0122:
            r23 = r7
            com.android.internal.app.procstats.ProcessState r7 = r5.state
            if (r7 == 0) goto L_0x012f
            com.android.internal.app.procstats.ProcessState r7 = r5.state
            java.lang.String r7 = r7.getPackage()
            goto L_0x0131
        L_0x012f:
            java.lang.String r7 = ""
        L_0x0131:
            r24 = r7
            long r7 = r5.appVersion
            r22 = r6
            r25 = r7
            android.util.StatsLog.write(r21, r22, r23, r24, r25)
            int r0 = r0 + -1
            goto L_0x0107
        L_0x013f:
            r0 = move-exception
            r4 = r21
            r2 = r22
            goto L_0x014a
        L_0x0145:
            r0 = move-exception
            r2 = r3
            r1 = r5
            r4 = r12
            r12 = r7
        L_0x014a:
            monitor-exit(r9)     // Catch:{ all -> 0x014c }
            throw r0
        L_0x014c:
            r0 = move-exception
            goto L_0x014a
        L_0x014e:
            r2 = r3
            r1 = r5
            r4 = r12
            r12 = r7
            goto L_0x0161
        L_0x0153:
            r1 = r5
            r18 = r12
            r19 = r13
            goto L_0x0160
        L_0x0159:
            r1 = r5
            r18 = r12
            r19 = r13
            r16 = 0
        L_0x0160:
            r12 = r7
        L_0x0161:
            long r2 = r1.curCpuTime
            r1.lastCpuTime = r2
            goto L_0x016e
        L_0x0166:
            r1 = r5
            r16 = r10
            r18 = r12
            r19 = r13
            r12 = r7
        L_0x016e:
        L_0x016f:
            r1 = r27
            r7 = r12
            r0 = r15
            r10 = r16
            r12 = r18
            r13 = r19
            goto L_0x002a
        L_0x017b:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.checkExcessivePowerUsageLocked():void");
    }

    private boolean isEphemeralLocked(int uid) {
        String[] packages = this.mContext.getPackageManager().getPackagesForUid(uid);
        if (packages == null || packages.length != 1) {
            return false;
        }
        return getPackageManagerInternalLocked().isPackageEphemeral(UserHandle.getUserId(uid), packages[0]);
    }

    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public final void enqueueUidChangeLocked(UidRecord uidRec, int uid, int change) {
        UidRecord.ChangeItem pendingChange;
        UidRecord.ChangeItem pendingChange2;
        if (uidRec == null || uidRec.pendingChange == null) {
            if (this.mPendingUidChanges.size() == 0) {
                this.mUiHandler.obtainMessage(53).sendToTarget();
            }
            int NA = this.mAvailUidChanges.size();
            if (NA > 0) {
                pendingChange2 = this.mAvailUidChanges.remove(NA - 1);
            } else {
                pendingChange2 = new UidRecord.ChangeItem();
            }
            if (uidRec != null) {
                uidRec.pendingChange = pendingChange2;
                if ((change & 1) != 0 && !uidRec.idle) {
                    change |= 2;
                }
            } else if (uid < 0) {
                throw new IllegalArgumentException("No UidRecord or uid");
            }
            pendingChange2.uidRecord = uidRec;
            pendingChange2.uid = uidRec != null ? uidRec.uid : uid;
            this.mPendingUidChanges.add(pendingChange2);
            pendingChange = pendingChange2;
        } else {
            pendingChange = uidRec.pendingChange;
            if ((change & 6) == 0) {
                change |= pendingChange.change & 6;
            }
            if ((change & 24) == 0) {
                change |= pendingChange.change & 24;
            }
            if ((change & 1) != 0) {
                change &= -13;
                if (!uidRec.idle) {
                    change |= 2;
                }
            }
        }
        pendingChange.change = change;
        pendingChange.processState = uidRec != null ? uidRec.setProcState : 21;
        pendingChange.ephemeral = uidRec != null ? uidRec.ephemeral : isEphemeralLocked(uid);
        pendingChange.procStateSeq = uidRec != null ? uidRec.curProcStateSeq : 0;
        if (uidRec != null) {
            uidRec.lastReportedChange = change;
            uidRec.updateLastDispatchedProcStateSeq(change);
        }
        PowerManagerInternal powerManagerInternal = this.mLocalPowerManager;
        if (powerManagerInternal != null) {
            if ((change & 4) != 0) {
                powerManagerInternal.uidActive(pendingChange.uid);
            }
            if ((change & 2) != 0) {
                this.mLocalPowerManager.uidIdle(pendingChange.uid);
            }
            if ((change & 1) != 0) {
                this.mLocalPowerManager.uidGone(pendingChange.uid);
            } else {
                this.mLocalPowerManager.updateUidProcState(pendingChange.uid, pendingChange.processState);
            }
        }
    }

    private void maybeUpdateProviderUsageStatsLocked(ProcessRecord app, String providerPkgName, String authority) {
        UserState userState;
        if (app != null && app.getCurProcState() <= 7 && (userState = this.mUserController.getStartedUserState(app.userId)) != null) {
            long now = SystemClock.elapsedRealtime();
            Long lastReported = userState.mProviderLastReportedFg.get(authority);
            if (lastReported == null || lastReported.longValue() < now - 60000) {
                if (this.mSystemReady) {
                    this.mUsageStatsService.reportContentProviderUsage(authority, providerPkgName, app.userId);
                }
                userState.mProviderLastReportedFg.put(authority, Long.valueOf(now));
            }
        }
    }

    /* access modifiers changed from: package-private */
    public final void setProcessTrackerStateLocked(ProcessRecord proc, int memFactor, long now) {
        if (proc.thread != null && proc.baseProcessTracker != null) {
            proc.baseProcessTracker.setState(proc.getReportedProcState(), memFactor, now, proc.pkgList.mPkgList);
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void updateProcessForegroundLocked(ProcessRecord proc, boolean isForeground, int fgServiceTypes, boolean oomAdj) {
        if (isForeground != proc.hasForegroundServices() || proc.getForegroundServiceTypes() != fgServiceTypes) {
            proc.setHasForegroundServices(isForeground, fgServiceTypes);
            ProcessRecordInjector.updateProcessForegroundLocked(proc);
            ArrayList<ProcessRecord> curProcs = (ArrayList) this.mForegroundPackages.get(proc.info.packageName, proc.info.uid);
            if (isForeground) {
                if (curProcs == null) {
                    curProcs = new ArrayList<>();
                    this.mForegroundPackages.put(proc.info.packageName, proc.info.uid, curProcs);
                }
                if (!curProcs.contains(proc)) {
                    curProcs.add(proc);
                    this.mBatteryStatsService.noteEvent(32770, proc.info.packageName, proc.info.uid);
                }
            } else if (curProcs != null && curProcs.remove(proc)) {
                this.mBatteryStatsService.noteEvent(16386, proc.info.packageName, proc.info.uid);
                if (curProcs.size() <= 0) {
                    this.mForegroundPackages.remove(proc.info.packageName, proc.info.uid);
                }
            }
            proc.setReportedForegroundServiceTypes(fgServiceTypes);
            ProcessChangeItem item = enqueueProcessChangeItemLocked(proc.pid, proc.info.uid);
            item.changes = 2;
            item.foregroundServiceTypes = fgServiceTypes;
            if (oomAdj) {
                updateOomAdjLocked("updateOomAdj_uiVisibility");
            }
        }
    }

    /* access modifiers changed from: package-private */
    public ProcessRecord getTopAppLocked() {
        int uid;
        String pkg;
        String str;
        ActivityTaskManagerInternal activityTaskManagerInternal = this.mAtmInternal;
        ProcessRecord r = null;
        WindowProcessController wpc = activityTaskManagerInternal != null ? activityTaskManagerInternal.getTopApp() : null;
        if (wpc != null) {
            r = (ProcessRecord) wpc.mOwner;
        }
        if (r != null) {
            pkg = r.processName;
            uid = r.info.uid;
        } else {
            pkg = null;
            uid = -1;
        }
        if (uid != this.mCurResumedUid || (pkg != (str = this.mCurResumedPackage) && (pkg == null || !pkg.equals(str)))) {
            long identity = Binder.clearCallingIdentity();
            try {
                if (this.mCurResumedPackage != null) {
                    this.mBatteryStatsService.noteEvent(16387, this.mCurResumedPackage, this.mCurResumedUid);
                }
                this.mCurResumedPackage = pkg;
                this.mCurResumedUid = uid;
                if (this.mCurResumedPackage != null) {
                    this.mBatteryStatsService.noteEvent(32771, this.mCurResumedPackage, this.mCurResumedUid);
                }
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }
        return r;
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final boolean updateOomAdjLocked(ProcessRecord app, boolean oomAdjAll, String oomAdjReason) {
        return this.mOomAdjuster.updateOomAdjLocked(app, oomAdjAll, oomAdjReason);
    }

    static final class ProcStatsRunnable implements Runnable {
        private final ProcessStatsService mProcessStats;
        private final ActivityManagerService mService;

        ProcStatsRunnable(ActivityManagerService service, ProcessStatsService mProcessStats2) {
            this.mService = service;
            this.mProcessStats = mProcessStats2;
        }

        public void run() {
            synchronized (this.mService) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    this.mProcessStats.writeStateAsyncLocked();
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final boolean updateLowMemStateLocked(int numCached, int numEmpty, int numTrimming) {
        int memFactor;
        int memFactor2;
        int i;
        int fgTrimLevel;
        int trackerMemFactor;
        int i2 = numCached;
        int i3 = numEmpty;
        int N = this.mProcessList.getLruSizeLocked();
        long now = SystemClock.uptimeMillis();
        LowMemDetector lowMemDetector = this.mLowMemDetector;
        if (lowMemDetector != null && lowMemDetector.isAvailable()) {
            memFactor = this.mLowMemDetector.getMemFactor();
        } else if (i2 > this.mConstants.CUR_TRIM_CACHED_PROCESSES || i3 > this.mConstants.CUR_TRIM_EMPTY_PROCESSES) {
            memFactor = 0;
        } else {
            int numCachedAndEmpty = i2 + i3;
            if (numCachedAndEmpty <= 3) {
                memFactor = 3;
            } else if (numCachedAndEmpty <= 5) {
                memFactor = 2;
            } else {
                memFactor = 1;
            }
        }
        if (memFactor <= this.mLastMemoryLevel || (this.mAllowLowerMemLevel && this.mProcessList.getLruSizeLocked() < this.mLastNumProcesses)) {
            memFactor2 = memFactor;
        } else {
            memFactor2 = this.mLastMemoryLevel;
        }
        int memFactor3 = this.mLastMemoryLevel;
        if (memFactor2 != memFactor3) {
            EventLogTags.writeAmMemFactor(memFactor2, memFactor3);
            StatsLog.write(15, memFactor2);
        }
        this.mLastMemoryLevel = memFactor2;
        this.mLastNumProcesses = this.mProcessList.getLruSizeLocked();
        ProcessStatsService processStatsService = this.mProcessStats;
        ActivityTaskManagerInternal activityTaskManagerInternal = this.mAtmInternal;
        boolean z = true;
        if (activityTaskManagerInternal != null && activityTaskManagerInternal.isSleeping()) {
            z = false;
        }
        boolean allChanged = processStatsService.setMemFactorLocked(memFactor2, z, now);
        int trackerMemFactor2 = this.mProcessStats.getMemFactorLocked();
        if (memFactor2 != 0) {
            int trackerMemFactor3 = trackerMemFactor2;
            if (this.mLowRamStartTime == 0) {
                this.mLowRamStartTime = now;
            }
            if (memFactor2 == 2) {
                fgTrimLevel = 10;
            } else if (memFactor2 != 3) {
                fgTrimLevel = 5;
            } else {
                fgTrimLevel = 15;
            }
            int factor = numTrimming / 3;
            int minFactor = 2;
            if (this.mAtmInternal.getHomeProcess() != null) {
                minFactor = 2 + 1;
            }
            if (this.mAtmInternal.getPreviousProcess() != null) {
                minFactor++;
            }
            if (factor < minFactor) {
                factor = minFactor;
            }
            int i4 = N - 1;
            int curLevel = 80;
            int step = 0;
            while (i4 >= 0) {
                ProcessRecord app = this.mProcessList.mLruProcesses.get(i4);
                if (allChanged || app.procStateChanged) {
                    trackerMemFactor = trackerMemFactor3;
                    setProcessTrackerStateLocked(app, trackerMemFactor, now);
                    app.procStateChanged = false;
                } else {
                    trackerMemFactor = trackerMemFactor3;
                }
                if (app.getCurProcState() >= 15 && !app.killedByAm) {
                    if (app.trimMemoryLevel < curLevel && app.thread != null) {
                        try {
                            app.thread.scheduleTrimMemory(curLevel);
                        } catch (RemoteException e) {
                        }
                    }
                    app.trimMemoryLevel = curLevel;
                    step++;
                    if (step >= factor) {
                        if (curLevel == 60) {
                            curLevel = 40;
                        } else if (curLevel == 80) {
                            curLevel = 60;
                        }
                        step = 0;
                    }
                } else if (app.getCurProcState() != 14 || app.killedByAm) {
                    if ((app.getCurProcState() >= 8 || app.systemNoUi) && app.hasPendingUiClean()) {
                        if (app.trimMemoryLevel < 20 && app.thread != null) {
                            try {
                                app.thread.scheduleTrimMemory(20);
                            } catch (RemoteException e2) {
                            }
                        }
                        app.setPendingUiClean(false);
                    }
                    if (app.trimMemoryLevel < fgTrimLevel && app.thread != null) {
                        try {
                            app.thread.scheduleTrimMemory(fgTrimLevel);
                        } catch (RemoteException e3) {
                        }
                    }
                    app.trimMemoryLevel = fgTrimLevel;
                } else {
                    if (app.trimMemoryLevel < 40 && app.thread != null) {
                        try {
                            app.thread.scheduleTrimMemory(40);
                        } catch (RemoteException e4) {
                        }
                    }
                    app.trimMemoryLevel = 40;
                }
                i4--;
                int i5 = numEmpty;
                trackerMemFactor3 = trackerMemFactor;
                int trackerMemFactor4 = numCached;
            }
        } else {
            int trackerMemFactor5 = trackerMemFactor2;
            long j = this.mLowRamStartTime;
            if (j != 0) {
                this.mLowRamTimeSinceLastIdle += now - j;
                this.mLowRamStartTime = 0;
            }
            for (int i6 = N - 1; i6 >= 0; i6--) {
                ProcessRecord app2 = this.mProcessList.mLruProcesses.get(i6);
                if (allChanged || app2.procStateChanged) {
                    setProcessTrackerStateLocked(app2, trackerMemFactor5, now);
                    app2.procStateChanged = false;
                }
                if (app2.getCurProcState() < 8 && !app2.systemNoUi) {
                    i = 0;
                } else if (app2.hasPendingUiClean()) {
                    if (app2.trimMemoryLevel < 20 && app2.thread != null) {
                        try {
                            app2.thread.scheduleTrimMemory(20);
                        } catch (RemoteException e5) {
                        }
                    }
                    i = 0;
                    app2.setPendingUiClean(false);
                } else {
                    i = 0;
                }
                app2.trimMemoryLevel = i;
            }
        }
        return allChanged;
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void updateOomAdjLocked(String oomAdjReason) {
        this.mOomAdjuster.updateOomAdjLocked(oomAdjReason);
    }

    /* Debug info: failed to restart local var, previous not found, register: 17 */
    public void makePackageIdle(String packageName, int userId) {
        IPackageManager pm;
        String str = packageName;
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") == 0) {
            int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 2, "makePackageIdle", (String) null);
            long callingId = Binder.clearCallingIdentity();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    IPackageManager pm2 = AppGlobals.getPackageManager();
                    int pkgUid = -1;
                    try {
                        pkgUid = pm2.getPackageUid(str, 268443648, 0);
                    } catch (RemoteException e) {
                    }
                    int i = -1;
                    if (pkgUid != -1) {
                        if (this.mLocalPowerManager != null) {
                            this.mLocalPowerManager.startUidChanges();
                        }
                        int appId = UserHandle.getAppId(pkgUid);
                        int i2 = this.mProcessList.mActiveUids.size() - 1;
                        while (i2 >= 0) {
                            UidRecord uidRec = this.mProcessList.mActiveUids.valueAt(i2);
                            if (uidRec.lastBackgroundTime <= 0 || uidRec.idle) {
                                pm = pm2;
                            } else if (UserHandle.getAppId(uidRec.uid) == appId) {
                                if (userId2 != i) {
                                    if (userId2 != UserHandle.getUserId(uidRec.uid)) {
                                        pm = pm2;
                                    }
                                }
                                EventLogTags.writeAmUidIdle(uidRec.uid);
                                uidRec.idle = true;
                                uidRec.setIdle = true;
                                StringBuilder sb = new StringBuilder();
                                pm = pm2;
                                sb.append("Idling uid ");
                                sb.append(UserHandle.formatUid(uidRec.uid));
                                sb.append(" from package ");
                                sb.append(str);
                                sb.append(" user ");
                                sb.append(userId2);
                                Slog.w("ActivityManager", sb.toString());
                                doStopUidLocked(uidRec.uid, uidRec);
                            } else {
                                pm = pm2;
                            }
                            i2--;
                            pm2 = pm;
                            i = -1;
                        }
                        if (this.mLocalPowerManager != null) {
                            this.mLocalPowerManager.finishUidChanges();
                        }
                        Binder.restoreCallingIdentity(callingId);
                    } else {
                        IPackageManager iPackageManager = pm2;
                        throw new IllegalArgumentException("Unknown package name " + str);
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        String msg = "Permission Denial: makePackageIdle() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.FORCE_STOP_PACKAGES";
        Slog.w("ActivityManager", msg);
        throw new SecurityException(msg);
    }

    /* access modifiers changed from: package-private */
    public final void idleUids() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mOomAdjuster.idleUidsLocked();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    @VisibleForTesting
    public void incrementProcStateSeqAndNotifyAppsLocked() {
        UidRecord uidRec;
        int blockState;
        if (this.mWaitForNetworkTimeoutMs > 0) {
            ArrayList<Integer> blockingUids = null;
            for (int i = this.mProcessList.mActiveUids.size() - 1; i >= 0; i--) {
                UidRecord uidRec2 = this.mProcessList.mActiveUids.valueAt(i);
                if (this.mInjector.isNetworkRestrictedForUid(uidRec2.uid) && UserHandle.isApp(uidRec2.uid) && uidRec2.hasInternetPermission && uidRec2.setProcState != uidRec2.getCurProcState() && (blockState = getBlockStateForUid(uidRec2)) != 0) {
                    synchronized (uidRec2.networkStateLock) {
                        ProcessList processList = this.mProcessList;
                        long j = processList.mProcStateSeqCounter + 1;
                        processList.mProcStateSeqCounter = j;
                        uidRec2.curProcStateSeq = j;
                        if (blockState == 1) {
                            if (blockingUids == null) {
                                blockingUids = new ArrayList<>();
                            }
                            blockingUids.add(Integer.valueOf(uidRec2.uid));
                        } else if (uidRec2.waitingForNetwork) {
                            uidRec2.networkStateLock.notifyAll();
                        }
                    }
                }
            }
            if (blockingUids != null) {
                for (int i2 = this.mProcessList.mLruProcesses.size() - 1; i2 >= 0; i2--) {
                    ProcessRecord app = this.mProcessList.mLruProcesses.get(i2);
                    if (blockingUids.contains(Integer.valueOf(app.uid)) && !app.killedByAm && app.thread != null && (uidRec = this.mProcessList.getUidRecordLocked(app.uid)) != null) {
                        try {
                            app.thread.setNetworkBlockSeq(uidRec.curProcStateSeq);
                        } catch (RemoteException e) {
                        }
                    }
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public int getBlockStateForUid(UidRecord uidRec) {
        boolean isAllowed = NetworkPolicyManager.isProcStateAllowedWhileIdleOrPowerSaveMode(uidRec.getCurProcState()) || NetworkPolicyManager.isProcStateAllowedWhileOnRestrictBackground(uidRec.getCurProcState());
        boolean wasAllowed = NetworkPolicyManager.isProcStateAllowedWhileIdleOrPowerSaveMode(uidRec.setProcState) || NetworkPolicyManager.isProcStateAllowedWhileOnRestrictBackground(uidRec.setProcState);
        if (!wasAllowed && isAllowed) {
            return 1;
        }
        if (!wasAllowed || isAllowed) {
            return 0;
        }
        return 2;
    }

    /* access modifiers changed from: package-private */
    public final void runInBackgroundDisabled(int uid) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                UidRecord uidRec = this.mProcessList.getUidRecordLocked(uid);
                if (uidRec == null) {
                    doStopUidLocked(uid, (UidRecord) null);
                } else if (uidRec.idle) {
                    doStopUidLocked(uidRec.uid, uidRec);
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void doStopUidLocked(int uid, UidRecord uidRec) {
        this.mServices.stopInBackgroundLocked(uid);
        enqueueUidChangeLocked(uidRec, uid, 2);
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x0033, code lost:
        tempWhitelistUidLocked(r8, r9, r11);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x0036, code lost:
        return;
     */
    @com.android.internal.annotations.GuardedBy({"this"})
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void tempWhitelistForPendingIntentLocked(int r6, int r7, int r8, long r9, java.lang.String r11) {
        /*
            r5 = this;
            com.android.server.am.ActivityManagerService$PidMap r0 = r5.mPidsSelfLocked
            monitor-enter(r0)
            com.android.server.am.ActivityManagerService$PidMap r1 = r5.mPidsSelfLocked     // Catch:{ all -> 0x0037 }
            com.android.server.am.ProcessRecord r1 = r1.get(r6)     // Catch:{ all -> 0x0037 }
            if (r1 != 0) goto L_0x0024
            java.lang.String r2 = "ActivityManager"
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x0037 }
            r3.<init>()     // Catch:{ all -> 0x0037 }
            java.lang.String r4 = "tempWhitelistForPendingIntentLocked() no ProcessRecord for pid "
            r3.append(r4)     // Catch:{ all -> 0x0037 }
            r3.append(r6)     // Catch:{ all -> 0x0037 }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x0037 }
            android.util.Slog.w(r2, r3)     // Catch:{ all -> 0x0037 }
            monitor-exit(r0)     // Catch:{ all -> 0x0037 }
            return
        L_0x0024:
            boolean r2 = r1.whitelistManager     // Catch:{ all -> 0x0037 }
            if (r2 != 0) goto L_0x0032
            java.lang.String r2 = "android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST"
            int r2 = r5.checkPermission(r2, r6, r7)     // Catch:{ all -> 0x0037 }
            if (r2 == 0) goto L_0x0032
            monitor-exit(r0)     // Catch:{ all -> 0x0037 }
            return
        L_0x0032:
            monitor-exit(r0)     // Catch:{ all -> 0x0037 }
            r5.tempWhitelistUidLocked(r8, r9, r11)
            return
        L_0x0037:
            r1 = move-exception
            monitor-exit(r0)     // Catch:{ all -> 0x0037 }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.tempWhitelistForPendingIntentLocked(int, int, int, long, java.lang.String):void");
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void tempWhitelistUidLocked(int targetUid, long duration, String tag) {
        this.mPendingTempWhitelist.put(targetUid, new PendingTempWhitelist(targetUid, duration, tag));
        setUidTempWhitelistStateLocked(targetUid, true);
        this.mUiHandler.obtainMessage(68).sendToTarget();
    }

    /* access modifiers changed from: package-private */
    public void pushTempWhitelist() {
        int N;
        PendingTempWhitelist[] list;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                N = this.mPendingTempWhitelist.size();
                list = new PendingTempWhitelist[N];
                for (int i = 0; i < N; i++) {
                    list[i] = this.mPendingTempWhitelist.valueAt(i);
                }
            } finally {
                while (true) {
                    resetPriorityAfterLockedSection();
                }
            }
        }
        resetPriorityAfterLockedSection();
        for (int i2 = 0; i2 < N; i2++) {
            PendingTempWhitelist ptw = list[i2];
            this.mLocalDeviceIdleController.addPowerSaveTempWhitelistAppDirect(ptw.targetUid, ptw.duration, true, ptw.tag);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (int i3 = 0; i3 < N; i3++) {
                    PendingTempWhitelist ptw2 = list[i3];
                    int index = this.mPendingTempWhitelist.indexOfKey(ptw2.targetUid);
                    if (index >= 0 && this.mPendingTempWhitelist.valueAt(index) == ptw2) {
                        this.mPendingTempWhitelist.removeAt(index);
                    }
                }
            } catch (Throwable th) {
                while (true) {
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void setAppIdTempWhitelistStateLocked(int appId, boolean onWhitelist) {
        this.mOomAdjuster.setAppIdTempWhitelistStateLocked(appId, onWhitelist);
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void setUidTempWhitelistStateLocked(int uid, boolean onWhitelist) {
        this.mOomAdjuster.setUidTempWhitelistStateLocked(uid, onWhitelist);
    }

    /* access modifiers changed from: package-private */
    public final void trimApplications(String oomAdjReason) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                trimApplicationsLocked(oomAdjReason);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void trimApplicationsLocked(String oomAdjReason) {
        for (int i = this.mProcessList.mRemovedProcesses.size() - 1; i >= 0; i--) {
            ProcessRecord app = this.mProcessList.mRemovedProcesses.get(i);
            if (!app.hasActivitiesOrRecentTasks() && app.curReceivers.isEmpty() && app.f3services.size() == 0) {
                StringBuilder sb = new StringBuilder();
                sb.append("Exiting empty application process ");
                sb.append(app.toShortString());
                sb.append(" (");
                sb.append(app.thread != null ? app.thread.asBinder() : null);
                sb.append(")\n");
                Slog.i("ActivityManager", sb.toString());
                if (app.pid > 0 && app.pid != MY_PID) {
                    app.kill("empty", false);
                } else if (app.thread != null) {
                    try {
                        app.thread.scheduleExit();
                    } catch (Exception e) {
                    }
                }
                cleanUpApplicationRecordLocked(app, false, true, -1, false);
                this.mProcessList.mRemovedProcesses.remove(i);
                if (app.isPersistent()) {
                    addAppLocked(app.info, (String) null, false, (String) null);
                }
            }
        }
        updateOomAdjLocked(oomAdjReason);
    }

    /* Debug info: failed to restart local var, previous not found, register: 3 */
    public void signalPersistentProcesses(int sig) throws RemoteException {
        if (sig == 10) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (checkCallingPermission("android.permission.SIGNAL_PERSISTENT_PROCESSES") == 0) {
                        for (int i = this.mProcessList.mLruProcesses.size() - 1; i >= 0; i--) {
                            ProcessRecord r = this.mProcessList.mLruProcesses.get(i);
                            if (r.thread != null && r.isPersistent()) {
                                Process.sendSignal(r.pid, sig);
                            }
                        }
                    } else {
                        throw new SecurityException("Requires permission android.permission.SIGNAL_PERSISTENT_PROCESSES");
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new SecurityException("Only SIGNAL_USR1 is allowed");
    }

    private void stopProfilerLocked(ProcessRecord proc, int profileType) {
        if (proc == null || proc == this.mProfileData.getProfileProc()) {
            proc = this.mProfileData.getProfileProc();
            profileType = this.mProfileType;
            clearProfilerLocked();
        }
        if (proc != null) {
            try {
                proc.thread.profilerControl(false, (ProfilerInfo) null, profileType);
            } catch (RemoteException e) {
                throw new IllegalStateException("Process disappeared");
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void clearProfilerLocked() {
        if (!(this.mProfileData.getProfilerInfo() == null || this.mProfileData.getProfilerInfo().profileFd == null)) {
            try {
                this.mProfileData.getProfilerInfo().profileFd.close();
            } catch (IOException e) {
            }
        }
        this.mProfileData.setProfileApp((String) null);
        this.mProfileData.setProfileProc((ProcessRecord) null);
        this.mProfileData.setProfilerInfo((ProfilerInfo) null);
    }

    /* Debug info: failed to restart local var, previous not found, register: 4 */
    public boolean profileControl(String process, int userId, boolean start, ProfilerInfo profilerInfo, int profileType) throws RemoteException {
        ParcelFileDescriptor fd;
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
                    if (start) {
                        if (profilerInfo == null || profilerInfo.profileFd == null) {
                            throw new IllegalArgumentException("null profile info or fd");
                        }
                    }
                    ProcessRecord proc = null;
                    if (process != null) {
                        proc = findProcessLocked(process, userId, "profileControl");
                    }
                    if (start) {
                        if (proc == null || proc.thread == null) {
                            throw new IllegalArgumentException("Unknown process: " + process);
                        }
                    }
                    if (start) {
                        stopProfilerLocked((ProcessRecord) null, 0);
                        setProfileApp(proc.info, proc.processName, profilerInfo);
                        this.mProfileData.setProfileProc(proc);
                        this.mProfileType = profileType;
                        try {
                            fd = profilerInfo.profileFd.dup();
                        } catch (IOException e) {
                            fd = null;
                        }
                        profilerInfo.profileFd = fd;
                        proc.thread.profilerControl(start, profilerInfo, profileType);
                        try {
                            this.mProfileData.getProfilerInfo().profileFd.close();
                        } catch (IOException e2) {
                        }
                        this.mProfileData.getProfilerInfo().profileFd = null;
                        if (proc.pid == MY_PID) {
                            profilerInfo = null;
                        }
                    } else {
                        stopProfilerLocked(proc, profileType);
                        if (!(profilerInfo == null || profilerInfo.profileFd == null)) {
                            try {
                                profilerInfo.profileFd.close();
                            } catch (IOException e3) {
                            }
                        }
                    }
                } else {
                    throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                }
            }
            resetPriorityAfterLockedSection();
            if (!(profilerInfo == null || profilerInfo.profileFd == null)) {
                try {
                    profilerInfo.profileFd.close();
                } catch (IOException e4) {
                }
            }
            return true;
        } catch (RemoteException e5) {
            try {
                throw new IllegalStateException("Process disappeared");
            } catch (Throwable th) {
                if (!(profilerInfo == null || profilerInfo.profileFd == null)) {
                    try {
                        profilerInfo.profileFd.close();
                    } catch (IOException e6) {
                    }
                }
                throw th;
            }
        } catch (Throwable th2) {
            resetPriorityAfterLockedSection();
            throw th2;
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 8 */
    private ProcessRecord findProcessLocked(String process, int userId, String callName) {
        SparseArray<ProcessRecord> procs;
        int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 2, callName, (String) null);
        ProcessRecord proc = null;
        try {
            int pid = Integer.parseInt(process);
            synchronized (this.mPidsSelfLocked) {
                proc = this.mPidsSelfLocked.get(pid);
            }
        } catch (NumberFormatException e) {
        }
        if (proc != null || (procs = this.mProcessList.mProcessNames.getMap().get(process)) == null || procs.size() <= 0) {
            return proc;
        }
        ProcessRecord proc2 = procs.valueAt(0);
        if (userId2 == -1 || proc2.userId == userId2) {
            return proc2;
        }
        for (int i = 1; i < procs.size(); i++) {
            ProcessRecord thisProc = procs.valueAt(i);
            if (thisProc.userId == userId2) {
                return thisProc;
            }
        }
        return proc2;
    }

    /* Debug info: failed to restart local var, previous not found, register: 13 */
    /* JADX WARNING: Code restructure failed: missing block: B:25:0x0064, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x0067, code lost:
        if (r3 == null) goto L_0x006e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:?, code lost:
        r3.close();
     */
    /* JADX WARNING: Removed duplicated region for block: B:59:0x00bf A[SYNTHETIC, Splitter:B:59:0x00bf] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean dumpHeap(java.lang.String r14, int r15, boolean r16, boolean r17, boolean r18, java.lang.String r19, android.os.ParcelFileDescriptor r20, android.os.RemoteCallback r21) {
        /*
            r13 = this;
            r1 = r13
            r2 = r14
            monitor-enter(r13)     // Catch:{ RemoteException -> 0x00ae, all -> 0x00a8 }
            boostPriorityForLockedSection()     // Catch:{ all -> 0x009b }
            java.lang.String r0 = "android.permission.SET_ACTIVITY_WATCHER"
            int r0 = r13.checkCallingPermission(r0)     // Catch:{ all -> 0x009b }
            if (r0 != 0) goto L_0x0090
            if (r20 == 0) goto L_0x0086
            java.lang.String r0 = "dumpHeap"
            r10 = r15
            com.android.server.am.ProcessRecord r0 = r13.findProcessLocked(r14, r15, r0)     // Catch:{ all -> 0x0099 }
            r11 = r0
            if (r11 == 0) goto L_0x006f
            android.app.IApplicationThread r0 = r11.thread     // Catch:{ all -> 0x0099 }
            if (r0 == 0) goto L_0x006f
            java.lang.String r0 = "1"
            java.lang.String r3 = "ro.debuggable"
            java.lang.String r4 = "0"
            java.lang.String r3 = android.os.SystemProperties.get(r3, r4)     // Catch:{ all -> 0x0099 }
            boolean r0 = r0.equals(r3)     // Catch:{ all -> 0x0099 }
            r12 = r0
            if (r12 != 0) goto L_0x0050
            android.content.pm.ApplicationInfo r0 = r11.info     // Catch:{ all -> 0x0099 }
            int r0 = r0.flags     // Catch:{ all -> 0x0099 }
            r0 = r0 & 2
            if (r0 == 0) goto L_0x0039
            goto L_0x0050
        L_0x0039:
            java.lang.SecurityException r0 = new java.lang.SecurityException     // Catch:{ all -> 0x0099 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x0099 }
            r3.<init>()     // Catch:{ all -> 0x0099 }
            java.lang.String r4 = "Process not debuggable: "
            r3.append(r4)     // Catch:{ all -> 0x0099 }
            r3.append(r11)     // Catch:{ all -> 0x0099 }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x0099 }
            r0.<init>(r3)     // Catch:{ all -> 0x0099 }
            throw r0     // Catch:{ all -> 0x0099 }
        L_0x0050:
            android.app.IApplicationThread r3 = r11.thread     // Catch:{ all -> 0x0099 }
            r4 = r16
            r5 = r17
            r6 = r18
            r7 = r19
            r8 = r20
            r9 = r21
            r3.dumpHeap(r4, r5, r6, r7, r8, r9)     // Catch:{ all -> 0x0099 }
            r3 = 0
            r4 = 1
            monitor-exit(r13)     // Catch:{ all -> 0x00a6 }
            resetPriorityAfterLockedSection()
            if (r3 == 0) goto L_0x006e
            r3.close()     // Catch:{ IOException -> 0x006d }
            goto L_0x006e
        L_0x006d:
            r0 = move-exception
        L_0x006e:
            return r4
        L_0x006f:
            java.lang.IllegalArgumentException r0 = new java.lang.IllegalArgumentException     // Catch:{ all -> 0x0099 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x0099 }
            r3.<init>()     // Catch:{ all -> 0x0099 }
            java.lang.String r4 = "Unknown process: "
            r3.append(r4)     // Catch:{ all -> 0x0099 }
            r3.append(r14)     // Catch:{ all -> 0x0099 }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x0099 }
            r0.<init>(r3)     // Catch:{ all -> 0x0099 }
            throw r0     // Catch:{ all -> 0x0099 }
        L_0x0086:
            r10 = r15
            java.lang.IllegalArgumentException r0 = new java.lang.IllegalArgumentException     // Catch:{ all -> 0x0099 }
            java.lang.String r3 = "null fd"
            r0.<init>(r3)     // Catch:{ all -> 0x0099 }
            throw r0     // Catch:{ all -> 0x0099 }
        L_0x0090:
            r10 = r15
            java.lang.SecurityException r0 = new java.lang.SecurityException     // Catch:{ all -> 0x0099 }
            java.lang.String r3 = "Requires permission android.permission.SET_ACTIVITY_WATCHER"
            r0.<init>(r3)     // Catch:{ all -> 0x0099 }
            throw r0     // Catch:{ all -> 0x0099 }
        L_0x0099:
            r0 = move-exception
            goto L_0x009d
        L_0x009b:
            r0 = move-exception
            r10 = r15
        L_0x009d:
            r3 = r20
        L_0x009f:
            monitor-exit(r13)     // Catch:{ all -> 0x00a6 }
            resetPriorityAfterLockedSection()     // Catch:{ RemoteException -> 0x00a4 }
            throw r0     // Catch:{ RemoteException -> 0x00a4 }
        L_0x00a4:
            r0 = move-exception
            goto L_0x00b2
        L_0x00a6:
            r0 = move-exception
            goto L_0x009f
        L_0x00a8:
            r0 = move-exception
            r10 = r15
            r4 = r20
            r3 = r0
            goto L_0x00bd
        L_0x00ae:
            r0 = move-exception
            r10 = r15
            r3 = r20
        L_0x00b2:
            java.lang.IllegalStateException r4 = new java.lang.IllegalStateException     // Catch:{ all -> 0x00ba }
            java.lang.String r5 = "Process disappeared"
            r4.<init>(r5)     // Catch:{ all -> 0x00ba }
            throw r4     // Catch:{ all -> 0x00ba }
        L_0x00ba:
            r0 = move-exception
            r4 = r3
            r3 = r0
        L_0x00bd:
            if (r4 == 0) goto L_0x00c4
            r4.close()     // Catch:{ IOException -> 0x00c3 }
            goto L_0x00c4
        L_0x00c3:
            r0 = move-exception
        L_0x00c4:
            throw r3
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.dumpHeap(java.lang.String, int, boolean, boolean, boolean, java.lang.String, android.os.ParcelFileDescriptor, android.os.RemoteCallback):boolean");
    }

    /* Debug info: failed to restart local var, previous not found, register: 5 */
    public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize, String reportPackage) {
        String processName2;
        int uid2;
        String processName3;
        int uid3;
        if (processName != null) {
            enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDumpHeapDebugLimit()");
            processName2 = processName;
            uid2 = uid;
        } else {
            synchronized (this.mPidsSelfLocked) {
                ProcessRecord proc = this.mPidsSelfLocked.get(Binder.getCallingPid());
                if (proc != null) {
                    if (!Build.IS_DEBUGGABLE) {
                        if ((proc.info.flags & 2) == 0) {
                            throw new SecurityException("Not running a debuggable build");
                        }
                    }
                    processName3 = proc.processName;
                    uid3 = proc.uid;
                    if (reportPackage != null) {
                        if (!proc.pkgList.containsKey(reportPackage)) {
                            throw new SecurityException("Package " + reportPackage + " is not running in " + proc);
                        }
                    }
                } else {
                    throw new SecurityException("No process found for calling pid " + Binder.getCallingPid());
                }
            }
            processName2 = processName3;
            uid2 = uid3;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (maxMemSize > 0) {
                    this.mMemWatchProcesses.put(processName2, uid2, new Pair(Long.valueOf(maxMemSize), reportPackage));
                } else if (uid2 != 0) {
                    this.mMemWatchProcesses.remove(processName2, uid2);
                } else {
                    this.mMemWatchProcesses.getMap().remove(processName2);
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void dumpHeapFinished(String path) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (Binder.getCallingPid() != this.mMemWatchDumpPid) {
                    Slog.w("ActivityManager", "dumpHeapFinished: Calling pid " + Binder.getCallingPid() + " does not match last pid " + this.mMemWatchDumpPid);
                    resetPriorityAfterLockedSection();
                    return;
                }
                if (this.mMemWatchDumpFile != null) {
                    if (this.mMemWatchDumpFile.equals(path)) {
                        this.mHandler.sendEmptyMessage(50);
                        Runtime.getRuntime().gc();
                        resetPriorityAfterLockedSection();
                        return;
                    }
                }
                Slog.w("ActivityManager", "dumpHeapFinished: Calling path " + path + " does not match last path " + this.mMemWatchDumpFile);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public void monitor() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void onCoreSettingsChange(Bundle settings) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mProcessList.updateCoreSettingsLocked(settings);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean startUserInBackground(int userId) {
        return startUserInBackgroundWithListener(userId, (IProgressListener) null);
    }

    public boolean startUserInBackgroundWithListener(int userId, IProgressListener unlockListener) {
        return this.mUserController.lambda$startUser$9$UserController(userId, false, unlockListener);
    }

    public boolean startUserInForegroundWithListener(int userId, IProgressListener unlockListener) {
        return this.mUserController.lambda$startUser$9$UserController(userId, true, unlockListener);
    }

    public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener) {
        return this.mUserController.unlockUser(userId, token, secret, listener);
    }

    public boolean switchUser(int targetUserId) {
        return this.mUserController.switchUser(targetUserId);
    }

    public int stopUser(int userId, boolean force, IStopUserCallback callback) {
        return this.mUserController.stopUser(userId, force, callback, (UserState.KeyEvictedCallback) null);
    }

    public UserInfo getCurrentUser() {
        return this.mUserController.getCurrentUser();
    }

    /* access modifiers changed from: package-private */
    public String getStartedUserState(int userId) {
        return UserState.stateToString(this.mUserController.getStartedUserState(userId).state);
    }

    public boolean isUserRunning(int userId, int flags) {
        if (this.mUserController.isSameProfileGroup(userId, UserHandle.getCallingUserId()) || checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") == 0) {
            return this.mUserController.isUserRunning(userId, flags);
        }
        String msg = "Permission Denial: isUserRunning() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.INTERACT_ACROSS_USERS";
        Slog.w("ActivityManager", msg);
        throw new SecurityException(msg);
    }

    public int[] getRunningUserIds() {
        if (checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") == 0) {
            return this.mUserController.getStartedUserArray();
        }
        String msg = "Permission Denial: isUserRunning() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.INTERACT_ACROSS_USERS";
        Slog.w("ActivityManager", msg);
        throw new SecurityException(msg);
    }

    public void registerUserSwitchObserver(IUserSwitchObserver observer, String name) {
        this.mUserController.registerUserSwitchObserver(observer, name);
    }

    public void unregisterUserSwitchObserver(IUserSwitchObserver observer) {
        this.mUserController.unregisterUserSwitchObserver(observer);
    }

    /* access modifiers changed from: package-private */
    public ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId) {
        if (info == null) {
            return null;
        }
        ApplicationInfo newInfo = new ApplicationInfo(info);
        newInfo.initForUser(userId);
        return newInfo;
    }

    public boolean isUserStopped(int userId) {
        return this.mUserController.getStartedUserState(userId) == null;
    }

    /* access modifiers changed from: package-private */
    public ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId) {
        if (aInfo == null || (userId < 1 && aInfo.applicationInfo.uid < 100000)) {
            return aInfo;
        }
        ActivityInfo info = new ActivityInfo(aInfo);
        info.applicationInfo = getAppInfoForUser(info.applicationInfo, userId);
        return info;
    }

    private boolean processSanityChecksLocked(ProcessRecord process) {
        if (process == null || process.thread == null) {
            return false;
        }
        if (SplitScreenReporter.ACTION_ENTER_SPLIT.equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0")) || (process.info.flags & 2) != 0) {
            return true;
        }
        return false;
    }

    /* Debug info: failed to restart local var, previous not found, register: 6 */
    public boolean startBinderTracking() throws RemoteException {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mBinderTransactionTrackingEnabled = true;
                if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
                    for (int i = 0; i < this.mProcessList.mLruProcesses.size(); i++) {
                        ProcessRecord process = this.mProcessList.mLruProcesses.get(i);
                        if (processSanityChecksLocked(process)) {
                            process.thread.startBinderTracking();
                        }
                    }
                } else {
                    throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                }
            } catch (RemoteException e) {
                Log.v("ActivityManager", "Process disappared");
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return true;
    }

    /* Debug info: failed to restart local var, previous not found, register: 6 */
    public boolean stopBinderTrackingAndDump(ParcelFileDescriptor fd) throws RemoteException {
        ParcelFileDescriptor fd2;
        TransferPipe tp;
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mBinderTransactionTrackingEnabled = false;
                if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
                    throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                } else if (fd != null) {
                    PrintWriter pw = new FastPrintWriter(new FileOutputStream(fd.getFileDescriptor()));
                    pw.println("Binder transaction traces for all processes.\n");
                    Iterator<ProcessRecord> it = this.mProcessList.mLruProcesses.iterator();
                    while (it.hasNext()) {
                        ProcessRecord process = it.next();
                        if (processSanityChecksLocked(process)) {
                            pw.println("Traces for process: " + process.processName);
                            pw.flush();
                            try {
                                tp = new TransferPipe();
                                process.thread.stopBinderTrackingAndDump(tp.getWriteFd());
                                tp.go(fd.getFileDescriptor());
                                tp.kill();
                            } catch (IOException e) {
                                pw.println("Failure while dumping IPC traces from " + process + ".  Exception: " + e);
                                pw.flush();
                            } catch (RemoteException e2) {
                                pw.println("Got a RemoteException while dumping IPC traces from " + process + ".  Exception: " + e2);
                                pw.flush();
                            } catch (Throwable th) {
                                tp.kill();
                                throw th;
                            }
                        }
                    }
                    fd2 = null;
                } else {
                    throw new IllegalArgumentException("null fd");
                }
            }
            resetPriorityAfterLockedSection();
            if (fd2 != null) {
                try {
                    fd2.close();
                } catch (IOException e3) {
                }
            }
            return true;
        } catch (Throwable th2) {
            if (fd != null) {
                try {
                    fd.close();
                } catch (IOException e4) {
                }
            }
            throw th2;
        }
    }

    @VisibleForTesting
    public final class LocalService extends ActivityManagerInternal {
        public LocalService() {
        }

        public String checkContentProviderAccess(String authority, int userId) {
            return ActivityManagerService.this.checkContentProviderAccess(authority, userId);
        }

        public void onWakefulnessChanged(int wakefulness) {
            ActivityManagerService.this.onWakefulnessChanged(wakefulness);
        }

        public boolean startIsolatedProcess(String entryPoint, String[] entryPointArgs, String processName, String abiOverride, int uid, Runnable crashHandler) {
            return ActivityManagerService.this.startIsolatedProcess(entryPoint, entryPointArgs, processName, abiOverride, uid, crashHandler);
        }

        public int startActivityAsUserEmpty(Bundle options) {
            return ActivityManagerService.this.startActivityAsUserEmpty(options);
        }

        public void killForegroundAppsForUser(int userHandle) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ArrayList<ProcessRecord> procs = new ArrayList<>();
                    int NP = ActivityManagerService.this.mProcessList.mProcessNames.getMap().size();
                    for (int ip = 0; ip < NP; ip++) {
                        SparseArray<ProcessRecord> apps = (SparseArray) ActivityManagerService.this.mProcessList.mProcessNames.getMap().valueAt(ip);
                        int NA = apps.size();
                        for (int ia = 0; ia < NA; ia++) {
                            ProcessRecord app = apps.valueAt(ia);
                            if (!app.isPersistent()) {
                                if (app.removed || (app.userId == userHandle && app.hasForegroundActivities())) {
                                    procs.add(app);
                                }
                            }
                        }
                    }
                    int ip2 = procs.size();
                    for (int i = 0; i < ip2; i++) {
                        ActivityManagerService.this.mProcessList.removeProcessLocked(procs.get(i), false, true, "kill all fg");
                    }
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void setPendingIntentWhitelistDuration(IIntentSender target, IBinder whitelistToken, long duration) {
            ActivityManagerService.this.mPendingIntentController.setPendingIntentWhitelistDuration(target, whitelistToken, duration);
        }

        public void setPendingIntentAllowBgActivityStarts(IIntentSender target, IBinder whitelistToken, int flags) {
            if (!(target instanceof PendingIntentRecord)) {
                Slog.w("ActivityManager", "setPendingIntentAllowBgActivityStarts(): not a PendingIntentRecord: " + target);
                return;
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ((PendingIntentRecord) target).setAllowBgActivityStarts(whitelistToken, flags);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void clearPendingIntentAllowBgActivityStarts(IIntentSender target, IBinder whitelistToken) {
            if (!(target instanceof PendingIntentRecord)) {
                Slog.w("ActivityManager", "clearPendingIntentAllowBgActivityStarts(): not a PendingIntentRecord: " + target);
                return;
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ((PendingIntentRecord) target).clearAllowBgActivityStarts(whitelistToken);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void setDeviceIdleWhitelist(int[] allAppids, int[] exceptIdleAppids) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mDeviceIdleWhitelist = allAppids;
                    ActivityManagerService.this.mDeviceIdleExceptIdleWhitelist = exceptIdleAppids;
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void updateDeviceIdleTempWhitelist(int[] appids, int changingAppId, boolean adding) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mDeviceIdleTempWhitelist = appids;
                    ActivityManagerService.this.setAppIdTempWhitelistStateLocked(changingAppId, adding);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public int getUidProcessState(int uid) {
            return ActivityManagerService.this.getUidState(uid);
        }

        public boolean isSystemReady() {
            return ActivityManagerService.this.mSystemReady;
        }

        /* Debug info: failed to restart local var, previous not found, register: 6 */
        /* JADX WARNING: Code restructure failed: missing block: B:18:0x0037, code lost:
            if (r2.hasOverlayUi() != r8) goto L_0x003e;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:20:0x003a, code lost:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
         */
        /* JADX WARNING: Code restructure failed: missing block: B:21:0x003d, code lost:
            return;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:23:?, code lost:
            r2.setHasOverlayUi(r8);
            r6.this$0.updateOomAdjLocked(r2, true, "updateOomAdj_uiVisibility");
         */
        /* JADX WARNING: Code restructure failed: missing block: B:25:0x004c, code lost:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
         */
        /* JADX WARNING: Code restructure failed: missing block: B:26:0x004f, code lost:
            return;
         */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public void setHasOverlayUi(int r7, boolean r8) {
            /*
                r6 = this;
                com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this
                monitor-enter(r0)
                com.android.server.am.ActivityManagerService.boostPriorityForLockedSection()     // Catch:{ all -> 0x0053 }
                com.android.server.am.ActivityManagerService r1 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x0053 }
                com.android.server.am.ActivityManagerService$PidMap r1 = r1.mPidsSelfLocked     // Catch:{ all -> 0x0053 }
                monitor-enter(r1)     // Catch:{ all -> 0x0053 }
                com.android.server.am.ActivityManagerService r2 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x0050 }
                com.android.server.am.ActivityManagerService$PidMap r2 = r2.mPidsSelfLocked     // Catch:{ all -> 0x0050 }
                com.android.server.am.ProcessRecord r2 = r2.get(r7)     // Catch:{ all -> 0x0050 }
                if (r2 != 0) goto L_0x0032
                java.lang.String r3 = "ActivityManager"
                java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x0050 }
                r4.<init>()     // Catch:{ all -> 0x0050 }
                java.lang.String r5 = "setHasOverlayUi called on unknown pid: "
                r4.append(r5)     // Catch:{ all -> 0x0050 }
                r4.append(r7)     // Catch:{ all -> 0x0050 }
                java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x0050 }
                android.util.Slog.w(r3, r4)     // Catch:{ all -> 0x0050 }
                monitor-exit(r1)     // Catch:{ all -> 0x0050 }
                monitor-exit(r0)     // Catch:{ all -> 0x0053 }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                return
            L_0x0032:
                monitor-exit(r1)     // Catch:{ all -> 0x0050 }
                boolean r1 = r2.hasOverlayUi()     // Catch:{ all -> 0x0053 }
                if (r1 != r8) goto L_0x003e
                monitor-exit(r0)     // Catch:{ all -> 0x0053 }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                return
            L_0x003e:
                r2.setHasOverlayUi(r8)     // Catch:{ all -> 0x0053 }
                com.android.server.am.ActivityManagerService r1 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x0053 }
                r3 = 1
                java.lang.String r4 = "updateOomAdj_uiVisibility"
                r1.updateOomAdjLocked(r2, r3, r4)     // Catch:{ all -> 0x0053 }
                monitor-exit(r0)     // Catch:{ all -> 0x0053 }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                return
            L_0x0050:
                r2 = move-exception
                monitor-exit(r1)     // Catch:{ all -> 0x0050 }
                throw r2     // Catch:{ all -> 0x0053 }
            L_0x0053:
                r1 = move-exception
                monitor-exit(r0)     // Catch:{ all -> 0x0053 }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                throw r1
            */
            throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.LocalService.setHasOverlayUi(int, boolean):void");
        }

        /* JADX WARNING: Code restructure failed: missing block: B:10:0x0016, code lost:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            r2 = r1.networkStateLock;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:11:0x001b, code lost:
            monitor-enter(r2);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:14:0x0020, code lost:
            if (r1.lastNetworkUpdatedProcStateSeq < r7) goto L_0x0024;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:15:0x0022, code lost:
            monitor-exit(r2);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:16:0x0023, code lost:
            return;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:17:0x0024, code lost:
            r1.lastNetworkUpdatedProcStateSeq = r7;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:18:0x002a, code lost:
            if (r1.curProcStateSeq <= r7) goto L_0x002e;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:19:0x002c, code lost:
            monitor-exit(r2);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:20:0x002d, code lost:
            return;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:22:0x0030, code lost:
            if (r1.waitingForNetwork == false) goto L_0x0037;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:23:0x0032, code lost:
            r1.networkStateLock.notifyAll();
         */
        /* JADX WARNING: Code restructure failed: missing block: B:24:0x0037, code lost:
            monitor-exit(r2);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:25:0x0038, code lost:
            return;
         */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public void notifyNetworkPolicyRulesUpdated(int r6, long r7) {
            /*
                r5 = this;
                com.android.server.am.ActivityManagerService r0 = com.android.server.am.ActivityManagerService.this
                monitor-enter(r0)
                com.android.server.am.ActivityManagerService.boostPriorityForLockedSection()     // Catch:{ all -> 0x003c }
                com.android.server.am.ActivityManagerService r1 = com.android.server.am.ActivityManagerService.this     // Catch:{ all -> 0x003c }
                com.android.server.am.ProcessList r1 = r1.mProcessList     // Catch:{ all -> 0x003c }
                com.android.server.am.UidRecord r1 = r1.getUidRecordLocked(r6)     // Catch:{ all -> 0x003c }
                if (r1 != 0) goto L_0x0015
                monitor-exit(r0)     // Catch:{ all -> 0x003c }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                return
            L_0x0015:
                monitor-exit(r0)     // Catch:{ all -> 0x003c }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                java.lang.Object r2 = r1.networkStateLock
                monitor-enter(r2)
                long r3 = r1.lastNetworkUpdatedProcStateSeq     // Catch:{ all -> 0x0039 }
                int r0 = (r3 > r7 ? 1 : (r3 == r7 ? 0 : -1))
                if (r0 < 0) goto L_0x0024
                monitor-exit(r2)     // Catch:{ all -> 0x0039 }
                return
            L_0x0024:
                r1.lastNetworkUpdatedProcStateSeq = r7     // Catch:{ all -> 0x0039 }
                long r3 = r1.curProcStateSeq     // Catch:{ all -> 0x0039 }
                int r0 = (r3 > r7 ? 1 : (r3 == r7 ? 0 : -1))
                if (r0 <= 0) goto L_0x002e
                monitor-exit(r2)     // Catch:{ all -> 0x0039 }
                return
            L_0x002e:
                boolean r0 = r1.waitingForNetwork     // Catch:{ all -> 0x0039 }
                if (r0 == 0) goto L_0x0037
                java.lang.Object r0 = r1.networkStateLock     // Catch:{ all -> 0x0039 }
                r0.notifyAll()     // Catch:{ all -> 0x0039 }
            L_0x0037:
                monitor-exit(r2)     // Catch:{ all -> 0x0039 }
                return
            L_0x0039:
                r0 = move-exception
                monitor-exit(r2)     // Catch:{ all -> 0x0039 }
                throw r0
            L_0x003c:
                r1 = move-exception
                monitor-exit(r0)     // Catch:{ all -> 0x003c }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection()
                throw r1
            */
            throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.LocalService.notifyNetworkPolicyRulesUpdated(int, long):void");
        }

        public boolean isRuntimeRestarted() {
            return ActivityManagerService.this.mSystemServiceManager.isRuntimeRestarted();
        }

        public boolean canStartMoreUsers() {
            return ActivityManagerService.this.mUserController.canStartMoreUsers();
        }

        public void setSwitchingFromSystemUserMessage(String switchingFromSystemUserMessage) {
            ActivityManagerService.this.mUserController.setSwitchingFromSystemUserMessage(switchingFromSystemUserMessage);
        }

        public void setSwitchingToSystemUserMessage(String switchingToSystemUserMessage) {
            ActivityManagerService.this.mUserController.setSwitchingToSystemUserMessage(switchingToSystemUserMessage);
        }

        public int getMaxRunningUsers() {
            return ActivityManagerService.this.mUserController.mMaxRunningUsers;
        }

        public boolean isUidActive(int uid) {
            boolean isUidActiveLocked;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    isUidActiveLocked = ActivityManagerService.this.isUidActiveLocked(uid);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return isUidActiveLocked;
        }

        public void setRunningRemoteAnimation(int pid, boolean runningRemoteAnimation) {
            ActivityManagerService.this.setRunningRemoteAnimation(pid, runningRemoteAnimation);
        }

        public List<ProcessMemoryState> getMemoryStateForProcesses() {
            List<ProcessMemoryState> processMemoryStates = new ArrayList<>();
            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                int size = ActivityManagerService.this.mPidsSelfLocked.size();
                for (int i = 0; i < size; i++) {
                    ProcessRecord r = ActivityManagerService.this.mPidsSelfLocked.valueAt(i);
                    processMemoryStates.add(new ProcessMemoryState(r.uid, r.pid, r.processName, r.curAdj));
                }
            }
            return processMemoryStates;
        }

        public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll, int allowMode, String name, String callerPackage) {
            return ActivityManagerService.this.mUserController.handleIncomingUser(callingPid, callingUid, userId, allowAll, allowMode, name, callerPackage);
        }

        public void enforceCallingPermission(String permission, String func) {
            ActivityManagerService.this.enforceCallingPermission(permission, func);
        }

        public int getCurrentUserId() {
            return ActivityManagerService.this.mUserController.getCurrentUserIdLU();
        }

        public boolean isUserRunning(int userId, int flags) {
            return ActivityManagerService.this.mUserController.isUserRunning(userId, flags);
        }

        public void trimApplications() {
            ActivityManagerService.this.trimApplications("updateOomAdj_activityChange");
        }

        public void killProcessesForRemovedTask(ArrayList<Object> procsToKill) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    for (int i = 0; i < procsToKill.size(); i++) {
                        ProcessRecord pr = (ProcessRecord) ((WindowProcessController) procsToKill.get(i)).mOwner;
                        if (pr.setSchedGroup != 0 || !pr.curReceivers.isEmpty()) {
                            pr.waitingToKill = "remove task";
                        } else {
                            pr.kill("remove task", true);
                        }
                    }
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void killProcess(String processName, int uid, String reason) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ProcessRecord proc = ActivityManagerService.this.getProcessRecordLocked(processName, uid, true);
                    if (proc != null) {
                        ActivityManagerService.this.mProcessList.removeProcessLocked(proc, false, true, reason);
                    }
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public boolean hasRunningActivity(int uid, String packageName) {
            if (packageName == null) {
                return false;
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    for (int i = 0; i < ActivityManagerService.this.mProcessList.mLruProcesses.size(); i++) {
                        ProcessRecord pr = ActivityManagerService.this.mProcessList.mLruProcesses.get(i);
                        if (pr.uid == uid) {
                            if (pr.getWindowProcessController().hasRunningActivity(packageName)) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                return true;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    return false;
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
        }

        public void updateOomAdj() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.updateOomAdjLocked("updateOomAdj_meh");
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void updateCpuStats() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.updateCpuStats();
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void updateBatteryStats(ComponentName activity, int uid, int userId, boolean resumed) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.updateBatteryStats(activity, uid, userId, resumed);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void updateActivityUsageStats(ComponentName activity, int userId, int event, IBinder appToken, ComponentName taskRoot) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.updateActivityUsageStats(activity, userId, event, appToken, taskRoot);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        /* Debug info: failed to restart local var, previous not found, register: 4 */
        public void updateForegroundTimeIfOnBattery(String packageName, int uid, long cpuTimeDiff) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    if (!ActivityManagerService.this.mBatteryStatsService.isOnBattery()) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        return;
                    }
                    BatteryStatsImpl bsi = ActivityManagerService.this.mBatteryStatsService.getActiveStatistics();
                    synchronized (bsi) {
                        BatteryStatsImpl.Uid.Proc ps = bsi.getProcessStatsLocked(uid, packageName);
                        if (ps != null) {
                            ps.addForegroundTimeLocked(cpuTimeDiff);
                        }
                        ActivityManagerServiceInjector.addSysAppForegroundTime(uid, bsi.getSysProcessStatsLocked(packageName), cpuTimeDiff);
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                } catch (Throwable bsi2) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw bsi2;
                }
            }
        }

        public void sendForegroundProfileChanged(int userId) {
            ActivityManagerService.this.mUserController.sendForegroundProfileChanged(userId);
        }

        public boolean shouldConfirmCredentials(int userId) {
            return ActivityManagerService.this.mUserController.shouldConfirmCredentials(userId);
        }

        public int[] getCurrentProfileIds() {
            return ActivityManagerService.this.mUserController.getCurrentProfileIds();
        }

        public UserInfo getCurrentUser() {
            return ActivityManagerService.this.mUserController.getCurrentUser();
        }

        public void ensureNotSpecialUser(int userId) {
            ActivityManagerService.this.mUserController.ensureNotSpecialUser(userId);
        }

        public boolean isCurrentProfile(int userId) {
            return ActivityManagerService.this.mUserController.isCurrentProfile(userId);
        }

        public boolean hasStartedUserState(int userId) {
            return ActivityManagerService.this.mUserController.hasStartedUserState(userId);
        }

        public void finishUserSwitch(Object uss) {
            ActivityManagerService.this.mUserController.finishUserSwitch((UserState) uss);
        }

        public void scheduleAppGcs() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.scheduleAppGcsLocked();
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public int getTaskIdForActivity(IBinder token, boolean onlyRoot) {
            int taskForActivity;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    taskForActivity = ActivityManagerService.this.getTaskForActivity(token, onlyRoot);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return taskForActivity;
        }

        public ActivityPresentationInfo getActivityPresentationInfo(IBinder token) {
            int displayId = -1;
            try {
                displayId = ActivityManagerService.this.mActivityTaskManager.getActivityDisplayId(token);
            } catch (RemoteException e) {
            }
            return new ActivityPresentationInfo(ActivityManagerService.this.mActivityTaskManager.getTaskForActivity(token, false), displayId, ActivityManagerService.this.mActivityTaskManager.getActivityClassForToken(token));
        }

        public void setBooting(boolean booting) {
            ActivityManagerService.this.mBooting = booting;
        }

        public boolean isBooting() {
            return ActivityManagerService.this.mBooting;
        }

        public void setBooted(boolean booted) {
            ActivityManagerService.this.mBooted = booted;
        }

        public boolean isBooted() {
            return ActivityManagerService.this.mBooted;
        }

        public void finishBooting() {
            ActivityManagerService.this.finishBooting();
        }

        public void tempWhitelistForPendingIntent(int callerPid, int callerUid, int targetUid, long duration, String tag) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.tempWhitelistForPendingIntentLocked(callerPid, callerUid, targetUid, duration, tag);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public int broadcastIntentInPackage(String packageName, int uid, int realCallingUid, int realCallingPid, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String requiredPermission, Bundle bOptions, boolean serialized, boolean sticky, int userId, boolean allowBackgroundActivityStarts) {
            int broadcastIntentInPackage;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    broadcastIntentInPackage = ActivityManagerService.this.broadcastIntentInPackage(packageName, uid, realCallingUid, realCallingPid, intent, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermission, bOptions, serialized, sticky, userId, allowBackgroundActivityStarts);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return broadcastIntentInPackage;
        }

        /* Debug info: failed to restart local var, previous not found, register: 15 */
        public ComponentName startServiceInPackage(int uid, Intent service, String resolvedType, boolean fgRequired, String callingPackage, int userId, boolean allowBackgroundActivityStarts) throws TransactionTooLargeException {
            long origId;
            ComponentName res;
            if (!ExtraActivityManagerService.checkRunningCompatibility(ActivityManagerService.this.mContext, ActivityManagerService.this, (IApplicationThread) null, service, resolvedType, UserHandle.getUserId(Binder.getCallingUid()), callingPackage)) {
                return null;
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    origId = Binder.clearCallingIdentity();
                    res = ActivityManagerService.this.mServices.startServiceLocked((IApplicationThread) null, service, resolvedType, -1, uid, fgRequired, callingPackage, userId, allowBackgroundActivityStarts);
                    Binder.restoreCallingIdentity(origId);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return res;
        }

        public void disconnectActivityFromServices(Object connectionHolder, Object conns) {
            ActivityServiceConnectionsHolder holder = (ActivityServiceConnectionsHolder) connectionHolder;
            HashSet<ConnectionRecord> toDisconnect = (HashSet) conns;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    Iterator<ConnectionRecord> it = toDisconnect.iterator();
                    while (it.hasNext()) {
                        ActivityManagerService.this.mServices.removeConnectionLocked(it.next(), (ProcessRecord) null, holder);
                    }
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void cleanUpServices(int userId, ComponentName component, Intent baseIntent) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mServices.cleanUpServices(userId, component, baseIntent);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId) {
            return ActivityManagerService.this.getActivityInfoForUser(aInfo, userId);
        }

        public void ensureBootCompleted() {
            ActivityManagerService.this.ensureBootCompleted();
        }

        public void updateOomLevelsForDisplay(int displayId) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    if (ActivityManagerService.this.mWindowManager != null) {
                        ActivityManagerService.this.mProcessList.applyDisplaySize(ActivityManagerService.this.mWindowManager);
                    }
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public boolean isActivityStartsLoggingEnabled() {
            return ActivityManagerService.this.mConstants.mFlagActivityStartsLoggingEnabled;
        }

        public boolean isBackgroundActivityStartsEnabled() {
            return ActivityManagerService.this.mConstants.mFlagBackgroundActivityStartsEnabled;
        }

        public void reportCurKeyguardUsageEvent(boolean keyguardShowing) {
            int i;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService activityManagerService = ActivityManagerService.this;
                    if (keyguardShowing) {
                        i = 17;
                    } else {
                        i = 18;
                    }
                    activityManagerService.reportGlobalUsageEventLocked(i);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public long inputDispatchingTimedOut(int pid, boolean aboveSystem, String reason) {
            long inputDispatchingTimedOut;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    inputDispatchingTimedOut = ActivityManagerService.this.inputDispatchingTimedOut(pid, aboveSystem, reason);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return inputDispatchingTimedOut;
        }

        public boolean inputDispatchingTimedOut(Object proc, String activityShortComponentName, ApplicationInfo aInfo, String parentShortComponentName, Object parentProc, boolean aboveSystem, String reason) {
            return ActivityManagerService.this.inputDispatchingTimedOut((ProcessRecord) proc, activityShortComponentName, aInfo, parentShortComponentName, (WindowProcessController) parentProc, aboveSystem, reason);
        }

        public void broadcastGlobalConfigurationChanged(int changes, boolean initLocale) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    Intent intent = new Intent("android.intent.action.CONFIGURATION_CHANGED");
                    intent.addFlags(1881145344);
                    ActivityManagerService.this.broadcastIntentLocked((ProcessRecord) null, (String) null, intent, (String) null, (IIntentReceiver) null, 0, (String) null, (Bundle) null, (String[]) null, -1, (Bundle) null, false, false, ActivityManagerService.MY_PID, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                    if ((changes & 4) != 0) {
                        Intent intent2 = new Intent("android.intent.action.LOCALE_CHANGED");
                        intent2.addFlags(287309824);
                        if (initLocale || !ActivityManagerService.this.mProcessesReady) {
                            intent2.addFlags(1073741824);
                        }
                        ActivityManagerService.this.broadcastIntentLocked((ProcessRecord) null, (String) null, intent2, (String) null, (IIntentReceiver) null, 0, (String) null, (Bundle) null, (String[]) null, -1, (Bundle) null, false, false, ActivityManagerService.MY_PID, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                    }
                    if (!initLocale && isSplitConfigurationChange(changes)) {
                        Intent intent3 = new Intent("android.intent.action.SPLIT_CONFIGURATION_CHANGED");
                        intent3.addFlags(553648128);
                        ActivityManagerService.this.broadcastIntentLocked((ProcessRecord) null, (String) null, intent3, (String) null, (IIntentReceiver) null, 0, (String) null, (Bundle) null, new String[]{"android.permission.INSTALL_PACKAGES"}, -1, (Bundle) null, false, false, ActivityManagerService.MY_PID, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                    }
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        private boolean isSplitConfigurationChange(int configDiff) {
            return (configDiff & 4100) != 0;
        }

        public void broadcastCloseSystemDialogs(String reason) {
            String str = reason;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    Intent intent = new Intent("android.intent.action.CLOSE_SYSTEM_DIALOGS");
                    intent.addFlags(1342177280);
                    if (str != null) {
                        intent.putExtra(PhoneWindowManager.SYSTEM_DIALOG_REASON_KEY, str);
                    }
                    ActivityManagerService.this.broadcastIntentLocked((ProcessRecord) null, (String) null, intent, (String) null, (IIntentReceiver) null, 0, (String) null, (Bundle) null, (String[]) null, -1, (Bundle) null, false, false, -1, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.killAllBackgroundProcessesExcept(minTargetSdk, maxProcState);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void startProcess(String processName, ApplicationInfo info, boolean knownToBeDead, String hostingType, ComponentName hostingName) {
            startProcess(processName, info, knownToBeDead, hostingType, hostingName, "others");
        }

        /* Debug info: failed to restart local var, previous not found, register: 16 */
        public void startProcess(String processName, ApplicationInfo info, boolean knownToBeDead, String hostingType, ComponentName hostingName, String callerPackage) {
            try {
                if (Trace.isTagEnabled(64)) {
                    StringBuilder sb = new StringBuilder();
                    sb.append("startProcess:");
                    try {
                        sb.append(processName);
                        Trace.traceBegin(64, sb.toString());
                    } catch (Throwable th) {
                        th = th;
                        Trace.traceEnd(64);
                        throw th;
                    }
                } else {
                    String str = processName;
                }
                synchronized (ActivityManagerService.this) {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.startProcessLocked(processName, info, knownToBeDead, 0, new HostingRecord(hostingType, hostingName), false, false, true, callerPackage);
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
                Trace.traceEnd(64);
            } catch (Throwable th2) {
                th = th2;
                String str2 = processName;
                Trace.traceEnd(64);
                throw th;
            }
        }

        /* Debug info: failed to restart local var, previous not found, register: 5 */
        public void setDebugFlagsForStartingActivity(ActivityInfo aInfo, int startFlags, ProfilerInfo profilerInfo, Object wmLock) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (wmLock) {
                        if ((startFlags & 2) != 0) {
                            ActivityManagerService.this.setDebugApp(aInfo.processName, true, false);
                        }
                        if ((startFlags & 8) != 0) {
                            ActivityManagerService.this.setNativeDebuggingAppLocked(aInfo.applicationInfo, aInfo.processName);
                        }
                        if ((startFlags & 4) != 0) {
                            ActivityManagerService.this.setTrackAllocationApp(aInfo.applicationInfo, aInfo.processName);
                        }
                        if (profilerInfo != null) {
                            ActivityManagerService.this.setProfileApp(aInfo.applicationInfo, aInfo.processName, profilerInfo);
                        }
                        wmLock.notify();
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public int getStorageMountMode(int pid, int uid) {
            int i;
            if (uid == ActivityManagerService.NATIVE_DUMP_TIMEOUT_MS || uid == 0) {
                return 6;
            }
            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                ProcessRecord pr = ActivityManagerService.this.mPidsSelfLocked.get(pid);
                i = pr == null ? 0 : pr.mountMode;
            }
            return i;
        }

        public boolean isAppForeground(int uid) {
            return ActivityManagerService.this.isAppForeground(uid);
        }

        public boolean isAppBad(ApplicationInfo info) {
            return ActivityManagerService.this.isAppBad(info);
        }

        public void clearPendingBackup(int userId) {
            ActivityManagerService.this.clearPendingBackup(userId);
        }

        public void prepareForPossibleShutdown() {
            ActivityManagerService.this.prepareForPossibleShutdown();
        }

        public boolean hasRunningForegroundService(int uid, int foregroundServicetype) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    for (int i = 0; i < ActivityManagerService.this.mProcessList.mLruProcesses.size(); i++) {
                        ProcessRecord pr = ActivityManagerService.this.mProcessList.mLruProcesses.get(i);
                        if (pr.uid == uid) {
                            if ((pr.getForegroundServiceTypes() & foregroundServicetype) != 0) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                return true;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    return false;
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
        }

        public void registerProcessObserver(IProcessObserver processObserver) {
            ActivityManagerService.this.registerProcessObserver(processObserver);
        }

        public void unregisterProcessObserver(IProcessObserver processObserver) {
            ActivityManagerService.this.unregisterProcessObserver(processObserver);
        }

        /* Debug info: failed to restart local var, previous not found, register: 4 */
        public boolean isProcessWaitingToUse(int pid) {
            boolean z;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                        ProcessRecord app = ActivityManagerService.this.mPidsSelfLocked.get(pid);
                        z = app != null && app.waitingToUse;
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return z;
        }

        public void setCastPid(int enter, String packageName) {
            ActivityManagerService.this.setCastPid(enter, packageName);
        }

        public void forceStopPackage(String packageName, int uid, String reason) {
            ActivityManagerService.this.forceStopPackage(packageName, uid, reason);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 12 */
    /* access modifiers changed from: package-private */
    public long inputDispatchingTimedOut(int pid, boolean aboveSystem, String reason) {
        ProcessRecord proc;
        long timeout;
        if (checkCallingPermission("android.permission.FILTER_EVENTS") == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    synchronized (this.mPidsSelfLocked) {
                        proc = this.mPidsSelfLocked.get(pid);
                    }
                    timeout = proc != null ? proc.getInputDispatchingTimeout() : 8000;
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            if (inputDispatchingTimedOut(proc, (String) null, (ApplicationInfo) null, (String) null, (WindowProcessController) null, aboveSystem, reason)) {
                return -1;
            }
            return timeout;
        }
        throw new SecurityException("Requires permission android.permission.FILTER_EVENTS");
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x0060, code lost:
        resetPriorityAfterLockedSection();
        r1.mHandler.post(new com.android.server.am.$$Lambda$ActivityManagerService$suSj_Gky16tELPffKx_qENL8g0(r16, r17, r18, r19, r20, r21, r12));
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean inputDispatchingTimedOut(com.android.server.am.ProcessRecord r16, java.lang.String r17, android.content.pm.ApplicationInfo r18, java.lang.String r19, com.android.server.wm.WindowProcessController r20, boolean r21, java.lang.String r22) {
        /*
            r15 = this;
            r1 = r15
            r10 = r16
            r11 = r22
            java.lang.String r0 = "android.permission.FILTER_EVENTS"
            int r0 = r15.checkCallingPermission(r0)
            if (r0 != 0) goto L_0x0083
            if (r11 != 0) goto L_0x0013
            java.lang.String r0 = "Input dispatching timed out"
            r12 = r0
            goto L_0x002a
        L_0x0013:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r2 = "Input dispatching timed out ("
            r0.append(r2)
            r0.append(r11)
            java.lang.String r2 = ")"
            r0.append(r2)
            java.lang.String r0 = r0.toString()
            r12 = r0
        L_0x002a:
            r0 = 1
            if (r10 == 0) goto L_0x0082
            monitor-enter(r15)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x007c }
            boolean r2 = r16.isDebugging()     // Catch:{ all -> 0x007c }
            r3 = 0
            if (r2 == 0) goto L_0x003d
            monitor-exit(r15)     // Catch:{ all -> 0x007c }
            resetPriorityAfterLockedSection()
            return r3
        L_0x003d:
            com.android.server.am.ActiveInstrumentation r2 = r16.getActiveInstrumentation()     // Catch:{ all -> 0x007c }
            if (r2 == 0) goto L_0x005f
            android.os.Bundle r2 = new android.os.Bundle     // Catch:{ all -> 0x007c }
            r2.<init>()     // Catch:{ all -> 0x007c }
            java.lang.String r4 = "shortMsg"
            java.lang.String r5 = "keyDispatchingTimedOut"
            r2.putString(r4, r5)     // Catch:{ all -> 0x007c }
            java.lang.String r4 = "longMsg"
            r2.putString(r4, r12)     // Catch:{ all -> 0x007c }
            r15.finishInstrumentationLocked(r10, r3, r2)     // Catch:{ all -> 0x007c }
            monitor-exit(r15)     // Catch:{ all -> 0x007c }
            resetPriorityAfterLockedSection()
            return r0
        L_0x005f:
            monitor-exit(r15)     // Catch:{ all -> 0x007c }
            resetPriorityAfterLockedSection()
            com.android.server.am.ActivityManagerService$MainHandler r13 = r1.mHandler
            com.android.server.am.-$$Lambda$ActivityManagerService$suSj-_Gky16tELPffKx_qENL8g0 r14 = new com.android.server.am.-$$Lambda$ActivityManagerService$suSj-_Gky16tELPffKx_qENL8g0
            r2 = r14
            r3 = r16
            r4 = r17
            r5 = r18
            r6 = r19
            r7 = r20
            r8 = r21
            r9 = r12
            r2.<init>(r4, r5, r6, r7, r8, r9)
            r13.post(r14)
            goto L_0x0082
        L_0x007c:
            r0 = move-exception
            monitor-exit(r15)     // Catch:{ all -> 0x007c }
            resetPriorityAfterLockedSection()
            throw r0
        L_0x0082:
            return r0
        L_0x0083:
            java.lang.SecurityException r0 = new java.lang.SecurityException
            java.lang.String r2 = "Requires permission android.permission.FILTER_EVENTS"
            r0.<init>(r2)
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.inputDispatchingTimedOut(com.android.server.am.ProcessRecord, java.lang.String, android.content.pm.ApplicationInfo, java.lang.String, com.android.server.wm.WindowProcessController, boolean, java.lang.String):boolean");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:10:0x0016, code lost:
        resetPriorityAfterLockedSection();
        r2 = r1.networkStateLock;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:11:0x001b, code lost:
        monitor-enter(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:14:0x0020, code lost:
        if (r1.lastDispatchedProcStateSeq >= r11) goto L_0x0024;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x0022, code lost:
        monitor-exit(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x0023, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:18:0x0028, code lost:
        if (r1.curProcStateSeq <= r11) goto L_0x002c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:19:0x002a, code lost:
        monitor-exit(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x002b, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:0x0030, code lost:
        if (r1.lastNetworkUpdatedProcStateSeq < r11) goto L_0x0034;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x0032, code lost:
        monitor-exit(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x0033, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:?, code lost:
        r3 = android.os.SystemClock.uptimeMillis();
        r1.waitingForNetwork = true;
        r1.networkStateLock.wait(r10.mWaitForNetworkTimeoutMs);
        r1.waitingForNetwork = false;
        r5 = android.os.SystemClock.uptimeMillis() - r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x004e, code lost:
        if (r5 >= r10.mWaitForNetworkTimeoutMs) goto L_0x0051;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:0x0051, code lost:
        android.util.Slog.w(TAG_NETWORK, "Total time waited for network rules to get updated: " + r5 + ". Uid: " + r0 + " procStateSeq: " + r11 + " UidRec: " + r1 + " validateUidRec: " + r10.mValidateUids.get(r0));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:32:?, code lost:
        java.lang.Thread.currentThread().interrupt();
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void waitForNetworkStateUpdate(long r11) {
        /*
            r10 = this;
            int r0 = android.os.Binder.getCallingUid()
            monitor-enter(r10)
            boostPriorityForLockedSection()     // Catch:{ all -> 0x009b }
            com.android.server.am.ProcessList r1 = r10.mProcessList     // Catch:{ all -> 0x009b }
            com.android.server.am.UidRecord r1 = r1.getUidRecordLocked(r0)     // Catch:{ all -> 0x009b }
            if (r1 != 0) goto L_0x0015
            monitor-exit(r10)     // Catch:{ all -> 0x009b }
            resetPriorityAfterLockedSection()
            return
        L_0x0015:
            monitor-exit(r10)     // Catch:{ all -> 0x009b }
            resetPriorityAfterLockedSection()
            java.lang.Object r2 = r1.networkStateLock
            monitor-enter(r2)
            long r3 = r1.lastDispatchedProcStateSeq     // Catch:{ all -> 0x0098 }
            int r3 = (r3 > r11 ? 1 : (r3 == r11 ? 0 : -1))
            if (r3 >= 0) goto L_0x0024
            monitor-exit(r2)     // Catch:{ all -> 0x0098 }
            return
        L_0x0024:
            long r3 = r1.curProcStateSeq     // Catch:{ all -> 0x0098 }
            int r3 = (r3 > r11 ? 1 : (r3 == r11 ? 0 : -1))
            if (r3 <= 0) goto L_0x002c
            monitor-exit(r2)     // Catch:{ all -> 0x0098 }
            return
        L_0x002c:
            long r3 = r1.lastNetworkUpdatedProcStateSeq     // Catch:{ all -> 0x0098 }
            int r3 = (r3 > r11 ? 1 : (r3 == r11 ? 0 : -1))
            if (r3 < 0) goto L_0x0034
            monitor-exit(r2)     // Catch:{ all -> 0x0098 }
            return
        L_0x0034:
            long r3 = android.os.SystemClock.uptimeMillis()     // Catch:{ InterruptedException -> 0x008e }
            r5 = 1
            r1.waitingForNetwork = r5     // Catch:{ InterruptedException -> 0x008e }
            java.lang.Object r5 = r1.networkStateLock     // Catch:{ InterruptedException -> 0x008e }
            long r6 = r10.mWaitForNetworkTimeoutMs     // Catch:{ InterruptedException -> 0x008e }
            r5.wait(r6)     // Catch:{ InterruptedException -> 0x008e }
            r5 = 0
            r1.waitingForNetwork = r5     // Catch:{ InterruptedException -> 0x008e }
            long r5 = android.os.SystemClock.uptimeMillis()     // Catch:{ InterruptedException -> 0x008e }
            long r5 = r5 - r3
            long r7 = r10.mWaitForNetworkTimeoutMs     // Catch:{ InterruptedException -> 0x008e }
            int r7 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
            if (r7 >= 0) goto L_0x0051
            goto L_0x008d
        L_0x0051:
            java.lang.String r7 = "ActivityManager_Network"
            java.lang.StringBuilder r8 = new java.lang.StringBuilder     // Catch:{ InterruptedException -> 0x008e }
            r8.<init>()     // Catch:{ InterruptedException -> 0x008e }
            java.lang.String r9 = "Total time waited for network rules to get updated: "
            r8.append(r9)     // Catch:{ InterruptedException -> 0x008e }
            r8.append(r5)     // Catch:{ InterruptedException -> 0x008e }
            java.lang.String r9 = ". Uid: "
            r8.append(r9)     // Catch:{ InterruptedException -> 0x008e }
            r8.append(r0)     // Catch:{ InterruptedException -> 0x008e }
            java.lang.String r9 = " procStateSeq: "
            r8.append(r9)     // Catch:{ InterruptedException -> 0x008e }
            r8.append(r11)     // Catch:{ InterruptedException -> 0x008e }
            java.lang.String r9 = " UidRec: "
            r8.append(r9)     // Catch:{ InterruptedException -> 0x008e }
            r8.append(r1)     // Catch:{ InterruptedException -> 0x008e }
            java.lang.String r9 = " validateUidRec: "
            r8.append(r9)     // Catch:{ InterruptedException -> 0x008e }
            com.android.server.am.ActiveUids r9 = r10.mValidateUids     // Catch:{ InterruptedException -> 0x008e }
            com.android.server.am.UidRecord r9 = r9.get(r0)     // Catch:{ InterruptedException -> 0x008e }
            r8.append(r9)     // Catch:{ InterruptedException -> 0x008e }
            java.lang.String r8 = r8.toString()     // Catch:{ InterruptedException -> 0x008e }
            android.util.Slog.w(r7, r8)     // Catch:{ InterruptedException -> 0x008e }
        L_0x008d:
            goto L_0x0096
        L_0x008e:
            r3 = move-exception
            java.lang.Thread r4 = java.lang.Thread.currentThread()     // Catch:{ all -> 0x0098 }
            r4.interrupt()     // Catch:{ all -> 0x0098 }
        L_0x0096:
            monitor-exit(r2)     // Catch:{ all -> 0x0098 }
            return
        L_0x0098:
            r3 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x0098 }
            throw r3
        L_0x009b:
            r1 = move-exception
            monitor-exit(r10)     // Catch:{ all -> 0x009b }
            resetPriorityAfterLockedSection()
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.waitForNetworkStateUpdate(long):void");
    }

    public void waitForBroadcastIdle(PrintWriter pw) {
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastIdle()");
        while (true) {
            boolean idle = true;
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    for (BroadcastQueue queue : this.mBroadcastQueues) {
                        if (!queue.isIdle()) {
                            String msg = "Waiting for queue " + queue + " to become idle...";
                            pw.println(msg);
                            pw.println(queue.describeState());
                            pw.flush();
                            Slog.v("ActivityManager", msg);
                            queue.cancelDeferrals();
                            idle = false;
                        }
                    }
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            if (idle) {
                pw.println("All broadcast queues are idle!");
                pw.flush();
                Slog.v("ActivityManager", "All broadcast queues are idle!");
                return;
            }
            SystemClock.sleep(1000);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 12 */
    public void killPackageDependents(String packageName, int userId) {
        enforceCallingPermission("android.permission.KILL_UID", "killPackageDependents()");
        if (packageName != null) {
            long callingId = Binder.clearCallingIdentity();
            int pkgUid = -1;
            try {
                pkgUid = AppGlobals.getPackageManager().getPackageUid(packageName, 268435456, userId);
            } catch (RemoteException e) {
            }
            if (userId == -1 || pkgUid != -1) {
                try {
                    synchronized (this) {
                        boostPriorityForLockedSection();
                        ProcessList processList = this.mProcessList;
                        int appId = UserHandle.getAppId(pkgUid);
                        processList.killPackageProcessesLocked(packageName, appId, userId, 0, "dep: " + packageName);
                    }
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(callingId);
                } catch (Throwable th) {
                    Binder.restoreCallingIdentity(callingId);
                    throw th;
                }
            } else {
                throw new IllegalArgumentException("Cannot kill dependents of non-existing package " + packageName);
            }
        } else {
            throw new NullPointerException("Cannot kill the dependents of a package without its name.");
        }
    }

    public int restartUserInBackground(int userId) {
        return this.mUserController.restartUser(userId, false);
    }

    /* Debug info: failed to restart local var, previous not found, register: 3 */
    public void scheduleApplicationInfoChanged(List<String> packageNames, int userId) {
        long origId;
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "scheduleApplicationInfoChanged()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                updateApplicationInfoLocked(packageNames, userId);
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void updateSystemUiContext() {
        PackageManagerInternal packageManagerInternal;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                packageManagerInternal = getPackageManagerInternalLocked();
            } catch (Throwable packageManagerInternal2) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw packageManagerInternal2;
                }
            }
        }
        resetPriorityAfterLockedSection();
        ActivityThread.currentActivityThread().handleSystemApplicationInfoChanged(packageManagerInternal.getApplicationInfo(PackageManagerService.PLATFORM_PACKAGE_NAME, 1024, Binder.getCallingUid(), 0));
    }

    /* access modifiers changed from: package-private */
    public void updateApplicationInfoLocked(List<String> packagesToUpdate, int userId) {
        boolean updateFrameworkRes = packagesToUpdate.contains(PackageManagerService.PLATFORM_PACKAGE_NAME);
        if (updateFrameworkRes) {
            PackageParser.readConfigUseRoundIcon((Resources) null);
        }
        this.mProcessList.updateApplicationInfoLocked(packagesToUpdate, userId, updateFrameworkRes);
        if (updateFrameworkRes) {
            Executor executor = ActivityThread.currentActivityThread().getExecutor();
            DisplayManagerInternal display = (DisplayManagerInternal) LocalServices.getService(DisplayManagerInternal.class);
            if (display != null) {
                Objects.requireNonNull(display);
                executor.execute(new Runnable(display) {
                    private final /* synthetic */ DisplayManagerInternal f$0;

                    {
                        this.f$0 = r1;
                    }

                    public final void run() {
                        this.f$0.onOverlayChanged();
                    }
                });
            }
            WindowManagerService windowManagerService = this.mWindowManager;
            if (windowManagerService != null) {
                Objects.requireNonNull(windowManagerService);
                executor.execute(new Runnable() {
                    public final void run() {
                        WindowManagerService.this.onOverlayChanged();
                    }
                });
            }
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 5 */
    public void attachAgent(String process, String path) {
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ProcessRecord proc = findProcessLocked(process, 0, "attachAgent");
                if (proc == null || proc.thread == null) {
                    throw new IllegalArgumentException("Unknown process: " + process);
                }
                if (!SplitScreenReporter.ACTION_ENTER_SPLIT.equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"))) {
                    if ((proc.info.flags & 2) == 0) {
                        throw new SecurityException("Process not debuggable: " + proc);
                    }
                }
                proc.thread.attachAgent(path);
            }
            resetPriorityAfterLockedSection();
        } catch (RemoteException e) {
            throw new IllegalStateException("Process disappeared");
        } catch (Throwable th) {
            resetPriorityAfterLockedSection();
            throw th;
        }
    }

    public void prepareForPossibleShutdown() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mUsageStatsService != null) {
                    this.mUsageStatsService.prepareForPossibleShutdown();
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    @VisibleForTesting
    public static class Injector {
        private NetworkManagementInternal mNmi;

        public Context getContext() {
            return null;
        }

        public AppOpsService getAppOpsService(File file, Handler handler) {
            return new AppOpsService(file, handler);
        }

        public Handler getUiHandler(ActivityManagerService service) {
            Objects.requireNonNull(service);
            return new UiHandler();
        }

        public boolean isNetworkRestrictedForUid(int uid) {
            if (ensureHasNetworkManagementInternal()) {
                return this.mNmi.isNetworkRestrictedForUid(uid);
            }
            return false;
        }

        private boolean ensureHasNetworkManagementInternal() {
            if (this.mNmi == null) {
                this.mNmi = (NetworkManagementInternal) LocalServices.getService(NetworkManagementInternal.class);
            }
            return this.mNmi != null;
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 5 */
    public void startDelegateShellPermissionIdentity(int delegateUid, String[] permissions) {
        if (UserHandle.getCallingAppId() == NATIVE_DUMP_TIMEOUT_MS || UserHandle.getCallingAppId() == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (this.mAppOpsService.getAppOpsServiceDelegate() != getPackageManagerInternalLocked().getCheckPermissionDelegate()) {
                        throw new IllegalStateException("Bad shell delegate state");
                    } else if (this.mAppOpsService.getAppOpsServiceDelegate() == null) {
                        int instrCount = this.mActiveInstrumentation.size();
                        int i = 0;
                        while (i < instrCount) {
                            ActiveInstrumentation instr = this.mActiveInstrumentation.get(i);
                            if (instr.mTargetInfo.uid != delegateUid) {
                                i++;
                            } else if (instr.mUiAutomationConnection != null) {
                                ShellDelegate shellDelegate = new ShellDelegate(instr.mTargetInfo.packageName, delegateUid, permissions);
                                this.mAppOpsService.setAppOpsServiceDelegate(shellDelegate);
                                getPackageManagerInternalLocked().setCheckPermissionDelegate(shellDelegate);
                                resetPriorityAfterLockedSection();
                                return;
                            } else {
                                throw new SecurityException("Shell can delegate its permissions only to an instrumentation started from the shell");
                            }
                        }
                        resetPriorityAfterLockedSection();
                    } else if (this.mAppOpsService.getAppOpsServiceDelegate() instanceof ShellDelegate) {
                        ShellDelegate delegate = this.mAppOpsService.getAppOpsServiceDelegate();
                        if (delegate.getDelegateUid() == delegateUid) {
                            delegate.setPermissions(permissions);
                            return;
                        }
                        throw new SecurityException("Shell can delegate permissions only to one instrumentation at a time");
                    } else {
                        throw new IllegalStateException("Bad shell delegate state");
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
        } else {
            throw new SecurityException("Only the shell can delegate its permissions");
        }
    }

    public void stopDelegateShellPermissionIdentity() {
        if (UserHandle.getCallingAppId() == NATIVE_DUMP_TIMEOUT_MS || UserHandle.getCallingAppId() == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mAppOpsService.setAppOpsServiceDelegate((AppOpsManagerInternal.CheckOpsDelegate) null);
                    getPackageManagerInternalLocked().setCheckPermissionDelegate((PackageManagerInternal.CheckPermissionDelegate) null);
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        throw new SecurityException("Only the shell can delegate its permissions");
    }

    private class ShellDelegate implements AppOpsManagerInternal.CheckOpsDelegate, PackageManagerInternal.CheckPermissionDelegate {
        private String[] mPermissions;
        private final String mTargetPackageName;
        private final int mTargetUid;

        ShellDelegate(String targetPacakgeName, int targetUid, String[] permissions) {
            this.mTargetPackageName = targetPacakgeName;
            this.mTargetUid = targetUid;
            this.mPermissions = permissions;
        }

        /* access modifiers changed from: package-private */
        public int getDelegateUid() {
            return this.mTargetUid;
        }

        /* access modifiers changed from: package-private */
        public void setPermissions(String[] permissions) {
            this.mPermissions = permissions;
        }

        public int checkOperation(int code, int uid, String packageName, boolean raw, QuadFunction<Integer, Integer, String, Boolean, Integer> superImpl) {
            if (uid != this.mTargetUid || !isTargetOp(code)) {
                return ((Integer) superImpl.apply(Integer.valueOf(code), Integer.valueOf(uid), packageName, Boolean.valueOf(raw))).intValue();
            }
            long identity = Binder.clearCallingIdentity();
            try {
                return ((Integer) superImpl.apply(Integer.valueOf(code), Integer.valueOf(ActivityManagerService.NATIVE_DUMP_TIMEOUT_MS), NotificationShellCmd.NOTIFICATION_PACKAGE, Boolean.valueOf(raw))).intValue();
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }

        public int checkAudioOperation(int code, int usage, int uid, String packageName, QuadFunction<Integer, Integer, Integer, String, Integer> superImpl) {
            if (uid != this.mTargetUid || !isTargetOp(code)) {
                return ((Integer) superImpl.apply(Integer.valueOf(code), Integer.valueOf(usage), Integer.valueOf(uid), packageName)).intValue();
            }
            long identity = Binder.clearCallingIdentity();
            try {
                return ((Integer) superImpl.apply(Integer.valueOf(code), Integer.valueOf(usage), Integer.valueOf(ActivityManagerService.NATIVE_DUMP_TIMEOUT_MS), NotificationShellCmd.NOTIFICATION_PACKAGE)).intValue();
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }

        public int noteOperation(int code, int uid, String packageName, TriFunction<Integer, Integer, String, Integer> superImpl) {
            if (uid != this.mTargetUid || !isTargetOp(code)) {
                return ((Integer) superImpl.apply(Integer.valueOf(code), Integer.valueOf(uid), packageName)).intValue();
            }
            long identity = Binder.clearCallingIdentity();
            try {
                return ActivityManagerService.this.mAppOpsService.noteProxyOperation(code, ActivityManagerService.NATIVE_DUMP_TIMEOUT_MS, NotificationShellCmd.NOTIFICATION_PACKAGE, uid, packageName);
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }

        public int checkPermission(String permName, String pkgName, int userId, TriFunction<String, String, Integer, Integer> superImpl) {
            if (!this.mTargetPackageName.equals(pkgName) || !isTargetPermission(permName)) {
                return ((Integer) superImpl.apply(permName, pkgName, Integer.valueOf(userId))).intValue();
            }
            long identity = Binder.clearCallingIdentity();
            try {
                return ((Integer) superImpl.apply(permName, NotificationShellCmd.NOTIFICATION_PACKAGE, Integer.valueOf(userId))).intValue();
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }

        public int checkUidPermission(String permName, int uid, BiFunction<String, Integer, Integer> superImpl) {
            if (uid != this.mTargetUid || !isTargetPermission(permName)) {
                return superImpl.apply(permName, Integer.valueOf(uid)).intValue();
            }
            long identity = Binder.clearCallingIdentity();
            try {
                return superImpl.apply(permName, Integer.valueOf(ActivityManagerService.NATIVE_DUMP_TIMEOUT_MS)).intValue();
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }

        private boolean isTargetOp(int code) {
            String permission;
            if (this.mPermissions == null || (permission = AppOpsManager.opToPermission(code)) == null) {
                return true;
            }
            return isTargetPermission(permission);
        }

        private boolean isTargetPermission(String permission) {
            String[] strArr = this.mPermissions;
            return strArr == null || ArrayUtils.contains(strArr, permission);
        }
    }

    /* access modifiers changed from: package-private */
    public void maybeTriggerWatchdog() {
        if (SystemProperties.getInt("debug.trigger.watchdog", 0) == 1) {
            Slog.w("ActivityManager", "!!! TRIGGERING WATCHDOG !!!");
            SystemProperties.set("debug.trigger.watchdog", "");
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    Thread.sleep(3600000);
                } catch (InterruptedException e) {
                }
                try {
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
        }
    }

    private boolean isOnOffloadQueue(int flags) {
        return this.mEnableOffloadQueue && (Integer.MIN_VALUE & flags) != 0;
    }

    public ParcelFileDescriptor getLifeMonitor() {
        ParcelFileDescriptor dup;
        if (isCallerShell()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (this.mLifeMonitorFds == null) {
                        this.mLifeMonitorFds = ParcelFileDescriptor.createPipe();
                    }
                    dup = this.mLifeMonitorFds[0].dup();
                } catch (IOException e) {
                    Slog.w("ActivityManager", "Unable to create pipe", e);
                    resetPriorityAfterLockedSection();
                    return null;
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return dup;
        }
        throw new SecurityException("Only shell can call it");
    }

    public void reportKillProcessEvent(int killerPid, int killedPid) {
        Slog.d("ActivityManager", "report kill process: killerPid is:" + killerPid + ", killedPid is:" + killedPid);
        ProcessRecordInjector.reportKillProcessEvent(killerPid, killedPid, (String) null);
    }

    public void registerMiuiAppTransitionAnimationHelper(IMiuiAppTransitionAnimationHelper helper, int displayId) {
        this.mActivityTaskManager.registerMiuiAppTransitionAnimationHelper(helper, displayId);
    }

    public void unregisterMiuiAppTransitionAnimationHelper(int displayId) {
        ActivityTaskManagerService activityTaskManagerService = this.mActivityTaskManager;
        activityTaskManagerService.unregisterMiuiAppTransitionAnimationHelper(activityTaskManagerService.mAnimationHelperDeathRecipient, displayId);
    }

    public void setDummyTranslucent(IBinder token, boolean translucent) {
        this.mActivityTaskManager.setDummyTranslucent(token, translucent);
    }

    public void registerActivityObserver(IMiuiActivityObserver observer, Intent intent) {
        enforceCallingPermission("android.permission.SET_ACTIVITY_WATCHER", "registerActivityObserver()");
        ActivityTaskManagerServiceInjector.getMiuiActivityController().registerActivityObserver(observer, intent);
    }

    public void unregisterActivityObserver(IMiuiActivityObserver observer) {
        ActivityTaskManagerServiceInjector.getMiuiActivityController().unregisterActivityObserver(observer);
    }

    public void setResizeWhiteList(List<String> whiteList) {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "setResizeWhiteList");
        ActivityManagerServiceInjector.setResizeWhiteList(whiteList);
    }

    public void setResizeBlackList(List<String> blackList) {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "setResizeBlackList");
        ActivityManagerServiceInjector.setResizeBlackList(blackList);
    }

    /* access modifiers changed from: private */
    public void setCastPid(int enter, String packageName) {
        ProcessRecord r = null;
        int i = this.mProcessList.mLruProcesses.size() - 1;
        while (true) {
            if (i < 0) {
                break;
            }
            ProcessRecord app = this.mProcessList.mLruProcesses.get(i);
            if (app.thread != null && packageName.equals(app.processName)) {
                r = app;
                break;
            }
            i--;
        }
        this.mCastPid = (enter != 1 || r == null) ? -1 : r.pid;
    }

    public int getCastPid() {
        return this.mCastPid;
    }
}
