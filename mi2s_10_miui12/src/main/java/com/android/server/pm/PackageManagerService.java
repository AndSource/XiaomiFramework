package com.android.server.pm;

import android.app.ActivityManager;
import android.app.ActivityManagerInternal;
import android.app.AppOpsManager;
import android.app.BroadcastOptions;
import android.app.IActivityManager;
import android.app.IApplicationThread;
import android.app.ResourcesManager;
import android.app.admin.IDevicePolicyManager;
import android.app.admin.SecurityLog;
import android.content.ComponentName;
import android.content.Context;
import android.content.IIntentReceiver;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.IntentSender;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.AppsQueryHelper;
import android.content.pm.AuxiliaryResolveInfo;
import android.content.pm.ChangedPackages;
import android.content.pm.ComponentInfo;
import android.content.pm.FeatureInfo;
import android.content.pm.IDexModuleRegisterCallback;
import android.content.pm.IOnPermissionsChangeListener;
import android.content.pm.IPackageDataObserver;
import android.content.pm.IPackageDeleteObserver;
import android.content.pm.IPackageDeleteObserver2;
import android.content.pm.IPackageInstallObserver2;
import android.content.pm.IPackageInstaller;
import android.content.pm.IPackageManager;
import android.content.pm.IPackageManagerNative;
import android.content.pm.IPackageMoveObserver;
import android.content.pm.IPackageStatsObserver;
import android.content.pm.InstantAppInfo;
import android.content.pm.InstantAppRequest;
import android.content.pm.InstrumentationInfo;
import android.content.pm.IntentFilterVerificationInfo;
import android.content.pm.KeySet;
import android.content.pm.ModuleInfo;
import android.content.pm.PackageBackwardCompatibility;
import android.content.pm.PackageInfo;
import android.content.pm.PackageInfoLite;
import android.content.pm.PackageInstaller;
import android.content.pm.PackageList;
import android.content.pm.PackageManager;
import android.content.pm.PackageManagerInternal;
import android.content.pm.PackageParser;
import android.content.pm.PackageUserState;
import android.content.pm.ParceledListSlice;
import android.content.pm.PermissionGroupInfo;
import android.content.pm.PermissionInfo;
import android.content.pm.ProviderInfo;
import android.content.pm.ResolveInfo;
import android.content.pm.SELinuxUtil;
import android.content.pm.ServiceInfo;
import android.content.pm.SharedLibraryInfo;
import android.content.pm.Signature;
import android.content.pm.SuspendDialogInfo;
import android.content.pm.UserInfo;
import android.content.pm.VerifierDeviceIdentity;
import android.content.pm.VerifierInfo;
import android.content.pm.VersionedPackage;
import android.content.pm.dex.DexMetadataHelper;
import android.content.pm.dex.IArtManager;
import android.graphics.Bitmap;
import android.hardware.biometrics.fingerprint.V2_1.RequestStatus;
import android.hardware.display.DisplayManager;
import android.net.Uri;
import android.os.Binder;
import android.os.Build;
import android.os.Bundle;
import android.os.Debug;
import android.os.Environment;
import android.os.FileUtils;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;
import android.os.Parcel;
import android.os.PersistableBundle;
import android.os.Process;
import android.os.RemoteCallbackList;
import android.os.RemoteException;
import android.os.SELinux;
import android.os.ServiceManager;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.os.Trace;
import android.os.UserHandle;
import android.os.UserManager;
import android.os.UserManagerInternal;
import android.os.storage.DiskInfo;
import android.os.storage.IStorageManager;
import android.os.storage.StorageEventListener;
import android.os.storage.StorageManager;
import android.os.storage.StorageManagerInternal;
import android.os.storage.VolumeInfo;
import android.provider.MediaStore;
import android.provider.Settings;
import android.security.KeyStore;
import android.security.SystemKeyStore;
import android.system.ErrnoException;
import android.system.Os;
import android.text.TextUtils;
import android.util.ArrayMap;
import android.util.ArraySet;
import android.util.Base64;
import android.util.BoostFramework;
import android.util.ByteStringUtils;
import android.util.DisplayMetrics;
import android.util.EventLog;
import android.util.ExceptionUtils;
import android.util.IntArray;
import android.util.Log;
import android.util.LogPrinter;
import android.util.LongSparseArray;
import android.util.LongSparseLongArray;
import android.util.MathUtils;
import android.util.PackageUtils;
import android.util.Pair;
import android.util.Slog;
import android.util.SparseArray;
import android.util.SparseBooleanArray;
import android.util.SparseIntArray;
import android.util.StatsLog;
import android.util.TimingsTraceLog;
import android.util.Xml;
import android.util.jar.StrictJarFile;
import android.util.proto.ProtoOutputStream;
import com.android.internal.annotations.GuardedBy;
import com.android.internal.app.IntentForwarderActivity;
import com.android.internal.app.ResolverActivity;
import com.android.internal.content.NativeLibraryHelper;
import com.android.internal.content.PackageHelper;
import com.android.internal.logging.MetricsLogger;
import com.android.internal.os.SomeArgs;
import com.android.internal.util.ArrayUtils;
import com.android.internal.util.ConcurrentUtils;
import com.android.internal.util.FastXmlSerializer;
import com.android.internal.util.FunctionalUtils;
import com.android.internal.util.IndentingPrintWriter;
import com.android.internal.util.IntPair;
import com.android.internal.util.Preconditions;
import com.android.internal.util.function.TriFunction;
import com.android.server.AttributeCache;
import com.android.server.DeviceIdleController;
import com.android.server.LocalServices;
import com.android.server.PackageWatchdog;
import com.android.server.ServiceThread;
import com.android.server.SystemConfig;
import com.android.server.am.BroadcastQueueInjector;
import com.android.server.job.JobSchedulerShellCommand;
import com.android.server.job.controllers.JobStatus;
import com.android.server.net.NetworkPolicyManagerInternal;
import com.android.server.net.watchlist.WatchlistLoggingHandler;
import com.android.server.pm.CompilerStats;
import com.android.server.pm.Installer;
import com.android.server.pm.PackageInstallerService;
import com.android.server.pm.PackageManagerService;
import com.android.server.pm.Settings;
import com.android.server.pm.dex.ArtManagerService;
import com.android.server.pm.dex.DexManager;
import com.android.server.pm.dex.DexoptOptions;
import com.android.server.pm.dex.PackageDexUsage;
import com.android.server.pm.dex.ViewCompiler;
import com.android.server.pm.permission.BasePermission;
import com.android.server.pm.permission.DefaultPermissionGrantPolicy;
import com.android.server.pm.permission.PermissionManagerServiceInternal;
import com.android.server.pm.permission.PermissionsState;
import com.android.server.security.VerityUtils;
import com.android.server.slice.SliceClientPermissions;
import com.android.server.storage.DeviceStorageMonitorInternal;
import com.android.server.usage.UnixCalendar;
import com.android.server.usb.descriptors.UsbTerminalTypes;
import com.android.server.wm.ActivityTaskManagerInternal;
import dalvik.system.CloseGuard;
import dalvik.system.VMRuntime;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.nio.charset.StandardCharsets;
import java.security.DigestException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Predicate;
import libcore.io.IoUtils;
import libcore.util.EmptyArray;
import miui.securityspace.XSpaceUserHandle;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;

public class PackageManagerService extends IPackageManager.Stub implements PackageSender {
    private static final String ATTR_IS_GRANTED = "g";
    private static final String ATTR_PACKAGE_NAME = "pkg";
    private static final String ATTR_PERMISSION_NAME = "name";
    private static final String ATTR_REVOKE_ON_UPGRADE = "rou";
    private static final String ATTR_USER_FIXED = "fixed";
    private static final String ATTR_USER_SET = "set";
    private static final int BLUETOOTH_UID = 1002;
    private static final long BROADCAST_DELAY = 1000;
    private static final long BROADCAST_DELAY_DURING_STARTUP = 10000;
    static final int CHECK_PENDING_VERIFICATION = 16;
    static final boolean CLEAR_RUNTIME_PERMISSIONS_ON_UPGRADE = false;
    public static final String COMPRESSED_EXTENSION = ".gz";
    private static final boolean DEBUG_ABI_SELECTION = false;
    private static final boolean DEBUG_APP_DATA = false;
    private static final boolean DEBUG_BACKUP = false;
    private static final boolean DEBUG_BROADCASTS = false;
    public static final boolean DEBUG_COMPRESSION = Build.IS_DEBUGGABLE;
    public static final boolean DEBUG_DEXOPT = false;
    static final boolean DEBUG_DOMAIN_VERIFICATION = false;
    public static final boolean DEBUG_INSTALL = false;
    /* access modifiers changed from: private */
    public static final boolean DEBUG_INSTANT = Build.IS_DEBUGGABLE;
    private static final boolean DEBUG_INTENT_MATCHING = false;
    private static final boolean DEBUG_PACKAGE_INFO = false;
    public static final boolean DEBUG_PACKAGE_SCANNING = false;
    public static final boolean DEBUG_PERMISSIONS = false;
    static final boolean DEBUG_PREFERRED = false;
    public static final boolean DEBUG_REMOVE = false;
    static final boolean DEBUG_SD_INSTALL = false;
    public static final boolean DEBUG_SETTINGS = false;
    private static final boolean DEBUG_SHARED_LIBRARIES = false;
    static final boolean DEBUG_UPGRADE = false;
    private static final boolean DEBUG_VERIFY = false;
    private static final long DEFAULT_ENABLE_ROLLBACK_TIMEOUT_MILLIS = 10000;
    private static final long DEFAULT_MANDATORY_FSTRIM_INTERVAL = 259200000;
    private static final boolean DEFAULT_PACKAGE_PARSER_CACHE_ENABLED = true;
    private static final long DEFAULT_UNUSED_STATIC_SHARED_LIB_MIN_CACHE_PERIOD = 7200000;
    private static final int DEFAULT_VERIFICATION_RESPONSE = 1;
    private static final long DEFAULT_VERIFICATION_TIMEOUT = 10000;
    private static final boolean DEFAULT_VERIFY_ENABLE = true;
    static final int DEFERRED_NO_KILL_INSTALL_OBSERVER = 24;
    static final int DEFERRED_NO_KILL_INSTALL_OBSERVER_DELAY_MS = 500;
    static final int DEFERRED_NO_KILL_POST_DELETE = 23;
    static final int DEFERRED_NO_KILL_POST_DELETE_DELAY_MS = 3000;
    /* access modifiers changed from: private */
    public static final int[] EMPTY_INT_ARRAY = new int[0];
    private static final boolean ENABLE_FREE_CACHE_V2 = SystemProperties.getBoolean("fw.free_cache_v2", true);
    static final int ENABLE_ROLLBACK_STATUS = 21;
    static final int ENABLE_ROLLBACK_TIMEOUT = 22;
    private static final boolean HIDE_EPHEMERAL_APIS = false;
    static final int INIT_COPY = 5;
    private static final String[] INSTANT_APP_BROADCAST_PERMISSION = {"android.permission.ACCESS_INSTANT_APPS"};
    static final int INSTANT_APP_RESOLUTION_PHASE_TWO = 20;
    static final int INTENT_FILTER_VERIFIED = 18;
    private static final String KEYGUARD_PACKAGE_NAME = "com.android.keyguard";
    private static final String KILL_APP_REASON_GIDS_CHANGED = "permission grant or revoke changed gids";
    private static final String KILL_APP_REASON_PERMISSIONS_REVOKED = "permissions revoked";
    private static final int LOG_UID = 1007;
    private static final int NETWORKSTACK_UID = 1073;
    private static final int NFC_UID = 1027;
    private static final String ODM_OVERLAY_DIR = "/odm/overlay";
    private static final String OEM_OVERLAY_DIR = "/oem/overlay";
    private static final String PACKAGE_MIME_TYPE = "application/vnd.android.package-archive";
    private static final String PACKAGE_SCHEME = "package";
    static final int PACKAGE_VERIFIED = 15;
    public static final String PLATFORM_PACKAGE_NAME = "android";
    static final int POST_INSTALL = 9;
    private static final String PRECOMPILE_LAYOUTS = "pm.precompile_layouts";
    private static final String PRODUCT_OVERLAY_DIR = "/product/overlay";
    private static final String PRODUCT_SERVICES_OVERLAY_DIR = "/product_services/overlay";
    private static final String PROPERTY_ENABLE_ROLLBACK_TIMEOUT_MILLIS = "enable_rollback_timeout";
    private static final int RADIO_UID = 1001;
    public static final int REASON_AB_OTA = 4;
    public static final int REASON_BACKGROUND_DEXOPT = 3;
    public static final int REASON_BOOT = 1;
    public static final int REASON_BOOTING = 8;
    public static final int REASON_FIRST_BOOT = 0;
    public static final int REASON_INACTIVE_PACKAGE_DOWNGRADE = 5;
    public static final int REASON_INSTALL = 2;
    public static final int REASON_LAST = 8;
    public static final int REASON_SECONDARY = 7;
    public static final int REASON_SHARED = 6;
    public static final int REASON_UNKNOWN = -1;
    static final int SCAN_AS_FULL_APP = 32768;
    static final int SCAN_AS_INSTANT_APP = 16384;
    static final int SCAN_AS_ODM = 8388608;
    static final int SCAN_AS_OEM = 524288;
    static final int SCAN_AS_PRIVILEGED = 262144;
    static final int SCAN_AS_PRODUCT = 2097152;
    static final int SCAN_AS_PRODUCT_SERVICES = 4194304;
    static final int SCAN_AS_SYSTEM = 131072;
    static final int SCAN_AS_VENDOR = 1048576;
    static final int SCAN_AS_VIRTUAL_PRELOAD = 65536;
    static final int SCAN_BOOTING = 16;
    static final int SCAN_CHECK_ONLY = 1024;
    static final int SCAN_DONT_KILL_APP = 2048;
    static final int SCAN_FIRST_BOOT_OR_UPGRADE = 8192;
    static final int SCAN_IGNORE_FROZEN = 4096;
    static final int SCAN_INITIAL = 512;
    static final int SCAN_MOVE = 256;
    static final int SCAN_NEW_INSTALL = 4;
    static final int SCAN_NO_DEX = 1;
    static final int SCAN_REQUIRE_KNOWN = 128;
    static final int SCAN_UPDATE_SIGNATURE = 2;
    static final int SCAN_UPDATE_TIME = 8;
    private static final String SD_ENCRYPTION_ALGORITHM = "AES";
    private static final String SD_ENCRYPTION_KEYSTORE_NAME = "AppsOnSD";
    static final int SEND_PENDING_BROADCAST = 1;
    private static final int SE_UID = 1068;
    private static final int SHELL_UID = 2000;
    static final int START_INTENT_FILTER_VERIFICATIONS = 17;
    private static final String STATIC_SHARED_LIB_DELIMITER = "_";
    public static final String STUB_SUFFIX = "-Stub";
    private static final int SYSTEM_RUNTIME_GRANT_MASK = 52;
    static final String TAG = "PackageManager";
    private static final String TAG_ALL_GRANTS = "rt-grants";
    private static final String TAG_DEFAULT_APPS = "da";
    private static final String TAG_GRANT = "grant";
    private static final String TAG_INTENT_FILTER_VERIFICATION = "iv";
    private static final String TAG_PERMISSION = "perm";
    private static final String TAG_PERMISSION_BACKUP = "perm-grant-backup";
    private static final String TAG_PREFERRED_BACKUP = "pa";
    private static final int TYPE_ACTIVITY = 1;
    private static final int TYPE_PROVIDER = 4;
    private static final int TYPE_RECEIVER = 2;
    private static final int TYPE_SERVICE = 3;
    private static final int TYPE_UNKNOWN = 0;
    private static final int USER_RUNTIME_GRANT_MASK = 11;
    private static final String VENDOR_OVERLAY_DIR = "/vendor/overlay";
    static final long WATCHDOG_TIMEOUT = 600000;
    static final int WRITE_PACKAGE_LIST = 19;
    static final int WRITE_PACKAGE_RESTRICTIONS = 14;
    static final int WRITE_SETTINGS = 13;
    static final int WRITE_SETTINGS_DELAY = 10000;
    private static final File sAppInstallDir = new File(Environment.getDataDirectory(), "app");
    private static final File sAppLib32InstallDir = new File(Environment.getDataDirectory(), "app-lib");
    private static final Intent sBrowserIntent = new Intent();
    private static final Comparator<ProviderInfo> sProviderInitOrderSorter = $$Lambda$PackageManagerService$gOdSzzOoHvFHJbKlJkAgg4fzOH8.INSTANCE;
    static UserManagerService sUserManager;
    private ActivityManagerInternal mActivityManagerInternal;
    private ActivityTaskManagerInternal mActivityTaskManagerInternal;
    ApplicationInfo mAndroidApplication;
    /* access modifiers changed from: private */
    public final ApexManager mApexManager;
    final String mAppPredictionServicePackage;
    final ArtManagerService mArtManagerService;
    @GuardedBy({"mAvailableFeatures"})
    final ArrayMap<String, FeatureInfo> mAvailableFeatures;
    private File mCacheDir;
    @GuardedBy({"mPackages"})
    final SparseArray<SparseArray<String>> mChangedPackages = new SparseArray<>();
    @GuardedBy({"mPackages"})
    int mChangedPackagesSequenceNumber;
    @GuardedBy({"mPackages"})
    final SparseArray<Map<String, Integer>> mChangedPackagesSequenceNumbers = new SparseArray<>();
    @GuardedBy({"mPackages"})
    private PackageManagerInternal.CheckPermissionDelegate mCheckPermissionDelegate;
    private final CompilerStats mCompilerStats = new CompilerStats();
    private final ComponentResolver mComponentResolver;
    final String mConfiguratorPackage;
    final Context mContext;
    ComponentName mCustomResolverComponentName;
    final int mDefParseFlags;
    /* access modifiers changed from: private */
    @GuardedBy({"mPackages"})
    public PackageManagerInternal.DefaultBrowserProvider mDefaultBrowserProvider;
    /* access modifiers changed from: private */
    @GuardedBy({"mPackages"})
    public PackageManagerInternal.DefaultDialerProvider mDefaultDialerProvider;
    /* access modifiers changed from: private */
    @GuardedBy({"mPackages"})
    public PackageManagerInternal.DefaultHomeProvider mDefaultHomeProvider;
    final DefaultPermissionGrantPolicy mDefaultPermissionPolicy;
    @GuardedBy({"mPackages"})
    private final SparseIntArray mDefaultPermissionsGrantedUsers = new SparseIntArray();
    private DeviceIdleController.LocalService mDeviceIdleController;
    private final DexManager mDexManager;
    @GuardedBy({"mPackages"})
    private boolean mDexOptDialogShown;
    /* access modifiers changed from: private */
    public ArraySet<Integer> mDirtyUsers = new ArraySet<>();
    final String mDocumenterPackage;
    /* access modifiers changed from: private */
    public final ArraySet<String> mExistingSystemPackages = new ArraySet<>();
    private final ArrayMap<String, File> mExpectingBetter = new ArrayMap<>();
    PackageManagerInternal.ExternalSourcesPolicy mExternalSourcesPolicy;
    final boolean mFactoryTest;
    boolean mFirstBoot;
    @GuardedBy({"mPackages"})
    final ArraySet<String> mFrozenPackages = new ArraySet<>();
    final PackageHandler mHandler;
    final ServiceThread mHandlerThread;
    volatile boolean mHasSystemUidErrors;
    final String mIncidentReportApproverPackage;
    final Object mInstallLock = new Object();
    @GuardedBy({"mInstallLock"})
    final Installer mInstaller;
    final PackageInstallerService mInstallerService;
    ActivityInfo mInstantAppInstallerActivity;
    final ResolveInfo mInstantAppInstallerInfo = new ResolveInfo();
    /* access modifiers changed from: private */
    public final InstantAppRegistry mInstantAppRegistry;
    final InstantAppResolverConnection mInstantAppResolverConnection;
    final ComponentName mInstantAppResolverSettingsComponent;
    final ArrayMap<ComponentName, PackageParser.Instrumentation> mInstrumentation = new ArrayMap<>();
    final SparseArray<IntentFilterVerificationState> mIntentFilterVerificationStates = new SparseArray<>();
    private int mIntentFilterVerificationToken = 0;
    /* access modifiers changed from: private */
    public final IntentFilterVerifier<PackageParser.ActivityIntentInfo> mIntentFilterVerifier;
    private final ComponentName mIntentFilterVerifierComponent;
    private boolean mIsPerfLockAcquired;
    final boolean mIsPreNMR1Upgrade;
    final boolean mIsPreNUpgrade;
    final boolean mIsPreQUpgrade;
    final boolean mIsUpgrade;
    @GuardedBy({"mPackages"})
    final SparseIntArray mIsolatedOwners = new SparseIntArray();
    /* access modifiers changed from: private */
    public List<String> mKeepUninstalledPackages;
    @GuardedBy({"mLoadedVolumes"})
    final ArraySet<String> mLoadedVolumes = new ArraySet<>();
    private boolean mMediaMounted = false;
    final DisplayMetrics mMetrics;
    /* access modifiers changed from: private */
    public final ModuleInfoProvider mModuleInfoProvider;
    /* access modifiers changed from: private */
    public final MoveCallbacks mMoveCallbacks;
    int mNextInstallToken = 1;
    private AtomicInteger mNextMoveId = new AtomicInteger();
    private final Map<String, Pair<PackageInstalledInfo, IPackageInstallObserver2>> mNoKillInstallObservers = Collections.synchronizedMap(new HashMap());
    /* access modifiers changed from: private */
    public final OnPermissionChangeListeners mOnPermissionChangeListeners;
    final boolean mOnlyCore;
    final String mOptionalVerifierPackage;
    private final PackageDexOptimizer mPackageDexOptimizer;
    /* access modifiers changed from: private */
    @GuardedBy({"mPackages"})
    public final ArraySet<PackageManagerInternal.PackageListObserver> mPackageListObservers = new ArraySet<>();
    final PackageParser.Callback mPackageParserCallback = new PackageParserCallback();
    private final PackageUsage mPackageUsage = new PackageUsage();
    @GuardedBy({"mPackages"})
    final ArrayMap<String, PackageParser.Package> mPackages = new ArrayMap<>();
    final ParallelPackageParserCallback mParallelPackageParserCallback = new ParallelPackageParserCallback();
    final PendingPackageBroadcasts mPendingBroadcasts = new PendingPackageBroadcasts();
    final SparseArray<InstallParams> mPendingEnableRollback = new SparseArray<>();
    private int mPendingEnableRollbackToken = 0;
    final SparseArray<PackageVerificationState> mPendingVerification = new SparseArray<>();
    private int mPendingVerificationToken = 0;
    private BoostFramework mPerfBoost;
    /* access modifiers changed from: private */
    public PermissionManagerServiceInternal.PermissionCallback mPermissionCallback = new PermissionManagerServiceInternal.PermissionCallback() {
        public /* synthetic */ void lambda$onGidsChanged$0$PackageManagerService$1(int appId, int userId) {
            PackageManagerService.this.killUid(appId, userId, PackageManagerService.KILL_APP_REASON_GIDS_CHANGED);
        }

        public void onGidsChanged(int appId, int userId) {
            PackageManagerService.this.mHandler.post(new Runnable(appId, userId) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    PackageManagerService.AnonymousClass1.this.lambda$onGidsChanged$0$PackageManagerService$1(this.f$1, this.f$2);
                }
            });
        }

        public void onPermissionGranted(int uid, int userId) {
            PackageManagerService.this.mOnPermissionChangeListeners.onPermissionsChanged(uid);
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mSettings.writeRuntimePermissionsForUserLPr(userId, false);
            }
        }

        public void onInstallPermissionGranted() {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.scheduleWriteSettingsLocked();
            }
        }

        public void onPermissionRevoked(int uid, int userId) {
            onPermissionRevoked(uid, userId, true);
        }

        public void onPermissionRevoked(int uid, int userId, boolean kill) {
            PackageManagerService.this.mOnPermissionChangeListeners.onPermissionsChanged(uid);
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mSettings.writeRuntimePermissionsForUserLPr(userId, true);
            }
            if (kill) {
                PackageManagerService.this.killUid(UserHandle.getAppId(uid), userId, PackageManagerService.KILL_APP_REASON_PERMISSIONS_REVOKED);
            }
        }

        public void onInstallPermissionRevoked() {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.scheduleWriteSettingsLocked();
            }
        }

        public void onPermissionUpdated(int[] updatedUserIds, boolean sync) {
            synchronized (PackageManagerService.this.mPackages) {
                for (int userId : updatedUserIds) {
                    PackageManagerService.this.mSettings.writeRuntimePermissionsForUserLPr(userId, sync);
                }
            }
        }

        public void onInstallPermissionUpdated() {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.scheduleWriteSettingsLocked();
            }
        }

        public void onPermissionRemoved() {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mSettings.writeLPr();
            }
        }
    };
    /* access modifiers changed from: private */
    public final PermissionManagerServiceInternal mPermissionManager;
    PackageParser.Package mPlatformPackage;
    private Future<?> mPrepareAppDataFuture;
    private final ProcessLoggingHandler mProcessLoggingHandler;
    boolean mPromoteSystemApps;
    @GuardedBy({"mProtectedBroadcasts"})
    final ArraySet<String> mProtectedBroadcasts = new ArraySet<>();
    final ProtectedPackages mProtectedPackages;
    String mRequiredInstallerPackage;
    final String mRequiredPermissionControllerPackage;
    final String mRequiredUninstallerPackage;
    final String mRequiredVerifierPackage;
    final ActivityInfo mResolveActivity = new ActivityInfo();
    ComponentName mResolveComponentName;
    final ResolveInfo mResolveInfo = new ResolveInfo();
    boolean mResolverReplaced = false;
    final SparseArray<PostInstallData> mRunningInstalls = new SparseArray<>();
    volatile boolean mSafeMode;
    final int mSdkVersion = Build.VERSION.SDK_INT;
    final String[] mSeparateProcesses;
    private long mServiceStartWithDelay;
    final String mServicesSystemSharedLibraryPackageName;
    @GuardedBy({"mPackages"})
    final Settings mSettings;
    final String mSetupWizardPackage;
    final ArrayMap<String, LongSparseArray<SharedLibraryInfo>> mSharedLibraries = new ArrayMap<>();
    final String mSharedSystemSharedLibraryPackageName;
    final ArrayMap<String, LongSparseArray<SharedLibraryInfo>> mStaticLibsByDeclaringPackage = new ArrayMap<>();
    private StorageEventListener mStorageListener = new StorageEventListener() {
        public void onVolumeStateChanged(VolumeInfo vol, int oldState, int newState) {
            if (vol.type != 1) {
                return;
            }
            if (vol.state == 2) {
                String volumeUuid = vol.getFsUuid();
                PackageManagerService.sUserManager.reconcileUsers(volumeUuid);
                PackageManagerService.this.reconcileApps(volumeUuid);
                PackageManagerService.this.mInstallerService.onPrivateVolumeMounted(volumeUuid);
                PackageManagerService.this.loadPrivatePackages(vol);
            } else if (vol.state == 5) {
                PackageManagerService.this.unloadPrivatePackages(vol);
            }
        }

        public void onVolumeForgotten(String fsUuid) {
            if (TextUtils.isEmpty(fsUuid)) {
                Slog.e(PackageManagerService.TAG, "Forgetting internal storage is probably a mistake; ignoring");
                return;
            }
            synchronized (PackageManagerService.this.mPackages) {
                for (PackageSetting ps : PackageManagerService.this.mSettings.getVolumePackagesLPr(fsUuid)) {
                    Slog.d(PackageManagerService.TAG, "Destroying " + ps.name + " because volume was forgotten");
                    PackageManagerService.this.deletePackageVersioned(new VersionedPackage(ps.name, -1), new PackageManager.LegacyPackageDeleteObserver((IPackageDeleteObserver) null).getBinder(), 0, 2);
                    AttributeCache.instance().removePackage(ps.name);
                }
                PackageManagerService.this.mSettings.onVolumeForgotten(fsUuid);
                PackageManagerService.this.mSettings.writeLPr();
            }
        }
    };
    private StorageManagerInternal mStorageManagerInternal;
    final String mStorageManagerPackage;
    volatile boolean mSystemReady;
    final String mSystemTextClassifierPackage;
    final ArraySet<String> mTransferedPackages = new ArraySet<>();
    private UserManagerInternal mUserManagerInternal;
    private final SparseBooleanArray mUserNeedsBadging = new SparseBooleanArray();
    private final ViewCompiler mViewCompiler;
    /* access modifiers changed from: private */
    public volatile SparseBooleanArray mWebInstantAppsDisabled = new SparseBooleanArray();
    final String mWellbeingPackage;

    private interface BlobXmlRestorer {
        void apply(XmlPullParser xmlPullParser, int i) throws IOException, XmlPullParserException;
    }

    @Retention(RetentionPolicy.SOURCE)
    public @interface ComponentType {
    }

    private interface IntentFilterVerifier<T extends IntentFilter> {
        boolean addOneIntentFilterVerification(int i, int i2, int i3, T t, String str);

        void receiveVerificationResponse(int i);

        void startVerifications(int i);
    }

    @Retention(RetentionPolicy.SOURCE)
    public @interface ScanFlags {
    }

    static /* synthetic */ int access$3208(PackageManagerService x0) {
        int i = x0.mPendingVerificationToken;
        x0.mPendingVerificationToken = i + 1;
        return i;
    }

    static /* synthetic */ int access$3508(PackageManagerService x0) {
        int i = x0.mPendingEnableRollbackToken;
        x0.mPendingEnableRollbackToken = i + 1;
        return i;
    }

    static {
        sBrowserIntent.setAction("android.intent.action.VIEW");
        sBrowserIntent.addCategory("android.intent.category.BROWSABLE");
        sBrowserIntent.setData(Uri.parse("http:"));
        sBrowserIntent.addFlags(512);
    }

    class PackageParserCallback implements PackageParser.Callback {
        PackageParserCallback() {
        }

        public final boolean hasFeature(String feature) {
            return PackageManagerService.this.hasSystemFeature(feature, 0);
        }

        /* access modifiers changed from: package-private */
        public final List<PackageParser.Package> getStaticOverlayPackages(Collection<PackageParser.Package> allPackages, String targetPackageName) {
            if (PackageManagerService.PLATFORM_PACKAGE_NAME.equals(targetPackageName)) {
                return null;
            }
            List<PackageParser.Package> overlayPackages = null;
            for (PackageParser.Package p : allPackages) {
                if (targetPackageName.equals(p.mOverlayTarget) && p.mOverlayIsStatic) {
                    if (overlayPackages == null) {
                        overlayPackages = new ArrayList<>();
                    }
                    overlayPackages.add(p);
                }
            }
            if (overlayPackages != null) {
                overlayPackages.sort(Comparator.comparingInt($$Lambda$PackageManagerService$PackageParserCallback$xinvBJUpQse3J1IBBKjvYTIW8MQ.INSTANCE));
            }
            return overlayPackages;
        }

        /* access modifiers changed from: package-private */
        public final String[] getStaticOverlayPaths(List<PackageParser.Package> overlayPackages, String targetPath) {
            if (overlayPackages == null || overlayPackages.isEmpty()) {
                return null;
            }
            List<String> overlayPathList = null;
            for (PackageParser.Package overlayPackage : overlayPackages) {
                if (targetPath == null) {
                    if (overlayPathList == null) {
                        overlayPathList = new ArrayList<>();
                    }
                    overlayPathList.add(overlayPackage.baseCodePath);
                } else {
                    try {
                        PackageManagerService.this.mInstaller.idmap(targetPath, overlayPackage.baseCodePath, UserHandle.getSharedAppGid(UserHandle.getUserGid(0)));
                        if (overlayPathList == null) {
                            overlayPathList = new ArrayList<>();
                        }
                        overlayPathList.add(overlayPackage.baseCodePath);
                    } catch (Installer.InstallerException e) {
                        Slog.e(PackageManagerService.TAG, "Failed to generate idmap for " + targetPath + " and " + overlayPackage.baseCodePath);
                    }
                }
            }
            if (overlayPathList == null) {
                return null;
            }
            return (String[]) overlayPathList.toArray(new String[0]);
        }

        /* Debug info: failed to restart local var, previous not found, register: 3 */
        /* access modifiers changed from: package-private */
        public String[] getStaticOverlayPaths(String targetPackageName, String targetPath) {
            List<PackageParser.Package> overlayPackages;
            String[] staticOverlayPaths;
            synchronized (PackageManagerService.this.mInstallLock) {
                synchronized (PackageManagerService.this.mPackages) {
                    overlayPackages = getStaticOverlayPackages(PackageManagerService.this.mPackages.values(), targetPackageName);
                }
                staticOverlayPaths = getStaticOverlayPaths(overlayPackages, targetPath);
            }
            return staticOverlayPaths;
        }

        public final String[] getOverlayApks(String targetPackageName) {
            return getStaticOverlayPaths(targetPackageName, (String) null);
        }

        public final String[] getOverlayPaths(String targetPackageName, String targetPath) {
            return getStaticOverlayPaths(targetPackageName, targetPath);
        }
    }

    class ParallelPackageParserCallback extends PackageParserCallback {
        List<PackageParser.Package> mOverlayPackages = null;

        ParallelPackageParserCallback() {
            super();
        }

        /* access modifiers changed from: package-private */
        public void findStaticOverlayPackages() {
            synchronized (PackageManagerService.this.mPackages) {
                for (PackageParser.Package p : PackageManagerService.this.mPackages.values()) {
                    if (p.mOverlayIsStatic) {
                        if (this.mOverlayPackages == null) {
                            this.mOverlayPackages = new ArrayList();
                        }
                        this.mOverlayPackages.add(p);
                    }
                }
            }
        }

        /* access modifiers changed from: package-private */
        public synchronized String[] getStaticOverlayPaths(String targetPackageName, String targetPath) {
            String[] strArr;
            if (this.mOverlayPackages == null) {
                strArr = null;
            } else {
                strArr = getStaticOverlayPaths(getStaticOverlayPackages(this.mOverlayPackages, targetPackageName), targetPath);
            }
            return strArr;
        }
    }

    private static class IFVerificationParams {
        PackageParser.Package pkg;
        boolean replacing;
        int userId;
        int verifierUid;

        public IFVerificationParams(PackageParser.Package _pkg, boolean _replacing, int _userId, int _verifierUid) {
            this.pkg = _pkg;
            this.replacing = _replacing;
            this.userId = _userId;
            this.verifierUid = _verifierUid;
        }
    }

    private class IntentVerifierProxy implements IntentFilterVerifier<PackageParser.ActivityIntentInfo> {
        private Context mContext;
        private ArrayList<Integer> mCurrentIntentFilterVerifications = new ArrayList<>();
        private ComponentName mIntentFilterVerifierComponent;

        public IntentVerifierProxy(Context context, ComponentName verifierComponent) {
            this.mContext = context;
            this.mIntentFilterVerifierComponent = verifierComponent;
        }

        private String getDefaultScheme() {
            return "https";
        }

        public void startVerifications(int userId) {
            int count = this.mCurrentIntentFilterVerifications.size();
            for (int n = 0; n < count; n++) {
                int verificationId = this.mCurrentIntentFilterVerifications.get(n).intValue();
                IntentFilterVerificationState ivs = PackageManagerService.this.mIntentFilterVerificationStates.get(verificationId);
                String packageName = ivs.getPackageName();
                ArrayList<PackageParser.ActivityIntentInfo> filters = ivs.getFilters();
                int filterCount = filters.size();
                ArraySet<String> domainsSet = new ArraySet<>();
                for (int m = 0; m < filterCount; m++) {
                    domainsSet.addAll(filters.get(m).getHostsList());
                }
                synchronized (PackageManagerService.this.mPackages) {
                    if (PackageManagerService.this.mSettings.createIntentFilterVerificationIfNeededLPw(packageName, domainsSet) != null) {
                        PackageManagerService.this.scheduleWriteSettingsLocked();
                    }
                }
                sendVerificationRequest(verificationId, ivs);
            }
            this.mCurrentIntentFilterVerifications.clear();
        }

        private void sendVerificationRequest(int verificationId, IntentFilterVerificationState ivs) {
            Intent verificationIntent = new Intent("android.intent.action.INTENT_FILTER_NEEDS_VERIFICATION");
            verificationIntent.putExtra("android.content.pm.extra.INTENT_FILTER_VERIFICATION_ID", verificationId);
            verificationIntent.putExtra("android.content.pm.extra.INTENT_FILTER_VERIFICATION_URI_SCHEME", getDefaultScheme());
            verificationIntent.putExtra("android.content.pm.extra.INTENT_FILTER_VERIFICATION_HOSTS", ivs.getHostsString());
            verificationIntent.putExtra("android.content.pm.extra.INTENT_FILTER_VERIFICATION_PACKAGE_NAME", ivs.getPackageName());
            verificationIntent.setComponent(this.mIntentFilterVerifierComponent);
            verificationIntent.addFlags(268435456);
            long whitelistTimeout = PackageManagerService.this.getVerificationTimeout();
            BroadcastOptions options = BroadcastOptions.makeBasic();
            options.setTemporaryAppWhitelistDuration(whitelistTimeout);
            PackageManagerService.this.getDeviceIdleController().addPowerSaveTempWhitelistApp(Process.myUid(), this.mIntentFilterVerifierComponent.getPackageName(), whitelistTimeout, 0, true, "intent filter verifier");
            this.mContext.sendBroadcastAsUser(verificationIntent, UserHandle.SYSTEM, (String) null, options.toBundle());
        }

        public void receiveVerificationResponse(int verificationId) {
            IntentFilterVerificationInfo ivi;
            IntentFilterVerificationState ivs = PackageManagerService.this.mIntentFilterVerificationStates.get(verificationId);
            boolean verified = ivs.isVerified();
            ArrayList<PackageParser.ActivityIntentInfo> filters = ivs.getFilters();
            int count = filters.size();
            for (int n = 0; n < count; n++) {
                filters.get(n).setVerified(verified);
            }
            PackageManagerService.this.mIntentFilterVerificationStates.remove(verificationId);
            String packageName = ivs.getPackageName();
            synchronized (PackageManagerService.this.mPackages) {
                ivi = PackageManagerService.this.mSettings.getIntentFilterVerificationLPr(packageName);
            }
            if (ivi == null) {
                Slog.w(PackageManagerService.TAG, "IntentFilterVerificationInfo not found for verificationId:" + verificationId + " packageName:" + packageName);
                return;
            }
            synchronized (PackageManagerService.this.mPackages) {
                if (verified) {
                    ivi.setStatus(2);
                } else {
                    ivi.setStatus(1);
                }
                PackageManagerService.this.scheduleWriteSettingsLocked();
                int userId = ivs.getUserId();
                if (userId != -1) {
                    int userStatus = PackageManagerService.this.mSettings.getIntentFilterVerificationStatusLPr(packageName, userId);
                    int updatedStatus = 0;
                    boolean needUpdate = false;
                    if (userStatus == 0) {
                        if (verified) {
                            updatedStatus = 2;
                        }
                        needUpdate = true;
                    } else if (userStatus != 1) {
                        if (userStatus == 2) {
                            if (!verified) {
                                if (!SystemConfig.getInstance().getLinkedApps().contains(packageName)) {
                                    needUpdate = true;
                                }
                            }
                        }
                    } else if (verified) {
                        updatedStatus = 2;
                        needUpdate = true;
                    }
                    if (needUpdate) {
                        PackageManagerService.this.mSettings.updateIntentFilterVerificationStatusLPw(packageName, updatedStatus, userId);
                        PackageManagerService.this.scheduleWritePackageRestrictionsLocked(userId);
                    }
                } else {
                    Slog.i(PackageManagerService.TAG, "autoVerify ignored when installing for all users");
                }
            }
        }

        public boolean addOneIntentFilterVerification(int verifierUid, int userId, int verificationId, PackageParser.ActivityIntentInfo filter, String packageName) {
            if (!PackageManagerService.hasValidDomains(filter)) {
                return false;
            }
            IntentFilterVerificationState ivs = PackageManagerService.this.mIntentFilterVerificationStates.get(verificationId);
            if (ivs == null) {
                ivs = createDomainVerificationState(verifierUid, userId, verificationId, packageName);
            }
            ivs.addFilter(filter);
            return true;
        }

        private IntentFilterVerificationState createDomainVerificationState(int verifierUid, int userId, int verificationId, String packageName) {
            IntentFilterVerificationState ivs = new IntentFilterVerificationState(verifierUid, userId, packageName);
            ivs.setPendingState();
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mIntentFilterVerificationStates.append(verificationId, ivs);
                this.mCurrentIntentFilterVerifications.add(Integer.valueOf(verificationId));
            }
            return ivs;
        }
    }

    /* access modifiers changed from: private */
    public static boolean hasValidDomains(PackageParser.ActivityIntentInfo filter) {
        return filter.hasCategory("android.intent.category.BROWSABLE") && (filter.hasDataScheme("http") || filter.hasDataScheme("https"));
    }

    static class PendingPackageBroadcasts {
        final SparseArray<ArrayMap<String, ArrayList<String>>> mUidMap = new SparseArray<>(2);

        public ArrayList<String> get(int userId, String packageName) {
            return getOrAllocate(userId).get(packageName);
        }

        public void put(int userId, String packageName, ArrayList<String> components) {
            getOrAllocate(userId).put(packageName, components);
        }

        public void remove(int userId, String packageName) {
            ArrayMap<String, ArrayList<String>> packages = this.mUidMap.get(userId);
            if (packages != null) {
                packages.remove(packageName);
            }
        }

        public void remove(int userId) {
            this.mUidMap.remove(userId);
        }

        public int userIdCount() {
            return this.mUidMap.size();
        }

        public int userIdAt(int n) {
            return this.mUidMap.keyAt(n);
        }

        public ArrayMap<String, ArrayList<String>> packagesForUserId(int userId) {
            return this.mUidMap.get(userId);
        }

        public int size() {
            int num = 0;
            for (int i = 0; i < this.mUidMap.size(); i++) {
                num += this.mUidMap.valueAt(i).size();
            }
            return num;
        }

        public void clear() {
            this.mUidMap.clear();
        }

        private ArrayMap<String, ArrayList<String>> getOrAllocate(int userId) {
            ArrayMap<String, ArrayList<String>> map = this.mUidMap.get(userId);
            if (map != null) {
                return map;
            }
            ArrayMap<String, ArrayList<String>> map2 = new ArrayMap<>();
            this.mUidMap.put(userId, map2);
            return map2;
        }
    }

    static class PostInstallData {
        public final InstallArgs args;
        public final Runnable mPostInstallRunnable;
        public final PackageInstalledInfo res;

        PostInstallData(InstallArgs _a, PackageInstalledInfo _r, Runnable postInstallRunnable) {
            this.args = _a;
            this.res = _r;
            this.mPostInstallRunnable = postInstallRunnable;
        }
    }

    class PackageHandler extends Handler {
        PackageHandler(Looper looper) {
            super(looper);
        }

        public void handleMessage(Message msg) {
            try {
                doHandleMessage(msg);
            } finally {
                Process.setThreadPriority(10);
            }
        }

        /* access modifiers changed from: package-private */
        /* JADX WARNING: Code restructure failed: missing block: B:160:0x04ee, code lost:
            r3 = 0;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:161:0x04ef, code lost:
            if (r3 >= r7) goto L_0x04ff;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:162:0x04f1, code lost:
            com.android.server.pm.PackageManagerService.access$300(r1.this$0, r0[r3], true, r9[r3], r10[r3]);
            r3 = r3 + 1;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:163:0x04ff, code lost:
            android.os.Process.setThreadPriority(10);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:188:?, code lost:
            return;
         */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public void doHandleMessage(android.os.Message r30) {
            /*
                r29 = this;
                r1 = r29
                r2 = r30
                int r0 = r2.what
                r3 = -1
                r4 = 10
                r5 = 0
                r6 = 1
                if (r0 == r6) goto L_0x0462
                r7 = 5
                r8 = 262144(0x40000, double:1.295163E-318)
                if (r0 == r7) goto L_0x0440
                r7 = 9
                if (r0 == r7) goto L_0x0345
                r7 = -22
                r10 = 14
                switch(r0) {
                    case 13: goto L_0x031c;
                    case 14: goto L_0x02dd;
                    case 15: goto L_0x0259;
                    case 16: goto L_0x01c4;
                    case 17: goto L_0x01b1;
                    case 18: goto L_0x0164;
                    case 19: goto L_0x0145;
                    case 20: goto L_0x012c;
                    case 21: goto L_0x00b4;
                    case 22: goto L_0x0041;
                    case 23: goto L_0x002d;
                    case 24: goto L_0x0020;
                    default: goto L_0x001e;
                }
            L_0x001e:
                goto L_0x0503
            L_0x0020:
                java.lang.Object r0 = r2.obj
                java.lang.String r0 = (java.lang.String) r0
                if (r0 == 0) goto L_0x002b
                com.android.server.pm.PackageManagerService r3 = com.android.server.pm.PackageManagerService.this
                r3.notifyInstallObserver(r0)
            L_0x002b:
                goto L_0x0503
            L_0x002d:
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                java.lang.Object r3 = r0.mInstallLock
                monitor-enter(r3)
                java.lang.Object r0 = r2.obj     // Catch:{ all -> 0x003e }
                com.android.server.pm.PackageManagerService$InstallArgs r0 = (com.android.server.pm.PackageManagerService.InstallArgs) r0     // Catch:{ all -> 0x003e }
                if (r0 == 0) goto L_0x003b
                r0.doPostDeleteLI(r6)     // Catch:{ all -> 0x003e }
            L_0x003b:
                monitor-exit(r3)     // Catch:{ all -> 0x003e }
                goto L_0x0503
            L_0x003e:
                r0 = move-exception
                monitor-exit(r3)     // Catch:{ all -> 0x003e }
                throw r0
            L_0x0041:
                int r0 = r2.arg1
                com.android.server.pm.PackageManagerService r3 = com.android.server.pm.PackageManagerService.this
                android.util.SparseArray<com.android.server.pm.PackageManagerService$InstallParams> r3 = r3.mPendingEnableRollback
                java.lang.Object r3 = r3.get(r0)
                com.android.server.pm.PackageManagerService$InstallParams r3 = (com.android.server.pm.PackageManagerService.InstallParams) r3
                if (r3 == 0) goto L_0x0503
                com.android.server.pm.PackageManagerService$InstallArgs r4 = r3.mArgs
                com.android.server.pm.PackageManagerService$OriginInfo r5 = r4.origin
                java.io.File r5 = r5.resolvedFile
                android.net.Uri r5 = android.net.Uri.fromFile(r5)
                java.lang.StringBuilder r6 = new java.lang.StringBuilder
                r6.<init>()
                java.lang.String r7 = "Enable rollback timed out for "
                r6.append(r7)
                r6.append(r5)
                java.lang.String r6 = r6.toString()
                java.lang.String r7 = "PackageManager"
                android.util.Slog.w(r7, r6)
                com.android.server.pm.PackageManagerService r6 = com.android.server.pm.PackageManagerService.this
                android.util.SparseArray<com.android.server.pm.PackageManagerService$InstallParams> r6 = r6.mPendingEnableRollback
                r6.remove(r0)
                java.lang.StringBuilder r6 = new java.lang.StringBuilder
                r6.<init>()
                java.lang.String r7 = "Continuing with installation of "
                r6.append(r7)
                r6.append(r5)
                java.lang.String r6 = r6.toString()
                java.lang.String r7 = "PackageManager"
                android.util.Slog.w(r7, r6)
                java.lang.String r6 = "enable_rollback"
                android.os.Trace.asyncTraceEnd(r8, r6, r0)
                r3.handleRollbackEnabled()
                android.content.Intent r6 = new android.content.Intent
                java.lang.String r7 = "android.intent.action.CANCEL_ENABLE_ROLLBACK"
                r6.<init>(r7)
                java.lang.String r7 = "android.content.pm.extra.ENABLE_ROLLBACK_TOKEN"
                r6.putExtra(r7, r0)
                r7 = 67108864(0x4000000, float:1.5046328E-36)
                r6.addFlags(r7)
                com.android.server.pm.PackageManagerService r7 = com.android.server.pm.PackageManagerService.this
                android.content.Context r7 = r7.mContext
                android.os.UserHandle r8 = android.os.UserHandle.SYSTEM
                java.lang.String r9 = "android.permission.PACKAGE_ROLLBACK_AGENT"
                r7.sendBroadcastAsUser(r6, r8, r9)
                goto L_0x0503
            L_0x00b4:
                int r0 = r2.arg1
                int r3 = r2.arg2
                com.android.server.pm.PackageManagerService r4 = com.android.server.pm.PackageManagerService.this
                android.util.SparseArray<com.android.server.pm.PackageManagerService$InstallParams> r4 = r4.mPendingEnableRollback
                java.lang.Object r4 = r4.get(r0)
                com.android.server.pm.PackageManagerService$InstallParams r4 = (com.android.server.pm.PackageManagerService.InstallParams) r4
                if (r4 != 0) goto L_0x00e1
                java.lang.StringBuilder r5 = new java.lang.StringBuilder
                r5.<init>()
                java.lang.String r6 = "Invalid rollback enabled token "
                r5.append(r6)
                r5.append(r0)
                java.lang.String r6 = " received"
                r5.append(r6)
                java.lang.String r5 = r5.toString()
                java.lang.String r6 = "PackageManager"
                android.util.Slog.w(r6, r5)
                goto L_0x0503
            L_0x00e1:
                com.android.server.pm.PackageManagerService r5 = com.android.server.pm.PackageManagerService.this
                android.util.SparseArray<com.android.server.pm.PackageManagerService$InstallParams> r5 = r5.mPendingEnableRollback
                r5.remove(r0)
                if (r3 == r6) goto L_0x0122
                com.android.server.pm.PackageManagerService$InstallArgs r5 = r4.mArgs
                com.android.server.pm.PackageManagerService$OriginInfo r6 = r5.origin
                java.io.File r6 = r6.resolvedFile
                android.net.Uri r6 = android.net.Uri.fromFile(r6)
                java.lang.StringBuilder r7 = new java.lang.StringBuilder
                r7.<init>()
                java.lang.String r10 = "Failed to enable rollback for "
                r7.append(r10)
                r7.append(r6)
                java.lang.String r7 = r7.toString()
                java.lang.String r10 = "PackageManager"
                android.util.Slog.w(r10, r7)
                java.lang.StringBuilder r7 = new java.lang.StringBuilder
                r7.<init>()
                java.lang.String r10 = "Continuing with installation of "
                r7.append(r10)
                r7.append(r6)
                java.lang.String r7 = r7.toString()
                java.lang.String r10 = "PackageManager"
                android.util.Slog.w(r10, r7)
            L_0x0122:
                java.lang.String r5 = "enable_rollback"
                android.os.Trace.asyncTraceEnd(r8, r5, r0)
                r4.handleRollbackEnabled()
                goto L_0x0503
            L_0x012c:
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                android.content.Context r0 = r0.mContext
                com.android.server.pm.PackageManagerService r3 = com.android.server.pm.PackageManagerService.this
                com.android.server.pm.InstantAppResolverConnection r3 = r3.mInstantAppResolverConnection
                java.lang.Object r4 = r2.obj
                android.content.pm.InstantAppRequest r4 = (android.content.pm.InstantAppRequest) r4
                com.android.server.pm.PackageManagerService r5 = com.android.server.pm.PackageManagerService.this
                android.content.pm.ActivityInfo r5 = r5.mInstantAppInstallerActivity
                com.android.server.pm.PackageManagerService r6 = com.android.server.pm.PackageManagerService.this
                com.android.server.pm.PackageManagerService$PackageHandler r6 = r6.mHandler
                com.android.server.pm.InstantAppResolver.doInstantAppResolutionPhaseTwo(r0, r3, r4, r5, r6)
                goto L_0x0503
            L_0x0145:
                android.os.Process.setThreadPriority(r5)
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r0.mPackages
                monitor-enter(r3)
                r0 = 19
                r1.removeMessages(r0)     // Catch:{ all -> 0x0161 }
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x0161 }
                com.android.server.pm.Settings r0 = r0.mSettings     // Catch:{ all -> 0x0161 }
                int r5 = r2.arg1     // Catch:{ all -> 0x0161 }
                r0.writePackageListLPr(r5)     // Catch:{ all -> 0x0161 }
                monitor-exit(r3)     // Catch:{ all -> 0x0161 }
                android.os.Process.setThreadPriority(r4)
                goto L_0x0503
            L_0x0161:
                r0 = move-exception
                monitor-exit(r3)     // Catch:{ all -> 0x0161 }
                throw r0
            L_0x0164:
                int r0 = r2.arg1
                com.android.server.pm.PackageManagerService r3 = com.android.server.pm.PackageManagerService.this
                android.util.SparseArray<com.android.server.pm.IntentFilterVerificationState> r3 = r3.mIntentFilterVerificationStates
                java.lang.Object r3 = r3.get(r0)
                com.android.server.pm.IntentFilterVerificationState r3 = (com.android.server.pm.IntentFilterVerificationState) r3
                if (r3 != 0) goto L_0x018f
                java.lang.StringBuilder r4 = new java.lang.StringBuilder
                r4.<init>()
                java.lang.String r5 = "Invalid IntentFilter verification token "
                r4.append(r5)
                r4.append(r0)
                java.lang.String r5 = " received"
                r4.append(r5)
                java.lang.String r4 = r4.toString()
                java.lang.String r5 = "PackageManager"
                android.util.Slog.w(r5, r4)
                goto L_0x0503
            L_0x018f:
                int r4 = r3.getUserId()
                java.lang.Object r5 = r2.obj
                com.android.server.pm.IntentFilterVerificationResponse r5 = (com.android.server.pm.IntentFilterVerificationResponse) r5
                int r6 = r5.callerUid
                int r7 = r5.code
                r3.setVerifierResponse(r6, r7)
                int r6 = r5.code
                boolean r6 = r3.isVerificationComplete()
                if (r6 == 0) goto L_0x0503
                com.android.server.pm.PackageManagerService r6 = com.android.server.pm.PackageManagerService.this
                com.android.server.pm.PackageManagerService$IntentFilterVerifier r6 = r6.mIntentFilterVerifier
                r6.receiveVerificationResponse(r0)
                goto L_0x0503
            L_0x01b1:
                java.lang.Object r0 = r2.obj
                com.android.server.pm.PackageManagerService$IFVerificationParams r0 = (com.android.server.pm.PackageManagerService.IFVerificationParams) r0
                com.android.server.pm.PackageManagerService r3 = com.android.server.pm.PackageManagerService.this
                int r4 = r0.userId
                int r5 = r0.verifierUid
                boolean r6 = r0.replacing
                android.content.pm.PackageParser$Package r7 = r0.pkg
                r3.verifyIntentFiltersIfNeeded(r4, r5, r6, r7)
                goto L_0x0503
            L_0x01c4:
                int r0 = r2.arg1
                com.android.server.pm.PackageManagerService r4 = com.android.server.pm.PackageManagerService.this
                android.util.SparseArray<com.android.server.pm.PackageVerificationState> r4 = r4.mPendingVerification
                java.lang.Object r4 = r4.get(r0)
                com.android.server.pm.PackageVerificationState r4 = (com.android.server.pm.PackageVerificationState) r4
                if (r4 == 0) goto L_0x0503
                boolean r5 = r4.timeoutExtended()
                if (r5 != 0) goto L_0x0503
                com.android.server.pm.PackageManagerService$InstallParams r5 = r4.getInstallParams()
                com.android.server.pm.PackageManagerService$InstallArgs r10 = r5.mArgs
                com.android.server.pm.PackageManagerService$OriginInfo r11 = r10.origin
                java.io.File r11 = r11.resolvedFile
                android.net.Uri r11 = android.net.Uri.fromFile(r11)
                java.lang.StringBuilder r12 = new java.lang.StringBuilder
                r12.<init>()
                java.lang.String r13 = "Verification timed out for "
                r12.append(r13)
                r12.append(r11)
                java.lang.String r12 = r12.toString()
                java.lang.String r13 = "PackageManager"
                android.util.Slog.i(r13, r12)
                com.android.server.pm.PackageManagerService r12 = com.android.server.pm.PackageManagerService.this
                android.util.SparseArray<com.android.server.pm.PackageVerificationState> r12 = r12.mPendingVerification
                r12.remove(r0)
                android.os.UserHandle r12 = r10.getUser()
                com.android.server.pm.PackageManagerService r13 = com.android.server.pm.PackageManagerService.this
                int r13 = r13.getDefaultVerificationResponse(r12)
                if (r13 != r6) goto L_0x0246
                java.lang.StringBuilder r3 = new java.lang.StringBuilder
                r3.<init>()
                java.lang.String r7 = "Continuing with installation of "
                r3.append(r7)
                r3.append(r11)
                java.lang.String r3 = r3.toString()
                java.lang.String r7 = "PackageManager"
                android.util.Slog.i(r7, r3)
                int r3 = android.os.Binder.getCallingUid()
                r7 = 2
                r4.setVerifierResponse(r3, r7)
                com.android.server.pm.PackageManagerService r3 = com.android.server.pm.PackageManagerService.this
                r3.broadcastPackageVerified(r0, r11, r6, r12)
                com.android.server.pm.InstallationStatistic r3 = r10.getStatistic()
                long r6 = android.os.SystemClock.uptimeMillis()
                com.android.server.pm.InstallationStatistic r13 = r10.getStatistic()
                long r13 = r13.timeBeginAospVerify
                long r6 = r6 - r13
                r3.timeAospSecurityCheck = r6
                goto L_0x024e
            L_0x0246:
                com.android.server.pm.PackageManagerService r6 = com.android.server.pm.PackageManagerService.this
                r6.broadcastPackageVerified(r0, r11, r3, r12)
                r5.setReturnCode(r7)
            L_0x024e:
                java.lang.String r3 = "verification"
                android.os.Trace.asyncTraceEnd(r8, r3, r0)
                r5.handleVerificationFinished()
                goto L_0x0503
            L_0x0259:
                int r0 = r2.arg1
                com.android.server.pm.PackageManagerService r3 = com.android.server.pm.PackageManagerService.this
                android.util.SparseArray<com.android.server.pm.PackageVerificationState> r3 = r3.mPendingVerification
                java.lang.Object r3 = r3.get(r0)
                com.android.server.pm.PackageVerificationState r3 = (com.android.server.pm.PackageVerificationState) r3
                if (r3 != 0) goto L_0x0284
                java.lang.StringBuilder r4 = new java.lang.StringBuilder
                r4.<init>()
                java.lang.String r5 = "Invalid verification token "
                r4.append(r5)
                r4.append(r0)
                java.lang.String r5 = " received"
                r4.append(r5)
                java.lang.String r4 = r4.toString()
                java.lang.String r5 = "PackageManager"
                android.util.Slog.w(r5, r4)
                goto L_0x0503
            L_0x0284:
                java.lang.Object r4 = r2.obj
                com.android.server.pm.PackageVerificationResponse r4 = (com.android.server.pm.PackageVerificationResponse) r4
                int r5 = r4.callerUid
                int r6 = r4.code
                r3.setVerifierResponse(r5, r6)
                boolean r5 = r3.isVerificationComplete()
                if (r5 == 0) goto L_0x0503
                com.android.server.pm.PackageManagerService r5 = com.android.server.pm.PackageManagerService.this
                android.util.SparseArray<com.android.server.pm.PackageVerificationState> r5 = r5.mPendingVerification
                r5.remove(r0)
                com.android.server.pm.PackageManagerService$InstallParams r5 = r3.getInstallParams()
                com.android.server.pm.PackageManagerService$InstallArgs r6 = r5.mArgs
                com.android.server.pm.PackageManagerService$OriginInfo r10 = r6.origin
                java.io.File r10 = r10.resolvedFile
                android.net.Uri r10 = android.net.Uri.fromFile(r10)
                com.android.server.pm.InstallationStatistic r11 = r6.getStatistic()
                long r12 = android.os.SystemClock.uptimeMillis()
                com.android.server.pm.InstallationStatistic r14 = r6.getStatistic()
                long r14 = r14.timeBeginAospVerify
                long r12 = r12 - r14
                r11.timeAospSecurityCheck = r12
                boolean r11 = r3.isInstallAllowed()
                if (r11 == 0) goto L_0x02cf
                com.android.server.pm.PackageManagerService r7 = com.android.server.pm.PackageManagerService.this
                int r11 = r4.code
                android.os.UserHandle r12 = r6.getUser()
                r7.broadcastPackageVerified(r0, r10, r11, r12)
                goto L_0x02d2
            L_0x02cf:
                r5.setReturnCode(r7)
            L_0x02d2:
                java.lang.String r7 = "verification"
                android.os.Trace.asyncTraceEnd(r8, r7, r0)
                r5.handleVerificationFinished()
                goto L_0x0503
            L_0x02dd:
                android.os.Process.setThreadPriority(r5)
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r0.mPackages
                monitor-enter(r3)
                r1.removeMessages(r10)     // Catch:{ all -> 0x0319 }
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x0319 }
                android.util.ArraySet r0 = r0.mDirtyUsers     // Catch:{ all -> 0x0319 }
                java.util.Iterator r0 = r0.iterator()     // Catch:{ all -> 0x0319 }
            L_0x02f2:
                boolean r5 = r0.hasNext()     // Catch:{ all -> 0x0319 }
                if (r5 == 0) goto L_0x030a
                java.lang.Object r5 = r0.next()     // Catch:{ all -> 0x0319 }
                java.lang.Integer r5 = (java.lang.Integer) r5     // Catch:{ all -> 0x0319 }
                int r5 = r5.intValue()     // Catch:{ all -> 0x0319 }
                com.android.server.pm.PackageManagerService r6 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x0319 }
                com.android.server.pm.Settings r6 = r6.mSettings     // Catch:{ all -> 0x0319 }
                r6.writePackageRestrictionsLPr(r5)     // Catch:{ all -> 0x0319 }
                goto L_0x02f2
            L_0x030a:
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x0319 }
                android.util.ArraySet r0 = r0.mDirtyUsers     // Catch:{ all -> 0x0319 }
                r0.clear()     // Catch:{ all -> 0x0319 }
                monitor-exit(r3)     // Catch:{ all -> 0x0319 }
                android.os.Process.setThreadPriority(r4)
                goto L_0x0503
            L_0x0319:
                r0 = move-exception
                monitor-exit(r3)     // Catch:{ all -> 0x0319 }
                throw r0
            L_0x031c:
                android.os.Process.setThreadPriority(r5)
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r0.mPackages
                monitor-enter(r3)
                r0 = 13
                r1.removeMessages(r0)     // Catch:{ all -> 0x0342 }
                r1.removeMessages(r10)     // Catch:{ all -> 0x0342 }
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x0342 }
                com.android.server.pm.Settings r0 = r0.mSettings     // Catch:{ all -> 0x0342 }
                r0.writeLPr()     // Catch:{ all -> 0x0342 }
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x0342 }
                android.util.ArraySet r0 = r0.mDirtyUsers     // Catch:{ all -> 0x0342 }
                r0.clear()     // Catch:{ all -> 0x0342 }
                monitor-exit(r3)     // Catch:{ all -> 0x0342 }
                android.os.Process.setThreadPriority(r4)
                goto L_0x0503
            L_0x0342:
                r0 = move-exception
                monitor-exit(r3)     // Catch:{ all -> 0x0342 }
                throw r0
            L_0x0345:
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                android.util.SparseArray<com.android.server.pm.PackageManagerService$PostInstallData> r0 = r0.mRunningInstalls
                int r3 = r2.arg1
                java.lang.Object r0 = r0.get(r3)
                com.android.server.pm.PackageManagerService$PostInstallData r0 = (com.android.server.pm.PackageManagerService.PostInstallData) r0
                int r3 = r2.arg2
                if (r3 == 0) goto L_0x0358
                r17 = r6
                goto L_0x035a
            L_0x0358:
                r17 = r5
            L_0x035a:
                com.android.server.pm.PackageManagerService r3 = com.android.server.pm.PackageManagerService.this
                android.util.SparseArray<com.android.server.pm.PackageManagerService$PostInstallData> r3 = r3.mRunningInstalls
                int r4 = r2.arg1
                r3.delete(r4)
                if (r0 == 0) goto L_0x0371
                java.lang.Runnable r3 = r0.mPostInstallRunnable
                if (r3 == 0) goto L_0x0371
                java.lang.Runnable r3 = r0.mPostInstallRunnable
                r3.run()
                r9 = r8
                goto L_0x0436
            L_0x0371:
                if (r0 == 0) goto L_0x0435
                com.android.server.pm.PackageManagerService$InstallArgs r3 = r0.args
                com.android.server.pm.PackageManagerService$PackageInstalledInfo r4 = r0.res
                int r7 = r3.installFlags
                r7 = r7 & 256(0x100, float:3.59E-43)
                if (r7 == 0) goto L_0x037f
                r12 = r6
                goto L_0x0380
            L_0x037f:
                r12 = r5
            L_0x0380:
                int r7 = r3.installFlags
                r7 = r7 & 4096(0x1000, float:5.74E-42)
                if (r7 != 0) goto L_0x0388
                r13 = r6
                goto L_0x0389
            L_0x0388:
                r13 = r5
            L_0x0389:
                int r7 = r3.installFlags
                r10 = 65536(0x10000, float:9.18355E-41)
                r7 = r7 & r10
                if (r7 == 0) goto L_0x0392
                r14 = r6
                goto L_0x0393
            L_0x0392:
                r14 = r5
            L_0x0393:
                java.lang.String[] r6 = r3.installGrantPermissions
                int r7 = r3.installFlags
                r10 = 4194304(0x400000, float:5.877472E-39)
                r7 = r7 & r10
                if (r7 == 0) goto L_0x03a7
                android.content.pm.PackageParser$Package r7 = r4.pkg
                if (r7 == 0) goto L_0x03a7
                android.content.pm.PackageParser$Package r7 = r4.pkg
                java.util.ArrayList r7 = r7.requestedPermissions
                r16 = r7
                goto L_0x03ab
            L_0x03a7:
                java.util.List<java.lang.String> r7 = r3.whitelistedRestrictedPermissions
                r16 = r7
            L_0x03ab:
                com.android.server.pm.InstallationStatistic r7 = r3.getStatistic()
                java.lang.String r10 = r3.installerPackageName
                r7.installerPkg = r10
                com.android.server.pm.InstallationStatistic r7 = r3.getStatistic()
                java.lang.String r10 = r4.name
                r7.pkg = r10
                com.android.server.pm.InstallationStatistic r7 = r3.getStatistic()
                long r10 = android.os.SystemClock.uptimeMillis()
                r7.timeEndInstall = r10
                com.android.server.pm.InstallationStatistic r7 = r3.getStatistic()
                r7.dump()
                com.android.server.pm.PackageManagerService r10 = com.android.server.pm.PackageManagerService.this
                java.lang.String r7 = r3.installerPackageName
                android.content.pm.IPackageInstallObserver2 r15 = r3.observer
                com.android.server.pm.PackageManagerService$OriginInfo r11 = r3.origin
                java.lang.String r20 = r11.getLocation()
                r11 = r4
                r19 = r15
                r15 = r6
                r18 = r7
                r10.handlePackagePostInstall(r11, r12, r13, r14, r15, r16, r17, r18, r19, r20)
                android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageInstalledInfo> r7 = r4.addedChildPackages
                if (r7 == 0) goto L_0x03ed
                android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageInstalledInfo> r5 = r4.addedChildPackages
                int r5 = r5.size()
                goto L_0x03ee
            L_0x03ed:
            L_0x03ee:
                r7 = 0
            L_0x03ef:
                if (r7 >= r5) goto L_0x0422
                android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageInstalledInfo> r10 = r4.addedChildPackages
                java.lang.Object r10 = r10.valueAt(r7)
                com.android.server.pm.PackageManagerService$PackageInstalledInfo r10 = (com.android.server.pm.PackageManagerService.PackageInstalledInfo) r10
                com.android.server.pm.PackageManagerService r11 = com.android.server.pm.PackageManagerService.this
                r25 = 0
                java.lang.String r15 = r3.installerPackageName
                android.content.pm.IPackageInstallObserver2 r8 = r3.observer
                com.android.server.pm.PackageManagerService$OriginInfo r9 = r3.origin
                java.lang.String r28 = r9.getLocation()
                r18 = r11
                r19 = r10
                r20 = r12
                r21 = r13
                r22 = r14
                r23 = r6
                r24 = r16
                r26 = r15
                r27 = r8
                r18.handlePackagePostInstall(r19, r20, r21, r22, r23, r24, r25, r26, r27, r28)
                int r7 = r7 + 1
                r8 = 262144(0x40000, double:1.295163E-318)
                goto L_0x03ef
            L_0x0422:
                java.lang.String r7 = r3.traceMethod
                if (r7 == 0) goto L_0x0431
                java.lang.String r7 = r3.traceMethod
                int r8 = r3.traceCookie
                r9 = 262144(0x40000, double:1.295163E-318)
                android.os.Trace.asyncTraceEnd(r9, r7, r8)
                goto L_0x0436
            L_0x0431:
                r9 = 262144(0x40000, double:1.295163E-318)
                goto L_0x0436
            L_0x0435:
                r9 = r8
            L_0x0436:
                int r3 = r2.arg1
                java.lang.String r4 = "postInstall"
                android.os.Trace.asyncTraceEnd(r9, r4, r3)
                goto L_0x0503
            L_0x0440:
                java.lang.Object r0 = r2.obj
                com.android.server.pm.PackageManagerService$HandlerParams r0 = (com.android.server.pm.PackageManagerService.HandlerParams) r0
                if (r0 == 0) goto L_0x0503
                int r3 = java.lang.System.identityHashCode(r0)
                java.lang.String r4 = "queueInstall"
                r5 = 262144(0x40000, double:1.295163E-318)
                android.os.Trace.asyncTraceEnd(r5, r4, r3)
                java.lang.String r3 = "startCopy"
                android.os.Trace.traceBegin(r5, r3)
                r0.startCopy()
                android.os.Trace.traceEnd(r5)
                goto L_0x0503
            L_0x0462:
                r7 = 0
                android.os.Process.setThreadPriority(r5)
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r8 = r0.mPackages
                monitor-enter(r8)
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x0504 }
                com.android.server.pm.PackageManagerService$PendingPackageBroadcasts r0 = r0.mPendingBroadcasts     // Catch:{ all -> 0x0504 }
                int r0 = r0.size()     // Catch:{ all -> 0x0504 }
                r7 = r0
                if (r7 > 0) goto L_0x0478
                monitor-exit(r8)     // Catch:{ all -> 0x0504 }
                return
            L_0x0478:
                java.lang.String[] r0 = new java.lang.String[r7]     // Catch:{ all -> 0x0504 }
                java.util.ArrayList[] r9 = new java.util.ArrayList[r7]     // Catch:{ all -> 0x0504 }
                int[] r10 = new int[r7]     // Catch:{ all -> 0x0504 }
                r11 = 0
            L_0x0480:
                com.android.server.pm.PackageManagerService r12 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x0504 }
                com.android.server.pm.PackageManagerService$PendingPackageBroadcasts r12 = r12.mPendingBroadcasts     // Catch:{ all -> 0x0504 }
                int r12 = r12.userIdCount()     // Catch:{ all -> 0x0504 }
                if (r5 >= r12) goto L_0x04e5
                com.android.server.pm.PackageManagerService r12 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x0504 }
                com.android.server.pm.PackageManagerService$PendingPackageBroadcasts r12 = r12.mPendingBroadcasts     // Catch:{ all -> 0x0504 }
                int r12 = r12.userIdAt(r5)     // Catch:{ all -> 0x0504 }
                com.android.server.pm.PackageManagerService r13 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x0504 }
                com.android.server.pm.PackageManagerService$PendingPackageBroadcasts r13 = r13.mPendingBroadcasts     // Catch:{ all -> 0x0504 }
                android.util.ArrayMap r13 = r13.packagesForUserId(r12)     // Catch:{ all -> 0x0504 }
                java.util.Set r13 = r13.entrySet()     // Catch:{ all -> 0x0504 }
                java.util.Iterator r13 = r13.iterator()     // Catch:{ all -> 0x0504 }
            L_0x04a2:
                boolean r14 = r13.hasNext()     // Catch:{ all -> 0x0504 }
                if (r14 == 0) goto L_0x04e1
                if (r11 >= r7) goto L_0x04e1
                java.lang.Object r14 = r13.next()     // Catch:{ all -> 0x0504 }
                java.util.Map$Entry r14 = (java.util.Map.Entry) r14     // Catch:{ all -> 0x0504 }
                java.lang.Object r15 = r14.getKey()     // Catch:{ all -> 0x0504 }
                java.lang.String r15 = (java.lang.String) r15     // Catch:{ all -> 0x0504 }
                r0[r11] = r15     // Catch:{ all -> 0x0504 }
                java.lang.Object r15 = r14.getValue()     // Catch:{ all -> 0x0504 }
                java.util.ArrayList r15 = (java.util.ArrayList) r15     // Catch:{ all -> 0x0504 }
                r9[r11] = r15     // Catch:{ all -> 0x0504 }
                com.android.server.pm.PackageManagerService r15 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x0504 }
                com.android.server.pm.Settings r15 = r15.mSettings     // Catch:{ all -> 0x0504 }
                android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r15 = r15.mPackages     // Catch:{ all -> 0x0504 }
                java.lang.Object r3 = r14.getKey()     // Catch:{ all -> 0x0504 }
                java.lang.Object r3 = r15.get(r3)     // Catch:{ all -> 0x0504 }
                com.android.server.pm.PackageSetting r3 = (com.android.server.pm.PackageSetting) r3     // Catch:{ all -> 0x0504 }
                if (r3 == 0) goto L_0x04d9
                int r15 = r3.appId     // Catch:{ all -> 0x0504 }
                int r15 = android.os.UserHandle.getUid(r12, r15)     // Catch:{ all -> 0x0504 }
                goto L_0x04da
            L_0x04d9:
                r15 = -1
            L_0x04da:
                r10[r11] = r15     // Catch:{ all -> 0x0504 }
                int r11 = r11 + 1
                r3 = -1
                goto L_0x04a2
            L_0x04e1:
                int r5 = r5 + 1
                r3 = -1
                goto L_0x0480
            L_0x04e5:
                r7 = r11
                com.android.server.pm.PackageManagerService r3 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x0504 }
                com.android.server.pm.PackageManagerService$PendingPackageBroadcasts r3 = r3.mPendingBroadcasts     // Catch:{ all -> 0x0504 }
                r3.clear()     // Catch:{ all -> 0x0504 }
                monitor-exit(r8)     // Catch:{ all -> 0x0504 }
                r3 = 0
            L_0x04ef:
                if (r3 >= r7) goto L_0x04ff
                com.android.server.pm.PackageManagerService r5 = com.android.server.pm.PackageManagerService.this
                r8 = r0[r3]
                r11 = r9[r3]
                r12 = r10[r3]
                r5.sendPackageChangedBroadcast(r8, r6, r11, r12)
                int r3 = r3 + 1
                goto L_0x04ef
            L_0x04ff:
                android.os.Process.setThreadPriority(r4)
            L_0x0503:
                return
            L_0x0504:
                r0 = move-exception
                monitor-exit(r8)     // Catch:{ all -> 0x0504 }
                throw r0
            */
            throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.PackageHandler.doHandleMessage(android.os.Message):void");
        }
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:167:0x0353, code lost:
        r0 = th;
     */
    /* JADX WARNING: Incorrect type for immutable var: ssa=java.lang.String, code=int, for r38v0, types: [java.lang.String] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void handlePackagePostInstall(com.android.server.pm.PackageManagerService.PackageInstalledInfo r31, boolean r32, boolean r33, boolean r34, java.lang.String[] r35, java.util.List<java.lang.String> r36, boolean r37, int r38, android.content.pm.IPackageInstallObserver2 r39, java.lang.String r40) {
        /*
            r30 = this;
            r10 = r30
            r11 = r31
            r12 = r33
            r13 = r39
            int r0 = r11.returnCode
            r15 = 1
            if (r0 != r15) goto L_0x000f
            r0 = r15
            goto L_0x0010
        L_0x000f:
            r0 = 0
        L_0x0010:
            r16 = r0
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r0 = r11.removedInfo
            if (r0 == 0) goto L_0x001e
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r0 = r11.removedInfo
            java.lang.String r0 = r0.removedPackage
            if (r0 == 0) goto L_0x001e
            r0 = r15
            goto L_0x001f
        L_0x001e:
            r0 = 0
        L_0x001f:
            r17 = r0
            if (r16 == 0) goto L_0x0355
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r0 = r11.removedInfo
            if (r0 == 0) goto L_0x002c
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r0 = r11.removedInfo
            r0.sendPackageRemovedBroadcasts(r12)
        L_0x002c:
            if (r36 == 0) goto L_0x0046
            boolean r0 = r36.isEmpty()
            if (r0 != 0) goto L_0x0046
            com.android.server.pm.permission.PermissionManagerServiceInternal r1 = r10.mPermissionManager
            android.content.pm.PackageParser$Package r2 = r11.pkg
            int[] r3 = r11.newUsers
            int r5 = android.os.Process.myUid()
            r6 = 2
            com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r7 = r10.mPermissionCallback
            r4 = r36
            r1.setWhitelistedRestrictedPermissions(r2, r3, r4, r5, r6, r7)
        L_0x0046:
            if (r32 == 0) goto L_0x0063
            int r0 = android.os.Binder.getCallingUid()
            com.android.server.pm.permission.PermissionManagerServiceInternal r1 = r10.mPermissionManager
            android.content.pm.PackageParser$Package r2 = r11.pkg
            int[] r3 = r11.newUsers
            com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r4 = r10.mPermissionCallback
            r18 = r1
            r19 = r2
            r20 = r3
            r21 = r35
            r22 = r0
            r23 = r4
            r18.grantRequestedRuntimePermissions(r19, r20, r21, r22, r23)
        L_0x0063:
            java.lang.String r0 = r11.installerPackageName
            if (r0 == 0) goto L_0x006a
            java.lang.String r0 = r11.installerPackageName
            goto L_0x0074
        L_0x006a:
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r0 = r11.removedInfo
            if (r0 == 0) goto L_0x0073
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r0 = r11.removedInfo
            java.lang.String r0 = r0.installerPackageName
            goto L_0x0074
        L_0x0073:
            r0 = 0
        L_0x0074:
            r8 = r0
            android.content.pm.PackageParser$Package r0 = r11.pkg
            android.content.pm.PackageParser$Package r0 = r0.parentPackage
            if (r0 == 0) goto L_0x0088
            int r0 = android.os.Binder.getCallingUid()
            com.android.server.pm.permission.PermissionManagerServiceInternal r1 = r10.mPermissionManager
            android.content.pm.PackageParser$Package r2 = r11.pkg
            com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r3 = r10.mPermissionCallback
            r1.grantRuntimePermissionsGrantedToDisabledPackage(r2, r0, r3)
        L_0x0088:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r10.mPackages
            monitor-enter(r1)
            com.android.server.pm.InstantAppRegistry r0 = r10.mInstantAppRegistry     // Catch:{ all -> 0x034d }
            android.content.pm.PackageParser$Package r2 = r11.pkg     // Catch:{ all -> 0x034d }
            int[] r3 = r11.newUsers     // Catch:{ all -> 0x034d }
            r0.onPackageInstalledLPw(r2, r3)     // Catch:{ all -> 0x034d }
            monitor-exit(r1)     // Catch:{ all -> 0x034d }
            android.content.pm.PackageParser$Package r0 = r11.pkg
            android.content.pm.ApplicationInfo r0 = r0.applicationInfo
            java.lang.String r7 = r0.packageName
            int[] r0 = EMPTY_INT_ARRAY
            int[] r1 = EMPTY_INT_ARRAY
            int[] r2 = EMPTY_INT_ARRAY
            int[] r3 = EMPTY_INT_ARRAY
            int[] r4 = r11.origUsers
            if (r4 == 0) goto L_0x00af
            int[] r4 = r11.origUsers
            int r4 = r4.length
            if (r4 != 0) goto L_0x00ad
            goto L_0x00af
        L_0x00ad:
            r4 = 0
            goto L_0x00b0
        L_0x00af:
            r4 = r15
        L_0x00b0:
            r18 = r4
            android.content.pm.PackageParser$Package r4 = r11.pkg
            java.lang.Object r4 = r4.mExtras
            r6 = r4
            com.android.server.pm.PackageSetting r6 = (com.android.server.pm.PackageSetting) r6
            int[] r4 = r11.newUsers
            int r5 = r4.length
            r14 = r3
            r3 = r0
            r0 = 0
            r29 = r2
            r2 = r1
            r1 = r29
        L_0x00c4:
            if (r0 >= r5) goto L_0x011d
            r9 = r4[r0]
            boolean r21 = r6.getInstantApp(r9)
            if (r18 == 0) goto L_0x00e2
            if (r21 == 0) goto L_0x00d9
            int[] r2 = com.android.internal.util.ArrayUtils.appendInt(r2, r9)
            r24 = r4
            r25 = r5
            goto L_0x0115
        L_0x00d9:
            int[] r3 = com.android.internal.util.ArrayUtils.appendInt(r3, r9)
            r24 = r4
            r25 = r5
            goto L_0x0115
        L_0x00e2:
            r22 = 1
            int[] r15 = r11.origUsers
            r24 = r4
            int r4 = r15.length
            r25 = r5
            r5 = 0
        L_0x00ec:
            if (r5 >= r4) goto L_0x00fc
            r26 = r4
            r4 = r15[r5]
            if (r4 != r9) goto L_0x00f7
            r22 = 0
            goto L_0x00fc
        L_0x00f7:
            int r5 = r5 + 1
            r4 = r26
            goto L_0x00ec
        L_0x00fc:
            if (r22 == 0) goto L_0x010a
            if (r21 == 0) goto L_0x0105
            int[] r2 = com.android.internal.util.ArrayUtils.appendInt(r2, r9)
            goto L_0x0115
        L_0x0105:
            int[] r3 = com.android.internal.util.ArrayUtils.appendInt(r3, r9)
            goto L_0x0115
        L_0x010a:
            if (r21 == 0) goto L_0x0111
            int[] r14 = com.android.internal.util.ArrayUtils.appendInt(r14, r9)
            goto L_0x0115
        L_0x0111:
            int[] r1 = com.android.internal.util.ArrayUtils.appendInt(r1, r9)
        L_0x0115:
            int r0 = r0 + 1
            r4 = r24
            r5 = r25
            r15 = 1
            goto L_0x00c4
        L_0x011d:
            android.content.pm.PackageParser$Package r0 = r11.pkg
            java.lang.String r0 = r0.staticSharedLibName
            if (r0 != 0) goto L_0x02a1
            com.android.server.pm.ProcessLoggingHandler r0 = r10.mProcessLoggingHandler
            android.content.pm.PackageParser$Package r4 = r11.pkg
            java.lang.String r4 = r4.baseCodePath
            r0.invalidateProcessLoggingBaseApkHash(r4)
            int r0 = r11.uid
            int r0 = android.os.UserHandle.getAppId(r0)
            android.content.pm.PackageParser$Package r4 = r11.pkg
            android.content.pm.ApplicationInfo r4 = r4.applicationInfo
            boolean r15 = r4.isSystemApp()
            if (r15 != 0) goto L_0x0141
            if (r34 == 0) goto L_0x013f
            goto L_0x0141
        L_0x013f:
            r4 = 0
            goto L_0x0142
        L_0x0141:
            r4 = 1
        L_0x0142:
            r21 = r1
            r1 = r30
            r9 = r2
            r2 = r7
            r5 = r3
            r3 = r4
            r4 = r34
            r22 = r5
            r5 = r0
            r24 = r6
            r6 = r22
            r25 = r7
            r7 = r9
            r26 = r15
            r15 = r8
            r8 = r32
            r1.sendPackageAddedForNewUsers(r2, r3, r4, r5, r6, r7, r8)
            android.os.Bundle r1 = new android.os.Bundle
            r2 = 1
            r1.<init>(r2)
            r8 = r1
            int r1 = r11.uid
            java.lang.String r3 = "android.intent.extra.UID"
            r8.putInt(r3, r1)
            if (r32 == 0) goto L_0x0173
            java.lang.String r1 = "grant_runtime_permissions"
            r8.putBoolean(r1, r2)
        L_0x0173:
            if (r17 == 0) goto L_0x017a
            java.lang.String r1 = "android.intent.extra.REPLACING"
            r8.putBoolean(r1, r2)
        L_0x017a:
            r5 = 0
            r6 = 0
            r7 = 0
            java.lang.String r2 = "android.intent.action.PACKAGE_ADDED"
            r1 = r30
            r3 = r25
            r4 = r8
            r27 = r8
            r8 = r21
            r20 = r0
            r13 = r9
            r0 = 0
            r9 = r14
            r1.sendPackageBroadcast(r2, r3, r4, r5, r6, r7, r8, r9)
            if (r15 == 0) goto L_0x01a3
            r5 = 0
            r7 = 0
            java.lang.String r2 = "android.intent.action.PACKAGE_ADDED"
            r1 = r30
            r3 = r25
            r4 = r27
            r6 = r15
            r8 = r21
            r9 = r14
            r1.sendPackageBroadcast(r2, r3, r4, r5, r6, r7, r8, r9)
        L_0x01a3:
            java.lang.String r1 = r10.mRequiredVerifierPackage
            if (r1 == 0) goto L_0x01af
            boolean r1 = r1.equals(r15)
            if (r1 != 0) goto L_0x01af
            r1 = 1
            goto L_0x01b0
        L_0x01af:
            r1 = 0
        L_0x01b0:
            r28 = r1
            if (r28 == 0) goto L_0x01c6
            r5 = 0
            java.lang.String r6 = r10.mRequiredVerifierPackage
            r7 = 0
            java.lang.String r2 = "android.intent.action.PACKAGE_ADDED"
            r1 = r30
            r3 = r25
            r4 = r27
            r8 = r21
            r9 = r14
            r1.sendPackageBroadcast(r2, r3, r4, r5, r6, r7, r8, r9)
        L_0x01c6:
            java.lang.String r6 = r10.mRequiredInstallerPackage
            if (r6 == 0) goto L_0x01db
            r5 = 16777216(0x1000000, float:2.3509887E-38)
            r7 = 0
            java.lang.String r2 = "android.intent.action.PACKAGE_ADDED"
            r1 = r30
            r3 = r25
            r4 = r27
            r8 = r22
            r9 = r14
            r1.sendPackageBroadcast(r2, r3, r4, r5, r6, r7, r8, r9)
        L_0x01db:
            if (r17 == 0) goto L_0x022c
            r5 = 0
            r6 = 0
            r7 = 0
            java.lang.String r2 = "android.intent.action.PACKAGE_REPLACED"
            r1 = r30
            r3 = r25
            r4 = r27
            r8 = r21
            r9 = r14
            r1.sendPackageBroadcast(r2, r3, r4, r5, r6, r7, r8, r9)
            if (r15 == 0) goto L_0x0201
            r5 = 0
            r7 = 0
            java.lang.String r2 = "android.intent.action.PACKAGE_REPLACED"
            r1 = r30
            r3 = r25
            r4 = r27
            r6 = r15
            r8 = r21
            r9 = r14
            r1.sendPackageBroadcast(r2, r3, r4, r5, r6, r7, r8, r9)
        L_0x0201:
            if (r28 == 0) goto L_0x0215
            r5 = 0
            java.lang.String r6 = r10.mRequiredVerifierPackage
            r7 = 0
            java.lang.String r2 = "android.intent.action.PACKAGE_REPLACED"
            r1 = r30
            r3 = r25
            r4 = r27
            r8 = r21
            r9 = r14
            r1.sendPackageBroadcast(r2, r3, r4, r5, r6, r7, r8, r9)
        L_0x0215:
            r3 = 0
            r4 = 0
            r5 = 0
            r7 = 0
            java.lang.String r2 = "android.intent.action.MY_PACKAGE_REPLACED"
            r1 = r30
            r6 = r25
            r8 = r21
            r9 = r14
            r1.sendPackageBroadcast(r2, r3, r4, r5, r6, r7, r8, r9)
            r8 = r38
            r9 = r22
            r7 = r25
            goto L_0x0246
        L_0x022c:
            if (r37 == 0) goto L_0x0240
            android.content.pm.PackageParser$Package r1 = r11.pkg
            boolean r1 = isSystemApp((android.content.pm.PackageParser.Package) r1)
            if (r1 != 0) goto L_0x0240
            r8 = r38
            r9 = r22
            r7 = r25
            r10.sendFirstLaunchBroadcast(r7, r8, r9, r13)
            goto L_0x0246
        L_0x0240:
            r8 = r38
            r9 = r22
            r7 = r25
        L_0x0246:
            android.content.pm.PackageParser$Package r1 = r11.pkg
            boolean r1 = isExternal((android.content.pm.PackageParser.Package) r1)
            if (r1 == 0) goto L_0x02ab
            if (r17 != 0) goto L_0x027d
            android.content.Context r1 = r10.mContext
            java.lang.Class<android.os.storage.StorageManager> r2 = android.os.storage.StorageManager.class
            java.lang.Object r1 = r1.getSystemService(r2)
            android.os.storage.StorageManager r1 = (android.os.storage.StorageManager) r1
            android.content.pm.PackageParser$Package r2 = r11.pkg
            android.content.pm.ApplicationInfo r2 = r2.applicationInfo
            java.util.UUID r2 = r2.storageUuid
            java.lang.String r2 = r2.toString()
            android.os.storage.VolumeInfo r2 = r1.findVolumeByUuid(r2)
            android.content.pm.PackageParser$Package r3 = r11.pkg
            boolean r3 = isExternal((android.content.pm.PackageParser.Package) r3)
            int r3 = getPackageExternalStorageType(r2, r3)
            if (r3 == 0) goto L_0x027d
            r4 = 181(0xb5, float:2.54E-43)
            android.content.pm.PackageParser$Package r5 = r11.pkg
            java.lang.String r5 = r5.packageName
            android.util.StatsLog.write(r4, r3, r5)
        L_0x027d:
            r1 = 1
            int[] r5 = new int[r1]
            android.content.pm.PackageParser$Package r2 = r11.pkg
            android.content.pm.ApplicationInfo r2 = r2.applicationInfo
            int r2 = r2.uid
            r3 = 0
            r5[r3] = r2
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>(r1)
            r6 = r2
            r6.add(r7)
            r2 = 1
            r3 = 1
            r22 = 0
            r1 = r30
            r4 = r6
            r25 = r6
            r6 = r22
            r1.sendResourcesChangedBroadcast((boolean) r2, (boolean) r3, (java.util.ArrayList<java.lang.String>) r4, (int[]) r5, (android.content.IIntentReceiver) r6)
            goto L_0x02ab
        L_0x02a1:
            r21 = r1
            r13 = r2
            r9 = r3
            r24 = r6
            r15 = r8
            r0 = 0
            r8 = r38
        L_0x02ab:
            if (r9 == 0) goto L_0x02f7
            int r1 = r9.length
            if (r1 <= 0) goto L_0x02f7
            int r1 = r9.length
            r2 = 0
        L_0x02b2:
            if (r2 >= r1) goto L_0x02f7
            r3 = r9[r2]
            boolean r4 = r10.packageIsBrowser(r7, r3)
            if (r4 == 0) goto L_0x02e8
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r4 = r10.mPackages
            monitor-enter(r4)
            com.android.server.pm.Settings r5 = r10.mSettings     // Catch:{ all -> 0x02e5 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r5 = r5.mPackages     // Catch:{ all -> 0x02e5 }
            java.lang.Object r5 = r5.get(r7)     // Catch:{ all -> 0x02e5 }
            com.android.server.pm.PackageSetting r5 = (com.android.server.pm.PackageSetting) r5     // Catch:{ all -> 0x02e5 }
            int r6 = r5.getInstallReason(r3)     // Catch:{ all -> 0x02e5 }
            r0 = 2
            if (r6 == r0) goto L_0x02e2
            java.lang.String r0 = r10.getDefaultBrowserPackageName(r3)     // Catch:{ all -> 0x02e5 }
            boolean r0 = com.android.server.pm.PackageManagerServiceInjector.needClearDefaultBrowserSettings(r0)     // Catch:{ all -> 0x02e5 }
            if (r0 == 0) goto L_0x02e0
            r0 = 0
            r10.setDefaultBrowserAsyncLPw(r0, r3)     // Catch:{ all -> 0x02e5 }
            goto L_0x02e3
        L_0x02e0:
            r0 = 0
            goto L_0x02e3
        L_0x02e2:
            r0 = 0
        L_0x02e3:
            monitor-exit(r4)     // Catch:{ all -> 0x02e5 }
            goto L_0x02e8
        L_0x02e5:
            r0 = move-exception
            monitor-exit(r4)     // Catch:{ all -> 0x02e5 }
            throw r0
        L_0x02e8:
            com.android.server.pm.permission.PermissionManagerServiceInternal r4 = r10.mPermissionManager
            android.os.UserHandle r5 = android.os.UserHandle.of(r3)
            r4.restoreDelayedRuntimePermissions(r7, r5)
            r10.updateDefaultHomeNotLocked((int) r3)
            int r2 = r2 + 1
            goto L_0x02b2
        L_0x02f7:
            if (r18 == 0) goto L_0x0301
            if (r17 != 0) goto L_0x0301
            int r1 = r11.uid
            r10.notifyPackageAdded(r7, r1)
            goto L_0x0306
        L_0x0301:
            int r1 = r11.uid
            r10.notifyPackageChanged(r7, r1)
        L_0x0306:
            r1 = 3110(0xc26, float:4.358E-42)
            int r2 = r30.getUnknownSourcesSettings()
            android.util.EventLog.writeEvent(r1, r2)
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r1 = r11.removedInfo
            if (r1 == 0) goto L_0x0317
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r0 = r11.removedInfo
            com.android.server.pm.PackageManagerService$InstallArgs r0 = r0.args
        L_0x0317:
            r1 = r0
            if (r1 == 0) goto L_0x032d
            if (r12 != 0) goto L_0x0321
            r10.scheduleDeferredNoKillPostDelete(r1)
            r0 = 1
            goto L_0x0335
        L_0x0321:
            java.lang.Object r2 = r10.mInstallLock
            monitor-enter(r2)
            r0 = 1
            r1.doPostDeleteLI(r0)     // Catch:{ all -> 0x032a }
            monitor-exit(r2)     // Catch:{ all -> 0x032a }
            goto L_0x0335
        L_0x032a:
            r0 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x032a }
            throw r0
        L_0x032d:
            r0 = 1
            dalvik.system.VMRuntime r2 = dalvik.system.VMRuntime.getRuntime()
            r2.requestConcurrentGC()
        L_0x0335:
            int r2 = r9.length
            r3 = 0
        L_0x0337:
            if (r3 >= r2) goto L_0x034b
            r4 = r9[r3]
            r5 = 0
            android.content.pm.PackageInfo r6 = r10.getPackageInfo(r7, r5, r4)
            if (r6 == 0) goto L_0x0347
            com.android.server.pm.dex.DexManager r0 = r10.mDexManager
            r0.notifyPackageInstalled(r6, r4)
        L_0x0347:
            int r3 = r3 + 1
            r0 = 1
            goto L_0x0337
        L_0x034b:
            r5 = 0
            goto L_0x0358
        L_0x034d:
            r0 = move-exception
            r15 = r8
            r8 = r38
        L_0x0351:
            monitor-exit(r1)     // Catch:{ all -> 0x0353 }
            throw r0
        L_0x0353:
            r0 = move-exception
            goto L_0x0351
        L_0x0355:
            r8 = r38
            r5 = 0
        L_0x0358:
            if (r16 == 0) goto L_0x035f
            if (r17 == 0) goto L_0x035f
            if (r12 != 0) goto L_0x035f
            r5 = 1
        L_0x035f:
            r0 = r5
            if (r0 == 0) goto L_0x0368
            r1 = r39
            r10.scheduleDeferredNoKillInstallObserver(r11, r1)
            goto L_0x036d
        L_0x0368:
            r1 = r39
            r10.notifyInstallObserver(r11, r1)
        L_0x036d:
            java.lang.String r2 = r11.name
            if (r2 == 0) goto L_0x0374
            java.lang.String r2 = r11.name
            goto L_0x0376
        L_0x0374:
            r2 = r40
        L_0x0376:
            int r3 = r11.returnCode
            java.lang.String r4 = r11.returnMsg
            boolean r5 = r11.isReplace
            android.content.pm.PackageParser$Package r6 = r11.pkg
            r7 = r38
            com.android.server.pm.PackageManagerServiceInjector.onPackageInstalled(r2, r3, r4, r5, r6, r7)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.handlePackagePostInstall(com.android.server.pm.PackageManagerService$PackageInstalledInfo, boolean, boolean, boolean, java.lang.String[], java.util.List, boolean, java.lang.String, android.content.pm.IPackageInstallObserver2, java.lang.String):void");
    }

    public void notifyPackagesReplacedReceived(String[] packages) {
        int callingUid = Binder.getCallingUid();
        int callingUserId = UserHandle.getUserId(callingUid);
        for (String packageName : packages) {
            PackageSetting setting = this.mSettings.mPackages.get(packageName);
            if (setting != null && filterAppAccessLPr(setting, callingUid, callingUserId)) {
                notifyInstallObserver(packageName);
            }
        }
    }

    /* access modifiers changed from: private */
    public void notifyInstallObserver(String packageName) {
        Pair<PackageInstalledInfo, IPackageInstallObserver2> pair = this.mNoKillInstallObservers.remove(packageName);
        if (pair != null) {
            notifyInstallObserver((PackageInstalledInfo) pair.first, (IPackageInstallObserver2) pair.second);
        }
    }

    private void notifyInstallObserver(PackageInstalledInfo info, IPackageInstallObserver2 installObserver) {
        if (installObserver != null) {
            try {
                installObserver.onPackageInstalled(info.name, info.returnCode, info.returnMsg, extrasForInstallResult(info));
            } catch (RemoteException e) {
                Slog.i(TAG, "Observer no longer exists.");
            }
        }
    }

    private void scheduleDeferredNoKillPostDelete(InstallArgs args) {
        this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(23, args), 3000);
    }

    private void scheduleDeferredNoKillInstallObserver(PackageInstalledInfo info, IPackageInstallObserver2 observer) {
        String packageName = info.pkg.packageName;
        this.mNoKillInstallObservers.put(packageName, Pair.create(info, observer));
        this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(24, packageName), 500);
    }

    private static int getPackageExternalStorageType(VolumeInfo packageVolume, boolean packageIsExternal) {
        DiskInfo disk;
        if (packageVolume == null || (disk = packageVolume.getDisk()) == null) {
            return 0;
        }
        if (disk.isSd()) {
            return 1;
        }
        if (disk.isUsb()) {
            return 2;
        }
        if (packageIsExternal) {
            return 3;
        }
        return 0;
    }

    /* access modifiers changed from: package-private */
    public Bundle extrasForInstallResult(PackageInstalledInfo res) {
        int i = res.returnCode;
        if (i != -112) {
            boolean z = true;
            if (i != 1) {
                return null;
            }
            Bundle extras = new Bundle();
            if (res.removedInfo == null || res.removedInfo.removedPackage == null) {
                z = false;
            }
            extras.putBoolean("android.intent.extra.REPLACING", z);
            return extras;
        }
        Bundle extras2 = new Bundle();
        extras2.putString("android.content.pm.extra.FAILURE_EXISTING_PERMISSION", res.origPermission);
        extras2.putString("android.content.pm.extra.FAILURE_EXISTING_PACKAGE", res.origPackage);
        return extras2;
    }

    /* access modifiers changed from: package-private */
    public void scheduleWriteSettingsLocked() {
        if (!this.mHandler.hasMessages(13)) {
            this.mHandler.sendEmptyMessageDelayed(13, JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
        }
    }

    /* access modifiers changed from: package-private */
    public void scheduleWritePackageListLocked(int userId) {
        if (!this.mHandler.hasMessages(19)) {
            Message msg = this.mHandler.obtainMessage(19);
            msg.arg1 = userId;
            this.mHandler.sendMessageDelayed(msg, JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
        }
    }

    /* access modifiers changed from: package-private */
    public void scheduleWritePackageRestrictionsLocked(UserHandle user) {
        scheduleWritePackageRestrictionsLocked(user == null ? -1 : user.getIdentifier());
    }

    /* access modifiers changed from: package-private */
    public void scheduleWritePackageRestrictionsLocked(int userId) {
        int i = 0;
        int[] userIds = userId == -1 ? sUserManager.getUserIds() : new int[]{userId};
        int length = userIds.length;
        while (i < length) {
            int nextUserId = userIds[i];
            if (sUserManager.exists(nextUserId)) {
                this.mDirtyUsers.add(Integer.valueOf(nextUserId));
                if (!this.mHandler.hasMessages(14)) {
                    this.mHandler.sendEmptyMessageDelayed(14, JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
                }
                i++;
            } else {
                return;
            }
        }
    }

    /* JADX WARNING: type inference failed for: r0v0, types: [com.android.server.pm.PackageManagerService, java.lang.Object, android.os.IBinder] */
    /* JADX WARNING: type inference failed for: r1v1, types: [com.android.server.pm.PackageManagerService$PackageManagerNative, android.os.IBinder] */
    public static PackageManagerService main(Context context, Installer installer, boolean factoryTest, boolean onlyCore) {
        PackageManagerServiceCompilerMapping.checkProperties();
        ? packageManagerService = new PackageManagerService(context, installer, factoryTest, onlyCore);
        packageManagerService.enableSystemUserPackages();
        ServiceManager.addService("package", packageManagerService);
        Objects.requireNonNull(packageManagerService);
        ServiceManager.addService("package_native", new PackageManagerNative());
        return packageManagerService;
    }

    private void enableSystemUserPackages() {
        if (UserManager.isSplitSystemUser()) {
            AppsQueryHelper queryHelper = new AppsQueryHelper(this);
            Set<String> enableApps = new ArraySet<>();
            enableApps.addAll(queryHelper.queryApps(AppsQueryHelper.GET_NON_LAUNCHABLE_APPS | AppsQueryHelper.GET_APPS_WITH_INTERACT_ACROSS_USERS_PERM | AppsQueryHelper.GET_IMES, true, UserHandle.SYSTEM));
            enableApps.addAll(SystemConfig.getInstance().getSystemUserWhitelistedApps());
            enableApps.addAll(queryHelper.queryApps(AppsQueryHelper.GET_REQUIRED_FOR_SYSTEM_USER, false, UserHandle.SYSTEM));
            enableApps.removeAll(SystemConfig.getInstance().getSystemUserBlacklistedApps());
            Log.i(TAG, "Applications installed for system user: " + enableApps);
            List<String> allAps = queryHelper.queryApps(0, false, UserHandle.SYSTEM);
            int allAppsSize = allAps.size();
            synchronized (this.mPackages) {
                for (int i = 0; i < allAppsSize; i++) {
                    String pName = allAps.get(i);
                    PackageSetting pkgSetting = this.mSettings.mPackages.get(pName);
                    if (pkgSetting != null) {
                        boolean install = enableApps.contains(pName);
                        if (pkgSetting.getInstalled(0) != install) {
                            StringBuilder sb = new StringBuilder();
                            sb.append(install ? "Installing " : "Uninstalling ");
                            sb.append(pName);
                            sb.append(" for system user");
                            Log.i(TAG, sb.toString());
                            pkgSetting.setInstalled(install, 0);
                        }
                    }
                }
                scheduleWritePackageRestrictionsLocked(0);
            }
        }
    }

    private static void getDefaultDisplayMetrics(Context context, DisplayMetrics metrics) {
        ((DisplayManager) context.getSystemService("display")).getDisplay(0).getMetrics(metrics);
    }

    private static void requestCopyPreoptedFiles() {
        if (SystemProperties.getInt("ro.cp_system_other_odex", 0) == 1) {
            SystemProperties.set("sys.cppreopt", "requested");
            long timeStart = SystemClock.uptimeMillis();
            long timeEnd = 100000 + timeStart;
            long timeNow = timeStart;
            while (true) {
                if (SystemProperties.get("sys.cppreopt").equals("finished")) {
                    break;
                }
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                }
                timeNow = SystemClock.uptimeMillis();
                if (timeNow > timeEnd) {
                    SystemProperties.set("sys.cppreopt", "timed-out");
                    Slog.wtf(TAG, "cppreopt did not finish!");
                    break;
                }
            }
            Slog.i(TAG, "cppreopts took " + (timeNow - timeStart) + " ms");
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 61 */
    /* JADX WARNING: Code restructure failed: missing block: B:476:0x102d, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:481:?, code lost:
        throw r3;
     */
    /* JADX WARNING: Removed duplicated region for block: B:109:0x049c A[SYNTHETIC, Splitter:B:109:0x049c] */
    /* JADX WARNING: Removed duplicated region for block: B:118:0x04ab A[SYNTHETIC, Splitter:B:118:0x04ab] */
    /* JADX WARNING: Removed duplicated region for block: B:127:0x04ba A[SYNTHETIC, Splitter:B:127:0x04ba] */
    /* JADX WARNING: Removed duplicated region for block: B:136:0x04cd A[SYNTHETIC, Splitter:B:136:0x04cd] */
    /* JADX WARNING: Removed duplicated region for block: B:147:0x0500 A[SYNTHETIC, Splitter:B:147:0x0500] */
    /* JADX WARNING: Removed duplicated region for block: B:161:0x05bf A[Catch:{ PackageManagerException -> 0x0ba1, all -> 0x101f }] */
    /* JADX WARNING: Removed duplicated region for block: B:456:0x1007  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public PackageManagerService(android.content.Context r62, com.android.server.pm.Installer r63, boolean r64, boolean r65) {
        /*
            r61 = this;
            r13 = r61
            r14 = r62
            r15 = r63
            r11 = r65
            r61.<init>()
            int r1 = android.os.Build.VERSION.SDK_INT
            r13.mSdkVersion = r1
            java.lang.Object r1 = new java.lang.Object
            r1.<init>()
            r13.mInstallLock = r1
            android.util.ArrayMap r1 = new android.util.ArrayMap
            r1.<init>()
            r13.mPackages = r1
            android.util.SparseIntArray r1 = new android.util.SparseIntArray
            r1.<init>()
            r13.mIsolatedOwners = r1
            android.util.ArrayMap r1 = new android.util.ArrayMap
            r1.<init>()
            r13.mExpectingBetter = r1
            android.util.ArraySet r1 = new android.util.ArraySet
            r1.<init>()
            r13.mExistingSystemPackages = r1
            android.util.ArraySet r1 = new android.util.ArraySet
            r1.<init>()
            r13.mFrozenPackages = r1
            android.util.ArraySet r1 = new android.util.ArraySet
            r1.<init>()
            r13.mLoadedVolumes = r1
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
            r13.mChangedPackages = r1
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
            r13.mChangedPackagesSequenceNumbers = r1
            android.util.ArraySet r1 = new android.util.ArraySet
            r1.<init>()
            r13.mPackageListObservers = r1
            android.util.SparseIntArray r1 = new android.util.SparseIntArray
            r1.<init>()
            r13.mDefaultPermissionsGrantedUsers = r1
            com.android.server.pm.PackageManagerService$PackageParserCallback r1 = new com.android.server.pm.PackageManagerService$PackageParserCallback
            r1.<init>()
            r13.mPackageParserCallback = r1
            com.android.server.pm.PackageManagerService$ParallelPackageParserCallback r1 = new com.android.server.pm.PackageManagerService$ParallelPackageParserCallback
            r1.<init>()
            r13.mParallelPackageParserCallback = r1
            android.util.ArrayMap r1 = new android.util.ArrayMap
            r1.<init>()
            r13.mSharedLibraries = r1
            android.util.ArrayMap r1 = new android.util.ArrayMap
            r1.<init>()
            r13.mStaticLibsByDeclaringPackage = r1
            android.util.ArrayMap r1 = new android.util.ArrayMap
            r1.<init>()
            r13.mInstrumentation = r1
            android.util.ArraySet r1 = new android.util.ArraySet
            r1.<init>()
            r13.mTransferedPackages = r1
            android.util.ArraySet r1 = new android.util.ArraySet
            r1.<init>()
            r13.mProtectedBroadcasts = r1
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
            r13.mPendingVerification = r1
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
            r13.mPendingEnableRollback = r1
            java.util.concurrent.atomic.AtomicInteger r1 = new java.util.concurrent.atomic.AtomicInteger
            r1.<init>()
            r13.mNextMoveId = r1
            android.util.SparseBooleanArray r1 = new android.util.SparseBooleanArray
            r1.<init>()
            r13.mUserNeedsBadging = r1
            r12 = 0
            r13.mPendingVerificationToken = r12
            r13.mPendingEnableRollbackToken = r12
            android.util.SparseBooleanArray r1 = new android.util.SparseBooleanArray
            r1.<init>()
            r13.mWebInstantAppsDisabled = r1
            android.content.pm.ActivityInfo r1 = new android.content.pm.ActivityInfo
            r1.<init>()
            r13.mResolveActivity = r1
            android.content.pm.ResolveInfo r1 = new android.content.pm.ResolveInfo
            r1.<init>()
            r13.mResolveInfo = r1
            r13.mResolverReplaced = r12
            r13.mIntentFilterVerificationToken = r12
            android.content.pm.ResolveInfo r1 = new android.content.pm.ResolveInfo
            r1.<init>()
            r13.mInstantAppInstallerInfo = r1
            java.util.HashMap r1 = new java.util.HashMap
            r1.<init>()
            java.util.Map r1 = java.util.Collections.synchronizedMap(r1)
            r13.mNoKillInstallObservers = r1
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
            r13.mIntentFilterVerificationStates = r1
            com.android.server.pm.PackageManagerService$PendingPackageBroadcasts r1 = new com.android.server.pm.PackageManagerService$PendingPackageBroadcasts
            r1.<init>()
            r13.mPendingBroadcasts = r1
            android.util.ArraySet r1 = new android.util.ArraySet
            r1.<init>()
            r13.mDirtyUsers = r1
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
            r13.mRunningInstalls = r1
            r10 = 1
            r13.mNextInstallToken = r10
            com.android.server.pm.PackageUsage r1 = new com.android.server.pm.PackageUsage
            r1.<init>()
            r13.mPackageUsage = r1
            com.android.server.pm.CompilerStats r1 = new com.android.server.pm.CompilerStats
            r1.<init>()
            r13.mCompilerStats = r1
            com.android.server.pm.PackageManagerService$1 r1 = new com.android.server.pm.PackageManagerService$1
            r1.<init>()
            r13.mPermissionCallback = r1
            com.android.server.pm.PackageManagerService$2 r1 = new com.android.server.pm.PackageManagerService$2
            r1.<init>()
            r13.mStorageListener = r1
            r13.mMediaMounted = r12
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r13.mPackages
            r9 = 3
            com.android.server.LockGuard.installLock((java.lang.Object) r1, (int) r9)
            r7 = 262144(0x40000, double:1.295163E-318)
            java.lang.String r1 = "create package manager"
            android.os.Trace.traceBegin(r7, r1)
            long r1 = android.os.SystemClock.uptimeMillis()
            r3 = 3060(0xbf4, float:4.288E-42)
            android.util.EventLog.writeEvent(r3, r1)
            int r1 = r13.mSdkVersion
            if (r1 > 0) goto L_0x0139
            java.lang.String r1 = "PackageManager"
            java.lang.String r2 = "**** ro.build.version.sdk not set!"
            android.util.Slog.w(r1, r2)
        L_0x0139:
            r13.mContext = r14
            r6 = r64
            r13.mFactoryTest = r6
            r13.mOnlyCore = r11
            android.util.DisplayMetrics r1 = new android.util.DisplayMetrics
            r1.<init>()
            r13.mMetrics = r1
            r13.mInstaller = r15
            java.lang.Object r1 = r13.mInstallLock
            monitor-enter(r1)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r13.mPackages     // Catch:{ all -> 0x1031 }
            monitor-enter(r2)     // Catch:{ all -> 0x1031 }
            java.lang.Class<android.content.pm.PackageManagerInternal> r3 = android.content.pm.PackageManagerInternal.class
            com.android.server.pm.PackageManagerService$PackageManagerInternalImpl r4 = new com.android.server.pm.PackageManagerService$PackageManagerInternalImpl     // Catch:{ all -> 0x102d }
            r5 = 0
            r4.<init>()     // Catch:{ all -> 0x102d }
            com.android.server.LocalServices.addService(r3, r4)     // Catch:{ all -> 0x102d }
            com.android.server.pm.UserManagerService r3 = new com.android.server.pm.UserManagerService     // Catch:{ all -> 0x102d }
            com.android.server.pm.UserDataPreparer r4 = new com.android.server.pm.UserDataPreparer     // Catch:{ all -> 0x102d }
            com.android.server.pm.Installer r9 = r13.mInstaller     // Catch:{ all -> 0x102d }
            java.lang.Object r7 = r13.mInstallLock     // Catch:{ all -> 0x102d }
            android.content.Context r8 = r13.mContext     // Catch:{ all -> 0x102d }
            boolean r12 = r13.mOnlyCore     // Catch:{ all -> 0x102d }
            r4.<init>(r9, r7, r8, r12)     // Catch:{ all -> 0x102d }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r7 = r13.mPackages     // Catch:{ all -> 0x102d }
            r3.<init>(r14, r13, r4, r7)     // Catch:{ all -> 0x102d }
            sUserManager = r3     // Catch:{ all -> 0x102d }
            com.android.server.pm.ComponentResolver r3 = new com.android.server.pm.ComponentResolver     // Catch:{ all -> 0x102d }
            com.android.server.pm.UserManagerService r4 = sUserManager     // Catch:{ all -> 0x102d }
            java.lang.Class<android.content.pm.PackageManagerInternal> r7 = android.content.pm.PackageManagerInternal.class
            java.lang.Object r7 = com.android.server.LocalServices.getService(r7)     // Catch:{ all -> 0x102d }
            android.content.pm.PackageManagerInternal r7 = (android.content.pm.PackageManagerInternal) r7     // Catch:{ all -> 0x102d }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r8 = r13.mPackages     // Catch:{ all -> 0x102d }
            r3.<init>(r4, r7, r8)     // Catch:{ all -> 0x102d }
            r13.mComponentResolver = r3     // Catch:{ all -> 0x102d }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r13.mPackages     // Catch:{ all -> 0x102d }
            com.android.server.pm.permission.PermissionManagerServiceInternal r3 = com.android.server.pm.permission.PermissionManagerService.create(r14, r3)     // Catch:{ all -> 0x102d }
            r13.mPermissionManager = r3     // Catch:{ all -> 0x102d }
            com.android.server.pm.permission.PermissionManagerServiceInternal r3 = r13.mPermissionManager     // Catch:{ all -> 0x102d }
            com.android.server.pm.permission.DefaultPermissionGrantPolicy r3 = r3.getDefaultPermissionGrantPolicy()     // Catch:{ all -> 0x102d }
            r13.mDefaultPermissionPolicy = r3     // Catch:{ all -> 0x102d }
            com.android.server.pm.Settings r3 = new com.android.server.pm.Settings     // Catch:{ all -> 0x102d }
            java.io.File r4 = android.os.Environment.getDataDirectory()     // Catch:{ all -> 0x102d }
            com.android.server.pm.permission.PermissionManagerServiceInternal r7 = r13.mPermissionManager     // Catch:{ all -> 0x102d }
            com.android.server.pm.permission.PermissionSettings r7 = r7.getPermissionSettings()     // Catch:{ all -> 0x102d }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r8 = r13.mPackages     // Catch:{ all -> 0x102d }
            r3.<init>(r4, r7, r8)     // Catch:{ all -> 0x102d }
            r13.mSettings = r3     // Catch:{ all -> 0x102d }
            monitor-exit(r2)     // Catch:{ all -> 0x102d }
            monitor-exit(r1)     // Catch:{ all -> 0x1031 }
            com.android.server.pm.Settings r1 = r13.mSettings
            r2 = 1000(0x3e8, float:1.401E-42)
            r3 = 8
            java.lang.String r4 = "android.uid.system"
            r1.addSharedUserLPw(r4, r2, r10, r3)
            com.android.server.pm.Settings r1 = r13.mSettings
            r2 = 1001(0x3e9, float:1.403E-42)
            java.lang.String r4 = "android.uid.phone"
            r1.addSharedUserLPw(r4, r2, r10, r3)
            com.android.server.pm.Settings r1 = r13.mSettings
            r2 = 1007(0x3ef, float:1.411E-42)
            java.lang.String r4 = "android.uid.log"
            r1.addSharedUserLPw(r4, r2, r10, r3)
            com.android.server.pm.Settings r1 = r13.mSettings
            r2 = 1027(0x403, float:1.439E-42)
            java.lang.String r4 = "android.uid.nfc"
            r1.addSharedUserLPw(r4, r2, r10, r3)
            com.android.server.pm.Settings r1 = r13.mSettings
            r2 = 1002(0x3ea, float:1.404E-42)
            java.lang.String r4 = "android.uid.bluetooth"
            r1.addSharedUserLPw(r4, r2, r10, r3)
            com.android.server.pm.Settings r1 = r13.mSettings
            r2 = 2000(0x7d0, float:2.803E-42)
            java.lang.String r4 = "android.uid.shell"
            r1.addSharedUserLPw(r4, r2, r10, r3)
            com.android.server.pm.Settings r1 = r13.mSettings
            r2 = 1068(0x42c, float:1.497E-42)
            java.lang.String r4 = "android.uid.se"
            r1.addSharedUserLPw(r4, r2, r10, r3)
            com.android.server.pm.Settings r1 = r13.mSettings
            r2 = 1073(0x431, float:1.504E-42)
            java.lang.String r4 = "android.uid.networkstack"
            r1.addSharedUserLPw(r4, r2, r10, r3)
            com.android.server.pm.Settings r1 = r13.mSettings
            com.android.server.pm.PackageManagerServiceInjector.addMiuiSharedUids(r1, r10)
            java.lang.String r1 = "debug.separate_processes"
            java.lang.String r12 = android.os.SystemProperties.get(r1)
            if (r12 == 0) goto L_0x023d
            int r1 = r12.length()
            if (r1 <= 0) goto L_0x023d
            java.lang.String r1 = "*"
            boolean r1 = r1.equals(r12)
            if (r1 == 0) goto L_0x021b
            r1 = 2
            r13.mDefParseFlags = r1
            r13.mSeparateProcesses = r5
            java.lang.String r1 = "PackageManager"
            java.lang.String r2 = "Running with debug.separate_processes: * (ALL)"
            android.util.Slog.w(r1, r2)
            goto L_0x0242
        L_0x021b:
            r1 = 0
            r13.mDefParseFlags = r1
            java.lang.String r1 = ","
            java.lang.String[] r1 = r12.split(r1)
            r13.mSeparateProcesses = r1
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "Running with debug.separate_processes: "
            r1.append(r2)
            r1.append(r12)
            java.lang.String r1 = r1.toString()
            java.lang.String r2 = "PackageManager"
            android.util.Slog.w(r2, r1)
            goto L_0x0242
        L_0x023d:
            r1 = 0
            r13.mDefParseFlags = r1
            r13.mSeparateProcesses = r5
        L_0x0242:
            com.android.server.pm.PackageDexOptimizer r1 = new com.android.server.pm.PackageDexOptimizer
            java.lang.Object r2 = r13.mInstallLock
            java.lang.String r3 = "*dexopt*"
            r1.<init>(r15, r2, r14, r3)
            r13.mPackageDexOptimizer = r1
            com.android.server.pm.dex.DexManager r7 = new com.android.server.pm.dex.DexManager
            android.content.Context r2 = r13.mContext
            com.android.server.pm.PackageDexOptimizer r4 = r13.mPackageDexOptimizer
            java.lang.Object r8 = r13.mInstallLock
            r1 = r7
            r3 = r61
            r9 = r5
            r5 = r63
            r6 = r8
            r1.<init>(r2, r3, r4, r5, r6)
            r13.mDexManager = r7
            com.android.server.pm.dex.ArtManagerService r1 = new com.android.server.pm.dex.ArtManagerService
            android.content.Context r2 = r13.mContext
            java.lang.Object r3 = r13.mInstallLock
            r1.<init>(r2, r13, r15, r3)
            r13.mArtManagerService = r1
            com.android.server.pm.PackageManagerService$MoveCallbacks r1 = new com.android.server.pm.PackageManagerService$MoveCallbacks
            com.android.server.FgThread r2 = com.android.server.FgThread.get()
            android.os.Looper r2 = r2.getLooper()
            r1.<init>(r2)
            r13.mMoveCallbacks = r1
            com.android.server.pm.dex.ViewCompiler r1 = new com.android.server.pm.dex.ViewCompiler
            java.lang.Object r2 = r13.mInstallLock
            com.android.server.pm.Installer r3 = r13.mInstaller
            r1.<init>(r2, r3)
            r13.mViewCompiler = r1
            com.android.server.pm.PackageManagerService$OnPermissionChangeListeners r1 = new com.android.server.pm.PackageManagerService$OnPermissionChangeListeners
            com.android.server.FgThread r2 = com.android.server.FgThread.get()
            android.os.Looper r2 = r2.getLooper()
            r1.<init>(r2)
            r13.mOnPermissionChangeListeners = r1
            android.util.DisplayMetrics r1 = r13.mMetrics
            getDefaultDisplayMetrics(r14, r1)
            java.lang.String r1 = "get system config"
            r2 = 262144(0x40000, double:1.295163E-318)
            android.os.Trace.traceBegin(r2, r1)
            com.android.server.SystemConfig r20 = com.android.server.SystemConfig.getInstance()
            android.util.ArrayMap r1 = r20.getAvailableFeatures()
            r13.mAvailableFeatures = r1
            android.os.Trace.traceEnd(r2)
            com.android.server.pm.ProtectedPackages r1 = new com.android.server.pm.ProtectedPackages
            android.content.Context r2 = r13.mContext
            r1.<init>(r2)
            r13.mProtectedPackages = r1
            com.android.server.pm.ApexManager r1 = new com.android.server.pm.ApexManager
            r1.<init>(r14)
            r13.mApexManager = r1
            java.lang.Object r7 = r13.mInstallLock
            monitor-enter(r7)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r5 = r13.mPackages     // Catch:{ all -> 0x1022 }
            monitor-enter(r5)     // Catch:{ all -> 0x1022 }
            com.android.server.ServiceThread r1 = new com.android.server.ServiceThread     // Catch:{ all -> 0x1015 }
            java.lang.String r2 = "PackageManager"
            r3 = 10
            r1.<init>(r2, r3, r10)     // Catch:{ all -> 0x1015 }
            r13.mHandlerThread = r1     // Catch:{ all -> 0x1015 }
            com.android.server.ServiceThread r1 = r13.mHandlerThread     // Catch:{ all -> 0x1015 }
            r1.start()     // Catch:{ all -> 0x1015 }
            com.android.server.pm.PackageManagerService$PackageHandler r1 = new com.android.server.pm.PackageManagerService$PackageHandler     // Catch:{ all -> 0x1015 }
            com.android.server.ServiceThread r2 = r13.mHandlerThread     // Catch:{ all -> 0x1015 }
            android.os.Looper r2 = r2.getLooper()     // Catch:{ all -> 0x1015 }
            r1.<init>(r2)     // Catch:{ all -> 0x1015 }
            r13.mHandler = r1     // Catch:{ all -> 0x1015 }
            com.android.server.pm.ProcessLoggingHandler r1 = new com.android.server.pm.ProcessLoggingHandler     // Catch:{ all -> 0x1015 }
            r1.<init>()     // Catch:{ all -> 0x1015 }
            r13.mProcessLoggingHandler = r1     // Catch:{ all -> 0x1015 }
            com.android.server.Watchdog r1 = com.android.server.Watchdog.getInstance()     // Catch:{ all -> 0x1015 }
            com.android.server.pm.PackageManagerService$PackageHandler r2 = r13.mHandler     // Catch:{ all -> 0x1015 }
            r3 = 600000(0x927c0, double:2.964394E-318)
            r1.addThread(r2, r3)     // Catch:{ all -> 0x1015 }
            com.android.server.pm.InstantAppRegistry r1 = new com.android.server.pm.InstantAppRegistry     // Catch:{ all -> 0x1015 }
            r1.<init>(r13)     // Catch:{ all -> 0x1015 }
            r13.mInstantAppRegistry = r1     // Catch:{ all -> 0x1015 }
            android.util.ArrayMap r1 = r20.getSharedLibraries()     // Catch:{ all -> 0x1015 }
            r6 = r1
            int r1 = r6.size()     // Catch:{ all -> 0x1015 }
            r4 = r1
            r1 = 0
        L_0x0308:
            if (r1 >= r4) goto L_0x0329
            java.lang.Object r2 = r6.keyAt(r1)     // Catch:{ all -> 0x031f }
            java.lang.String r2 = (java.lang.String) r2     // Catch:{ all -> 0x031f }
            java.lang.Object r3 = r6.valueAt(r1)     // Catch:{ all -> 0x031f }
            com.android.server.SystemConfig$SharedLibraryEntry r3 = (com.android.server.SystemConfig.SharedLibraryEntry) r3     // Catch:{ all -> 0x031f }
            java.lang.String r8 = r3.filename     // Catch:{ all -> 0x031f }
            r13.addBuiltInSharedLibraryLocked(r8, r2)     // Catch:{ all -> 0x031f }
            int r1 = r1 + 1
            goto L_0x0308
        L_0x031f:
            r0 = move-exception
            r1 = r0
            r23 = r5
            r39 = r7
            r16 = r12
            goto L_0x101d
        L_0x0329:
            r2 = -1
            r1 = 0
        L_0x032c:
            if (r1 >= r4) goto L_0x0373
            java.lang.Object r8 = r6.keyAt(r1)     // Catch:{ all -> 0x031f }
            java.lang.String r8 = (java.lang.String) r8     // Catch:{ all -> 0x031f }
            java.lang.Object r21 = r6.valueAt(r1)     // Catch:{ all -> 0x031f }
            com.android.server.SystemConfig$SharedLibraryEntry r21 = (com.android.server.SystemConfig.SharedLibraryEntry) r21     // Catch:{ all -> 0x031f }
            r22 = r21
            r9 = r22
            java.lang.String[] r10 = r9.dependencies     // Catch:{ all -> 0x031f }
            int r10 = r10.length     // Catch:{ all -> 0x031f }
            r23 = 0
            r24 = r4
            r4 = r23
        L_0x0347:
            if (r4 >= r10) goto L_0x0368
            r23 = r6
            java.lang.String[] r6 = r9.dependencies     // Catch:{ all -> 0x031f }
            r6 = r6[r4]     // Catch:{ all -> 0x031f }
            android.content.pm.SharedLibraryInfo r6 = r13.getSharedLibraryInfoLPr(r6, r2)     // Catch:{ all -> 0x031f }
            if (r6 == 0) goto L_0x035f
            r25 = r9
            android.content.pm.SharedLibraryInfo r9 = r13.getSharedLibraryInfoLPr(r8, r2)     // Catch:{ all -> 0x031f }
            r9.addDependency(r6)     // Catch:{ all -> 0x031f }
            goto L_0x0361
        L_0x035f:
            r25 = r9
        L_0x0361:
            int r4 = r4 + 1
            r6 = r23
            r9 = r25
            goto L_0x0347
        L_0x0368:
            r23 = r6
            r25 = r9
            int r1 = r1 + 1
            r4 = r24
            r9 = 0
            r10 = 1
            goto L_0x032c
        L_0x0373:
            r24 = r4
            r23 = r6
            com.android.server.pm.SELinuxMMAC.readInstallPolicy()     // Catch:{ all -> 0x1015 }
            java.lang.String r1 = "loadFallbacks"
            r8 = 262144(0x40000, double:1.295163E-318)
            android.os.Trace.traceBegin(r8, r1)     // Catch:{ all -> 0x1015 }
            android.content.pm.FallbackCategoryProvider.loadFallbacks()     // Catch:{ all -> 0x1015 }
            android.os.Trace.traceEnd(r8)     // Catch:{ all -> 0x1015 }
            java.lang.String r1 = "read user settings"
            android.os.Trace.traceBegin(r8, r1)     // Catch:{ all -> 0x1015 }
            com.android.server.pm.Settings r1 = r13.mSettings     // Catch:{ all -> 0x1015 }
            com.android.server.pm.UserManagerService r4 = sUserManager     // Catch:{ all -> 0x1015 }
            r10 = 0
            java.util.List r4 = r4.getUsers(r10)     // Catch:{ all -> 0x1015 }
            boolean r1 = r1.readLPw(r4)     // Catch:{ all -> 0x1015 }
            if (r1 != 0) goto L_0x03a0
            r1 = 1
            goto L_0x03a1
        L_0x03a0:
            r1 = r10
        L_0x03a1:
            r13.mFirstBoot = r1     // Catch:{ all -> 0x1015 }
            r8 = 262144(0x40000, double:1.295163E-318)
            android.os.Trace.traceEnd(r8)     // Catch:{ all -> 0x1015 }
            com.android.server.pm.Settings r1 = r13.mSettings     // Catch:{ all -> 0x1015 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r1 = r1.mPackages     // Catch:{ all -> 0x1015 }
            int r1 = r1.size()     // Catch:{ all -> 0x1015 }
            r17 = r1
            int r1 = r17 + -1
        L_0x03b5:
            if (r1 < 0) goto L_0x03f1
            com.android.server.pm.Settings r4 = r13.mSettings     // Catch:{ all -> 0x031f }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r4 = r4.mPackages     // Catch:{ all -> 0x031f }
            java.lang.Object r4 = r4.valueAt(r1)     // Catch:{ all -> 0x031f }
            com.android.server.pm.PackageSetting r4 = (com.android.server.pm.PackageSetting) r4     // Catch:{ all -> 0x031f }
            boolean r6 = isExternal((com.android.server.pm.PackageSetting) r4)     // Catch:{ all -> 0x031f }
            if (r6 != 0) goto L_0x03eb
            java.io.File r6 = r4.codePath     // Catch:{ all -> 0x031f }
            if (r6 == 0) goto L_0x03d3
            java.io.File r6 = r4.codePath     // Catch:{ all -> 0x031f }
            boolean r6 = r6.exists()     // Catch:{ all -> 0x031f }
            if (r6 != 0) goto L_0x03eb
        L_0x03d3:
            com.android.server.pm.Settings r6 = r13.mSettings     // Catch:{ all -> 0x031f }
            java.lang.String r8 = r4.name     // Catch:{ all -> 0x031f }
            com.android.server.pm.PackageSetting r6 = r6.getDisabledSystemPkgLPr((java.lang.String) r8)     // Catch:{ all -> 0x031f }
            if (r6 == 0) goto L_0x03eb
            com.android.server.pm.Settings r6 = r13.mSettings     // Catch:{ all -> 0x031f }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r6 = r6.mPackages     // Catch:{ all -> 0x031f }
            r6.removeAt(r1)     // Catch:{ all -> 0x031f }
            com.android.server.pm.Settings r6 = r13.mSettings     // Catch:{ all -> 0x031f }
            java.lang.String r8 = r4.name     // Catch:{ all -> 0x031f }
            r6.enableSystemPackageLPw(r8)     // Catch:{ all -> 0x031f }
        L_0x03eb:
            int r1 = r1 + -1
            r8 = 262144(0x40000, double:1.295163E-318)
            goto L_0x03b5
        L_0x03f1:
            boolean r1 = r13.mOnlyCore     // Catch:{ all -> 0x1015 }
            if (r1 != 0) goto L_0x03fc
            boolean r1 = r13.mFirstBoot     // Catch:{ all -> 0x031f }
            if (r1 == 0) goto L_0x03fc
            requestCopyPreoptedFiles()     // Catch:{ all -> 0x031f }
        L_0x03fc:
            android.content.res.Resources r1 = android.content.res.Resources.getSystem()     // Catch:{ all -> 0x1015 }
            r4 = 17039714(0x1040162, float:2.4245563E-38)
            java.lang.String r1 = r1.getString(r4)     // Catch:{ all -> 0x1015 }
            r25 = r1
            boolean r1 = android.text.TextUtils.isEmpty(r25)     // Catch:{ all -> 0x1015 }
            if (r1 != 0) goto L_0x0415
            android.content.ComponentName r1 = android.content.ComponentName.unflattenFromString(r25)     // Catch:{ all -> 0x031f }
            r13.mCustomResolverComponentName = r1     // Catch:{ all -> 0x031f }
        L_0x0415:
            long r8 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x1015 }
            r1 = 3070(0xbfe, float:4.302E-42)
            android.util.EventLog.writeEvent(r1, r8)     // Catch:{ all -> 0x1015 }
            java.lang.String r1 = "BOOTCLASSPATH"
            java.lang.String r1 = java.lang.System.getenv(r1)     // Catch:{ all -> 0x1015 }
            r26 = r1
            java.lang.String r1 = "SYSTEMSERVERCLASSPATH"
            java.lang.String r1 = java.lang.System.getenv(r1)     // Catch:{ all -> 0x1015 }
            r27 = r1
            if (r26 != 0) goto L_0x0437
            java.lang.String r1 = "PackageManager"
            java.lang.String r4 = "No BOOTCLASSPATH found!"
            android.util.Slog.w(r1, r4)     // Catch:{ all -> 0x031f }
        L_0x0437:
            if (r27 != 0) goto L_0x0440
            java.lang.String r1 = "PackageManager"
            java.lang.String r4 = "No SYSTEMSERVERCLASSPATH found!"
            android.util.Slog.w(r1, r4)     // Catch:{ all -> 0x031f }
        L_0x0440:
            java.io.File r1 = new java.io.File     // Catch:{ all -> 0x1015 }
            java.io.File r4 = android.os.Environment.getRootDirectory()     // Catch:{ all -> 0x1015 }
            java.lang.String r6 = "framework"
            r1.<init>(r4, r6)     // Catch:{ all -> 0x1015 }
            r18 = r8
            r8 = r1
            com.android.server.pm.Settings r1 = r13.mSettings     // Catch:{ all -> 0x1015 }
            com.android.server.pm.Settings$VersionInfo r1 = r1.getInternalVersion()     // Catch:{ all -> 0x1015 }
            r9 = r1
            java.lang.String r1 = android.os.Build.FINGERPRINT     // Catch:{ all -> 0x1015 }
            java.lang.String r4 = r9.fingerprint     // Catch:{ all -> 0x1015 }
            boolean r1 = r1.equals(r4)     // Catch:{ all -> 0x1015 }
            if (r1 != 0) goto L_0x0461
            r1 = 1
            goto L_0x0462
        L_0x0461:
            r1 = r10
        L_0x0462:
            r13.mIsUpgrade = r1     // Catch:{ all -> 0x1015 }
            boolean r1 = r13.mIsUpgrade     // Catch:{ all -> 0x1015 }
            if (r1 == 0) goto L_0x0489
            r1 = 4
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x031f }
            r4.<init>()     // Catch:{ all -> 0x031f }
            java.lang.String r6 = "Upgrading from "
            r4.append(r6)     // Catch:{ all -> 0x031f }
            java.lang.String r6 = r9.fingerprint     // Catch:{ all -> 0x031f }
            r4.append(r6)     // Catch:{ all -> 0x031f }
            java.lang.String r6 = " to "
            r4.append(r6)     // Catch:{ all -> 0x031f }
            java.lang.String r6 = android.os.Build.FINGERPRINT     // Catch:{ all -> 0x031f }
            r4.append(r6)     // Catch:{ all -> 0x031f }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x031f }
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r1, r4)     // Catch:{ all -> 0x031f }
        L_0x0489:
            boolean r1 = r13.mIsUpgrade     // Catch:{ all -> 0x1015 }
            if (r1 == 0) goto L_0x0495
            int r1 = r9.sdkVersion     // Catch:{ all -> 0x031f }
            r4 = 22
            if (r1 > r4) goto L_0x0495
            r1 = 1
            goto L_0x0496
        L_0x0495:
            r1 = r10
        L_0x0496:
            r13.mPromoteSystemApps = r1     // Catch:{ all -> 0x1015 }
            boolean r1 = r13.mIsUpgrade     // Catch:{ all -> 0x1015 }
            if (r1 == 0) goto L_0x04a4
            int r1 = r9.sdkVersion     // Catch:{ all -> 0x031f }
            r4 = 24
            if (r1 >= r4) goto L_0x04a4
            r1 = 1
            goto L_0x04a5
        L_0x04a4:
            r1 = r10
        L_0x04a5:
            r13.mIsPreNUpgrade = r1     // Catch:{ all -> 0x1015 }
            boolean r1 = r13.mIsUpgrade     // Catch:{ all -> 0x1015 }
            if (r1 == 0) goto L_0x04b3
            int r1 = r9.sdkVersion     // Catch:{ all -> 0x031f }
            r4 = 25
            if (r1 >= r4) goto L_0x04b3
            r1 = 1
            goto L_0x04b4
        L_0x04b3:
            r1 = r10
        L_0x04b4:
            r13.mIsPreNMR1Upgrade = r1     // Catch:{ all -> 0x1015 }
            boolean r1 = r13.mIsUpgrade     // Catch:{ all -> 0x1015 }
            if (r1 == 0) goto L_0x04c2
            int r1 = r9.sdkVersion     // Catch:{ all -> 0x031f }
            r4 = 29
            if (r1 >= r4) goto L_0x04c2
            r1 = 1
            goto L_0x04c3
        L_0x04c2:
            r1 = r10
        L_0x04c3:
            r13.mIsPreQUpgrade = r1     // Catch:{ all -> 0x1015 }
            int r1 = r9.sdkVersion     // Catch:{ all -> 0x1015 }
            r28 = r1
            boolean r1 = r13.mPromoteSystemApps     // Catch:{ all -> 0x1015 }
            if (r1 == 0) goto L_0x04f4
            com.android.server.pm.Settings r1 = r13.mSettings     // Catch:{ all -> 0x031f }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r1 = r1.mPackages     // Catch:{ all -> 0x031f }
            java.util.Collection r1 = r1.values()     // Catch:{ all -> 0x031f }
            java.util.Iterator r1 = r1.iterator()     // Catch:{ all -> 0x031f }
        L_0x04d9:
            boolean r4 = r1.hasNext()     // Catch:{ all -> 0x031f }
            if (r4 == 0) goto L_0x04f4
            java.lang.Object r4 = r1.next()     // Catch:{ all -> 0x031f }
            com.android.server.pm.PackageSetting r4 = (com.android.server.pm.PackageSetting) r4     // Catch:{ all -> 0x031f }
            boolean r6 = isSystemApp((com.android.server.pm.PackageSetting) r4)     // Catch:{ all -> 0x031f }
            if (r6 == 0) goto L_0x04f2
            android.util.ArraySet<java.lang.String> r6 = r13.mExistingSystemPackages     // Catch:{ all -> 0x031f }
            java.lang.String r10 = r4.name     // Catch:{ all -> 0x031f }
            r6.add(r10)     // Catch:{ all -> 0x031f }
        L_0x04f2:
            r10 = 0
            goto L_0x04d9
        L_0x04f4:
            java.io.File r1 = preparePackageParserCache()     // Catch:{ all -> 0x1015 }
            r13.mCacheDir = r1     // Catch:{ all -> 0x1015 }
            r1 = 528(0x210, float:7.4E-43)
            boolean r4 = r13.mIsUpgrade     // Catch:{ all -> 0x1015 }
            if (r4 != 0) goto L_0x0507
            boolean r4 = r13.mFirstBoot     // Catch:{ all -> 0x031f }
            if (r4 == 0) goto L_0x0505
            goto L_0x0507
        L_0x0505:
            r10 = r1
            goto L_0x050a
        L_0x0507:
            r1 = r1 | 8192(0x2000, float:1.14794E-41)
            r10 = r1
        L_0x050a:
            java.io.File r4 = new java.io.File     // Catch:{ all -> 0x1015 }
            java.lang.String r1 = "/vendor/overlay"
            r4.<init>(r1)     // Catch:{ all -> 0x1015 }
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x1015 }
            r6 = r1 | 16
            r30 = 131072(0x20000, float:1.83671E-40)
            r1 = r10 | r30
            r31 = 1048576(0x100000, float:1.469368E-39)
            r32 = r1 | r31
            r33 = 0
            r1 = r61
            r35 = r2
            r2 = r4
            r3 = r6
            r4 = r32
            r32 = r23
            r23 = r5
            r5 = r33
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x1013 }
            java.io.File r2 = new java.io.File     // Catch:{ all -> 0x1013 }
            java.lang.String r1 = "/product/overlay"
            r2.<init>(r1)     // Catch:{ all -> 0x1013 }
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x1013 }
            r3 = r1 | 16
            r1 = r10 | r30
            r33 = 2097152(0x200000, float:2.938736E-39)
            r4 = r1 | r33
            r5 = 0
            r1 = r61
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x1013 }
            java.io.File r2 = new java.io.File     // Catch:{ all -> 0x1013 }
            java.lang.String r1 = "/product_services/overlay"
            r2.<init>(r1)     // Catch:{ all -> 0x1013 }
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x1013 }
            r3 = r1 | 16
            r1 = r10 | r30
            r34 = 4194304(0x400000, float:5.877472E-39)
            r4 = r1 | r34
            r5 = 0
            r1 = r61
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x1013 }
            java.io.File r2 = new java.io.File     // Catch:{ all -> 0x1013 }
            java.lang.String r1 = "/odm/overlay"
            r2.<init>(r1)     // Catch:{ all -> 0x1013 }
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x1013 }
            r3 = r1 | 16
            r1 = r10 | r30
            r4 = 8388608(0x800000, float:1.17549435E-38)
            r4 = r4 | r1
            r5 = 0
            r1 = r61
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x1013 }
            java.io.File r2 = new java.io.File     // Catch:{ all -> 0x1013 }
            java.lang.String r1 = "/oem/overlay"
            r2.<init>(r1)     // Catch:{ all -> 0x1013 }
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x1013 }
            r3 = r1 | 16
            r1 = r10 | r30
            r37 = 524288(0x80000, float:7.34684E-40)
            r4 = r1 | r37
            r5 = 0
            r1 = r61
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x1013 }
            com.android.server.pm.PackageManagerService$ParallelPackageParserCallback r1 = r13.mParallelPackageParserCallback     // Catch:{ all -> 0x1013 }
            r1.findStaticOverlayPackages()     // Catch:{ all -> 0x1013 }
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x1013 }
            r1 = r1 | 16
            r2 = r10 | 1
            r2 = r2 | r30
            r38 = 262144(0x40000, float:3.67342E-40)
            r2 = r2 | r38
            r3 = 0
            r39 = r7
            r7 = r61
            r5 = r9
            r6 = 3
            r9 = r1
            r1 = r10
            r16 = 0
            r10 = r2
            r2 = r16
            r16 = r12
            r11 = r3
            r7.scanDirTracedLI(r8, r9, r10, r11)     // Catch:{ all -> 0x101f }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r13.mPackages     // Catch:{ all -> 0x101f }
            java.lang.String r4 = "android"
            boolean r3 = r3.containsKey(r4)     // Catch:{ all -> 0x101f }
            if (r3 == 0) goto L_0x1007
            java.io.File r3 = new java.io.File     // Catch:{ all -> 0x101f }
            java.io.File r4 = android.os.Environment.getRootDirectory()     // Catch:{ all -> 0x101f }
            java.lang.String r7 = "priv-app"
            r3.<init>(r4, r7)     // Catch:{ all -> 0x101f }
            r9 = r3
            int r3 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r3 = r3 | 16
            r4 = r1 | r30
            r4 = r4 | r38
            r10 = 0
            r12 = r1
            r1 = r61
            r7 = r2
            r2 = r9
            r42 = r5
            r21 = r6
            r5 = r10
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x101f }
            java.io.File r1 = new java.io.File     // Catch:{ all -> 0x101f }
            java.io.File r2 = android.os.Environment.getRootDirectory()     // Catch:{ all -> 0x101f }
            java.lang.String r3 = "app"
            r1.<init>(r2, r3)     // Catch:{ all -> 0x101f }
            r10 = r1
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r3 = r1 | 16
            r4 = r12 | r30
            r5 = 0
            r1 = r61
            r2 = r10
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x101f }
            java.io.File r1 = new java.io.File     // Catch:{ all -> 0x101f }
            java.io.File r2 = android.os.Environment.getVendorDirectory()     // Catch:{ all -> 0x101f }
            java.lang.String r3 = "priv-app"
            r1.<init>(r2, r3)     // Catch:{ all -> 0x101f }
            java.io.File r2 = r1.getCanonicalFile()     // Catch:{ IOException -> 0x0610 }
            r1 = r2
            r11 = r1
            goto L_0x0612
        L_0x0610:
            r0 = move-exception
            r11 = r1
        L_0x0612:
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r3 = r1 | 16
            r1 = r12 | r30
            r1 = r1 | r31
            r4 = r1 | r38
            r5 = 0
            r1 = r61
            r2 = r11
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x101f }
            java.io.File r1 = new java.io.File     // Catch:{ all -> 0x101f }
            java.io.File r2 = android.os.Environment.getVendorDirectory()     // Catch:{ all -> 0x101f }
            java.lang.String r3 = "app"
            r1.<init>(r2, r3)     // Catch:{ all -> 0x101f }
            java.io.File r2 = r1.getCanonicalFile()     // Catch:{ IOException -> 0x0636 }
            r1 = r2
            r5 = r1
            goto L_0x0638
        L_0x0636:
            r0 = move-exception
            r5 = r1
        L_0x0638:
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r3 = r1 | 16
            r1 = r12 | r30
            r4 = r1 | r31
            r43 = 0
            r1 = r61
            r2 = r5
            r45 = r5
            r5 = r43
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x101f }
            java.io.File r1 = new java.io.File     // Catch:{ all -> 0x101f }
            java.io.File r2 = android.os.Environment.getOdmDirectory()     // Catch:{ all -> 0x101f }
            java.lang.String r3 = "priv-app"
            r1.<init>(r2, r3)     // Catch:{ all -> 0x101f }
            java.io.File r2 = r1.getCanonicalFile()     // Catch:{ IOException -> 0x065f }
            r1 = r2
            r5 = r1
            goto L_0x0661
        L_0x065f:
            r0 = move-exception
            r5 = r1
        L_0x0661:
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r3 = r1 | 16
            r1 = r12 | r30
            r1 = r1 | r31
            r4 = r1 | r38
            r43 = 0
            r1 = r61
            r2 = r5
            r46 = r5
            r5 = r43
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x101f }
            java.io.File r1 = new java.io.File     // Catch:{ all -> 0x101f }
            java.io.File r2 = android.os.Environment.getOdmDirectory()     // Catch:{ all -> 0x101f }
            java.lang.String r3 = "app"
            r1.<init>(r2, r3)     // Catch:{ all -> 0x101f }
            java.io.File r2 = r1.getCanonicalFile()     // Catch:{ IOException -> 0x0689 }
            r1 = r2
            r5 = r1
            goto L_0x068b
        L_0x0689:
            r0 = move-exception
            r5 = r1
        L_0x068b:
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r3 = r1 | 16
            r1 = r12 | r30
            r4 = r1 | r31
            r43 = 0
            r1 = r61
            r2 = r5
            r47 = r5
            r5 = r43
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x101f }
            java.io.File r1 = new java.io.File     // Catch:{ all -> 0x101f }
            java.io.File r2 = android.os.Environment.getOemDirectory()     // Catch:{ all -> 0x101f }
            java.lang.String r3 = "app"
            r1.<init>(r2, r3)     // Catch:{ all -> 0x101f }
            r5 = r1
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r3 = r1 | 16
            r1 = r12 | r30
            r4 = r1 | r37
            r43 = 0
            r1 = r61
            r2 = r5
            r48 = r5
            r5 = r43
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x101f }
            java.io.File r1 = new java.io.File     // Catch:{ all -> 0x101f }
            java.io.File r2 = android.os.Environment.getProductDirectory()     // Catch:{ all -> 0x101f }
            java.lang.String r3 = "priv-app"
            r1.<init>(r2, r3)     // Catch:{ all -> 0x101f }
            java.io.File r2 = r1.getCanonicalFile()     // Catch:{ IOException -> 0x06d2 }
            r1 = r2
            r5 = r1
            goto L_0x06d4
        L_0x06d2:
            r0 = move-exception
            r5 = r1
        L_0x06d4:
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r3 = r1 | 16
            r1 = r12 | r30
            r1 = r1 | r33
            r4 = r1 | r38
            r43 = 0
            r1 = r61
            r2 = r5
            r49 = r5
            r5 = r43
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x101f }
            java.io.File r1 = new java.io.File     // Catch:{ all -> 0x101f }
            java.io.File r2 = android.os.Environment.getProductDirectory()     // Catch:{ all -> 0x101f }
            java.lang.String r3 = "app"
            r1.<init>(r2, r3)     // Catch:{ all -> 0x101f }
            java.io.File r2 = r1.getCanonicalFile()     // Catch:{ IOException -> 0x06fc }
            r1 = r2
            r5 = r1
            goto L_0x06fe
        L_0x06fc:
            r0 = move-exception
            r5 = r1
        L_0x06fe:
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r3 = r1 | 16
            r1 = r12 | r30
            r4 = r1 | r33
            r43 = 0
            r1 = r61
            r2 = r5
            r50 = r5
            r5 = r43
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x101f }
            java.io.File r1 = new java.io.File     // Catch:{ all -> 0x101f }
            java.io.File r2 = android.os.Environment.getProductServicesDirectory()     // Catch:{ all -> 0x101f }
            java.lang.String r3 = "priv-app"
            r1.<init>(r2, r3)     // Catch:{ all -> 0x101f }
            java.io.File r2 = r1.getCanonicalFile()     // Catch:{ IOException -> 0x0726 }
            r1 = r2
            r5 = r1
            goto L_0x0728
        L_0x0726:
            r0 = move-exception
            r5 = r1
        L_0x0728:
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r3 = r1 | 16
            r1 = r12 | r30
            r1 = r1 | r34
            r4 = r1 | r38
            r43 = 0
            r1 = r61
            r2 = r5
            r51 = r5
            r5 = r43
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x101f }
            java.io.File r1 = new java.io.File     // Catch:{ all -> 0x101f }
            java.io.File r2 = android.os.Environment.getProductServicesDirectory()     // Catch:{ all -> 0x101f }
            java.lang.String r3 = "app"
            r1.<init>(r2, r3)     // Catch:{ all -> 0x101f }
            java.io.File r2 = r1.getCanonicalFile()     // Catch:{ IOException -> 0x0750 }
            r1 = r2
            r5 = r1
            goto L_0x0752
        L_0x0750:
            r0 = move-exception
            r5 = r1
        L_0x0752:
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r3 = r1 | 16
            r1 = r12 | r30
            r4 = r1 | r34
            r43 = 0
            r1 = r61
            r2 = r5
            r52 = r5
            r5 = r43
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x101f }
            java.util.ArrayList r1 = new java.util.ArrayList     // Catch:{ all -> 0x101f }
            r1.<init>()     // Catch:{ all -> 0x101f }
            r5 = r1
            java.util.ArrayList r1 = new java.util.ArrayList     // Catch:{ all -> 0x101f }
            r1.<init>()     // Catch:{ all -> 0x101f }
            r6 = r1
            boolean r1 = r13.mOnlyCore     // Catch:{ all -> 0x101f }
            if (r1 != 0) goto L_0x0895
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r13.mPackages     // Catch:{ all -> 0x101f }
            java.util.Collection r1 = r1.values()     // Catch:{ all -> 0x101f }
            java.util.Iterator r1 = r1.iterator()     // Catch:{ all -> 0x101f }
        L_0x0780:
            boolean r2 = r1.hasNext()     // Catch:{ all -> 0x101f }
            if (r2 == 0) goto L_0x0796
            java.lang.Object r2 = r1.next()     // Catch:{ all -> 0x101f }
            android.content.pm.PackageParser$Package r2 = (android.content.pm.PackageParser.Package) r2     // Catch:{ all -> 0x101f }
            boolean r3 = r2.isStub     // Catch:{ all -> 0x101f }
            if (r3 == 0) goto L_0x0795
            java.lang.String r3 = r2.packageName     // Catch:{ all -> 0x101f }
            r6.add(r3)     // Catch:{ all -> 0x101f }
        L_0x0795:
            goto L_0x0780
        L_0x0796:
            com.android.server.pm.Settings r2 = r13.mSettings     // Catch:{ all -> 0x101f }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r2 = r2.mPackages     // Catch:{ all -> 0x101f }
            java.util.Collection r2 = r2.values()     // Catch:{ all -> 0x101f }
            java.util.Iterator r2 = r2.iterator()     // Catch:{ all -> 0x101f }
        L_0x07a2:
            boolean r3 = r2.hasNext()     // Catch:{ all -> 0x101f }
            if (r3 == 0) goto L_0x088e
            java.lang.Object r3 = r2.next()     // Catch:{ all -> 0x101f }
            com.android.server.pm.PackageSetting r3 = (com.android.server.pm.PackageSetting) r3     // Catch:{ all -> 0x101f }
            int r7 = r3.pkgFlags     // Catch:{ all -> 0x101f }
            r22 = r6
            r6 = 1
            r7 = r7 & r6
            if (r7 != 0) goto L_0x07ba
            r6 = r22
            r7 = 0
            goto L_0x07a2
        L_0x07ba:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r7 = r13.mPackages     // Catch:{ all -> 0x101f }
            java.lang.String r6 = r3.name     // Catch:{ all -> 0x101f }
            java.lang.Object r6 = r7.get(r6)     // Catch:{ all -> 0x101f }
            android.content.pm.PackageParser$Package r6 = (android.content.pm.PackageParser.Package) r6     // Catch:{ all -> 0x101f }
            if (r6 == 0) goto L_0x0822
            com.android.server.pm.Settings r7 = r13.mSettings     // Catch:{ all -> 0x101f }
            java.lang.String r4 = r3.name     // Catch:{ all -> 0x101f }
            boolean r4 = r7.isDisabledSystemPackageLPr(r4)     // Catch:{ all -> 0x101f }
            if (r4 == 0) goto L_0x081c
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x101f }
            r4.<init>()     // Catch:{ all -> 0x101f }
            java.lang.String r7 = "Expecting better updated system app for "
            r4.append(r7)     // Catch:{ all -> 0x101f }
            java.lang.String r7 = r3.name     // Catch:{ all -> 0x101f }
            r4.append(r7)     // Catch:{ all -> 0x101f }
            java.lang.String r7 = "; removing system app.  Last known codePath="
            r4.append(r7)     // Catch:{ all -> 0x101f }
            java.lang.String r7 = r3.codePathString     // Catch:{ all -> 0x101f }
            r4.append(r7)     // Catch:{ all -> 0x101f }
            java.lang.String r7 = ", versionCode="
            r4.append(r7)     // Catch:{ all -> 0x101f }
            r44 = r8
            long r7 = r3.versionCode     // Catch:{ all -> 0x101f }
            r4.append(r7)     // Catch:{ all -> 0x101f }
            java.lang.String r7 = "; scanned versionCode="
            r4.append(r7)     // Catch:{ all -> 0x101f }
            long r7 = r6.getLongVersionCode()     // Catch:{ all -> 0x101f }
            r4.append(r7)     // Catch:{ all -> 0x101f }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x101f }
            r7 = 5
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r7, r4)     // Catch:{ all -> 0x101f }
            r7 = 1
            r13.removePackageLI((android.content.pm.PackageParser.Package) r6, (boolean) r7)     // Catch:{ all -> 0x101f }
            android.util.ArrayMap<java.lang.String, java.io.File> r4 = r13.mExpectingBetter     // Catch:{ all -> 0x101f }
            java.lang.String r8 = r3.name     // Catch:{ all -> 0x101f }
            java.io.File r7 = r3.codePath     // Catch:{ all -> 0x101f }
            r4.put(r8, r7)     // Catch:{ all -> 0x101f }
            r6 = r22
            r8 = r44
            r7 = 0
            goto L_0x07a2
        L_0x081c:
            r44 = r8
            r6 = r22
            r7 = 0
            goto L_0x07a2
        L_0x0822:
            r44 = r8
            com.android.server.pm.Settings r4 = r13.mSettings     // Catch:{ all -> 0x101f }
            java.lang.String r7 = r3.name     // Catch:{ all -> 0x101f }
            boolean r4 = r4.isDisabledSystemPackageLPr(r7)     // Catch:{ all -> 0x101f }
            if (r4 != 0) goto L_0x0856
            r2.remove()     // Catch:{ all -> 0x101f }
            com.android.server.pm.PackageManagerServiceInjector.preserveAppId(r13, r3)     // Catch:{ all -> 0x101f }
            com.android.server.pm.PackageManagerServiceInjector.removePackageFromSharedUser(r3)     // Catch:{ all -> 0x101f }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x101f }
            r4.<init>()     // Catch:{ all -> 0x101f }
            java.lang.String r7 = "System package "
            r4.append(r7)     // Catch:{ all -> 0x101f }
            java.lang.String r7 = r3.name     // Catch:{ all -> 0x101f }
            r4.append(r7)     // Catch:{ all -> 0x101f }
            java.lang.String r7 = " no longer exists; it's data will be wiped"
            r4.append(r7)     // Catch:{ all -> 0x101f }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x101f }
            r7 = 5
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r7, r4)     // Catch:{ all -> 0x101f }
            r53 = r1
            goto L_0x0885
        L_0x0856:
            r7 = 5
            com.android.server.pm.Settings r4 = r13.mSettings     // Catch:{ all -> 0x101f }
            java.lang.String r8 = r3.name     // Catch:{ all -> 0x101f }
            com.android.server.pm.PackageSetting r4 = r4.getDisabledSystemPkgLPr((java.lang.String) r8)     // Catch:{ all -> 0x101f }
            java.io.File r8 = r4.codePath     // Catch:{ all -> 0x101f }
            if (r8 == 0) goto L_0x087e
            java.io.File r8 = r4.codePath     // Catch:{ all -> 0x101f }
            boolean r8 = r8.exists()     // Catch:{ all -> 0x101f }
            if (r8 == 0) goto L_0x087e
            android.content.pm.PackageParser$Package r8 = r4.pkg     // Catch:{ all -> 0x101f }
            if (r8 != 0) goto L_0x0872
            r53 = r1
            goto L_0x0880
        L_0x0872:
            android.util.ArrayMap<java.lang.String, java.io.File> r8 = r13.mExpectingBetter     // Catch:{ all -> 0x101f }
            java.lang.String r7 = r4.name     // Catch:{ all -> 0x101f }
            r53 = r1
            java.io.File r1 = r4.codePath     // Catch:{ all -> 0x101f }
            r8.put(r7, r1)     // Catch:{ all -> 0x101f }
            goto L_0x0885
        L_0x087e:
            r53 = r1
        L_0x0880:
            java.lang.String r1 = r3.name     // Catch:{ all -> 0x101f }
            r5.add(r1)     // Catch:{ all -> 0x101f }
        L_0x0885:
            r6 = r22
            r8 = r44
            r1 = r53
            r7 = 0
            goto L_0x07a2
        L_0x088e:
            r53 = r1
            r22 = r6
            r44 = r8
            goto L_0x0899
        L_0x0895:
            r22 = r6
            r44 = r8
        L_0x0899:
            r61.deleteTempPackageFiles()     // Catch:{ all -> 0x101f }
            java.util.concurrent.atomic.AtomicInteger r1 = android.content.pm.PackageParser.sCachedPackageReadCount     // Catch:{ all -> 0x101f }
            int r1 = r1.get()     // Catch:{ all -> 0x101f }
            r8 = r1
            com.android.server.pm.Settings r1 = r13.mSettings     // Catch:{ all -> 0x101f }
            com.android.server.pm.PackageManagerServiceInjector.performPreinstallApp(r13, r1)     // Catch:{ all -> 0x101f }
            com.android.server.pm.Settings r1 = r13.mSettings     // Catch:{ all -> 0x101f }
            r1.pruneSharedUsersLPw()     // Catch:{ all -> 0x101f }
            long r1 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x101f }
            long r6 = r1 - r18
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r13.mPackages     // Catch:{ all -> 0x101f }
            int r1 = r1.size()     // Catch:{ all -> 0x101f }
            r4 = r1
            java.lang.String r1 = "PackageManager"
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x101f }
            r2.<init>()     // Catch:{ all -> 0x101f }
            java.lang.String r3 = "Finished scanning system apps. Time: "
            r2.append(r3)     // Catch:{ all -> 0x101f }
            r2.append(r6)     // Catch:{ all -> 0x101f }
            java.lang.String r3 = " ms, packageCount: "
            r2.append(r3)     // Catch:{ all -> 0x101f }
            r2.append(r4)     // Catch:{ all -> 0x101f }
            java.lang.String r3 = " , timePerPackage: "
            r2.append(r3)     // Catch:{ all -> 0x101f }
            if (r4 != 0) goto L_0x08db
            r53 = 0
            goto L_0x08de
        L_0x08db:
            long r14 = (long) r4     // Catch:{ all -> 0x101f }
            long r53 = r6 / r14
        L_0x08de:
            r14 = r53
            r2.append(r14)     // Catch:{ all -> 0x101f }
            java.lang.String r3 = " , cached: "
            r2.append(r3)     // Catch:{ all -> 0x101f }
            r2.append(r8)     // Catch:{ all -> 0x101f }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x101f }
            android.util.Slog.i(r1, r2)     // Catch:{ all -> 0x101f }
            boolean r1 = r13.mIsUpgrade     // Catch:{ all -> 0x101f }
            if (r1 == 0) goto L_0x0902
            if (r4 <= 0) goto L_0x0902
            java.lang.String r1 = "ota_package_manager_system_app_avg_scan_time"
            int r2 = (int) r6     // Catch:{ all -> 0x101f }
            int r2 = r2 / r4
            r14 = 0
            com.android.internal.logging.MetricsLogger.histogram(r14, r1, r2)     // Catch:{ all -> 0x101f }
            goto L_0x0903
        L_0x0902:
            r14 = 0
        L_0x0903:
            boolean r1 = r13.mOnlyCore     // Catch:{ all -> 0x101f }
            if (r1 != 0) goto L_0x0c38
            r1 = 3080(0xc08, float:4.316E-42)
            long r2 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x101f }
            android.util.EventLog.writeEvent(r1, r2)     // Catch:{ all -> 0x101f }
            java.io.File r2 = sAppInstallDir     // Catch:{ all -> 0x101f }
            r3 = 0
            r15 = r12 | 128(0x80, float:1.794E-43)
            r53 = 0
            r1 = r61
            r40 = r4
            r14 = 5
            r4 = r15
            r15 = r5
            r55 = r6
            r7 = r22
            r14 = 1
            r5 = r53
            r1.scanDirTracedLI(r2, r3, r4, r5)     // Catch:{ all -> 0x101f }
            int r1 = r15.size()     // Catch:{ all -> 0x101f }
            int r1 = r1 - r14
            r5 = r1
        L_0x092e:
            if (r5 < 0) goto L_0x0a03
            java.lang.Object r1 = r15.get(r5)     // Catch:{ all -> 0x101f }
            java.lang.String r1 = (java.lang.String) r1     // Catch:{ all -> 0x101f }
            r6 = r1
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r13.mPackages     // Catch:{ all -> 0x101f }
            java.lang.Object r1 = r1.get(r6)     // Catch:{ all -> 0x101f }
            android.content.pm.PackageParser$Package r1 = (android.content.pm.PackageParser.Package) r1     // Catch:{ all -> 0x101f }
            r4 = r1
            com.android.server.pm.Settings r1 = r13.mSettings     // Catch:{ all -> 0x101f }
            r1.removeDisabledSystemPackageLPw(r6)     // Catch:{ all -> 0x101f }
            if (r4 != 0) goto L_0x096a
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x101f }
            r1.<init>()     // Catch:{ all -> 0x101f }
            java.lang.String r2 = "Updated system package "
            r1.append(r2)     // Catch:{ all -> 0x101f }
            r1.append(r6)     // Catch:{ all -> 0x101f }
            java.lang.String r2 = " no longer exists; removing its data"
            r1.append(r2)     // Catch:{ all -> 0x101f }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x101f }
            r58 = r4
            r59 = r5
            r14 = r6
            r53 = r15
            r29 = 0
            r15 = r7
            r7 = r1
            goto L_0x09d6
        L_0x096a:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x101f }
            r1.<init>()     // Catch:{ all -> 0x101f }
            java.lang.String r2 = "Updated system package "
            r1.append(r2)     // Catch:{ all -> 0x101f }
            r1.append(r6)     // Catch:{ all -> 0x101f }
            java.lang.String r2 = " no longer exists; rescanning package on data"
            r1.append(r2)     // Catch:{ all -> 0x101f }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x101f }
            r41 = r1
            r13.removePackageLI((android.content.pm.PackageParser.Package) r4, (boolean) r14)     // Catch:{ all -> 0x101f }
            java.io.File r2 = new java.io.File     // Catch:{ PackageManagerException -> 0x09ae }
            android.content.pm.ApplicationInfo r1 = r4.applicationInfo     // Catch:{ PackageManagerException -> 0x09ae }
            java.lang.String r1 = r1.getCodePath()     // Catch:{ PackageManagerException -> 0x09ae }
            r2.<init>(r1)     // Catch:{ PackageManagerException -> 0x09ae }
            r3 = 0
            r53 = 0
            r57 = 0
            r1 = r61
            r58 = r4
            r4 = r12
            r59 = r5
            r14 = r6
            r5 = r53
            r53 = r15
            r29 = 0
            r15 = r7
            r7 = r57
            r1.scanPackageTracedLI((java.io.File) r2, (int) r3, (int) r4, (long) r5, (android.os.UserHandle) r7)     // Catch:{ PackageManagerException -> 0x09ab }
            goto L_0x09d4
        L_0x09ab:
            r0 = move-exception
            r1 = r0
            goto L_0x09ba
        L_0x09ae:
            r0 = move-exception
            r58 = r4
            r59 = r5
            r14 = r6
            r53 = r15
            r29 = 0
            r15 = r7
            r1 = r0
        L_0x09ba:
            java.lang.String r2 = "PackageManager"
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x101f }
            r3.<init>()     // Catch:{ all -> 0x101f }
            java.lang.String r4 = "Failed to parse updated, ex-system package: "
            r3.append(r4)     // Catch:{ all -> 0x101f }
            java.lang.String r4 = r1.getMessage()     // Catch:{ all -> 0x101f }
            r3.append(r4)     // Catch:{ all -> 0x101f }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x101f }
            android.util.Slog.e(r2, r3)     // Catch:{ all -> 0x101f }
        L_0x09d4:
            r7 = r41
        L_0x09d6:
            com.android.server.pm.Settings r1 = r13.mSettings     // Catch:{ all -> 0x101f }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r1 = r1.mPackages     // Catch:{ all -> 0x101f }
            java.lang.Object r1 = r1.get(r14)     // Catch:{ all -> 0x101f }
            com.android.server.pm.PackageSetting r1 = (com.android.server.pm.PackageSetting) r1     // Catch:{ all -> 0x101f }
            r41 = r1
            if (r41 == 0) goto L_0x09f7
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r13.mPackages     // Catch:{ all -> 0x101f }
            java.lang.Object r1 = r1.get(r14)     // Catch:{ all -> 0x101f }
            if (r1 != 0) goto L_0x09f7
            r3 = 0
            r4 = 0
            r5 = 0
            r6 = 0
            r1 = r61
            r2 = r41
            r1.removePackageDataLIF(r2, r3, r4, r5, r6)     // Catch:{ all -> 0x101f }
        L_0x09f7:
            r1 = 5
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r1, r7)     // Catch:{ all -> 0x101f }
            int r5 = r59 + -1
            r7 = r15
            r15 = r53
            r14 = 1
            goto L_0x092e
        L_0x0a03:
            r59 = r5
            r53 = r15
            r29 = 0
            r15 = r7
            r1 = r29
            r14 = r1
        L_0x0a0d:
            android.util.ArrayMap<java.lang.String, java.io.File> r1 = r13.mExpectingBetter     // Catch:{ all -> 0x101f }
            int r1 = r1.size()     // Catch:{ all -> 0x101f }
            if (r14 >= r1) goto L_0x0bce
            android.util.ArrayMap<java.lang.String, java.io.File> r1 = r13.mExpectingBetter     // Catch:{ all -> 0x101f }
            java.lang.Object r1 = r1.keyAt(r14)     // Catch:{ all -> 0x101f }
            java.lang.String r1 = (java.lang.String) r1     // Catch:{ all -> 0x101f }
            r7 = r1
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r13.mPackages     // Catch:{ all -> 0x101f }
            boolean r1 = r1.containsKey(r7)     // Catch:{ all -> 0x101f }
            if (r1 != 0) goto L_0x0bbe
            android.util.ArrayMap<java.lang.String, java.io.File> r1 = r13.mExpectingBetter     // Catch:{ all -> 0x101f }
            java.lang.Object r1 = r1.valueAt(r14)     // Catch:{ all -> 0x101f }
            java.io.File r1 = (java.io.File) r1     // Catch:{ all -> 0x101f }
            r5 = r1
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x101f }
            r1.<init>()     // Catch:{ all -> 0x101f }
            java.lang.String r2 = "Expected better "
            r1.append(r2)     // Catch:{ all -> 0x101f }
            r1.append(r7)     // Catch:{ all -> 0x101f }
            java.lang.String r2 = " but never showed up; reverting to system"
            r1.append(r2)     // Catch:{ all -> 0x101f }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x101f }
            r6 = 5
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r6, r1)     // Catch:{ all -> 0x101f }
            boolean r1 = android.os.FileUtils.contains(r9, r5)     // Catch:{ all -> 0x101f }
            if (r1 == 0) goto L_0x0a61
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r1 = r1 | 16
            r2 = r12 | r30
            r2 = r2 | r38
            r41 = r1
            r4 = r46
            r6 = r49
            r46 = r2
            goto L_0x0b7f
        L_0x0a61:
            boolean r1 = android.os.FileUtils.contains(r10, r5)     // Catch:{ all -> 0x101f }
            if (r1 == 0) goto L_0x0a77
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r1 = r1 | 16
            r2 = r12 | r30
            r41 = r1
            r4 = r46
            r6 = r49
            r46 = r2
            goto L_0x0b7f
        L_0x0a77:
            boolean r1 = android.os.FileUtils.contains(r11, r5)     // Catch:{ all -> 0x101f }
            if (r1 != 0) goto L_0x0b6d
            r4 = r46
            boolean r1 = android.os.FileUtils.contains(r4, r5)     // Catch:{ all -> 0x101f }
            if (r1 == 0) goto L_0x0a89
            r6 = r49
            goto L_0x0b71
        L_0x0a89:
            r3 = r45
            boolean r1 = android.os.FileUtils.contains(r3, r5)     // Catch:{ all -> 0x101f }
            if (r1 != 0) goto L_0x0b5c
            r2 = r47
            boolean r1 = android.os.FileUtils.contains(r2, r5)     // Catch:{ all -> 0x101f }
            if (r1 == 0) goto L_0x0aa1
            r47 = r2
            r45 = r3
            r6 = r49
            goto L_0x0b60
        L_0x0aa1:
            r1 = r48
            boolean r22 = android.os.FileUtils.contains(r1, r5)     // Catch:{ all -> 0x101f }
            if (r22 == 0) goto L_0x0abf
            int r6 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r6 = r6 | 16
            r41 = r12 | r30
            r41 = r41 | r37
            r48 = r1
            r47 = r2
            r45 = r3
            r46 = r41
            r41 = r6
            r6 = r49
            goto L_0x0b7f
        L_0x0abf:
            r6 = r49
            boolean r41 = android.os.FileUtils.contains(r6, r5)     // Catch:{ all -> 0x101f }
            if (r41 == 0) goto L_0x0add
            r48 = r1
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r1 = r1 | 16
            r41 = r12 | r30
            r41 = r41 | r33
            r41 = r41 | r38
            r47 = r2
            r45 = r3
            r46 = r41
            r41 = r1
            goto L_0x0b7f
        L_0x0add:
            r48 = r1
            r1 = r50
            boolean r41 = android.os.FileUtils.contains(r1, r5)     // Catch:{ all -> 0x101f }
            if (r41 == 0) goto L_0x0afb
            r50 = r1
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r1 = r1 | 16
            r41 = r12 | r30
            r41 = r41 | r33
            r47 = r2
            r45 = r3
            r46 = r41
            r41 = r1
            goto L_0x0b7f
        L_0x0afb:
            r50 = r1
            r1 = r51
            boolean r41 = android.os.FileUtils.contains(r1, r5)     // Catch:{ all -> 0x101f }
            if (r41 == 0) goto L_0x0b1b
            r51 = r1
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r1 = r1 | 16
            r41 = r12 | r30
            r41 = r41 | r34
            r41 = r41 | r38
            r47 = r2
            r45 = r3
            r46 = r41
            r41 = r1
            goto L_0x0b7f
        L_0x0b1b:
            r51 = r1
            r1 = r52
            boolean r41 = android.os.FileUtils.contains(r1, r5)     // Catch:{ all -> 0x101f }
            if (r41 == 0) goto L_0x0b38
            r52 = r1
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r1 = r1 | 16
            r41 = r12 | r30
            r41 = r41 | r34
            r47 = r2
            r45 = r3
            r46 = r41
            r41 = r1
            goto L_0x0b7f
        L_0x0b38:
            r52 = r1
            java.lang.String r1 = "PackageManager"
            r47 = r2
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x101f }
            r2.<init>()     // Catch:{ all -> 0x101f }
            r45 = r3
            java.lang.String r3 = "Ignoring unexpected fallback path "
            r2.append(r3)     // Catch:{ all -> 0x101f }
            r2.append(r5)     // Catch:{ all -> 0x101f }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x101f }
            android.util.Slog.e(r1, r2)     // Catch:{ all -> 0x101f }
            r54 = r4
            r22 = r6
            r60 = 5
            goto L_0x0bc6
        L_0x0b5c:
            r45 = r3
            r6 = r49
        L_0x0b60:
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r1 = r1 | 16
            r2 = r12 | r30
            r2 = r2 | r31
            r41 = r1
            r46 = r2
            goto L_0x0b7f
        L_0x0b6d:
            r4 = r46
            r6 = r49
        L_0x0b71:
            int r1 = r13.mDefParseFlags     // Catch:{ all -> 0x101f }
            r1 = r1 | 16
            r2 = r12 | r30
            r2 = r2 | r31
            r2 = r2 | r38
            r41 = r1
            r46 = r2
        L_0x0b7f:
            com.android.server.pm.Settings r1 = r13.mSettings     // Catch:{ all -> 0x101f }
            r1.enableSystemPackageLPw(r7)     // Catch:{ all -> 0x101f }
            r57 = 0
            r49 = 0
            r1 = r61
            r2 = r5
            r3 = r41
            r54 = r4
            r4 = r46
            r59 = r5
            r22 = r6
            r60 = 5
            r5 = r57
            r57 = r7
            r7 = r49
            r1.scanPackageTracedLI((java.io.File) r2, (int) r3, (int) r4, (long) r5, (android.os.UserHandle) r7)     // Catch:{ PackageManagerException -> 0x0ba1 }
            goto L_0x0bc6
        L_0x0ba1:
            r0 = move-exception
            r1 = r0
            java.lang.String r2 = "PackageManager"
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x101f }
            r3.<init>()     // Catch:{ all -> 0x101f }
            java.lang.String r4 = "Failed to parse original system package: "
            r3.append(r4)     // Catch:{ all -> 0x101f }
            java.lang.String r4 = r1.getMessage()     // Catch:{ all -> 0x101f }
            r3.append(r4)     // Catch:{ all -> 0x101f }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x101f }
            android.util.Slog.e(r2, r3)     // Catch:{ all -> 0x101f }
            goto L_0x0bc6
        L_0x0bbe:
            r57 = r7
            r54 = r46
            r22 = r49
            r60 = 5
        L_0x0bc6:
            int r14 = r14 + 1
            r49 = r22
            r46 = r54
            goto L_0x0a0d
        L_0x0bce:
            r54 = r46
            r22 = r49
            r13.installSystemStubPackages(r15, r12)     // Catch:{ all -> 0x101f }
            java.util.concurrent.atomic.AtomicInteger r1 = android.content.pm.PackageParser.sCachedPackageReadCount     // Catch:{ all -> 0x101f }
            int r1 = r1.get()     // Catch:{ all -> 0x101f }
            int r1 = r1 - r8
            long r2 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x101f }
            long r2 = r2 - r55
            long r2 = r2 - r18
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r4 = r13.mPackages     // Catch:{ all -> 0x101f }
            int r4 = r4.size()     // Catch:{ all -> 0x101f }
            int r4 = r4 - r40
            java.lang.String r5 = "PackageManager"
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ all -> 0x101f }
            r6.<init>()     // Catch:{ all -> 0x101f }
            java.lang.String r7 = "Finished scanning non-system apps. Time: "
            r6.append(r7)     // Catch:{ all -> 0x101f }
            r6.append(r2)     // Catch:{ all -> 0x101f }
            java.lang.String r7 = " ms, packageCount: "
            r6.append(r7)     // Catch:{ all -> 0x101f }
            r6.append(r4)     // Catch:{ all -> 0x101f }
            java.lang.String r7 = " , timePerPackage: "
            r6.append(r7)     // Catch:{ all -> 0x101f }
            if (r4 != 0) goto L_0x0c10
            r30 = 0
            r14 = r8
            r7 = r30
            goto L_0x0c16
        L_0x0c10:
            r14 = r8
            long r7 = (long) r4     // Catch:{ all -> 0x101f }
            long r30 = r2 / r7
            r7 = r30
        L_0x0c16:
            r6.append(r7)     // Catch:{ all -> 0x101f }
            java.lang.String r7 = " , cached: "
            r6.append(r7)     // Catch:{ all -> 0x101f }
            r6.append(r1)     // Catch:{ all -> 0x101f }
            java.lang.String r6 = r6.toString()     // Catch:{ all -> 0x101f }
            android.util.Slog.i(r5, r6)     // Catch:{ all -> 0x101f }
            boolean r5 = r13.mIsUpgrade     // Catch:{ all -> 0x101f }
            if (r5 == 0) goto L_0x0c47
            if (r4 <= 0) goto L_0x0c47
            java.lang.String r5 = "ota_package_manager_data_app_avg_scan_time"
            int r6 = (int) r2     // Catch:{ all -> 0x101f }
            int r6 = r6 / r4
            r7 = 0
            com.android.internal.logging.MetricsLogger.histogram(r7, r5, r6)     // Catch:{ all -> 0x101f }
            goto L_0x0c47
        L_0x0c38:
            r40 = r4
            r53 = r5
            r55 = r6
            r14 = r8
            r15 = r22
            r54 = r46
            r22 = r49
            r29 = 0
        L_0x0c47:
            android.util.ArrayMap<java.lang.String, java.io.File> r1 = r13.mExpectingBetter     // Catch:{ all -> 0x101f }
            r1.clear()     // Catch:{ all -> 0x101f }
            java.lang.String r1 = r61.getStorageManagerPackageName()     // Catch:{ all -> 0x101f }
            r13.mStorageManagerPackage = r1     // Catch:{ all -> 0x101f }
            java.lang.String r1 = r61.getSetupWizardPackageName()     // Catch:{ all -> 0x101f }
            r13.mSetupWizardPackage = r1     // Catch:{ all -> 0x101f }
            com.android.server.pm.ComponentResolver r1 = r13.mComponentResolver     // Catch:{ all -> 0x101f }
            r1.fixProtectedFilterPriorities()     // Catch:{ all -> 0x101f }
            java.lang.String r1 = r61.getSystemTextClassifierPackageName()     // Catch:{ all -> 0x101f }
            r13.mSystemTextClassifierPackage = r1     // Catch:{ all -> 0x101f }
            java.lang.String r1 = r61.getWellbeingPackageName()     // Catch:{ all -> 0x101f }
            r13.mWellbeingPackage = r1     // Catch:{ all -> 0x101f }
            java.lang.String r1 = r61.getDocumenterPackageName()     // Catch:{ all -> 0x101f }
            r13.mDocumenterPackage = r1     // Catch:{ all -> 0x101f }
            android.content.Context r1 = r13.mContext     // Catch:{ all -> 0x101f }
            r2 = 17039740(0x104017c, float:2.4245636E-38)
            java.lang.String r1 = r1.getString(r2)     // Catch:{ all -> 0x101f }
            r13.mConfiguratorPackage = r1     // Catch:{ all -> 0x101f }
            java.lang.String r1 = r61.getAppPredictionServicePackageName()     // Catch:{ all -> 0x101f }
            r13.mAppPredictionServicePackage = r1     // Catch:{ all -> 0x101f }
            java.lang.String r1 = r61.getIncidentReportApproverPackageName()     // Catch:{ all -> 0x101f }
            r13.mIncidentReportApproverPackage = r1     // Catch:{ all -> 0x101f }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r13.mPackages     // Catch:{ all -> 0x101f }
            java.util.Map r1 = java.util.Collections.unmodifiableMap(r1)     // Catch:{ all -> 0x101f }
            r2 = 0
            r13.updateAllSharedLibrariesLocked(r2, r1)     // Catch:{ all -> 0x101f }
            com.android.server.pm.Settings r1 = r13.mSettings     // Catch:{ all -> 0x101f }
            java.util.Collection r1 = r1.getAllSharedUsersLPw()     // Catch:{ all -> 0x101f }
            java.util.Iterator r1 = r1.iterator()     // Catch:{ all -> 0x101f }
        L_0x0c9a:
            boolean r2 = r1.hasNext()     // Catch:{ all -> 0x101f }
            if (r2 == 0) goto L_0x0cd9
            java.lang.Object r2 = r1.next()     // Catch:{ all -> 0x101f }
            com.android.server.pm.SharedUserSetting r2 = (com.android.server.pm.SharedUserSetting) r2     // Catch:{ all -> 0x101f }
            android.util.ArraySet<com.android.server.pm.PackageSetting> r3 = r2.packages     // Catch:{ all -> 0x101f }
            r4 = 0
            java.util.List r3 = adjustCpuAbisForSharedUserLPw(r3, r4)     // Catch:{ all -> 0x101f }
            if (r3 == 0) goto L_0x0cd5
            int r4 = r3.size()     // Catch:{ all -> 0x101f }
            if (r4 <= 0) goto L_0x0cd5
            int r4 = r3.size()     // Catch:{ all -> 0x101f }
            r5 = 1
            int r4 = r4 - r5
        L_0x0cbb:
            if (r4 < 0) goto L_0x0cd5
            java.lang.Object r5 = r3.get(r4)     // Catch:{ all -> 0x101f }
            java.lang.String r5 = (java.lang.String) r5     // Catch:{ all -> 0x101f }
            com.android.server.pm.Installer r6 = r13.mInstaller     // Catch:{ InstallerException -> 0x0cd1 }
            java.lang.String r7 = com.android.server.pm.InstructionSets.getPreferredInstructionSet()     // Catch:{ InstallerException -> 0x0cd1 }
            java.lang.String r7 = com.android.server.pm.InstructionSets.getDexCodeInstructionSet(r7)     // Catch:{ InstallerException -> 0x0cd1 }
            r6.rmdex(r5, r7)     // Catch:{ InstallerException -> 0x0cd1 }
            goto L_0x0cd2
        L_0x0cd1:
            r0 = move-exception
        L_0x0cd2:
            int r4 = r4 + -1
            goto L_0x0cbb
        L_0x0cd5:
            r2.fixSeInfoLocked()     // Catch:{ all -> 0x101f }
            goto L_0x0c9a
        L_0x0cd9:
            com.android.server.pm.PackageUsage r1 = r13.mPackageUsage     // Catch:{ all -> 0x101f }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r13.mPackages     // Catch:{ all -> 0x101f }
            r1.read(r2)     // Catch:{ all -> 0x101f }
            com.android.server.pm.CompilerStats r1 = r13.mCompilerStats     // Catch:{ all -> 0x101f }
            r1.read()     // Catch:{ all -> 0x101f }
            r1 = 3090(0xc12, float:4.33E-42)
            long r2 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x101f }
            android.util.EventLog.writeEvent(r1, r2)     // Catch:{ all -> 0x101f }
            java.lang.String r1 = "PackageManager"
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x101f }
            r2.<init>()     // Catch:{ all -> 0x101f }
            java.lang.String r3 = "Time to scan packages: "
            r2.append(r3)     // Catch:{ all -> 0x101f }
            long r3 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x101f }
            long r3 = r3 - r18
            float r3 = (float) r3     // Catch:{ all -> 0x101f }
            r4 = 1148846080(0x447a0000, float:1000.0)
            float r3 = r3 / r4
            r2.append(r3)     // Catch:{ all -> 0x101f }
            java.lang.String r3 = " seconds"
            r2.append(r3)     // Catch:{ all -> 0x101f }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x101f }
            android.util.Slog.i(r1, r2)     // Catch:{ all -> 0x101f }
            com.android.server.pm.PackageManagerServiceInjector.markPmsScanDetail(r61)     // Catch:{ all -> 0x101f }
            r7 = r42
            int r1 = r7.sdkVersion     // Catch:{ all -> 0x101f }
            int r2 = r13.mSdkVersion     // Catch:{ all -> 0x101f }
            if (r1 == r2) goto L_0x0d20
            r1 = 1
            goto L_0x0d22
        L_0x0d20:
            r1 = r29
        L_0x0d22:
            r8 = r1
            if (r8 == 0) goto L_0x0d4c
            java.lang.String r1 = "PackageManager"
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x101f }
            r2.<init>()     // Catch:{ all -> 0x101f }
            java.lang.String r3 = "Platform changed from "
            r2.append(r3)     // Catch:{ all -> 0x101f }
            int r3 = r7.sdkVersion     // Catch:{ all -> 0x101f }
            r2.append(r3)     // Catch:{ all -> 0x101f }
            java.lang.String r3 = " to "
            r2.append(r3)     // Catch:{ all -> 0x101f }
            int r3 = r13.mSdkVersion     // Catch:{ all -> 0x101f }
            r2.append(r3)     // Catch:{ all -> 0x101f }
            java.lang.String r3 = "; regranting permissions for internal storage"
            r2.append(r3)     // Catch:{ all -> 0x101f }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x101f }
            android.util.Slog.i(r1, r2)     // Catch:{ all -> 0x101f }
        L_0x0d4c:
            com.android.server.pm.permission.PermissionManagerServiceInternal r1 = r13.mPermissionManager     // Catch:{ all -> 0x101f }
            java.lang.String r2 = android.os.storage.StorageManager.UUID_PRIVATE_INTERNAL     // Catch:{ all -> 0x101f }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r13.mPackages     // Catch:{ all -> 0x101f }
            java.util.Collection r3 = r3.values()     // Catch:{ all -> 0x101f }
            com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r4 = r13.mPermissionCallback     // Catch:{ all -> 0x101f }
            r1.updateAllPermissions(r2, r8, r3, r4)     // Catch:{ all -> 0x101f }
            int r1 = r13.mSdkVersion     // Catch:{ all -> 0x101f }
            r7.sdkVersion = r1     // Catch:{ all -> 0x101f }
            if (r65 != 0) goto L_0x0d8d
            boolean r1 = r13.mPromoteSystemApps     // Catch:{ all -> 0x101f }
            if (r1 != 0) goto L_0x0d69
            boolean r1 = r13.mFirstBoot     // Catch:{ all -> 0x101f }
            if (r1 == 0) goto L_0x0d8d
        L_0x0d69:
            com.android.server.pm.UserManagerService r1 = sUserManager     // Catch:{ all -> 0x101f }
            r2 = 1
            java.util.List r1 = r1.getUsers(r2)     // Catch:{ all -> 0x101f }
            java.util.Iterator r1 = r1.iterator()     // Catch:{ all -> 0x101f }
        L_0x0d74:
            boolean r2 = r1.hasNext()     // Catch:{ all -> 0x101f }
            if (r2 == 0) goto L_0x0d8d
            java.lang.Object r2 = r1.next()     // Catch:{ all -> 0x101f }
            android.content.pm.UserInfo r2 = (android.content.pm.UserInfo) r2     // Catch:{ all -> 0x101f }
            com.android.server.pm.Settings r3 = r13.mSettings     // Catch:{ all -> 0x101f }
            int r4 = r2.id     // Catch:{ all -> 0x101f }
            r3.applyDefaultPreferredAppsLPw(r4)     // Catch:{ all -> 0x101f }
            int r3 = r2.id     // Catch:{ all -> 0x101f }
            r13.primeDomainVerificationsLPw(r3)     // Catch:{ all -> 0x101f }
            goto L_0x0d74
        L_0x0d8d:
            boolean r1 = android.os.storage.StorageManager.isFileEncryptedNativeOrEmulated()     // Catch:{ all -> 0x101f }
            if (r1 == 0) goto L_0x0d96
            r1 = 1
            r6 = r1
            goto L_0x0d99
        L_0x0d96:
            r1 = r21
            r6 = r1
        L_0x0d99:
            java.lang.String r2 = android.os.storage.StorageManager.UUID_PRIVATE_INTERNAL     // Catch:{ all -> 0x101f }
            r3 = 0
            r5 = 1
            r30 = 1
            r1 = r61
            r4 = r6
            r31 = r8
            r8 = r6
            r6 = r30
            java.util.List r1 = r1.reconcileAppsDataLI(r2, r3, r4, r5, r6)     // Catch:{ all -> 0x101f }
            com.android.server.SystemServerInitThreadPool r2 = com.android.server.SystemServerInitThreadPool.get()     // Catch:{ all -> 0x101f }
            com.android.server.pm.-$$Lambda$PackageManagerService$sJ5w9GfSftnZPyv5hBDxQkxDJMU r3 = new com.android.server.pm.-$$Lambda$PackageManagerService$sJ5w9GfSftnZPyv5hBDxQkxDJMU     // Catch:{ all -> 0x101f }
            r3.<init>(r1, r8)     // Catch:{ all -> 0x101f }
            java.lang.String r4 = "prepareAppData"
            java.util.concurrent.Future r2 = r2.submit(r3, r4)     // Catch:{ all -> 0x101f }
            r13.mPrepareAppDataFuture = r2     // Catch:{ all -> 0x101f }
            com.android.server.pm.PackageManagerServiceInjector.markUidChangedApps(r61)     // Catch:{ all -> 0x101f }
            boolean r2 = r13.mIsUpgrade     // Catch:{ all -> 0x101f }
            r3 = -1
            if (r2 == 0) goto L_0x0dfd
            if (r65 != 0) goto L_0x0dfd
            java.lang.String r2 = "PackageManager"
            java.lang.String r4 = "Build fingerprint changed; clearing code caches"
            android.util.Slog.i(r2, r4)     // Catch:{ all -> 0x101f }
            r2 = r29
        L_0x0dd0:
            com.android.server.pm.Settings r4 = r13.mSettings     // Catch:{ all -> 0x101f }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r4 = r4.mPackages     // Catch:{ all -> 0x101f }
            int r4 = r4.size()     // Catch:{ all -> 0x101f }
            if (r2 >= r4) goto L_0x0df9
            com.android.server.pm.Settings r4 = r13.mSettings     // Catch:{ all -> 0x101f }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r4 = r4.mPackages     // Catch:{ all -> 0x101f }
            java.lang.Object r4 = r4.valueAt(r2)     // Catch:{ all -> 0x101f }
            com.android.server.pm.PackageSetting r4 = (com.android.server.pm.PackageSetting) r4     // Catch:{ all -> 0x101f }
            java.lang.String r5 = android.os.storage.StorageManager.UUID_PRIVATE_INTERNAL     // Catch:{ all -> 0x101f }
            java.lang.String r6 = r4.volumeUuid     // Catch:{ all -> 0x101f }
            boolean r5 = java.util.Objects.equals(r5, r6)     // Catch:{ all -> 0x101f }
            if (r5 == 0) goto L_0x0df6
            android.content.pm.PackageParser$Package r5 = r4.pkg     // Catch:{ all -> 0x101f }
            r6 = 131111(0x20027, float:1.83726E-40)
            r13.clearAppDataLIF(r5, r3, r6)     // Catch:{ all -> 0x101f }
        L_0x0df6:
            int r2 = r2 + 1
            goto L_0x0dd0
        L_0x0df9:
            java.lang.String r2 = android.os.Build.FINGERPRINT     // Catch:{ all -> 0x101f }
            r7.fingerprint = r2     // Catch:{ all -> 0x101f }
        L_0x0dfd:
            if (r65 != 0) goto L_0x0e3a
            boolean r2 = r13.mIsPreQUpgrade     // Catch:{ all -> 0x101f }
            if (r2 == 0) goto L_0x0e3a
            java.lang.String r2 = "PackageManager"
            java.lang.String r4 = "Whitelisting all existing apps to hide their icons"
            android.util.Slog.i(r2, r4)     // Catch:{ all -> 0x101f }
            com.android.server.pm.Settings r2 = r13.mSettings     // Catch:{ all -> 0x101f }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r2 = r2.mPackages     // Catch:{ all -> 0x101f }
            int r2 = r2.size()     // Catch:{ all -> 0x101f }
            r4 = 0
        L_0x0e13:
            if (r4 >= r2) goto L_0x0e37
            com.android.server.pm.Settings r5 = r13.mSettings     // Catch:{ all -> 0x101f }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r5 = r5.mPackages     // Catch:{ all -> 0x101f }
            java.lang.Object r5 = r5.valueAt(r4)     // Catch:{ all -> 0x101f }
            com.android.server.pm.PackageSetting r5 = (com.android.server.pm.PackageSetting) r5     // Catch:{ all -> 0x101f }
            int r6 = r5.pkgFlags     // Catch:{ all -> 0x101f }
            r30 = 1
            r6 = r6 & 1
            if (r6 == 0) goto L_0x0e2a
            r3 = r29
            goto L_0x0e31
        L_0x0e2a:
            java.lang.String r6 = android.content.pm.PackageManager.APP_DETAILS_ACTIVITY_CLASS_NAME     // Catch:{ all -> 0x101f }
            r3 = r29
            r5.disableComponentLPw(r6, r3)     // Catch:{ all -> 0x101f }
        L_0x0e31:
            int r4 = r4 + 1
            r29 = r3
            r3 = -1
            goto L_0x0e13
        L_0x0e37:
            r3 = r29
            goto L_0x0e3c
        L_0x0e3a:
            r3 = r29
        L_0x0e3c:
            android.util.ArraySet<java.lang.String> r2 = r13.mExistingSystemPackages     // Catch:{ all -> 0x101f }
            r2.clear()     // Catch:{ all -> 0x101f }
            r13.mPromoteSystemApps = r3     // Catch:{ all -> 0x101f }
            r2 = r21
            r7.databaseVersion = r2     // Catch:{ all -> 0x101f }
            java.lang.String r2 = "write settings"
            r4 = 262144(0x40000, double:1.295163E-318)
            android.os.Trace.traceBegin(r4, r2)     // Catch:{ all -> 0x101f }
            com.android.server.pm.Settings r2 = r13.mSettings     // Catch:{ all -> 0x101f }
            r2.writeLPr()     // Catch:{ all -> 0x101f }
            android.os.Trace.traceEnd(r4)     // Catch:{ all -> 0x101f }
            r2 = 3100(0xc1c, float:4.344E-42)
            long r4 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x101f }
            android.util.EventLog.writeEvent(r2, r4)     // Catch:{ all -> 0x101f }
            boolean r2 = r13.mOnlyCore     // Catch:{ all -> 0x101f }
            if (r2 != 0) goto L_0x0ea8
            java.lang.String r2 = r61.getRequiredButNotReallyRequiredVerifierLPr()     // Catch:{ all -> 0x101f }
            r13.mRequiredVerifierPackage = r2     // Catch:{ all -> 0x101f }
            java.lang.String r2 = r61.getOptionalVerifierLPr()     // Catch:{ all -> 0x101f }
            r13.mOptionalVerifierPackage = r2     // Catch:{ all -> 0x101f }
            java.lang.String r2 = r61.getRequiredInstallerLPr()     // Catch:{ all -> 0x101f }
            r13.mRequiredInstallerPackage = r2     // Catch:{ all -> 0x101f }
            java.lang.String r2 = r61.getRequiredUninstallerLPr()     // Catch:{ all -> 0x101f }
            r13.mRequiredUninstallerPackage = r2     // Catch:{ all -> 0x101f }
            android.content.ComponentName r2 = r61.getIntentFilterVerifierComponentNameLPr()     // Catch:{ all -> 0x101f }
            r13.mIntentFilterVerifierComponent = r2     // Catch:{ all -> 0x101f }
            android.content.ComponentName r2 = r13.mIntentFilterVerifierComponent     // Catch:{ all -> 0x101f }
            if (r2 == 0) goto L_0x0e93
            com.android.server.pm.PackageManagerService$IntentVerifierProxy r2 = new com.android.server.pm.PackageManagerService$IntentVerifierProxy     // Catch:{ all -> 0x101f }
            android.content.Context r4 = r13.mContext     // Catch:{ all -> 0x101f }
            android.content.ComponentName r5 = r13.mIntentFilterVerifierComponent     // Catch:{ all -> 0x101f }
            r2.<init>(r4, r5)     // Catch:{ all -> 0x101f }
            r13.mIntentFilterVerifier = r2     // Catch:{ all -> 0x101f }
            goto L_0x0e96
        L_0x0e93:
            r2 = 0
            r13.mIntentFilterVerifier = r2     // Catch:{ all -> 0x101f }
        L_0x0e96:
            java.lang.String r2 = "android.ext.services"
            r4 = -1
            java.lang.String r2 = r13.getRequiredSharedLibraryLPr(r2, r4)     // Catch:{ all -> 0x101f }
            r13.mServicesSystemSharedLibraryPackageName = r2     // Catch:{ all -> 0x101f }
            java.lang.String r2 = "android.ext.shared"
            java.lang.String r2 = r13.getRequiredSharedLibraryLPr(r2, r4)     // Catch:{ all -> 0x101f }
            r13.mSharedSystemSharedLibraryPackageName = r2     // Catch:{ all -> 0x101f }
            goto L_0x0eb9
        L_0x0ea8:
            r2 = 0
            r13.mRequiredVerifierPackage = r2     // Catch:{ all -> 0x101f }
            r13.mOptionalVerifierPackage = r2     // Catch:{ all -> 0x101f }
            r13.mRequiredInstallerPackage = r2     // Catch:{ all -> 0x101f }
            r13.mRequiredUninstallerPackage = r2     // Catch:{ all -> 0x101f }
            r13.mIntentFilterVerifierComponent = r2     // Catch:{ all -> 0x101f }
            r13.mIntentFilterVerifier = r2     // Catch:{ all -> 0x101f }
            r13.mServicesSystemSharedLibraryPackageName = r2     // Catch:{ all -> 0x101f }
            r13.mSharedSystemSharedLibraryPackageName = r2     // Catch:{ all -> 0x101f }
        L_0x0eb9:
            java.lang.String r2 = r61.getRequiredPermissionControllerLPr()     // Catch:{ all -> 0x101f }
            r13.mRequiredPermissionControllerPackage = r2     // Catch:{ all -> 0x101f }
            com.android.server.pm.UserManagerService r2 = com.android.server.pm.UserManagerService.getInstance()     // Catch:{ all -> 0x101f }
            int[] r2 = r2.getUserIds()     // Catch:{ all -> 0x101f }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r4 = r13.mPackages     // Catch:{ all -> 0x101f }
            java.util.Collection r4 = r4.values()     // Catch:{ all -> 0x101f }
            java.util.Iterator r4 = r4.iterator()     // Catch:{ all -> 0x101f }
        L_0x0ed1:
            boolean r5 = r4.hasNext()     // Catch:{ all -> 0x101f }
            if (r5 == 0) goto L_0x0f34
            java.lang.Object r5 = r4.next()     // Catch:{ all -> 0x101f }
            android.content.pm.PackageParser$Package r5 = (android.content.pm.PackageParser.Package) r5     // Catch:{ all -> 0x101f }
            boolean r6 = r5.isSystem()     // Catch:{ all -> 0x101f }
            if (r6 == 0) goto L_0x0ee4
            goto L_0x0ed1
        L_0x0ee4:
            int r6 = r2.length     // Catch:{ all -> 0x101f }
        L_0x0ee5:
            if (r3 >= r6) goto L_0x0f2c
            r21 = r2[r3]     // Catch:{ all -> 0x101f }
            r30 = r21
            r21 = r1
            java.lang.Object r1 = r5.mExtras     // Catch:{ all -> 0x101f }
            com.android.server.pm.PackageSetting r1 = (com.android.server.pm.PackageSetting) r1     // Catch:{ all -> 0x101f }
            if (r1 == 0) goto L_0x0f19
            r33 = r4
            r4 = r30
            boolean r30 = r1.getInstantApp(r4)     // Catch:{ all -> 0x101f }
            if (r30 == 0) goto L_0x0f14
            boolean r30 = r1.getInstalled(r4)     // Catch:{ all -> 0x101f }
            if (r30 != 0) goto L_0x0f08
            r30 = r5
            r34 = r6
            goto L_0x0f21
        L_0x0f08:
            r30 = r5
            com.android.server.pm.InstantAppRegistry r5 = r13.mInstantAppRegistry     // Catch:{ all -> 0x101f }
            r34 = r6
            int r6 = r1.appId     // Catch:{ all -> 0x101f }
            r5.addInstantAppLPw(r4, r6)     // Catch:{ all -> 0x101f }
            goto L_0x0f21
        L_0x0f14:
            r30 = r5
            r34 = r6
            goto L_0x0f21
        L_0x0f19:
            r33 = r4
            r34 = r6
            r4 = r30
            r30 = r5
        L_0x0f21:
            int r3 = r3 + 1
            r1 = r21
            r5 = r30
            r4 = r33
            r6 = r34
            goto L_0x0ee5
        L_0x0f2c:
            r21 = r1
            r33 = r4
            r30 = r5
            r3 = 0
            goto L_0x0ed1
        L_0x0f34:
            r21 = r1
            com.android.server.pm.PackageInstallerService r1 = new com.android.server.pm.PackageInstallerService     // Catch:{ all -> 0x101f }
            com.android.server.pm.ApexManager r3 = r13.mApexManager     // Catch:{ all -> 0x101f }
            r4 = r62
            r1.<init>(r4, r13, r3)     // Catch:{ all -> 0x101f }
            r13.mInstallerService = r1     // Catch:{ all -> 0x101f }
            android.util.Pair r1 = r61.getInstantAppResolverLPr()     // Catch:{ all -> 0x101f }
            if (r1 == 0) goto L_0x0f7f
            boolean r3 = DEBUG_INSTANT     // Catch:{ all -> 0x101f }
            if (r3 == 0) goto L_0x0f62
            java.lang.String r3 = "PackageManager"
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ all -> 0x101f }
            r5.<init>()     // Catch:{ all -> 0x101f }
            java.lang.String r6 = "Set ephemeral resolver: "
            r5.append(r6)     // Catch:{ all -> 0x101f }
            r5.append(r1)     // Catch:{ all -> 0x101f }
            java.lang.String r5 = r5.toString()     // Catch:{ all -> 0x101f }
            android.util.Slog.d(r3, r5)     // Catch:{ all -> 0x101f }
        L_0x0f62:
            com.android.server.pm.InstantAppResolverConnection r3 = new com.android.server.pm.InstantAppResolverConnection     // Catch:{ all -> 0x101f }
            android.content.Context r5 = r13.mContext     // Catch:{ all -> 0x101f }
            java.lang.Object r6 = r1.first     // Catch:{ all -> 0x101f }
            android.content.ComponentName r6 = (android.content.ComponentName) r6     // Catch:{ all -> 0x101f }
            java.lang.Object r4 = r1.second     // Catch:{ all -> 0x101f }
            java.lang.String r4 = (java.lang.String) r4     // Catch:{ all -> 0x101f }
            r3.<init>(r5, r6, r4)     // Catch:{ all -> 0x101f }
            r13.mInstantAppResolverConnection = r3     // Catch:{ all -> 0x101f }
            java.lang.Object r3 = r1.first     // Catch:{ all -> 0x101f }
            android.content.ComponentName r3 = (android.content.ComponentName) r3     // Catch:{ all -> 0x101f }
            android.content.ComponentName r3 = r13.getInstantAppResolverSettingsLPr(r3)     // Catch:{ all -> 0x101f }
            r13.mInstantAppResolverSettingsComponent = r3     // Catch:{ all -> 0x101f }
            r3 = 0
            goto L_0x0f84
        L_0x0f7f:
            r3 = 0
            r13.mInstantAppResolverConnection = r3     // Catch:{ all -> 0x101f }
            r13.mInstantAppResolverSettingsComponent = r3     // Catch:{ all -> 0x101f }
        L_0x0f84:
            r13.updateInstantAppInstallerLocked(r3)     // Catch:{ all -> 0x101f }
            java.util.HashMap r3 = new java.util.HashMap     // Catch:{ all -> 0x101f }
            r3.<init>()     // Catch:{ all -> 0x101f }
            int r4 = r2.length     // Catch:{ all -> 0x101f }
            r5 = 0
        L_0x0f8e:
            if (r5 >= r4) goto L_0x0fae
            r6 = r2[r5]     // Catch:{ all -> 0x101f }
            r30 = r1
            java.lang.Integer r1 = java.lang.Integer.valueOf(r6)     // Catch:{ all -> 0x101f }
            r33 = r2
            r2 = 0
            android.content.pm.ParceledListSlice r29 = r13.getInstalledPackages(r2, r6)     // Catch:{ all -> 0x101f }
            java.util.List r2 = r29.getList()     // Catch:{ all -> 0x101f }
            r3.put(r1, r2)     // Catch:{ all -> 0x101f }
            int r5 = r5 + 1
            r1 = r30
            r2 = r33
            goto L_0x0f8e
        L_0x0fae:
            r30 = r1
            r33 = r2
            com.android.server.pm.dex.DexManager r1 = r13.mDexManager     // Catch:{ all -> 0x101f }
            r1.load(r3)     // Catch:{ all -> 0x101f }
            boolean r1 = r13.mIsUpgrade     // Catch:{ all -> 0x101f }
            if (r1 == 0) goto L_0x0fc9
            java.lang.String r1 = "ota_package_manager_init_time"
            long r4 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x101f }
            long r4 = r4 - r18
            int r2 = (int) r4     // Catch:{ all -> 0x101f }
            r4 = 0
            com.android.internal.logging.MetricsLogger.histogram(r4, r1, r2)     // Catch:{ all -> 0x101f }
        L_0x0fc9:
            monitor-exit(r23)     // Catch:{ all -> 0x101f }
            monitor-exit(r39)     // Catch:{ all -> 0x102a }
            com.android.server.pm.ModuleInfoProvider r1 = new com.android.server.pm.ModuleInfoProvider
            android.content.Context r2 = r13.mContext
            r1.<init>((android.content.Context) r2, (android.content.pm.IPackageManager) r13)
            r13.mModuleInfoProvider = r1
            java.lang.String r1 = "GC"
            r2 = 262144(0x40000, double:1.295163E-318)
            android.os.Trace.traceBegin(r2, r1)
            java.lang.Runtime r1 = java.lang.Runtime.getRuntime()
            r1.gc()
            android.os.Trace.traceEnd(r2)
            com.android.server.pm.Installer r1 = r13.mInstaller
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r13.mPackages
            r1.setWarnIfHeld(r2)
            android.content.Context r1 = r13.mContext
            android.content.res.Resources r1 = r1.getResources()
            android.content.pm.PackageParser.readConfigUseRoundIcon(r1)
            long r1 = android.os.SystemClock.uptimeMillis()
            r3 = 60000(0xea60, double:2.9644E-319)
            long r1 = r1 + r3
            r13.mServiceStartWithDelay = r1
            r1 = 262144(0x40000, double:1.295163E-318)
            android.os.Trace.traceEnd(r1)
            return
        L_0x1007:
            r12 = r1
            r7 = r5
            r44 = r8
            java.lang.IllegalStateException r1 = new java.lang.IllegalStateException     // Catch:{ all -> 0x101f }
            java.lang.String r2 = "Failed to load frameworks package; check log for warnings"
            r1.<init>(r2)     // Catch:{ all -> 0x101f }
            throw r1     // Catch:{ all -> 0x101f }
        L_0x1013:
            r0 = move-exception
            goto L_0x1018
        L_0x1015:
            r0 = move-exception
            r23 = r5
        L_0x1018:
            r39 = r7
            r16 = r12
            r1 = r0
        L_0x101d:
            monitor-exit(r23)     // Catch:{ all -> 0x101f }
            throw r1     // Catch:{ all -> 0x102a }
        L_0x101f:
            r0 = move-exception
            r1 = r0
            goto L_0x101d
        L_0x1022:
            r0 = move-exception
            r39 = r7
            r16 = r12
            r1 = r0
        L_0x1028:
            monitor-exit(r39)     // Catch:{ all -> 0x102a }
            throw r1
        L_0x102a:
            r0 = move-exception
            r1 = r0
            goto L_0x1028
        L_0x102d:
            r0 = move-exception
            r3 = r0
            monitor-exit(r2)     // Catch:{ all -> 0x102d }
            throw r3     // Catch:{ all -> 0x1031 }
        L_0x1031:
            r0 = move-exception
            r2 = r0
            monitor-exit(r1)     // Catch:{ all -> 0x1031 }
            throw r2
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.<init>(android.content.Context, com.android.server.pm.Installer, boolean, boolean):void");
    }

    public /* synthetic */ void lambda$new$0$PackageManagerService(List deferPackages, int storageFlags) {
        TimingsTraceLog traceLog = new TimingsTraceLog("SystemServerTimingAsync", 262144);
        traceLog.traceBegin("AppDataFixup");
        try {
            this.mInstaller.fixupAppData(StorageManager.UUID_PRIVATE_INTERNAL, 3);
        } catch (Installer.InstallerException e) {
            Slog.w(TAG, "Trouble fixing GIDs", e);
        }
        traceLog.traceEnd();
        traceLog.traceBegin("AppDataPrepare");
        if (deferPackages != null && !deferPackages.isEmpty()) {
            int count = 0;
            Iterator it = deferPackages.iterator();
            while (it.hasNext()) {
                String pkgName = (String) it.next();
                PackageParser.Package pkg = null;
                synchronized (this.mPackages) {
                    PackageSetting ps = this.mSettings.getPackageLPr(pkgName);
                    if (ps != null && ps.getInstalled(0)) {
                        pkg = ps.pkg;
                    }
                }
                if (pkg != null) {
                    synchronized (this.mInstallLock) {
                        prepareAppDataAndMigrateLIF(pkg, 0, storageFlags, true);
                    }
                    count++;
                }
            }
            traceLog.traceEnd();
            Slog.i(TAG, "Deferred reconcileAppsData finished " + count + " packages");
        }
    }

    private void installSystemStubPackages(List<String> systemStubPackageNames, int scanFlags) {
        int i = systemStubPackageNames.size();
        while (true) {
            i--;
            if (i < 0) {
                break;
            }
            String packageName = systemStubPackageNames.get(i);
            if (this.mSettings.isDisabledSystemPackageLPr(packageName)) {
                systemStubPackageNames.remove(i);
            } else {
                PackageParser.Package pkg = this.mPackages.get(packageName);
                if (pkg == null) {
                    systemStubPackageNames.remove(i);
                } else {
                    PackageSetting ps = this.mSettings.mPackages.get(packageName);
                    if (ps == null || ps.getEnabled(0) != 3) {
                        try {
                            installStubPackageLI(pkg, 0, scanFlags);
                            ps.setEnabled(0, 0, PLATFORM_PACKAGE_NAME);
                            systemStubPackageNames.remove(i);
                        } catch (PackageManagerException e) {
                            Slog.e(TAG, "Failed to parse uncompressed system package: " + e.getMessage());
                        }
                    } else {
                        systemStubPackageNames.remove(i);
                    }
                }
            }
        }
        for (int i2 = systemStubPackageNames.size() - 1; i2 >= 0; i2 += -1) {
            String pkgName = systemStubPackageNames.get(i2);
            this.mSettings.mPackages.get(pkgName).setEnabled(2, 0, PLATFORM_PACKAGE_NAME);
            PackageManagerServiceUtils.logCriticalInfo(6, "Stub disabled; pkg: " + pkgName);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 14 */
    /* JADX WARNING: Code restructure failed: missing block: B:104:0x00fd, code lost:
        monitor-enter(r14.mPackages);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:106:?, code lost:
        r7 = r14.mSettings.mPackages.get(r15.packageName);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:107:0x010a, code lost:
        if (r7 != null) goto L_0x010c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:108:0x010c, code lost:
        r7.setEnabled(2, 0, PLATFORM_PACKAGE_NAME);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:109:0x0111, code lost:
        r14.mSettings.writeLPr();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:113:0x0118, code lost:
        r2 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x0065, code lost:
        r6 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x0066, code lost:
        if (r4 != null) goto L_0x0068;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:37:?, code lost:
        $closeResource(r5, r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x006b, code lost:
        throw r6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:65:0x00ae, code lost:
        r3 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:77:0x00b6, code lost:
        r7 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:78:0x00b7, code lost:
        if (r6 != null) goto L_0x00b9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:80:?, code lost:
        $closeResource(r2, r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:81:0x00bc, code lost:
        throw r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:82:0x00bd, code lost:
        r2 = th;
     */
    /* JADX WARNING: Exception block dominator not found, dom blocks: [B:58:0x0094, B:85:0x00c2, B:105:0x00fe] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private boolean enableCompressedPackage(android.content.pm.PackageParser.Package r15) {
        /*
            r14 = this;
            int r0 = r14.mDefParseFlags
            r1 = -2147483648(0xffffffff80000000, float:-0.0)
            r0 = r0 | r1
            r0 = r0 | 64
            java.lang.Object r1 = r14.mInstallLock
            monitor-enter(r1)
            r2 = 0
            r3 = 0
            java.lang.String r4 = r15.packageName     // Catch:{ PackageManagerException -> 0x006f }
            java.lang.String r5 = "setEnabledSetting"
            com.android.server.pm.PackageManagerService$PackageFreezer r4 = r14.freezePackage(r4, r5)     // Catch:{ PackageManagerException -> 0x006f }
            android.content.pm.PackageParser$Package r5 = r14.installStubPackageLI(r15, r0, r3)     // Catch:{ all -> 0x0063 }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r12 = r14.mPackages     // Catch:{ all -> 0x0063 }
            monitor-enter(r12)     // Catch:{ all -> 0x0063 }
            r14.prepareAppDataAfterInstallLIF(r5)     // Catch:{ all -> 0x0060 }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r6 = r14.mPackages     // Catch:{ PackageManagerException -> 0x0026 }
            r14.updateSharedLibrariesLocked(r5, r2, r6)     // Catch:{ PackageManagerException -> 0x0026 }
            goto L_0x002f
        L_0x0026:
            r6 = move-exception
            java.lang.String r7 = "PackageManager"
            java.lang.String r8 = "updateAllSharedLibrariesLPw failed: "
            android.util.Slog.e(r7, r8, r6)     // Catch:{ all -> 0x0060 }
        L_0x002f:
            com.android.server.pm.permission.PermissionManagerServiceInternal r6 = r14.mPermissionManager     // Catch:{ all -> 0x0060 }
            java.lang.String r7 = r5.packageName     // Catch:{ all -> 0x0060 }
            r9 = 1
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r8 = r14.mPackages     // Catch:{ all -> 0x0060 }
            java.util.Collection r10 = r8.values()     // Catch:{ all -> 0x0060 }
            com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r11 = r14.mPermissionCallback     // Catch:{ all -> 0x0060 }
            r8 = r5
            r6.updatePermissions(r7, r8, r9, r10, r11)     // Catch:{ all -> 0x0060 }
            com.android.server.pm.Settings r6 = r14.mSettings     // Catch:{ all -> 0x0060 }
            r6.writeLPr()     // Catch:{ all -> 0x0060 }
            monitor-exit(r12)     // Catch:{ all -> 0x0060 }
            if (r4 == 0) goto L_0x004b
            $closeResource(r2, r4)     // Catch:{ PackageManagerException -> 0x006f }
        L_0x004b:
            r2 = -1
            r3 = 39
            r14.clearAppDataLIF(r5, r2, r3)     // Catch:{ all -> 0x006c }
            com.android.server.pm.dex.DexManager r2 = r14.mDexManager     // Catch:{ all -> 0x006c }
            java.lang.String r3 = r5.packageName     // Catch:{ all -> 0x006c }
            java.lang.String r4 = r5.baseCodePath     // Catch:{ all -> 0x006c }
            java.lang.String[] r6 = r5.splitCodePaths     // Catch:{ all -> 0x006c }
            r2.notifyPackageUpdated(r3, r4, r6)     // Catch:{ all -> 0x006c }
            monitor-exit(r1)     // Catch:{ all -> 0x006c }
            r1 = 1
            return r1
        L_0x0060:
            r6 = move-exception
            monitor-exit(r12)     // Catch:{ all -> 0x0060 }
            throw r6     // Catch:{ all -> 0x0063 }
        L_0x0063:
            r5 = move-exception
            throw r5     // Catch:{ all -> 0x0065 }
        L_0x0065:
            r6 = move-exception
            if (r4 == 0) goto L_0x006b
            $closeResource(r5, r4)     // Catch:{ PackageManagerException -> 0x006f }
        L_0x006b:
            throw r6     // Catch:{ PackageManagerException -> 0x006f }
        L_0x006c:
            r2 = move-exception
            goto L_0x011b
        L_0x006f:
            r4 = move-exception
            r5 = 2
            java.lang.String r6 = r15.packageName     // Catch:{ PackageManagerException -> 0x00bf }
            java.lang.String r7 = "setEnabledSetting"
            com.android.server.pm.PackageManagerService$PackageFreezer r6 = r14.freezePackage(r6, r7)     // Catch:{ PackageManagerException -> 0x00bf }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r7 = r14.mPackages     // Catch:{ all -> 0x00b4 }
            monitor-enter(r7)     // Catch:{ all -> 0x00b4 }
            r14.enableSystemPackageLPw(r15)     // Catch:{ all -> 0x00b1 }
            monitor-exit(r7)     // Catch:{ all -> 0x00b1 }
            java.lang.String r9 = r15.codePath     // Catch:{ all -> 0x00b4 }
            r10 = 0
            r11 = 0
            r12 = 0
            r13 = 1
            r8 = r14
            r8.installPackageFromSystemLIF(r9, r10, r11, r12, r13)     // Catch:{ all -> 0x00b4 }
            if (r6 == 0) goto L_0x0091
            $closeResource(r2, r6)     // Catch:{ PackageManagerException -> 0x00bf }
        L_0x0091:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r14.mPackages     // Catch:{ all -> 0x006c }
            monitor-enter(r2)     // Catch:{ all -> 0x006c }
            com.android.server.pm.Settings r6 = r14.mSettings     // Catch:{ all -> 0x00ae }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r6 = r6.mPackages     // Catch:{ all -> 0x00ae }
            java.lang.String r7 = r15.packageName     // Catch:{ all -> 0x00ae }
            java.lang.Object r6 = r6.get(r7)     // Catch:{ all -> 0x00ae }
            com.android.server.pm.PackageSetting r6 = (com.android.server.pm.PackageSetting) r6     // Catch:{ all -> 0x00ae }
            if (r6 == 0) goto L_0x00a7
            java.lang.String r7 = "android"
            r6.setEnabled(r5, r3, r7)     // Catch:{ all -> 0x00ae }
        L_0x00a7:
            com.android.server.pm.Settings r5 = r14.mSettings     // Catch:{ all -> 0x00ae }
            r5.writeLPr()     // Catch:{ all -> 0x00ae }
            monitor-exit(r2)     // Catch:{ all -> 0x00ae }
            goto L_0x00f5
        L_0x00ae:
            r3 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x00ae }
        L_0x00b0:
            throw r3     // Catch:{ all -> 0x006c }
        L_0x00b1:
            r2 = move-exception
            monitor-exit(r7)     // Catch:{ all -> 0x00b1 }
            throw r2     // Catch:{ all -> 0x00b4 }
        L_0x00b4:
            r2 = move-exception
            throw r2     // Catch:{ all -> 0x00b6 }
        L_0x00b6:
            r7 = move-exception
            if (r6 == 0) goto L_0x00bc
            $closeResource(r2, r6)     // Catch:{ PackageManagerException -> 0x00bf }
        L_0x00bc:
            throw r7     // Catch:{ PackageManagerException -> 0x00bf }
        L_0x00bd:
            r2 = move-exception
            goto L_0x00fb
        L_0x00bf:
            r2 = move-exception
            java.lang.String r6 = "PackageManager"
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x00bd }
            r7.<init>()     // Catch:{ all -> 0x00bd }
            java.lang.String r8 = "Failed to restore system package:"
            r7.append(r8)     // Catch:{ all -> 0x00bd }
            java.lang.String r8 = r15.packageName     // Catch:{ all -> 0x00bd }
            r7.append(r8)     // Catch:{ all -> 0x00bd }
            java.lang.String r7 = r7.toString()     // Catch:{ all -> 0x00bd }
            android.util.Slog.wtf(r6, r7, r2)     // Catch:{ all -> 0x00bd }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r14.mPackages     // Catch:{ all -> 0x006c }
            monitor-enter(r2)     // Catch:{ all -> 0x006c }
            com.android.server.pm.Settings r6 = r14.mSettings     // Catch:{ all -> 0x00f8 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r6 = r6.mPackages     // Catch:{ all -> 0x00f8 }
            java.lang.String r7 = r15.packageName     // Catch:{ all -> 0x00f8 }
            java.lang.Object r6 = r6.get(r7)     // Catch:{ all -> 0x00f8 }
            com.android.server.pm.PackageSetting r6 = (com.android.server.pm.PackageSetting) r6     // Catch:{ all -> 0x00f8 }
            if (r6 == 0) goto L_0x00ef
            java.lang.String r7 = "android"
            r6.setEnabled(r5, r3, r7)     // Catch:{ all -> 0x00f8 }
        L_0x00ef:
            com.android.server.pm.Settings r5 = r14.mSettings     // Catch:{ all -> 0x00f8 }
            r5.writeLPr()     // Catch:{ all -> 0x00f8 }
            monitor-exit(r2)     // Catch:{ all -> 0x00f8 }
        L_0x00f5:
            monitor-exit(r1)     // Catch:{ all -> 0x006c }
            return r3
        L_0x00f8:
            r3 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x00f8 }
            goto L_0x00b0
        L_0x00fb:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r6 = r14.mPackages     // Catch:{ all -> 0x006c }
            monitor-enter(r6)     // Catch:{ all -> 0x006c }
            com.android.server.pm.Settings r7 = r14.mSettings     // Catch:{ all -> 0x0118 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r7 = r7.mPackages     // Catch:{ all -> 0x0118 }
            java.lang.String r8 = r15.packageName     // Catch:{ all -> 0x0118 }
            java.lang.Object r7 = r7.get(r8)     // Catch:{ all -> 0x0118 }
            com.android.server.pm.PackageSetting r7 = (com.android.server.pm.PackageSetting) r7     // Catch:{ all -> 0x0118 }
            if (r7 == 0) goto L_0x0111
            java.lang.String r8 = "android"
            r7.setEnabled(r5, r3, r8)     // Catch:{ all -> 0x0118 }
        L_0x0111:
            com.android.server.pm.Settings r3 = r14.mSettings     // Catch:{ all -> 0x0118 }
            r3.writeLPr()     // Catch:{ all -> 0x0118 }
            monitor-exit(r6)     // Catch:{ all -> 0x0118 }
        L_0x0117:
            throw r2     // Catch:{ all -> 0x006c }
        L_0x0118:
            r2 = move-exception
            monitor-exit(r6)     // Catch:{ all -> 0x0118 }
            goto L_0x0117
        L_0x011b:
            monitor-exit(r1)     // Catch:{ all -> 0x006c }
            throw r2
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.enableCompressedPackage(android.content.pm.PackageParser$Package):boolean");
    }

    private static /* synthetic */ void $closeResource(Throwable x0, AutoCloseable x1) {
        if (x0 != null) {
            try {
                x1.close();
            } catch (Throwable th) {
                x0.addSuppressed(th);
            }
        } else {
            x1.close();
        }
    }

    private PackageParser.Package installStubPackageLI(PackageParser.Package stubPkg, int parseFlags, int scanFlags) throws PackageManagerException {
        if (DEBUG_COMPRESSION) {
            Slog.i(TAG, "Uncompressing system stub; pkg: " + stubPkg.packageName);
        }
        File scanFile = decompressPackage(stubPkg.packageName, stubPkg.codePath);
        if (scanFile != null) {
            synchronized (this.mPackages) {
                this.mSettings.disableSystemPackageLPw(stubPkg.packageName, true);
            }
            removePackageLI(stubPkg, true);
            try {
                return scanPackageTracedLI(scanFile, parseFlags, scanFlags, 0, (UserHandle) null);
            } catch (PackageManagerException e) {
                Slog.w(TAG, "Failed to install compressed system package:" + stubPkg.packageName, e);
                removeCodePathLI(scanFile);
                throw e;
            }
        } else {
            throw new PackageManagerException("Unable to decompress stub at " + stubPkg.codePath);
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:19:0x0098  */
    /* JADX WARNING: Removed duplicated region for block: B:32:0x00d0  */
    /* JADX WARNING: Removed duplicated region for block: B:37:0x00db A[RETURN] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private java.io.File decompressPackage(java.lang.String r18, java.lang.String r19) {
        /*
            r17 = this;
            r1 = r17
            r2 = r18
            java.lang.String r3 = "Failed to decompress; pkg: "
            java.io.File[] r4 = com.android.server.pm.PackageManagerServiceUtils.getCompressedFiles(r19)
            r5 = 0
            if (r4 == 0) goto L_0x00dc
            int r0 = r4.length
            if (r0 != 0) goto L_0x0012
            goto L_0x00dc
        L_0x0012:
            java.io.File r0 = android.os.Environment.getDataAppDirectory(r5)
            java.io.File r6 = r1.getNextCodePath(r0, r2)
            r7 = 1
            r8 = 6
            r9 = 1
            java.lang.String r0 = r6.getAbsolutePath()     // Catch:{ ErrnoException -> 0x0078 }
            r10 = 493(0x1ed, float:6.91E-43)
            android.system.Os.mkdir(r0, r10)     // Catch:{ ErrnoException -> 0x0078 }
            java.lang.String r0 = r6.getAbsolutePath()     // Catch:{ ErrnoException -> 0x0078 }
            android.system.Os.chmod(r0, r10)     // Catch:{ ErrnoException -> 0x0078 }
            int r0 = r4.length     // Catch:{ ErrnoException -> 0x0078 }
            r10 = 0
            r11 = r7
            r7 = r10
        L_0x0032:
            if (r7 >= r0) goto L_0x0077
            r12 = r4[r7]     // Catch:{ ErrnoException -> 0x0075 }
            java.lang.String r13 = r12.getName()     // Catch:{ ErrnoException -> 0x0075 }
            int r14 = r13.length()     // Catch:{ ErrnoException -> 0x0075 }
            java.lang.String r15 = ".gz"
            int r15 = r15.length()     // Catch:{ ErrnoException -> 0x0075 }
            int r14 = r14 - r15
            java.lang.String r14 = r13.substring(r10, r14)     // Catch:{ ErrnoException -> 0x0075 }
            java.io.File r15 = new java.io.File     // Catch:{ ErrnoException -> 0x0075 }
            r15.<init>(r6, r14)     // Catch:{ ErrnoException -> 0x0075 }
            int r16 = com.android.server.pm.PackageManagerServiceUtils.decompressFile(r12, r15)     // Catch:{ ErrnoException -> 0x0075 }
            r11 = r16
            if (r11 == r9) goto L_0x0072
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ ErrnoException -> 0x0075 }
            r0.<init>()     // Catch:{ ErrnoException -> 0x0075 }
            r0.append(r3)     // Catch:{ ErrnoException -> 0x0075 }
            r0.append(r2)     // Catch:{ ErrnoException -> 0x0075 }
            java.lang.String r7 = ", file: "
            r0.append(r7)     // Catch:{ ErrnoException -> 0x0075 }
            r0.append(r14)     // Catch:{ ErrnoException -> 0x0075 }
            java.lang.String r0 = r0.toString()     // Catch:{ ErrnoException -> 0x0075 }
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r8, r0)     // Catch:{ ErrnoException -> 0x0075 }
            goto L_0x0077
        L_0x0072:
            int r7 = r7 + 1
            goto L_0x0032
        L_0x0075:
            r0 = move-exception
            goto L_0x007a
        L_0x0077:
            goto L_0x0096
        L_0x0078:
            r0 = move-exception
            r11 = r7
        L_0x007a:
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r3)
            r7.append(r2)
            java.lang.String r3 = ", err: "
            r7.append(r3)
            int r3 = r0.errno
            r7.append(r3)
            java.lang.String r3 = r7.toString()
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r8, r3)
        L_0x0096:
            if (r11 != r9) goto L_0x00ce
            java.io.File r0 = new java.io.File
            java.lang.String r3 = "lib"
            r0.<init>(r6, r3)
            r3 = r0
            r7 = 0
            com.android.internal.content.NativeLibraryHelper$Handle r0 = com.android.internal.content.NativeLibraryHelper.Handle.create(r6)     // Catch:{ IOException -> 0x00b2 }
            r7 = r0
            int r0 = com.android.internal.content.NativeLibraryHelper.copyNativeBinariesWithOverride(r7, r3, r5)     // Catch:{ IOException -> 0x00b2 }
            r11 = r0
        L_0x00ac:
            libcore.io.IoUtils.closeQuietly(r7)
            goto L_0x00ce
        L_0x00b0:
            r0 = move-exception
            goto L_0x00ca
        L_0x00b2:
            r0 = move-exception
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ all -> 0x00b0 }
            r10.<init>()     // Catch:{ all -> 0x00b0 }
            java.lang.String r12 = "Failed to extract native libraries; pkg: "
            r10.append(r12)     // Catch:{ all -> 0x00b0 }
            r10.append(r2)     // Catch:{ all -> 0x00b0 }
            java.lang.String r10 = r10.toString()     // Catch:{ all -> 0x00b0 }
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r8, r10)     // Catch:{ all -> 0x00b0 }
            r11 = -110(0xffffffffffffff92, float:NaN)
            goto L_0x00ac
        L_0x00ca:
            libcore.io.IoUtils.closeQuietly(r7)
            throw r0
        L_0x00ce:
            if (r11 == r9) goto L_0x00db
            boolean r0 = r6.exists()
            if (r0 != 0) goto L_0x00d7
            return r5
        L_0x00d7:
            r1.removeCodePathLI(r6)
            return r5
        L_0x00db:
            return r6
        L_0x00dc:
            boolean r0 = DEBUG_COMPRESSION
            if (r0 == 0) goto L_0x00f9
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r3 = "No files to decompress: "
            r0.append(r3)
            r3 = r19
            r0.append(r3)
            java.lang.String r0 = r0.toString()
            java.lang.String r6 = "PackageManager"
            android.util.Slog.i(r6, r0)
            goto L_0x00fb
        L_0x00f9:
            r3 = r19
        L_0x00fb:
            return r5
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.decompressPackage(java.lang.String, java.lang.String):java.io.File");
    }

    @GuardedBy({"mPackages"})
    private void updateInstantAppInstallerLocked(String modifiedPackage) {
        ActivityInfo activityInfo = this.mInstantAppInstallerActivity;
        if (activityInfo == null || activityInfo.getComponentName().getPackageName().equals(modifiedPackage)) {
            setUpInstantAppInstallerActivityLP(getInstantAppInstallerLPr());
        }
    }

    private static File preparePackageParserCache() {
        if (Build.IS_ENG) {
            return null;
        }
        if (SystemProperties.getBoolean("pm.boot.disable_package_cache", false)) {
            Slog.i(TAG, "Disabling package parser cache due to system property.");
            return null;
        }
        File cacheBaseDir = Environment.getPackageCacheDirectory();
        if (!FileUtils.createDir(cacheBaseDir)) {
            return null;
        }
        String cacheName = SystemProperties.digestOf(new String[]{"ro.build.fingerprint", "persist.sys.isolated_storage", "sys.isolated_storage_snapshot"});
        for (File cacheDir : FileUtils.listFilesOrEmpty(cacheBaseDir)) {
            if (Objects.equals(cacheName, cacheDir.getName())) {
                Slog.d(TAG, "Keeping known cache " + cacheDir.getName());
            } else {
                Slog.d(TAG, "Destroying unknown cache " + cacheDir.getName());
                FileUtils.deleteContentsAndDir(cacheDir);
            }
        }
        File cacheDir2 = FileUtils.createDir(cacheBaseDir, cacheName);
        if (cacheDir2 == null) {
            Slog.wtf(TAG, "Cache directory cannot be created - wiping base dir " + cacheBaseDir);
            FileUtils.deleteContentsAndDir(cacheBaseDir);
            return null;
        } else if (!Build.IS_USERDEBUG || !Build.VERSION.INCREMENTAL.startsWith("eng.")) {
            return cacheDir2;
        } else {
            Slog.w(TAG, "Wiping cache directory because the system partition changed.");
            if (cacheDir2.lastModified() >= new File(Environment.getRootDirectory(), "framework").lastModified()) {
                return cacheDir2;
            }
            FileUtils.deleteContents(cacheBaseDir);
            return FileUtils.createDir(cacheBaseDir, cacheName);
        }
    }

    public boolean isFirstBoot() {
        return this.mFirstBoot;
    }

    public boolean isOnlyCoreApps() {
        return this.mOnlyCore;
    }

    public boolean isDeviceUpgrading() {
        return this.mIsUpgrade || SystemProperties.getBoolean("persist.pm.mock-upgrade", false);
    }

    private String getRequiredButNotReallyRequiredVerifierLPr() {
        List<ResolveInfo> matches = queryIntentReceiversInternal(new Intent("android.intent.action.PACKAGE_NEEDS_VERIFICATION"), PACKAGE_MIME_TYPE, 1835008, 0, false);
        if (matches.size() == 1) {
            return matches.get(0).getComponentInfo().packageName;
        }
        if (matches.size() > 1) {
            String optionalVerifierName = this.mContext.getResources().getString(17039788);
            if (TextUtils.isEmpty(optionalVerifierName)) {
                return matches.get(0).getComponentInfo().packageName;
            }
            for (int i = 0; i < matches.size(); i++) {
                if (!matches.get(i).getComponentInfo().packageName.contains(optionalVerifierName)) {
                    return matches.get(i).getComponentInfo().packageName;
                }
            }
        } else if (matches.size() == 0) {
            Log.e(TAG, "There should probably be a verifier, but, none were found");
            return null;
        }
        throw new RuntimeException("There must be exactly one verifier; found " + matches);
    }

    private String getOptionalVerifierLPr() {
        List<ResolveInfo> matches = queryIntentReceiversInternal(new Intent("com.qualcomm.qti.intent.action.PACKAGE_NEEDS_OPTIONAL_VERIFICATION"), PACKAGE_MIME_TYPE, 1835008, 0, false);
        if (matches.size() >= 1) {
            String optionalVerifierName = this.mContext.getResources().getString(17039788);
            if (TextUtils.isEmpty(optionalVerifierName)) {
                return null;
            }
            for (int i = 0; i < matches.size(); i++) {
                if (matches.get(i).getComponentInfo().packageName.contains(optionalVerifierName)) {
                    return matches.get(i).getComponentInfo().packageName;
                }
            }
        }
        return null;
    }

    /* Debug info: failed to restart local var, previous not found, register: 6 */
    private String getRequiredSharedLibraryLPr(String name, int version) {
        String packageName;
        synchronized (this.mPackages) {
            SharedLibraryInfo libraryInfo = getSharedLibraryInfoLPr(name, (long) version);
            if (libraryInfo != null) {
                packageName = libraryInfo.getPackageName();
                if (packageName == null) {
                    throw new IllegalStateException("Expected a package for shared library " + name);
                }
            } else {
                throw new IllegalStateException("Missing required shared library:" + name);
            }
        }
        return packageName;
    }

    private String getRequiredInstallerLPr() {
        Intent intent = new Intent("android.intent.action.INSTALL_PACKAGE");
        intent.addCategory("android.intent.category.DEFAULT");
        intent.setDataAndType(Uri.parse("content://com.example/foo.apk"), PACKAGE_MIME_TYPE);
        List<ResolveInfo> matches = queryIntentActivitiesInternal(intent, PACKAGE_MIME_TYPE, 1835008, 0);
        if (matches.size() != 1) {
            throw new RuntimeException("There must be exactly one installer; found " + matches);
        } else if (matches.get(0).activityInfo.applicationInfo.isPrivilegedApp()) {
            return matches.get(0).getComponentInfo().packageName;
        } else {
            throw new RuntimeException("The installer must be a privileged app");
        }
    }

    private String getRequiredUninstallerLPr() {
        Intent intent = new Intent("android.intent.action.UNINSTALL_PACKAGE");
        intent.addCategory("android.intent.category.DEFAULT");
        intent.setData(Uri.fromParts("package", "foo.bar", (String) null));
        ResolveInfo resolveInfo = resolveIntent(intent, (String) null, 1835008, 0);
        if (resolveInfo != null && !this.mResolveActivity.name.equals(resolveInfo.getComponentInfo().name)) {
            return resolveInfo.getComponentInfo().packageName;
        }
        throw new RuntimeException("There must be exactly one uninstaller; found " + resolveInfo);
    }

    private String getRequiredPermissionControllerLPr() {
        Intent intent = new Intent("android.intent.action.MANAGE_PERMISSIONS");
        intent.addCategory("android.intent.category.DEFAULT");
        List<ResolveInfo> matches = queryIntentActivitiesInternal(intent, (String) null, 1835008, 0);
        if (matches.size() != 1) {
            throw new RuntimeException("There must be exactly one permissions manager; found " + matches);
        } else if (matches.get(0).activityInfo.applicationInfo.isPrivilegedApp()) {
            return matches.get(0).getComponentInfo().packageName;
        } else {
            throw new RuntimeException("The permissions manager must be a privileged app");
        }
    }

    private ComponentName getIntentFilterVerifierComponentNameLPr() {
        List<ResolveInfo> matches = queryIntentReceiversInternal(new Intent("android.intent.action.INTENT_FILTER_NEEDS_VERIFICATION"), PACKAGE_MIME_TYPE, 1835008, 0, false);
        ResolveInfo best = null;
        int N = matches.size();
        for (int i = 0; i < N; i++) {
            ResolveInfo cur = matches.get(i);
            if (checkPermission("android.permission.INTENT_FILTER_VERIFICATION_AGENT", cur.getComponentInfo().packageName, 0) == 0 && (best == null || cur.priority > best.priority)) {
                best = cur;
            }
        }
        if (best != null) {
            return best.getComponentInfo().getComponentName();
        }
        Slog.w(TAG, "Intent filter verifier not found");
        return null;
    }

    public ComponentName getInstantAppResolverComponent() {
        if (getInstantAppPackageName(Binder.getCallingUid()) != null) {
            return null;
        }
        synchronized (this.mPackages) {
            Pair<ComponentName, String> instantAppResolver = getInstantAppResolverLPr();
            if (instantAppResolver == null) {
                return null;
            }
            ComponentName componentName = (ComponentName) instantAppResolver.first;
            return componentName;
        }
    }

    private Pair<ComponentName, String> getInstantAppResolverLPr() {
        String[] packageArray = this.mContext.getResources().getStringArray(17236022);
        if (packageArray.length != 0 || Build.IS_DEBUGGABLE) {
            List<ResolveInfo> resolvers = queryIntentServicesInternal(new Intent("android.intent.action.RESOLVE_INSTANT_APP_PACKAGE"), (String) null, (!Build.IS_DEBUGGABLE ? 1048576 : 0) | 786432, 0, Binder.getCallingUid(), false);
            int N = resolvers.size();
            if (N == 0) {
                if (DEBUG_INSTANT) {
                    Slog.d(TAG, "Ephemeral resolver NOT found; no matching intent filters");
                }
                return null;
            }
            Set<String> possiblePackages = new ArraySet<>(Arrays.asList(packageArray));
            for (int i = 0; i < N; i++) {
                ResolveInfo info = resolvers.get(i);
                if (info.serviceInfo != null) {
                    String packageName = info.serviceInfo.packageName;
                    if (possiblePackages.contains(packageName) || Build.IS_DEBUGGABLE) {
                        if (DEBUG_INSTANT) {
                            Slog.v(TAG, "Ephemeral resolver found; pkg: " + packageName + ", info:" + info);
                        }
                        return new Pair<>(new ComponentName(packageName, info.serviceInfo.name), "android.intent.action.RESOLVE_INSTANT_APP_PACKAGE");
                    } else if (DEBUG_INSTANT) {
                        Slog.d(TAG, "Ephemeral resolver not in allowed package list; pkg: " + packageName + ", info:" + info);
                    }
                }
            }
            if (DEBUG_INSTANT == 0) {
                return null;
            }
            Slog.v(TAG, "Ephemeral resolver NOT found");
            return null;
        }
        if (DEBUG_INSTANT) {
            Slog.d(TAG, "Ephemeral resolver NOT found; empty package list");
        }
        return null;
    }

    @GuardedBy({"mPackages"})
    private ActivityInfo getInstantAppInstallerLPr() {
        String[] orderedActions;
        if (Build.IS_ENG) {
            orderedActions = new String[]{"android.intent.action.INSTALL_INSTANT_APP_PACKAGE_TEST", "android.intent.action.INSTALL_INSTANT_APP_PACKAGE"};
        } else {
            orderedActions = new String[]{"android.intent.action.INSTALL_INSTANT_APP_PACKAGE"};
        }
        int resolveFlags = 786944 | (!Build.IS_ENG ? 1048576 : 0);
        Intent intent = new Intent();
        intent.addCategory("android.intent.category.DEFAULT");
        intent.setDataAndType(Uri.fromFile(new File("foo.apk")), PACKAGE_MIME_TYPE);
        List<ResolveInfo> matches = null;
        for (String action : orderedActions) {
            intent.setAction(action);
            matches = queryIntentActivitiesInternal(intent, PACKAGE_MIME_TYPE, resolveFlags, 0);
            if (!matches.isEmpty()) {
                break;
            }
            if (DEBUG_INSTANT) {
                Slog.d(TAG, "Instant App installer not found with " + action);
            }
        }
        Iterator<ResolveInfo> iter = matches.iterator();
        while (iter.hasNext()) {
            PackageSetting ps = this.mSettings.mPackages.get(iter.next().activityInfo.packageName);
            if (ps == null || (!ps.getPermissionsState().hasPermission("android.permission.INSTALL_PACKAGES", 0) && !Build.IS_ENG)) {
                iter.remove();
            }
        }
        if (matches.size() == 0) {
            return null;
        }
        if (matches.size() == 1) {
            return (ActivityInfo) matches.get(0).getComponentInfo();
        }
        throw new RuntimeException("There must be at most one ephemeral installer; found " + matches);
    }

    private ComponentName getInstantAppResolverSettingsLPr(ComponentName resolver) {
        List<ResolveInfo> matches = queryIntentActivitiesInternal(new Intent("android.intent.action.INSTANT_APP_RESOLVER_SETTINGS").addCategory("android.intent.category.DEFAULT").setPackage(resolver.getPackageName()), (String) null, 786432, 0);
        if (matches.isEmpty()) {
            return null;
        }
        return matches.get(0).getComponentInfo().getComponentName();
    }

    @GuardedBy({"mPackages"})
    private void primeDomainVerificationsLPw(int userId) {
        Iterator<String> it = SystemConfig.getInstance().getLinkedApps().iterator();
        while (it.hasNext()) {
            String packageName = it.next();
            PackageParser.Package pkg = this.mPackages.get(packageName);
            if (pkg == null) {
                Slog.w(TAG, "Unknown package " + packageName + " in sysconfig <app-link>");
            } else if (!pkg.isSystem()) {
                Slog.w(TAG, "Non-system app '" + packageName + "' in sysconfig <app-link>");
            } else {
                ArraySet<String> domains = null;
                Iterator it2 = pkg.activities.iterator();
                while (it2.hasNext()) {
                    Iterator it3 = ((PackageParser.Activity) it2.next()).intents.iterator();
                    while (it3.hasNext()) {
                        PackageParser.ActivityIntentInfo filter = (PackageParser.ActivityIntentInfo) it3.next();
                        if (hasValidDomains(filter)) {
                            if (domains == null) {
                                domains = new ArraySet<>();
                            }
                            domains.addAll(filter.getHostsList());
                        }
                    }
                }
                if (domains == null || domains.size() <= 0) {
                    Slog.w(TAG, "Sysconfig <app-link> package '" + packageName + "' does not handle web links");
                } else {
                    this.mSettings.createIntentFilterVerificationIfNeededLPw(packageName, domains).setStatus(0);
                    this.mSettings.updateIntentFilterVerificationStatusLPw(packageName, 2, userId);
                }
            }
        }
        scheduleWritePackageRestrictionsLocked(userId);
        scheduleWriteSettingsLocked();
    }

    private boolean packageIsBrowser(String packageName, int userId) {
        List<ResolveInfo> list = queryIntentActivitiesInternal(sBrowserIntent, (String) null, 131072, userId);
        int N = list.size();
        for (int i = 0; i < N; i++) {
            ResolveInfo info = list.get(i);
            if (info.priority >= 0 && packageName.equals(info.activityInfo.packageName)) {
                return true;
            }
        }
        return false;
    }

    public boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
        try {
            return PackageManagerService.super.onTransact(code, data, reply, flags);
        } catch (RuntimeException e) {
            if (!(e instanceof SecurityException) && !(e instanceof IllegalArgumentException)) {
                Slog.wtf(TAG, "Package Manager Crash", e);
            }
            throw e;
        }
    }

    /* access modifiers changed from: private */
    public boolean canViewInstantApps(int callingUid, int userId) {
        if (callingUid < 10000 || this.mContext.checkCallingOrSelfPermission("android.permission.ACCESS_INSTANT_APPS") == 0) {
            return true;
        }
        if (this.mContext.checkCallingOrSelfPermission("android.permission.VIEW_INSTANT_APPS") != 0) {
            return false;
        }
        ComponentName homeComponent = getDefaultHomeActivity(userId);
        if (homeComponent != null && isCallerSameApp(homeComponent.getPackageName(), callingUid)) {
            return true;
        }
        String str = this.mAppPredictionServicePackage;
        if (str == null || !isCallerSameApp(str, callingUid)) {
            return false;
        }
        return true;
    }

    /* access modifiers changed from: private */
    public PackageInfo generatePackageInfo(PackageSetting ps, int flags, int userId) {
        int flags2;
        PackageSetting packageSetting = ps;
        int flags3 = flags;
        int i = userId;
        if (!sUserManager.exists(i) || packageSetting == null) {
            return null;
        }
        int callingUid = Binder.getCallingUid();
        if (filterAppAccessLPr(packageSetting, callingUid, i)) {
            return null;
        }
        if ((flags3 & 8192) == 0 || !ps.isSystem()) {
            flags2 = flags3;
        } else {
            flags2 = flags3 | 4194304;
        }
        PackageUserState state = packageSetting.readUserState(i);
        PackageParser.Package p = packageSetting.pkg;
        if (p != null) {
            PermissionsState permissionsState = ps.getPermissionsState();
            int i2 = callingUid;
            PermissionsState permissionsState2 = permissionsState;
            PackageParser.Package p2 = p;
            PackageUserState packageUserState = state;
            PackageInfo packageInfo = PackageParser.generatePackageInfo(p, (flags2 & 256) == 0 ? EMPTY_INT_ARRAY : permissionsState.computeGids(i), flags2, packageSetting.firstInstallTime, packageSetting.lastUpdateTime, ArrayUtils.isEmpty(p.requestedPermissions) ? Collections.emptySet() : permissionsState.getPermissions(i), state, userId);
            if (packageInfo == null) {
                return null;
            }
            ApplicationInfo applicationInfo = packageInfo.applicationInfo;
            String resolveExternalPackageNameLPr = resolveExternalPackageNameLPr(p2);
            applicationInfo.packageName = resolveExternalPackageNameLPr;
            packageInfo.packageName = resolveExternalPackageNameLPr;
            return packageInfo;
        }
        int i3 = callingUid;
        PackageUserState state2 = state;
        if ((flags2 & 8192) == 0 || !state2.isAvailable(flags2)) {
            return null;
        }
        PackageInfo pi = new PackageInfo();
        pi.packageName = packageSetting.name;
        pi.setLongVersionCode(packageSetting.versionCode);
        pi.sharedUserId = packageSetting.sharedUser != null ? packageSetting.sharedUser.name : null;
        pi.firstInstallTime = packageSetting.firstInstallTime;
        pi.lastUpdateTime = packageSetting.lastUpdateTime;
        ApplicationInfo ai = new ApplicationInfo();
        ai.packageName = packageSetting.name;
        ai.uid = UserHandle.getUid(i, packageSetting.appId);
        ai.primaryCpuAbi = packageSetting.primaryCpuAbiString;
        ai.secondaryCpuAbi = packageSetting.secondaryCpuAbiString;
        ai.setVersionCode(packageSetting.versionCode);
        ai.flags = packageSetting.pkgFlags;
        ai.privateFlags = packageSetting.pkgPrivateFlags;
        pi.applicationInfo = PackageParser.generateApplicationInfo(ai, flags2, state2, i);
        return pi;
    }

    /* Debug info: failed to restart local var, previous not found, register: 7 */
    public void checkPackageStartable(String packageName, int userId) {
        int callingUid = Binder.getCallingUid();
        if (getInstantAppPackageName(callingUid) == null) {
            boolean userKeyUnlocked = StorageManager.isUserKeyUnlocked(userId);
            synchronized (this.mPackages) {
                PackageSetting ps = this.mSettings.mPackages.get(packageName);
                if (ps == null || filterAppAccessLPr(ps, callingUid, userId)) {
                    throw new SecurityException("Package " + packageName + " was not found!");
                } else if (ps.getInstalled(userId)) {
                    if (this.mSafeMode) {
                        if (!ps.isSystem()) {
                            throw new SecurityException("Package " + packageName + " not a system app!");
                        }
                    }
                    if (this.mFrozenPackages.contains(packageName)) {
                        throw new SecurityException("Package " + packageName + " is currently frozen!");
                    } else if (!userKeyUnlocked) {
                        if (!ps.pkg.applicationInfo.isEncryptionAware()) {
                            throw new SecurityException("Package " + packageName + " is not encryption aware!");
                        }
                    }
                } else {
                    throw new SecurityException("Package " + packageName + " was not installed for user " + userId + "!");
                }
            }
            return;
        }
        throw new SecurityException("Instant applications don't have access to this method");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:24:0x004b, code lost:
        return false;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean isPackageAvailable(java.lang.String r9, int r10) {
        /*
            r8 = this;
            com.android.server.pm.UserManagerService r0 = sUserManager
            boolean r0 = r0.exists(r10)
            r1 = 0
            if (r0 != 0) goto L_0x000a
            return r1
        L_0x000a:
            int r0 = android.os.Binder.getCallingUid()
            com.android.server.pm.permission.PermissionManagerServiceInternal r2 = r8.mPermissionManager
            r5 = 0
            r6 = 0
            java.lang.String r7 = "is package available"
            r3 = r0
            r4 = r10
            r2.enforceCrossUserPermission(r3, r4, r5, r6, r7)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r8.mPackages
            monitor-enter(r2)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r8.mPackages     // Catch:{ all -> 0x004c }
            java.lang.Object r3 = r3.get(r9)     // Catch:{ all -> 0x004c }
            android.content.pm.PackageParser$Package r3 = (android.content.pm.PackageParser.Package) r3     // Catch:{ all -> 0x004c }
            if (r3 == 0) goto L_0x004a
            java.lang.Object r4 = r3.mExtras     // Catch:{ all -> 0x004c }
            com.android.server.pm.PackageSetting r4 = (com.android.server.pm.PackageSetting) r4     // Catch:{ all -> 0x004c }
            boolean r5 = r8.filterAppAccessLPr(r4, r0, r10)     // Catch:{ all -> 0x004c }
            if (r5 == 0) goto L_0x0033
            monitor-exit(r2)     // Catch:{ all -> 0x004c }
            return r1
        L_0x0033:
            if (r4 == 0) goto L_0x004a
            android.content.pm.PackageUserState r5 = r4.readUserState(r10)     // Catch:{ all -> 0x004c }
            if (r5 == 0) goto L_0x004a
            boolean r1 = miui.securityspace.XSpaceUserHandle.isXSpaceUserCalling()     // Catch:{ all -> 0x004c }
            if (r1 == 0) goto L_0x0044
            r1 = 1
            monitor-exit(r2)     // Catch:{ all -> 0x004c }
            return r1
        L_0x0044:
            boolean r1 = android.content.pm.PackageParser.isAvailable(r5)     // Catch:{ all -> 0x004c }
            monitor-exit(r2)     // Catch:{ all -> 0x004c }
            return r1
        L_0x004a:
            monitor-exit(r2)     // Catch:{ all -> 0x004c }
            return r1
        L_0x004c:
            r1 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x004c }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.isPackageAvailable(java.lang.String, int):boolean");
    }

    public PackageInfo getPackageInfo(String packageName, int flags, int userId) {
        return getPackageInfoInternal(packageName, -1, flags, Binder.getCallingUid(), userId);
    }

    public PackageInfo getPackageInfoVersioned(VersionedPackage versionedPackage, int flags, int userId) {
        return getPackageInfoInternal(versionedPackage.getPackageName(), versionedPackage.getLongVersionCode(), flags, Binder.getCallingUid(), userId);
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:56:0x00ad, code lost:
        return r1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:83:0x00e9, code lost:
        return com.miui.hybrid.hook.HookClient.hookPkgInfo((android.content.pm.PackageInfo) null, r9, r12);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public android.content.pm.PackageInfo getPackageInfoInternal(java.lang.String r9, long r10, int r12, int r13, int r14) {
        /*
            r8 = this;
            com.android.server.pm.UserManagerService r0 = sUserManager
            boolean r0 = r0.exists(r14)
            r1 = 0
            if (r0 != 0) goto L_0x000a
            return r1
        L_0x000a:
            int r12 = r8.updateFlagsForPackage(r12, r14, r9)
            com.android.server.pm.permission.PermissionManagerServiceInternal r2 = r8.mPermissionManager
            int r3 = android.os.Binder.getCallingUid()
            r5 = 0
            r6 = 0
            java.lang.String r7 = "get package info"
            r4 = r14
            r2.enforceCrossUserPermission(r3, r4, r5, r6, r7)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r8.mPackages
            monitor-enter(r0)
            java.lang.String r2 = r8.resolveInternalPackageNameLPr(r9, r10)     // Catch:{ all -> 0x00ea }
            r9 = r2
            r2 = 2097152(0x200000, float:2.938736E-39)
            r2 = r2 & r12
            r3 = 1
            if (r2 == 0) goto L_0x002c
            r2 = r3
            goto L_0x002d
        L_0x002c:
            r2 = 0
        L_0x002d:
            r4 = 1073741824(0x40000000, float:2.0)
            if (r2 == 0) goto L_0x005c
            r5 = r12 & r4
            if (r5 == 0) goto L_0x003e
            com.android.server.pm.ApexManager r1 = r8.mApexManager     // Catch:{ all -> 0x00ea }
            r3 = 2
            android.content.pm.PackageInfo r1 = r1.getPackageInfo(r9, r3)     // Catch:{ all -> 0x00ea }
            monitor-exit(r0)     // Catch:{ all -> 0x00ea }
            return r1
        L_0x003e:
            com.android.server.pm.Settings r5 = r8.mSettings     // Catch:{ all -> 0x00ea }
            com.android.server.pm.PackageSetting r5 = r5.getDisabledSystemPkgLPr((java.lang.String) r9)     // Catch:{ all -> 0x00ea }
            if (r5 == 0) goto L_0x005c
            boolean r3 = r8.filterSharedLibPackageLPr(r5, r13, r14, r12)     // Catch:{ all -> 0x00ea }
            if (r3 == 0) goto L_0x004e
            monitor-exit(r0)     // Catch:{ all -> 0x00ea }
            return r1
        L_0x004e:
            boolean r3 = r8.filterAppAccessLPr(r5, r13, r14)     // Catch:{ all -> 0x00ea }
            if (r3 == 0) goto L_0x0056
            monitor-exit(r0)     // Catch:{ all -> 0x00ea }
            return r1
        L_0x0056:
            android.content.pm.PackageInfo r1 = r8.generatePackageInfo(r5, r12, r14)     // Catch:{ all -> 0x00ea }
            monitor-exit(r0)     // Catch:{ all -> 0x00ea }
            return r1
        L_0x005c:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r5 = r8.mPackages     // Catch:{ all -> 0x00ea }
            java.lang.Object r5 = r5.get(r9)     // Catch:{ all -> 0x00ea }
            android.content.pm.PackageParser$Package r5 = (android.content.pm.PackageParser.Package) r5     // Catch:{ all -> 0x00ea }
            if (r2 == 0) goto L_0x0070
            if (r5 == 0) goto L_0x0070
            boolean r6 = isSystemApp((android.content.pm.PackageParser.Package) r5)     // Catch:{ all -> 0x00ea }
            if (r6 != 0) goto L_0x0070
            monitor-exit(r0)     // Catch:{ all -> 0x00ea }
            return r1
        L_0x0070:
            r6 = 4202496(0x402000, float:5.888951E-39)
            if (r5 == 0) goto L_0x00ae
            java.lang.Object r3 = r5.mExtras     // Catch:{ all -> 0x00ea }
            com.android.server.pm.PackageSetting r3 = (com.android.server.pm.PackageSetting) r3     // Catch:{ all -> 0x00ea }
            boolean r4 = r8.filterSharedLibPackageLPr(r3, r13, r14, r12)     // Catch:{ all -> 0x00ea }
            if (r4 == 0) goto L_0x0081
            monitor-exit(r0)     // Catch:{ all -> 0x00ea }
            return r1
        L_0x0081:
            if (r3 == 0) goto L_0x008b
            boolean r4 = r8.filterAppAccessLPr(r3, r13, r14)     // Catch:{ all -> 0x00ea }
            if (r4 == 0) goto L_0x008b
            monitor-exit(r0)     // Catch:{ all -> 0x00ea }
            return r1
        L_0x008b:
            java.lang.Object r1 = r5.mExtras     // Catch:{ all -> 0x00ea }
            com.android.server.pm.PackageSetting r1 = (com.android.server.pm.PackageSetting) r1     // Catch:{ all -> 0x00ea }
            android.content.pm.PackageInfo r1 = r8.generatePackageInfo(r1, r12, r14)     // Catch:{ all -> 0x00ea }
            if (r1 != 0) goto L_0x00ac
            boolean r4 = miui.securityspace.XSpaceUserHandle.isXSpaceUserCalling()     // Catch:{ all -> 0x00ea }
            if (r4 == 0) goto L_0x00ac
            r12 = r12 | r6
            com.android.server.pm.Settings r4 = r8.mSettings     // Catch:{ all -> 0x00ea }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r4 = r4.mPackages     // Catch:{ all -> 0x00ea }
            java.lang.Object r4 = r4.get(r9)     // Catch:{ all -> 0x00ea }
            com.android.server.pm.PackageSetting r4 = (com.android.server.pm.PackageSetting) r4     // Catch:{ all -> 0x00ea }
            android.content.pm.PackageInfo r6 = r8.generatePackageInfo(r4, r12, r14)     // Catch:{ all -> 0x00ea }
            monitor-exit(r0)     // Catch:{ all -> 0x00ea }
            return r6
        L_0x00ac:
            monitor-exit(r0)     // Catch:{ all -> 0x00ea }
            return r1
        L_0x00ae:
            if (r2 != 0) goto L_0x00d7
            r6 = r6 & r12
            if (r6 == 0) goto L_0x00d7
            com.android.server.pm.Settings r3 = r8.mSettings     // Catch:{ all -> 0x00ea }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r3 = r3.mPackages     // Catch:{ all -> 0x00ea }
            java.lang.Object r3 = r3.get(r9)     // Catch:{ all -> 0x00ea }
            com.android.server.pm.PackageSetting r3 = (com.android.server.pm.PackageSetting) r3     // Catch:{ all -> 0x00ea }
            if (r3 != 0) goto L_0x00c1
            monitor-exit(r0)     // Catch:{ all -> 0x00ea }
            return r1
        L_0x00c1:
            boolean r4 = r8.filterSharedLibPackageLPr(r3, r13, r14, r12)     // Catch:{ all -> 0x00ea }
            if (r4 == 0) goto L_0x00c9
            monitor-exit(r0)     // Catch:{ all -> 0x00ea }
            return r1
        L_0x00c9:
            boolean r4 = r8.filterAppAccessLPr(r3, r13, r14)     // Catch:{ all -> 0x00ea }
            if (r4 == 0) goto L_0x00d1
            monitor-exit(r0)     // Catch:{ all -> 0x00ea }
            return r1
        L_0x00d1:
            android.content.pm.PackageInfo r1 = r8.generatePackageInfo(r3, r12, r14)     // Catch:{ all -> 0x00ea }
            monitor-exit(r0)     // Catch:{ all -> 0x00ea }
            return r1
        L_0x00d7:
            if (r2 != 0) goto L_0x00e4
            r4 = r4 & r12
            if (r4 == 0) goto L_0x00e4
            com.android.server.pm.ApexManager r1 = r8.mApexManager     // Catch:{ all -> 0x00ea }
            android.content.pm.PackageInfo r1 = r1.getPackageInfo(r9, r3)     // Catch:{ all -> 0x00ea }
            monitor-exit(r0)     // Catch:{ all -> 0x00ea }
            return r1
        L_0x00e4:
            monitor-exit(r0)     // Catch:{ all -> 0x00ea }
            android.content.pm.PackageInfo r0 = com.miui.hybrid.hook.HookClient.hookPkgInfo(r1, r9, r12)
            return r0
        L_0x00ea:
            r1 = move-exception
            monitor-exit(r0)     // Catch:{ all -> 0x00ea }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.getPackageInfoInternal(java.lang.String, long, int, int, int):android.content.pm.PackageInfo");
    }

    private boolean isComponentVisibleToInstantApp(ComponentName component) {
        if (!isComponentVisibleToInstantApp(component, 1) && !isComponentVisibleToInstantApp(component, 3) && !isComponentVisibleToInstantApp(component, 4)) {
            return false;
        }
        return true;
    }

    private boolean isComponentVisibleToInstantApp(ComponentName component, int type) {
        if (type == 1) {
            PackageParser.Activity activity = this.mComponentResolver.getActivity(component);
            if (activity == null) {
                return false;
            }
            boolean visibleToInstantApp = (1048576 & activity.info.flags) != 0;
            boolean explicitlyVisibleToInstantApp = (2097152 & activity.info.flags) == 0;
            if (!visibleToInstantApp || !explicitlyVisibleToInstantApp) {
                return false;
            }
            return true;
        } else if (type == 2) {
            PackageParser.Activity activity2 = this.mComponentResolver.getReceiver(component);
            if (activity2 == null) {
                return false;
            }
            boolean visibleToInstantApp2 = (1048576 & activity2.info.flags) != 0;
            boolean explicitlyVisibleToInstantApp2 = (2097152 & activity2.info.flags) == 0;
            if (!visibleToInstantApp2 || explicitlyVisibleToInstantApp2) {
                return false;
            }
            return true;
        } else if (type == 3) {
            PackageParser.Service service = this.mComponentResolver.getService(component);
            if (service == null || (1048576 & service.info.flags) == 0) {
                return false;
            }
            return true;
        } else if (type == 4) {
            PackageParser.Provider provider = this.mComponentResolver.getProvider(component);
            if (provider == null || (1048576 & provider.info.flags) == 0) {
                return false;
            }
            return true;
        } else if (type == 0) {
            return isComponentVisibleToInstantApp(component);
        } else {
            return false;
        }
    }

    /* access modifiers changed from: private */
    @GuardedBy({"mPackages"})
    public boolean filterAppAccessLPr(PackageSetting ps, int callingUid, ComponentName component, int componentType, int userId) {
        if (Process.isIsolated(callingUid)) {
            callingUid = this.mIsolatedOwners.get(callingUid);
        }
        boolean callerIsInstantApp = getInstantAppPackageName(callingUid) != null;
        if (ps == null) {
            return callerIsInstantApp;
        }
        if (isCallerSameApp(ps.name, callingUid)) {
            return false;
        }
        if (callerIsInstantApp) {
            if (ps.getInstantApp(userId)) {
                return true;
            }
            if (component == null) {
                return !ps.pkg.visibleToInstantApps;
            }
            PackageParser.Instrumentation instrumentation = this.mInstrumentation.get(component);
            if (instrumentation == null || !isCallerSameApp(instrumentation.info.targetPackage, callingUid)) {
                return !isComponentVisibleToInstantApp(component, componentType);
            }
            return false;
        } else if (!ps.getInstantApp(userId) || canViewInstantApps(callingUid, userId)) {
            return false;
        } else {
            if (component != null) {
                return true;
            }
            return !this.mInstantAppRegistry.isInstantAccessGranted(userId, UserHandle.getAppId(callingUid), ps.appId);
        }
    }

    /* access modifiers changed from: private */
    @GuardedBy({"mPackages"})
    public boolean filterAppAccessLPr(PackageSetting ps, int callingUid, int userId) {
        return filterAppAccessLPr(ps, callingUid, (ComponentName) null, 0, userId);
    }

    @GuardedBy({"mPackages"})
    private boolean filterSharedLibPackageLPr(PackageSetting ps, int uid, int userId, int flags) {
        int index;
        PackageSetting packageSetting = ps;
        if ((flags & BroadcastQueueInjector.FLAG_IMMUTABLE) != 0) {
            int appId = UserHandle.getAppId(uid);
            if (appId == 1000 || appId == SHELL_UID) {
                int i = uid;
            } else if (appId == 0) {
                int i2 = uid;
            } else if (checkUidPermission("android.permission.INSTALL_PACKAGES", uid) == 0) {
                return false;
            }
            return false;
        }
        int i3 = uid;
        if (packageSetting == null || packageSetting.pkg == null) {
            int i4 = userId;
        } else if (!packageSetting.pkg.applicationInfo.isStaticSharedLibrary()) {
            int i5 = userId;
        } else {
            SharedLibraryInfo libraryInfo = getSharedLibraryInfoLPr(packageSetting.pkg.staticSharedLibName, packageSetting.pkg.staticSharedLibVersion);
            if (libraryInfo == null) {
                return false;
            }
            String[] uidPackageNames = getPackagesForUid(UserHandle.getUid(userId, UserHandle.getAppId(uid)));
            if (uidPackageNames == null) {
                return true;
            }
            for (String uidPackageName : uidPackageNames) {
                if (packageSetting.name.equals(uidPackageName)) {
                    return false;
                }
                PackageSetting uidPs = this.mSettings.getPackageLPr(uidPackageName);
                if (uidPs != null && (index = ArrayUtils.indexOf(uidPs.usesStaticLibraries, libraryInfo.getName())) >= 0 && uidPs.pkg.usesStaticLibrariesVersions[index] == libraryInfo.getLongVersion()) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }

    public String[] currentToCanonicalPackageNames(String[] names) {
        boolean z;
        int callingUid = Binder.getCallingUid();
        if (getInstantAppPackageName(callingUid) != null) {
            return names;
        }
        String[] out = new String[names.length];
        synchronized (this.mPackages) {
            int callingUserId = UserHandle.getUserId(callingUid);
            boolean canViewInstantApps = canViewInstantApps(callingUid, callingUserId);
            for (int i = names.length - 1; i >= 0; i--) {
                PackageSetting ps = this.mSettings.mPackages.get(names[i]);
                boolean translateName = false;
                if (!(ps == null || ps.realName == null)) {
                    if (ps.getInstantApp(callingUserId) && !canViewInstantApps) {
                        if (!this.mInstantAppRegistry.isInstantAccessGranted(callingUserId, UserHandle.getAppId(callingUid), ps.appId)) {
                            z = false;
                            translateName = z;
                        }
                    }
                    z = true;
                    translateName = z;
                }
                out[i] = translateName ? ps.realName : names[i];
            }
        }
        return out;
    }

    public String[] canonicalToCurrentPackageNames(String[] names) {
        String[] strArr = names;
        int callingUid = Binder.getCallingUid();
        if (getInstantAppPackageName(callingUid) != null) {
            return strArr;
        }
        String[] out = new String[strArr.length];
        synchronized (this.mPackages) {
            int callingUserId = UserHandle.getUserId(callingUid);
            boolean canViewInstantApps = canViewInstantApps(callingUid, callingUserId);
            boolean z = true;
            int i = strArr.length - 1;
            while (i >= 0) {
                String cur = this.mSettings.getRenamedPackageLPr(strArr[i]);
                boolean translateName = false;
                if (cur != null) {
                    PackageSetting ps = this.mSettings.mPackages.get(strArr[i]);
                    boolean z2 = false;
                    if (!((ps == null || !ps.getInstantApp(callingUserId)) ? false : z) || canViewInstantApps || this.mInstantAppRegistry.isInstantAccessGranted(callingUserId, UserHandle.getAppId(callingUid), ps.appId)) {
                        z2 = true;
                    }
                    translateName = z2;
                }
                out[i] = translateName ? cur : strArr[i];
                i--;
                z = true;
            }
        }
        return out;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:29:0x006d, code lost:
        return -1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public int getPackageUid(java.lang.String r9, int r10, int r11) {
        /*
            r8 = this;
            com.android.server.pm.UserManagerService r0 = sUserManager
            boolean r0 = r0.exists(r11)
            r1 = -1
            if (r0 != 0) goto L_0x000a
            return r1
        L_0x000a:
            int r0 = android.os.Binder.getCallingUid()
            int r10 = r8.updateFlagsForPackage(r10, r11, r9)
            com.android.server.pm.permission.PermissionManagerServiceInternal r2 = r8.mPermissionManager
            r5 = 0
            r6 = 0
            java.lang.String r7 = "getPackageUid"
            r3 = r0
            r4 = r11
            r2.enforceCrossUserPermission(r3, r4, r5, r6, r7)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r8.mPackages
            monitor-enter(r2)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r8.mPackages     // Catch:{ all -> 0x006e }
            java.lang.Object r3 = r3.get(r9)     // Catch:{ all -> 0x006e }
            android.content.pm.PackageParser$Package r3 = (android.content.pm.PackageParser.Package) r3     // Catch:{ all -> 0x006e }
            if (r3 == 0) goto L_0x0046
            boolean r4 = r3.isMatch(r10)     // Catch:{ all -> 0x006e }
            if (r4 == 0) goto L_0x0046
            java.lang.Object r4 = r3.mExtras     // Catch:{ all -> 0x006e }
            com.android.server.pm.PackageSetting r4 = (com.android.server.pm.PackageSetting) r4     // Catch:{ all -> 0x006e }
            boolean r5 = r8.filterAppAccessLPr(r4, r0, r11)     // Catch:{ all -> 0x006e }
            if (r5 == 0) goto L_0x003c
            monitor-exit(r2)     // Catch:{ all -> 0x006e }
            return r1
        L_0x003c:
            android.content.pm.ApplicationInfo r1 = r3.applicationInfo     // Catch:{ all -> 0x006e }
            int r1 = r1.uid     // Catch:{ all -> 0x006e }
            int r1 = android.os.UserHandle.getUid(r11, r1)     // Catch:{ all -> 0x006e }
            monitor-exit(r2)     // Catch:{ all -> 0x006e }
            return r1
        L_0x0046:
            r4 = 4202496(0x402000, float:5.888951E-39)
            r4 = r4 & r10
            if (r4 == 0) goto L_0x006c
            com.android.server.pm.Settings r4 = r8.mSettings     // Catch:{ all -> 0x006e }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r4 = r4.mPackages     // Catch:{ all -> 0x006e }
            java.lang.Object r4 = r4.get(r9)     // Catch:{ all -> 0x006e }
            com.android.server.pm.PackageSetting r4 = (com.android.server.pm.PackageSetting) r4     // Catch:{ all -> 0x006e }
            if (r4 == 0) goto L_0x006c
            boolean r5 = r4.isMatch(r10)     // Catch:{ all -> 0x006e }
            if (r5 == 0) goto L_0x006c
            boolean r5 = r8.filterAppAccessLPr(r4, r0, r11)     // Catch:{ all -> 0x006e }
            if (r5 != 0) goto L_0x006c
            int r1 = r4.appId     // Catch:{ all -> 0x006e }
            int r1 = android.os.UserHandle.getUid(r11, r1)     // Catch:{ all -> 0x006e }
            monitor-exit(r2)     // Catch:{ all -> 0x006e }
            return r1
        L_0x006c:
            monitor-exit(r2)     // Catch:{ all -> 0x006e }
            return r1
        L_0x006e:
            r1 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x006e }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.getPackageUid(java.lang.String, int, int):int");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:17:0x0030, code lost:
        return r3;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private boolean hasTargetSdkInUidLowerThan(int r11, int r12) {
        /*
            r10 = this;
            int r0 = android.os.UserHandle.getUserId(r11)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r10.mPackages
            monitor-enter(r1)
            com.android.server.pm.Settings r2 = r10.mSettings     // Catch:{ all -> 0x0061 }
            int r3 = android.os.UserHandle.getAppId(r11)     // Catch:{ all -> 0x0061 }
            com.android.server.pm.SettingBase r2 = r2.getSettingLPr(r3)     // Catch:{ all -> 0x0061 }
            r3 = 0
            if (r2 != 0) goto L_0x0016
            monitor-exit(r1)     // Catch:{ all -> 0x0061 }
            return r3
        L_0x0016:
            boolean r4 = r2 instanceof com.android.server.pm.PackageSetting     // Catch:{ all -> 0x0061 }
            r5 = 1
            if (r4 == 0) goto L_0x0031
            r4 = r2
            com.android.server.pm.PackageSetting r4 = (com.android.server.pm.PackageSetting) r4     // Catch:{ all -> 0x0061 }
            boolean r6 = r4.getInstalled(r0)     // Catch:{ all -> 0x0061 }
            if (r6 != 0) goto L_0x0026
            monitor-exit(r1)     // Catch:{ all -> 0x0061 }
            return r3
        L_0x0026:
            android.content.pm.PackageParser$Package r6 = r4.pkg     // Catch:{ all -> 0x0061 }
            android.content.pm.ApplicationInfo r6 = r6.applicationInfo     // Catch:{ all -> 0x0061 }
            int r6 = r6.targetSdkVersion     // Catch:{ all -> 0x0061 }
            if (r6 >= r12) goto L_0x002f
            r3 = r5
        L_0x002f:
            monitor-exit(r1)     // Catch:{ all -> 0x0061 }
            return r3
        L_0x0031:
            boolean r4 = r2 instanceof com.android.server.pm.SharedUserSetting     // Catch:{ all -> 0x0061 }
            if (r4 == 0) goto L_0x005f
            r4 = r2
            com.android.server.pm.SharedUserSetting r4 = (com.android.server.pm.SharedUserSetting) r4     // Catch:{ all -> 0x0061 }
            android.util.ArraySet<com.android.server.pm.PackageSetting> r6 = r4.packages     // Catch:{ all -> 0x0061 }
            int r6 = r6.size()     // Catch:{ all -> 0x0061 }
            r7 = 0
        L_0x003f:
            if (r7 >= r6) goto L_0x005d
            android.util.ArraySet<com.android.server.pm.PackageSetting> r8 = r4.packages     // Catch:{ all -> 0x0061 }
            java.lang.Object r8 = r8.valueAt(r7)     // Catch:{ all -> 0x0061 }
            com.android.server.pm.PackageSetting r8 = (com.android.server.pm.PackageSetting) r8     // Catch:{ all -> 0x0061 }
            boolean r9 = r8.getInstalled(r0)     // Catch:{ all -> 0x0061 }
            if (r9 != 0) goto L_0x0050
            goto L_0x005a
        L_0x0050:
            android.content.pm.PackageParser$Package r9 = r8.pkg     // Catch:{ all -> 0x0061 }
            android.content.pm.ApplicationInfo r9 = r9.applicationInfo     // Catch:{ all -> 0x0061 }
            int r9 = r9.targetSdkVersion     // Catch:{ all -> 0x0061 }
            if (r9 >= r12) goto L_0x005a
            monitor-exit(r1)     // Catch:{ all -> 0x0061 }
            return r5
        L_0x005a:
            int r7 = r7 + 1
            goto L_0x003f
        L_0x005d:
            monitor-exit(r1)     // Catch:{ all -> 0x0061 }
            return r3
        L_0x005f:
            monitor-exit(r1)     // Catch:{ all -> 0x0061 }
            return r3
        L_0x0061:
            r2 = move-exception
            monitor-exit(r1)     // Catch:{ all -> 0x0061 }
            throw r2
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.hasTargetSdkInUidLowerThan(int, int):boolean");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:29:0x006f, code lost:
        return null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public int[] getPackageGids(java.lang.String r9, int r10, int r11) {
        /*
            r8 = this;
            com.android.server.pm.UserManagerService r0 = sUserManager
            boolean r0 = r0.exists(r11)
            r1 = 0
            if (r0 != 0) goto L_0x000a
            return r1
        L_0x000a:
            int r0 = android.os.Binder.getCallingUid()
            int r10 = r8.updateFlagsForPackage(r10, r11, r9)
            com.android.server.pm.permission.PermissionManagerServiceInternal r2 = r8.mPermissionManager
            r5 = 0
            r6 = 0
            java.lang.String r7 = "getPackageGids"
            r3 = r0
            r4 = r11
            r2.enforceCrossUserPermission(r3, r4, r5, r6, r7)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r8.mPackages
            monitor-enter(r2)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r8.mPackages     // Catch:{ all -> 0x0070 }
            java.lang.Object r3 = r3.get(r9)     // Catch:{ all -> 0x0070 }
            android.content.pm.PackageParser$Package r3 = (android.content.pm.PackageParser.Package) r3     // Catch:{ all -> 0x0070 }
            if (r3 == 0) goto L_0x0046
            boolean r4 = r3.isMatch(r10)     // Catch:{ all -> 0x0070 }
            if (r4 == 0) goto L_0x0046
            java.lang.Object r4 = r3.mExtras     // Catch:{ all -> 0x0070 }
            com.android.server.pm.PackageSetting r4 = (com.android.server.pm.PackageSetting) r4     // Catch:{ all -> 0x0070 }
            boolean r5 = r8.filterAppAccessLPr(r4, r0, r11)     // Catch:{ all -> 0x0070 }
            if (r5 == 0) goto L_0x003c
            monitor-exit(r2)     // Catch:{ all -> 0x0070 }
            return r1
        L_0x003c:
            com.android.server.pm.permission.PermissionsState r1 = r4.getPermissionsState()     // Catch:{ all -> 0x0070 }
            int[] r1 = r1.computeGids((int) r11)     // Catch:{ all -> 0x0070 }
            monitor-exit(r2)     // Catch:{ all -> 0x0070 }
            return r1
        L_0x0046:
            r4 = 4202496(0x402000, float:5.888951E-39)
            r4 = r4 & r10
            if (r4 == 0) goto L_0x006e
            com.android.server.pm.Settings r4 = r8.mSettings     // Catch:{ all -> 0x0070 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r4 = r4.mPackages     // Catch:{ all -> 0x0070 }
            java.lang.Object r4 = r4.get(r9)     // Catch:{ all -> 0x0070 }
            com.android.server.pm.PackageSetting r4 = (com.android.server.pm.PackageSetting) r4     // Catch:{ all -> 0x0070 }
            if (r4 == 0) goto L_0x006e
            boolean r5 = r4.isMatch(r10)     // Catch:{ all -> 0x0070 }
            if (r5 == 0) goto L_0x006e
            boolean r5 = r8.filterAppAccessLPr(r4, r0, r11)     // Catch:{ all -> 0x0070 }
            if (r5 != 0) goto L_0x006e
            com.android.server.pm.permission.PermissionsState r1 = r4.getPermissionsState()     // Catch:{ all -> 0x0070 }
            int[] r1 = r1.computeGids((int) r11)     // Catch:{ all -> 0x0070 }
            monitor-exit(r2)     // Catch:{ all -> 0x0070 }
            return r1
        L_0x006e:
            monitor-exit(r2)     // Catch:{ all -> 0x0070 }
            return r1
        L_0x0070:
            r1 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x0070 }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.getPackageGids(java.lang.String, int, int):int[]");
    }

    public PermissionInfo getPermissionInfo(String name, String packageName, int flags) {
        return this.mPermissionManager.getPermissionInfo(name, packageName, flags, getCallingUid());
    }

    public ParceledListSlice<PermissionInfo> queryPermissionsByGroup(String groupName, int flags) {
        List<PermissionInfo> permissionList = this.mPermissionManager.getPermissionInfoByGroup(groupName, flags, getCallingUid());
        if (permissionList == null) {
            return null;
        }
        return new ParceledListSlice<>(permissionList);
    }

    public PermissionGroupInfo getPermissionGroupInfo(String groupName, int flags) {
        return this.mPermissionManager.getPermissionGroupInfo(groupName, flags, getCallingUid());
    }

    public ParceledListSlice<PermissionGroupInfo> getAllPermissionGroups(int flags) {
        List<PermissionGroupInfo> permissionList = this.mPermissionManager.getAllPermissionGroups(flags, getCallingUid());
        return permissionList == null ? ParceledListSlice.emptyList() : new ParceledListSlice<>(permissionList);
    }

    @GuardedBy({"mPackages"})
    private ApplicationInfo generateApplicationInfoFromSettingsLPw(String packageName, int flags, int filterCallingUid, int userId) {
        PackageSetting ps;
        if (!sUserManager.exists(userId) || (ps = this.mSettings.mPackages.get(packageName)) == null || filterSharedLibPackageLPr(ps, filterCallingUid, userId, flags) || filterAppAccessLPr(ps, filterCallingUid, userId)) {
            return null;
        }
        if (ps.pkg == null) {
            PackageInfo pInfo = generatePackageInfo(ps, flags, userId);
            if (pInfo != null) {
                return pInfo.applicationInfo;
            }
            return null;
        }
        ApplicationInfo ai = PackageParser.generateApplicationInfo(ps.pkg, flags, ps.readUserState(userId), userId);
        if (ai != null) {
            ai.packageName = resolveExternalPackageNameLPr(ps.pkg);
        }
        return ai;
    }

    public ApplicationInfo getApplicationInfo(String packageName, int flags, int userId) {
        return getApplicationInfoInternal(packageName, flags, Binder.getCallingUid(), userId);
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x007c, code lost:
        return r1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public android.content.pm.ApplicationInfo getApplicationInfoInternal(java.lang.String r9, int r10, int r11, int r12) {
        /*
            r8 = this;
            com.android.server.pm.UserManagerService r0 = sUserManager
            boolean r0 = r0.exists(r12)
            r1 = 0
            if (r0 != 0) goto L_0x000a
            return r1
        L_0x000a:
            int r10 = r8.updateFlagsForApplication(r10, r12, r9)
            int r0 = android.os.Binder.getCallingUid()
            boolean r0 = r8.isRecentsAccessingChildProfiles(r0, r12)
            if (r0 != 0) goto L_0x0026
            com.android.server.pm.permission.PermissionManagerServiceInternal r2 = r8.mPermissionManager
            int r3 = android.os.Binder.getCallingUid()
            r5 = 0
            r6 = 0
            java.lang.String r7 = "get application info"
            r4 = r12
            r2.enforceCrossUserPermission(r3, r4, r5, r6, r7)
        L_0x0026:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r8.mPackages
            monitor-enter(r0)
            r2 = -1
            java.lang.String r2 = r8.resolveInternalPackageNameLPr(r9, r2)     // Catch:{ all -> 0x009e }
            r9 = r2
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r8.mPackages     // Catch:{ all -> 0x009e }
            java.lang.Object r2 = r2.get(r9)     // Catch:{ all -> 0x009e }
            android.content.pm.PackageParser$Package r2 = (android.content.pm.PackageParser.Package) r2     // Catch:{ all -> 0x009e }
            r3 = 4202496(0x402000, float:5.888951E-39)
            if (r2 == 0) goto L_0x007d
            com.android.server.pm.Settings r4 = r8.mSettings     // Catch:{ all -> 0x009e }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r4 = r4.mPackages     // Catch:{ all -> 0x009e }
            java.lang.Object r4 = r4.get(r9)     // Catch:{ all -> 0x009e }
            com.android.server.pm.PackageSetting r4 = (com.android.server.pm.PackageSetting) r4     // Catch:{ all -> 0x009e }
            if (r4 != 0) goto L_0x004b
            monitor-exit(r0)     // Catch:{ all -> 0x009e }
            return r1
        L_0x004b:
            boolean r5 = r8.filterSharedLibPackageLPr(r4, r11, r12, r10)     // Catch:{ all -> 0x009e }
            if (r5 == 0) goto L_0x0053
            monitor-exit(r0)     // Catch:{ all -> 0x009e }
            return r1
        L_0x0053:
            boolean r5 = r8.filterAppAccessLPr(r4, r11, r12)     // Catch:{ all -> 0x009e }
            if (r5 == 0) goto L_0x005b
            monitor-exit(r0)     // Catch:{ all -> 0x009e }
            return r1
        L_0x005b:
            android.content.pm.PackageUserState r1 = r4.readUserState(r12)     // Catch:{ all -> 0x009e }
            android.content.pm.ApplicationInfo r1 = android.content.pm.PackageParser.generateApplicationInfo(r2, r10, r1, r12)     // Catch:{ all -> 0x009e }
            if (r1 == 0) goto L_0x006c
            java.lang.String r5 = r8.resolveExternalPackageNameLPr(r2)     // Catch:{ all -> 0x009e }
            r1.packageName = r5     // Catch:{ all -> 0x009e }
        L_0x006c:
            if (r1 != 0) goto L_0x007b
            boolean r5 = miui.securityspace.XSpaceUserHandle.isXSpaceUserCalling()     // Catch:{ all -> 0x009e }
            if (r5 == 0) goto L_0x007b
            r10 = r10 | r3
            android.content.pm.ApplicationInfo r3 = r8.generateApplicationInfoFromSettingsLPw(r9, r10, r11, r12)     // Catch:{ all -> 0x009e }
            monitor-exit(r0)     // Catch:{ all -> 0x009e }
            return r3
        L_0x007b:
            monitor-exit(r0)     // Catch:{ all -> 0x009e }
            return r1
        L_0x007d:
            java.lang.String r4 = "android"
            boolean r4 = r4.equals(r9)     // Catch:{ all -> 0x009e }
            if (r4 != 0) goto L_0x009a
            java.lang.String r4 = "system"
            boolean r4 = r4.equals(r9)     // Catch:{ all -> 0x009e }
            if (r4 == 0) goto L_0x008f
            goto L_0x009a
        L_0x008f:
            r3 = r3 & r10
            if (r3 == 0) goto L_0x0098
            android.content.pm.ApplicationInfo r1 = r8.generateApplicationInfoFromSettingsLPw(r9, r10, r11, r12)     // Catch:{ all -> 0x009e }
            monitor-exit(r0)     // Catch:{ all -> 0x009e }
            return r1
        L_0x0098:
            monitor-exit(r0)     // Catch:{ all -> 0x009e }
            return r1
        L_0x009a:
            android.content.pm.ApplicationInfo r1 = r8.mAndroidApplication     // Catch:{ all -> 0x009e }
            monitor-exit(r0)     // Catch:{ all -> 0x009e }
            return r1
        L_0x009e:
            r1 = move-exception
            monitor-exit(r0)     // Catch:{ all -> 0x009e }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.getApplicationInfoInternal(java.lang.String, int, int, int):android.content.pm.ApplicationInfo");
    }

    @GuardedBy({"mPackages"})
    private String normalizePackageNameLPr(String packageName) {
        String normalizedPackageName = this.mSettings.getRenamedPackageLPr(packageName);
        return normalizedPackageName != null ? normalizedPackageName : packageName;
    }

    public void deletePreloadsFileCache() {
        this.mContext.enforceCallingOrSelfPermission("android.permission.CLEAR_APP_CACHE", "deletePreloadsFileCache");
        File dir = Environment.getDataPreloadsFileCacheDirectory();
        Slog.i(TAG, "Deleting preloaded file cache " + dir);
        FileUtils.deleteContents(dir);
    }

    public void freeStorageAndNotify(String volumeUuid, long freeStorageSize, int storageFlags, IPackageDataObserver observer) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.CLEAR_APP_CACHE", (String) null);
        this.mHandler.post(new Runnable(volumeUuid, freeStorageSize, storageFlags, observer) {
            private final /* synthetic */ String f$1;
            private final /* synthetic */ long f$2;
            private final /* synthetic */ int f$3;
            private final /* synthetic */ IPackageDataObserver f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r5;
                this.f$4 = r6;
            }

            public final void run() {
                PackageManagerService.this.lambda$freeStorageAndNotify$1$PackageManagerService(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    public /* synthetic */ void lambda$freeStorageAndNotify$1$PackageManagerService(String volumeUuid, long freeStorageSize, int storageFlags, IPackageDataObserver observer) {
        boolean success = false;
        try {
            freeStorage(volumeUuid, freeStorageSize, storageFlags);
            success = true;
        } catch (IOException e) {
            Slog.w(TAG, e);
        }
        if (observer != null) {
            try {
                observer.onRemoveCompleted((String) null, success);
            } catch (RemoteException e2) {
                Slog.w(TAG, e2);
            }
        }
    }

    public void freeStorage(String volumeUuid, long freeStorageSize, int storageFlags, IntentSender pi) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.CLEAR_APP_CACHE", TAG);
        this.mHandler.post(new Runnable(volumeUuid, freeStorageSize, storageFlags, pi) {
            private final /* synthetic */ String f$1;
            private final /* synthetic */ long f$2;
            private final /* synthetic */ int f$3;
            private final /* synthetic */ IntentSender f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r5;
                this.f$4 = r6;
            }

            public final void run() {
                PackageManagerService.this.lambda$freeStorage$2$PackageManagerService(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    public /* synthetic */ void lambda$freeStorage$2$PackageManagerService(String volumeUuid, long freeStorageSize, int storageFlags, IntentSender pi) {
        boolean success = false;
        try {
            freeStorage(volumeUuid, freeStorageSize, storageFlags);
            success = true;
        } catch (IOException e) {
            Slog.w(TAG, e);
        }
        if (pi != null) {
            try {
                pi.sendIntent((Context) null, success ? 1 : 0, (Intent) null, (IntentSender.OnFinished) null, (Handler) null);
            } catch (IntentSender.SendIntentException e2) {
                Slog.w(TAG, e2);
            }
        }
    }

    public void freeStorage(String volumeUuid, long bytes, int storageFlags) throws IOException {
        long j;
        String str = volumeUuid;
        long j2 = bytes;
        int i = storageFlags;
        StorageManager storage = (StorageManager) this.mContext.getSystemService(StorageManager.class);
        File file = storage.findPathForUuid(str);
        if (file.getUsableSpace() < j2) {
            if (ENABLE_FREE_CACHE_V2) {
                boolean internalVolume = Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL, str);
                boolean aggressive = (i & 1) != 0;
                long reservedBytes = storage.getStorageCacheBytes(file, i);
                if (internalVolume && (aggressive || SystemProperties.getBoolean("persist.sys.preloads.file_cache_expired", false))) {
                    deletePreloadsFileCache();
                    if (file.getUsableSpace() >= j2) {
                        return;
                    }
                }
                if (internalVolume && aggressive) {
                    FileUtils.deleteContents(this.mCacheDir);
                    if (file.getUsableSpace() >= j2) {
                        return;
                    }
                }
                try {
                    this.mInstaller.freeCache(volumeUuid, bytes, reservedBytes, 256);
                } catch (Installer.InstallerException e) {
                }
                if (file.getUsableSpace() < j2) {
                    if (internalVolume && pruneUnusedStaticSharedLibraries(j2, Settings.Global.getLong(this.mContext.getContentResolver(), "unused_static_shared_lib_min_cache_period", 7200000))) {
                        return;
                    }
                    if (!internalVolume || !this.mInstantAppRegistry.pruneInstalledInstantApps(j2, Settings.Global.getLong(this.mContext.getContentResolver(), "installed_instant_app_min_cache_period", UnixCalendar.WEEK_IN_MILLIS))) {
                        try {
                            StorageManager storageManager = storage;
                            j = 604800000;
                            try {
                                this.mInstaller.freeCache(volumeUuid, bytes, reservedBytes, 768);
                            } catch (Installer.InstallerException e2) {
                            }
                        } catch (Installer.InstallerException e3) {
                            StorageManager storageManager2 = storage;
                            j = 604800000;
                        }
                        if (file.getUsableSpace() < j2) {
                            if (internalVolume && this.mInstantAppRegistry.pruneUninstalledInstantApps(j2, Settings.Global.getLong(this.mContext.getContentResolver(), "uninstalled_instant_app_min_cache_period", j))) {
                                return;
                            }
                        } else {
                            return;
                        }
                    } else {
                        return;
                    }
                } else {
                    return;
                }
            } else {
                try {
                    this.mInstaller.freeCache(volumeUuid, bytes, 0, 0);
                } catch (Installer.InstallerException e4) {
                }
                if (file.getUsableSpace() >= j2) {
                    return;
                }
            }
            throw new IOException("Failed to free " + j2 + " on storage device at " + file);
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:46:0x00db, code lost:
        if (r12 == null) goto L_?;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:0x00dd, code lost:
        r0 = r12.size();
        r7 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:48:0x00e3, code lost:
        if (r7 >= r0) goto L_0x010b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x00e5, code lost:
        r8 = (android.content.pm.VersionedPackage) r12.get(r7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:50:0x00fd, code lost:
        if (deletePackageX(r8.getPackageName(), r8.getLongVersionCode(), 0, 2) != 1) goto L_0x0108;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:52:0x0105, code lost:
        if (r9.getUsableSpace() < r21) goto L_0x0108;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:53:0x0107, code lost:
        return true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:54:0x0108, code lost:
        r7 = r7 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:80:?, code lost:
        return false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:81:?, code lost:
        return false;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private boolean pruneUnusedStaticSharedLibraries(long r21, long r23) throws java.io.IOException {
        /*
            r20 = this;
            r7 = r20
            android.content.Context r0 = r7.mContext
            java.lang.Class<android.os.storage.StorageManager> r1 = android.os.storage.StorageManager.class
            java.lang.Object r0 = r0.getSystemService(r1)
            r8 = r0
            android.os.storage.StorageManager r8 = (android.os.storage.StorageManager) r8
            java.lang.String r0 = android.os.storage.StorageManager.UUID_PRIVATE_INTERNAL
            java.io.File r9 = r8.findPathForUuid(r0)
            r1 = 0
            long r10 = java.lang.System.currentTimeMillis()
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r7.mPackages
            monitor-enter(r2)
            com.android.server.pm.UserManagerService r0 = sUserManager     // Catch:{ all -> 0x0110 }
            int[] r0 = r0.getUserIds()     // Catch:{ all -> 0x0110 }
            android.util.ArrayMap<java.lang.String, android.util.LongSparseArray<android.content.pm.SharedLibraryInfo>> r3 = r7.mSharedLibraries     // Catch:{ all -> 0x0110 }
            int r3 = r3.size()     // Catch:{ all -> 0x0110 }
            r4 = 0
            r12 = r1
        L_0x0029:
            if (r4 >= r3) goto L_0x00d5
            android.util.ArrayMap<java.lang.String, android.util.LongSparseArray<android.content.pm.SharedLibraryInfo>> r1 = r7.mSharedLibraries     // Catch:{ all -> 0x00cf }
            java.lang.Object r1 = r1.valueAt(r4)     // Catch:{ all -> 0x00cf }
            android.util.LongSparseArray r1 = (android.util.LongSparseArray) r1     // Catch:{ all -> 0x00cf }
            if (r1 != 0) goto L_0x003c
            r16 = r0
            r15 = r8
            r18 = r10
            goto L_0x00c4
        L_0x003c:
            int r5 = r1.size()     // Catch:{ all -> 0x00cf }
            r6 = 0
        L_0x0041:
            if (r6 >= r5) goto L_0x00bd
            java.lang.Object r13 = r1.valueAt(r6)     // Catch:{ all -> 0x00cf }
            android.content.pm.SharedLibraryInfo r13 = (android.content.pm.SharedLibraryInfo) r13     // Catch:{ all -> 0x00cf }
            boolean r14 = r13.isStatic()     // Catch:{ all -> 0x00cf }
            if (r14 != 0) goto L_0x0056
            r16 = r0
            r15 = r8
            r18 = r10
            goto L_0x00c4
        L_0x0056:
            android.content.pm.VersionedPackage r14 = r13.getDeclaringPackage()     // Catch:{ all -> 0x00cf }
            java.lang.String r15 = r14.getPackageName()     // Catch:{ all -> 0x00cf }
            r16 = r0
            r17 = r1
            long r0 = r14.getLongVersionCode()     // Catch:{ all -> 0x00cf }
            java.lang.String r0 = r7.resolveInternalPackageNameLPr(r15, r0)     // Catch:{ all -> 0x00cf }
            com.android.server.pm.Settings r1 = r7.mSettings     // Catch:{ all -> 0x00cf }
            com.android.server.pm.PackageSetting r1 = r1.getPackageLPr(r0)     // Catch:{ all -> 0x00cf }
            if (r1 == 0) goto L_0x00ae
            r15 = r8
            long r7 = r1.lastUpdateTime     // Catch:{ all -> 0x00a8 }
            long r7 = r10 - r7
            int r7 = (r7 > r23 ? 1 : (r7 == r23 ? 0 : -1))
            if (r7 >= 0) goto L_0x007f
            r18 = r10
            goto L_0x00b1
        L_0x007f:
            android.content.pm.PackageParser$Package r7 = r1.pkg     // Catch:{ all -> 0x00a8 }
            boolean r7 = r7.isSystem()     // Catch:{ all -> 0x00a8 }
            if (r7 == 0) goto L_0x008a
            r18 = r10
            goto L_0x00b1
        L_0x008a:
            if (r12 != 0) goto L_0x0099
            java.util.ArrayList r7 = new java.util.ArrayList     // Catch:{ all -> 0x0093 }
            r7.<init>()     // Catch:{ all -> 0x0093 }
            r12 = r7
            goto L_0x0099
        L_0x0093:
            r0 = move-exception
            r18 = r10
            r1 = r12
            goto L_0x0114
        L_0x0099:
            android.content.pm.VersionedPackage r7 = new android.content.pm.VersionedPackage     // Catch:{ all -> 0x00a8 }
            r18 = r10
            long r10 = r14.getLongVersionCode()     // Catch:{ all -> 0x010d }
            r7.<init>(r0, r10)     // Catch:{ all -> 0x010d }
            r12.add(r7)     // Catch:{ all -> 0x010d }
            goto L_0x00b1
        L_0x00a8:
            r0 = move-exception
            r18 = r10
            r1 = r12
            goto L_0x0114
        L_0x00ae:
            r15 = r8
            r18 = r10
        L_0x00b1:
            int r6 = r6 + 1
            r7 = r20
            r8 = r15
            r0 = r16
            r1 = r17
            r10 = r18
            goto L_0x0041
        L_0x00bd:
            r16 = r0
            r17 = r1
            r15 = r8
            r18 = r10
        L_0x00c4:
            int r4 = r4 + 1
            r7 = r20
            r8 = r15
            r0 = r16
            r10 = r18
            goto L_0x0029
        L_0x00cf:
            r0 = move-exception
            r15 = r8
            r18 = r10
            r1 = r12
            goto L_0x0114
        L_0x00d5:
            r16 = r0
            r15 = r8
            r18 = r10
            monitor-exit(r2)     // Catch:{ all -> 0x010d }
            if (r12 == 0) goto L_0x010b
            int r0 = r12.size()
            r1 = 0
            r7 = r1
        L_0x00e3:
            if (r7 >= r0) goto L_0x010b
            java.lang.Object r1 = r12.get(r7)
            r8 = r1
            android.content.pm.VersionedPackage r8 = (android.content.pm.VersionedPackage) r8
            java.lang.String r2 = r8.getPackageName()
            long r3 = r8.getLongVersionCode()
            r5 = 0
            r6 = 2
            r1 = r20
            int r1 = r1.deletePackageX(r2, r3, r5, r6)
            r2 = 1
            if (r1 != r2) goto L_0x0108
            long r3 = r9.getUsableSpace()
            int r1 = (r3 > r21 ? 1 : (r3 == r21 ? 0 : -1))
            if (r1 < 0) goto L_0x0108
            return r2
        L_0x0108:
            int r7 = r7 + 1
            goto L_0x00e3
        L_0x010b:
            r0 = 0
            return r0
        L_0x010d:
            r0 = move-exception
            r1 = r12
            goto L_0x0114
        L_0x0110:
            r0 = move-exception
            r15 = r8
            r18 = r10
        L_0x0114:
            monitor-exit(r2)     // Catch:{ all -> 0x0116 }
            throw r0
        L_0x0116:
            r0 = move-exception
            goto L_0x0114
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.pruneUnusedStaticSharedLibraries(long, long):boolean");
    }

    private int updateFlags(int flags, int userId) {
        if ((flags & 786432) != 0) {
            return flags;
        }
        if (getUserManagerInternal().isUserUnlockingOrUnlocked(userId)) {
            return flags | 786432;
        }
        return flags | 524288;
    }

    private UserManagerInternal getUserManagerInternal() {
        if (this.mUserManagerInternal == null) {
            this.mUserManagerInternal = (UserManagerInternal) LocalServices.getService(UserManagerInternal.class);
        }
        return this.mUserManagerInternal;
    }

    private ActivityManagerInternal getActivityManagerInternal() {
        if (this.mActivityManagerInternal == null) {
            this.mActivityManagerInternal = (ActivityManagerInternal) LocalServices.getService(ActivityManagerInternal.class);
        }
        return this.mActivityManagerInternal;
    }

    private ActivityTaskManagerInternal getActivityTaskManagerInternal() {
        if (this.mActivityTaskManagerInternal == null) {
            this.mActivityTaskManagerInternal = (ActivityTaskManagerInternal) LocalServices.getService(ActivityTaskManagerInternal.class);
        }
        return this.mActivityTaskManagerInternal;
    }

    /* access modifiers changed from: private */
    public DeviceIdleController.LocalService getDeviceIdleController() {
        if (this.mDeviceIdleController == null) {
            this.mDeviceIdleController = (DeviceIdleController.LocalService) LocalServices.getService(DeviceIdleController.LocalService.class);
        }
        return this.mDeviceIdleController;
    }

    private StorageManagerInternal getStorageManagerInternal() {
        if (this.mStorageManagerInternal == null) {
            this.mStorageManagerInternal = (StorageManagerInternal) LocalServices.getService(StorageManagerInternal.class);
        }
        return this.mStorageManagerInternal;
    }

    private int updateFlagsForPackage(int flags, int userId, Object cookie) {
        boolean isCallerSystemUser = UserHandle.getCallingUserId() == 0;
        if ((flags & 4194304) != 0) {
            this.mPermissionManager.enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, !isRecentsAccessingChildProfiles(Binder.getCallingUid(), userId), "MATCH_ANY_USER flag requires INTERACT_ACROSS_USERS permission at " + Debug.getCallers(5));
        } else if ((flags & 8192) != 0 && isCallerSystemUser && sUserManager.hasManagedProfile(0)) {
            flags |= 4194304;
        }
        return updateFlags(flags, userId);
    }

    private int updateFlagsForApplication(int flags, int userId, Object cookie) {
        return updateFlagsForPackage(flags, userId, cookie);
    }

    private int updateFlagsForComponent(int flags, int userId, Object cookie) {
        return updateFlags(flags, userId);
    }

    private Intent updateIntentForResolve(Intent intent) {
        if (intent.getSelector() != null) {
            return intent.getSelector();
        }
        return intent;
    }

    /* access modifiers changed from: package-private */
    public int updateFlagsForResolve(int flags, int userId, Intent intent, int callingUid) {
        return updateFlagsForResolve(flags, userId, intent, callingUid, false, false);
    }

    /* access modifiers changed from: package-private */
    public int updateFlagsForResolve(int flags, int userId, Intent intent, int callingUid, boolean wantInstantApps) {
        return updateFlagsForResolve(flags, userId, intent, callingUid, wantInstantApps, false);
    }

    /* access modifiers changed from: package-private */
    public int updateFlagsForResolve(int flags, int userId, Intent intent, int callingUid, boolean wantInstantApps, boolean onlyExposedExplicitly) {
        int flags2;
        if (this.mSafeMode) {
            flags |= 1048576;
        }
        if (getInstantAppPackageName(callingUid) != null) {
            if (onlyExposedExplicitly) {
                flags |= DumpState.DUMP_APEX;
            }
            flags2 = flags | DumpState.DUMP_SERVICE_PERMISSIONS | 8388608;
        } else {
            boolean allowMatchInstant = true;
            boolean wantMatchInstant = (flags & 8388608) != 0;
            if (!wantInstantApps && (!wantMatchInstant || !canViewInstantApps(callingUid, userId))) {
                allowMatchInstant = false;
            }
            flags2 = flags & -50331649;
            if (!allowMatchInstant) {
                flags2 &= -8388609;
            }
        }
        return updateFlagsForComponent(flags2, userId, intent);
    }

    public ActivityInfo getActivityInfo(ComponentName component, int flags, int userId) {
        return getActivityInfoInternal(component, flags, Binder.getCallingUid(), userId);
    }

    /* access modifiers changed from: private */
    public ActivityInfo getActivityInfoInternal(ComponentName component, int flags, int filterCallingUid, int userId) {
        if (!sUserManager.exists(userId)) {
            return null;
        }
        int flags2 = updateFlagsForComponent(flags, userId, component);
        if (!isRecentsAccessingChildProfiles(Binder.getCallingUid(), userId)) {
            this.mPermissionManager.enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "get activity info");
        }
        synchronized (this.mPackages) {
            PackageParser.Activity a = this.mComponentResolver.getActivity(component);
            if (XSpaceUserHandle.isXSpaceUserCalling()) {
                flags2 |= 4202496;
            }
            if (a != null && this.mSettings.isEnabledAndMatchLPr(a.info, flags2, userId)) {
                PackageSetting ps = this.mSettings.mPackages.get(component.getPackageName());
                if (ps == null) {
                    return null;
                }
                if (filterAppAccessLPr(ps, filterCallingUid, component, 1, userId)) {
                    return null;
                }
                ActivityInfo generateActivityInfo = PackageParser.generateActivityInfo(a, flags2, ps.readUserState(userId), userId);
                return generateActivityInfo;
            } else if (!this.mResolveComponentName.equals(component)) {
                return null;
            } else {
                ActivityInfo generateActivityInfo2 = PackageParser.generateActivityInfo(this.mResolveActivity, flags2, new PackageUserState(), userId);
                return generateActivityInfo2;
            }
        }
    }

    private boolean isRecentsAccessingChildProfiles(int callingUid, int targetUserId) {
        if (!getActivityTaskManagerInternal().isCallerRecents(callingUid)) {
            return false;
        }
        long token = Binder.clearCallingIdentity();
        try {
            int callingUserId = UserHandle.getUserId(callingUid);
            if (ActivityManager.getCurrentUser() != callingUserId) {
                return false;
            }
            boolean isSameProfileGroup = sUserManager.isSameProfileGroup(callingUserId, targetUserId);
            Binder.restoreCallingIdentity(token);
            return isSameProfileGroup;
        } finally {
            Binder.restoreCallingIdentity(token);
        }
    }

    public boolean activitySupportsIntent(ComponentName component, Intent intent, String resolvedType) {
        ComponentName componentName = component;
        synchronized (this.mPackages) {
            if (componentName.equals(this.mResolveComponentName)) {
                return true;
            }
            int callingUid = Binder.getCallingUid();
            int callingUserId = UserHandle.getUserId(callingUid);
            PackageParser.Activity a = this.mComponentResolver.getActivity(componentName);
            if (a == null) {
                return false;
            }
            PackageSetting ps = this.mSettings.mPackages.get(component.getPackageName());
            if (ps == null) {
                return false;
            }
            if (filterAppAccessLPr(ps, callingUid, component, 1, callingUserId)) {
                return false;
            }
            for (int i = 0; i < a.intents.size(); i++) {
                if (((PackageParser.ActivityIntentInfo) a.intents.get(i)).match(intent.getAction(), resolvedType, intent.getScheme(), intent.getData(), intent.getCategories(), TAG) >= 0) {
                    return true;
                }
            }
            return false;
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:22:0x0060, code lost:
        return null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName r12, int r13, int r14) {
        /*
            r11 = this;
            com.android.server.pm.UserManagerService r0 = sUserManager
            boolean r0 = r0.exists(r14)
            r1 = 0
            if (r0 != 0) goto L_0x000a
            return r1
        L_0x000a:
            int r0 = android.os.Binder.getCallingUid()
            int r13 = r11.updateFlagsForComponent(r13, r14, r12)
            com.android.server.pm.permission.PermissionManagerServiceInternal r2 = r11.mPermissionManager
            r5 = 0
            r6 = 0
            java.lang.String r7 = "get receiver info"
            r3 = r0
            r4 = r14
            r2.enforceCrossUserPermission(r3, r4, r5, r6, r7)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r8 = r11.mPackages
            monitor-enter(r8)
            com.android.server.pm.ComponentResolver r2 = r11.mComponentResolver     // Catch:{ all -> 0x0061 }
            android.content.pm.PackageParser$Activity r2 = r2.getReceiver(r12)     // Catch:{ all -> 0x0061 }
            r9 = r2
            if (r9 == 0) goto L_0x005f
            com.android.server.pm.Settings r2 = r11.mSettings     // Catch:{ all -> 0x0061 }
            android.content.pm.ActivityInfo r3 = r9.info     // Catch:{ all -> 0x0061 }
            boolean r2 = r2.isEnabledAndMatchLPr(r3, r13, r14)     // Catch:{ all -> 0x0061 }
            if (r2 == 0) goto L_0x005f
            com.android.server.pm.Settings r2 = r11.mSettings     // Catch:{ all -> 0x0061 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r2 = r2.mPackages     // Catch:{ all -> 0x0061 }
            java.lang.String r3 = r12.getPackageName()     // Catch:{ all -> 0x0061 }
            java.lang.Object r2 = r2.get(r3)     // Catch:{ all -> 0x0061 }
            com.android.server.pm.PackageSetting r2 = (com.android.server.pm.PackageSetting) r2     // Catch:{ all -> 0x0061 }
            r10 = r2
            if (r10 != 0) goto L_0x0046
            monitor-exit(r8)     // Catch:{ all -> 0x0061 }
            return r1
        L_0x0046:
            r6 = 2
            r2 = r11
            r3 = r10
            r4 = r0
            r5 = r12
            r7 = r14
            boolean r2 = r2.filterAppAccessLPr(r3, r4, r5, r6, r7)     // Catch:{ all -> 0x0061 }
            if (r2 == 0) goto L_0x0054
            monitor-exit(r8)     // Catch:{ all -> 0x0061 }
            return r1
        L_0x0054:
            android.content.pm.PackageUserState r1 = r10.readUserState(r14)     // Catch:{ all -> 0x0061 }
            android.content.pm.ActivityInfo r1 = android.content.pm.PackageParser.generateActivityInfo(r9, r13, r1, r14)     // Catch:{ all -> 0x0061 }
            monitor-exit(r8)     // Catch:{ all -> 0x0061 }
            return r1
        L_0x005f:
            monitor-exit(r8)     // Catch:{ all -> 0x0061 }
            return r1
        L_0x0061:
            r1 = move-exception
            monitor-exit(r8)     // Catch:{ all -> 0x0061 }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.getReceiverInfo(android.content.ComponentName, int, int):android.content.pm.ActivityInfo");
    }

    /* Debug info: failed to restart local var, previous not found, register: 30 */
    /* JADX INFO: finally extract failed */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x0056, code lost:
        if (r1.mContext.checkCallingOrSelfPermission("android.permission.ACCESS_SHARED_LIBRARIES") != 0) goto L_0x005f;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public android.content.pm.ParceledListSlice<android.content.pm.SharedLibraryInfo> getSharedLibraries(java.lang.String r31, int r32, int r33) {
        /*
            r30 = this;
            r1 = r30
            r2 = r33
            com.android.server.pm.UserManagerService r0 = sUserManager
            boolean r0 = r0.exists(r2)
            r3 = 0
            if (r0 != 0) goto L_0x000e
            return r3
        L_0x000e:
            java.lang.String r0 = "userId must be >= 0"
            com.android.internal.util.Preconditions.checkArgumentNonnegative(r2, r0)
            int r0 = android.os.Binder.getCallingUid()
            java.lang.String r0 = r1.getInstantAppPackageName(r0)
            if (r0 == 0) goto L_0x001f
            return r3
        L_0x001f:
            r0 = r32
            int r4 = r1.updateFlagsForPackage(r0, r2, r3)
            android.content.Context r0 = r1.mContext
            java.lang.String r5 = "android.permission.INSTALL_PACKAGES"
            int r0 = r0.checkCallingOrSelfPermission(r5)
            r5 = 0
            r6 = 67108864(0x4000000, float:1.5046328E-36)
            if (r0 == 0) goto L_0x005c
            android.content.Context r0 = r1.mContext
            java.lang.String r7 = "android.permission.DELETE_PACKAGES"
            int r0 = r0.checkCallingOrSelfPermission(r7)
            if (r0 == 0) goto L_0x0059
            r7 = r31
            boolean r0 = r1.canRequestPackageInstallsInternal(r7, r6, r2, r5)
            if (r0 != 0) goto L_0x005e
            android.content.Context r0 = r1.mContext
            java.lang.String r8 = "android.permission.REQUEST_DELETE_PACKAGES"
            int r0 = r0.checkCallingOrSelfPermission(r8)
            if (r0 == 0) goto L_0x005e
            android.content.Context r0 = r1.mContext
            java.lang.String r8 = "android.permission.ACCESS_SHARED_LIBRARIES"
            int r0 = r0.checkCallingOrSelfPermission(r8)
            if (r0 != 0) goto L_0x005f
            goto L_0x005e
        L_0x0059:
            r7 = r31
            goto L_0x005e
        L_0x005c:
            r7 = r31
        L_0x005e:
            r5 = 1
        L_0x005f:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r8 = r1.mPackages
            monitor-enter(r8)
            r0 = 0
            android.util.ArrayMap<java.lang.String, android.util.LongSparseArray<android.content.pm.SharedLibraryInfo>> r9 = r1.mSharedLibraries     // Catch:{ all -> 0x0110 }
            int r9 = r9.size()     // Catch:{ all -> 0x0110 }
            r10 = 0
        L_0x006a:
            if (r10 >= r9) goto L_0x0102
            android.util.ArrayMap<java.lang.String, android.util.LongSparseArray<android.content.pm.SharedLibraryInfo>> r11 = r1.mSharedLibraries     // Catch:{ all -> 0x0110 }
            java.lang.Object r11 = r11.valueAt(r10)     // Catch:{ all -> 0x0110 }
            android.util.LongSparseArray r11 = (android.util.LongSparseArray) r11     // Catch:{ all -> 0x0110 }
            if (r11 != 0) goto L_0x0078
            goto L_0x00fb
        L_0x0078:
            int r12 = r11.size()     // Catch:{ all -> 0x0110 }
            r13 = 0
            r14 = r0
        L_0x007e:
            if (r13 >= r12) goto L_0x00fa
            java.lang.Object r0 = r11.valueAt(r13)     // Catch:{ all -> 0x0110 }
            android.content.pm.SharedLibraryInfo r0 = (android.content.pm.SharedLibraryInfo) r0     // Catch:{ all -> 0x0110 }
            r15 = r0
            if (r5 != 0) goto L_0x0090
            boolean r0 = r15.isStatic()     // Catch:{ all -> 0x0110 }
            if (r0 == 0) goto L_0x0090
            goto L_0x00fa
        L_0x0090:
            long r16 = android.os.Binder.clearCallingIdentity()     // Catch:{ all -> 0x0110 }
            android.content.pm.VersionedPackage r0 = r15.getDeclaringPackage()     // Catch:{ all -> 0x00f5 }
            r3 = r4 | r6
            android.content.pm.PackageInfo r0 = r1.getPackageInfoVersioned(r0, r3, r2)     // Catch:{ all -> 0x00f5 }
            if (r0 != 0) goto L_0x00a5
            android.os.Binder.restoreCallingIdentity(r16)     // Catch:{ all -> 0x0110 }
            goto L_0x00ef
        L_0x00a5:
            android.os.Binder.restoreCallingIdentity(r16)     // Catch:{ all -> 0x0110 }
            android.content.pm.SharedLibraryInfo r0 = new android.content.pm.SharedLibraryInfo     // Catch:{ all -> 0x0110 }
            java.lang.String r20 = r15.getPath()     // Catch:{ all -> 0x0110 }
            java.lang.String r21 = r15.getPackageName()     // Catch:{ all -> 0x0110 }
            java.util.List r22 = r15.getAllCodePaths()     // Catch:{ all -> 0x0110 }
            java.lang.String r23 = r15.getName()     // Catch:{ all -> 0x0110 }
            long r24 = r15.getLongVersion()     // Catch:{ all -> 0x0110 }
            int r26 = r15.getType()     // Catch:{ all -> 0x0110 }
            android.content.pm.VersionedPackage r27 = r15.getDeclaringPackage()     // Catch:{ all -> 0x0110 }
            java.util.List r28 = r1.getPackagesUsingSharedLibraryLPr(r15, r4, r2)     // Catch:{ all -> 0x0110 }
            java.util.List r3 = r15.getDependencies()     // Catch:{ all -> 0x0110 }
            if (r3 != 0) goto L_0x00d4
            r29 = 0
            goto L_0x00df
        L_0x00d4:
            java.util.ArrayList r3 = new java.util.ArrayList     // Catch:{ all -> 0x0110 }
            java.util.List r6 = r15.getDependencies()     // Catch:{ all -> 0x0110 }
            r3.<init>(r6)     // Catch:{ all -> 0x0110 }
            r29 = r3
        L_0x00df:
            r19 = r0
            r19.<init>(r20, r21, r22, r23, r24, r26, r27, r28, r29)     // Catch:{ all -> 0x0110 }
            if (r14 != 0) goto L_0x00ec
            java.util.ArrayList r3 = new java.util.ArrayList     // Catch:{ all -> 0x0110 }
            r3.<init>()     // Catch:{ all -> 0x0110 }
            r14 = r3
        L_0x00ec:
            r14.add(r0)     // Catch:{ all -> 0x0110 }
        L_0x00ef:
            int r13 = r13 + 1
            r3 = 0
            r6 = 67108864(0x4000000, float:1.5046328E-36)
            goto L_0x007e
        L_0x00f5:
            r0 = move-exception
            android.os.Binder.restoreCallingIdentity(r16)     // Catch:{ all -> 0x0110 }
            throw r0     // Catch:{ all -> 0x0110 }
        L_0x00fa:
            r0 = r14
        L_0x00fb:
            int r10 = r10 + 1
            r3 = 0
            r6 = 67108864(0x4000000, float:1.5046328E-36)
            goto L_0x006a
        L_0x0102:
            if (r0 == 0) goto L_0x010c
            android.content.pm.ParceledListSlice r3 = new android.content.pm.ParceledListSlice     // Catch:{ all -> 0x0110 }
            r3.<init>(r0)     // Catch:{ all -> 0x0110 }
            r18 = r3
            goto L_0x010e
        L_0x010c:
            r18 = 0
        L_0x010e:
            monitor-exit(r8)     // Catch:{ all -> 0x0110 }
            return r18
        L_0x0110:
            r0 = move-exception
            monitor-exit(r8)     // Catch:{ all -> 0x0110 }
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.getSharedLibraries(java.lang.String, int, int):android.content.pm.ParceledListSlice");
    }

    /* Debug info: failed to restart local var, previous not found, register: 30 */
    public ParceledListSlice<SharedLibraryInfo> getDeclaredSharedLibraries(String packageName, int flags, int userId) {
        ParceledListSlice<SharedLibraryInfo> parceledListSlice;
        PackageManagerService packageManagerService = this;
        String str = packageName;
        int i = flags;
        int i2 = userId;
        packageManagerService.mContext.enforceCallingOrSelfPermission("android.permission.ACCESS_SHARED_LIBRARIES", "getDeclaredSharedLibraries");
        int callingUid = Binder.getCallingUid();
        packageManagerService.mPermissionManager.enforceCrossUserPermission(callingUid, userId, true, false, "getDeclaredSharedLibraries");
        Preconditions.checkNotNull(str, "packageName cannot be null");
        Preconditions.checkArgumentNonnegative(i2, "userId must be >= 0");
        ArrayList arrayList = null;
        if (!sUserManager.exists(i2) || packageManagerService.getInstantAppPackageName(callingUid) != null) {
            return null;
        }
        synchronized (packageManagerService.mPackages) {
            List<SharedLibraryInfo> result = null;
            int libraryCount = packageManagerService.mSharedLibraries.size();
            int i3 = 0;
            while (i3 < libraryCount) {
                LongSparseArray<SharedLibraryInfo> versionedLibrary = packageManagerService.mSharedLibraries.valueAt(i3);
                if (versionedLibrary != null) {
                    int versionCount = versionedLibrary.size();
                    int j = 0;
                    List<SharedLibraryInfo> result2 = result;
                    while (j < versionCount) {
                        SharedLibraryInfo libraryInfo = versionedLibrary.valueAt(j);
                        VersionedPackage declaringPackage = libraryInfo.getDeclaringPackage();
                        if (Objects.equals(declaringPackage.getPackageName(), str)) {
                            long identity = Binder.clearCallingIdentity();
                            try {
                                if (packageManagerService.getPackageInfoVersioned(declaringPackage, 67108864 | i, i2) == null) {
                                    Binder.restoreCallingIdentity(identity);
                                } else {
                                    Binder.restoreCallingIdentity(identity);
                                    String path = libraryInfo.getPath();
                                    String packageName2 = libraryInfo.getPackageName();
                                    List allCodePaths = libraryInfo.getAllCodePaths();
                                    String name = libraryInfo.getName();
                                    long longVersion = libraryInfo.getLongVersion();
                                    int type = libraryInfo.getType();
                                    VersionedPackage declaringPackage2 = libraryInfo.getDeclaringPackage();
                                    List<VersionedPackage> packagesUsingSharedLibraryLPr = packageManagerService.getPackagesUsingSharedLibraryLPr(libraryInfo, i, i2);
                                    if (libraryInfo.getDependencies() != null) {
                                        arrayList = new ArrayList(libraryInfo.getDependencies());
                                    }
                                    SharedLibraryInfo sharedLibraryInfo = new SharedLibraryInfo(path, packageName2, allCodePaths, name, longVersion, type, declaringPackage2, packagesUsingSharedLibraryLPr, arrayList);
                                    if (result2 == null) {
                                        result2 = new ArrayList<>();
                                    }
                                    result2.add(sharedLibraryInfo);
                                }
                            } catch (Throwable th) {
                                Throwable th2 = th;
                                Binder.restoreCallingIdentity(identity);
                                throw th2;
                            }
                        }
                        j++;
                        arrayList = null;
                        packageManagerService = this;
                    }
                    result = result2;
                }
                i3++;
                arrayList = null;
                packageManagerService = this;
            }
            parceledListSlice = result != null ? new ParceledListSlice<>(result) : null;
        }
        return parceledListSlice;
    }

    @GuardedBy({"mPackages"})
    private List<VersionedPackage> getPackagesUsingSharedLibraryLPr(SharedLibraryInfo libInfo, int flags, int userId) {
        List<VersionedPackage> versionedPackages = null;
        int packageCount = this.mSettings.mPackages.size();
        for (int i = 0; i < packageCount; i++) {
            PackageSetting ps = this.mSettings.mPackages.valueAt(i);
            if (ps != null && ps.readUserState(userId).isAvailable(flags)) {
                String libName = libInfo.getName();
                if (libInfo.isStatic()) {
                    int libIdx = ArrayUtils.indexOf(ps.usesStaticLibraries, libName);
                    if (libIdx >= 0 && ps.usesStaticLibrariesVersions[libIdx] == libInfo.getLongVersion()) {
                        if (versionedPackages == null) {
                            versionedPackages = new ArrayList<>();
                        }
                        String dependentPackageName = ps.name;
                        if (ps.pkg != null && ps.pkg.applicationInfo.isStaticSharedLibrary()) {
                            dependentPackageName = ps.pkg.manifestPackageName;
                        }
                        versionedPackages.add(new VersionedPackage(dependentPackageName, ps.versionCode));
                    }
                } else if (ps.pkg != null && (ArrayUtils.contains(ps.pkg.usesLibraries, libName) || ArrayUtils.contains(ps.pkg.usesOptionalLibraries, libName))) {
                    if (versionedPackages == null) {
                        versionedPackages = new ArrayList<>();
                    }
                    versionedPackages.add(new VersionedPackage(ps.name, ps.versionCode));
                }
            }
        }
        return versionedPackages;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:24:0x006a, code lost:
        return null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName r12, int r13, int r14) {
        /*
            r11 = this;
            com.android.server.pm.UserManagerService r0 = sUserManager
            boolean r0 = r0.exists(r14)
            r1 = 0
            if (r0 != 0) goto L_0x000a
            return r1
        L_0x000a:
            int r0 = android.os.Binder.getCallingUid()
            int r13 = r11.updateFlagsForComponent(r13, r14, r12)
            com.android.server.pm.permission.PermissionManagerServiceInternal r2 = r11.mPermissionManager
            r5 = 0
            r6 = 0
            java.lang.String r7 = "get service info"
            r3 = r0
            r4 = r14
            r2.enforceCrossUserPermission(r3, r4, r5, r6, r7)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r8 = r11.mPackages
            monitor-enter(r8)
            com.android.server.pm.ComponentResolver r2 = r11.mComponentResolver     // Catch:{ all -> 0x006b }
            android.content.pm.PackageParser$Service r2 = r2.getService(r12)     // Catch:{ all -> 0x006b }
            r9 = r2
            boolean r2 = miui.securityspace.XSpaceUserHandle.isXSpaceUserCalling()     // Catch:{ all -> 0x006b }
            if (r2 == 0) goto L_0x0031
            r2 = 4202496(0x402000, float:5.888951E-39)
            r13 = r13 | r2
        L_0x0031:
            if (r9 == 0) goto L_0x0069
            com.android.server.pm.Settings r2 = r11.mSettings     // Catch:{ all -> 0x006b }
            android.content.pm.ServiceInfo r3 = r9.info     // Catch:{ all -> 0x006b }
            boolean r2 = r2.isEnabledAndMatchLPr(r3, r13, r14)     // Catch:{ all -> 0x006b }
            if (r2 == 0) goto L_0x0069
            com.android.server.pm.Settings r2 = r11.mSettings     // Catch:{ all -> 0x006b }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r2 = r2.mPackages     // Catch:{ all -> 0x006b }
            java.lang.String r3 = r12.getPackageName()     // Catch:{ all -> 0x006b }
            java.lang.Object r2 = r2.get(r3)     // Catch:{ all -> 0x006b }
            com.android.server.pm.PackageSetting r2 = (com.android.server.pm.PackageSetting) r2     // Catch:{ all -> 0x006b }
            r10 = r2
            if (r10 != 0) goto L_0x0050
            monitor-exit(r8)     // Catch:{ all -> 0x006b }
            return r1
        L_0x0050:
            r6 = 3
            r2 = r11
            r3 = r10
            r4 = r0
            r5 = r12
            r7 = r14
            boolean r2 = r2.filterAppAccessLPr(r3, r4, r5, r6, r7)     // Catch:{ all -> 0x006b }
            if (r2 == 0) goto L_0x005e
            monitor-exit(r8)     // Catch:{ all -> 0x006b }
            return r1
        L_0x005e:
            android.content.pm.PackageUserState r1 = r10.readUserState(r14)     // Catch:{ all -> 0x006b }
            android.content.pm.ServiceInfo r1 = android.content.pm.PackageParser.generateServiceInfo(r9, r13, r1, r14)     // Catch:{ all -> 0x006b }
            monitor-exit(r8)     // Catch:{ all -> 0x006b }
            return r1
        L_0x0069:
            monitor-exit(r8)     // Catch:{ all -> 0x006b }
            return r1
        L_0x006b:
            r1 = move-exception
            monitor-exit(r8)     // Catch:{ all -> 0x006b }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.getServiceInfo(android.content.ComponentName, int, int):android.content.pm.ServiceInfo");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:22:0x0060, code lost:
        return null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName r12, int r13, int r14) {
        /*
            r11 = this;
            com.android.server.pm.UserManagerService r0 = sUserManager
            boolean r0 = r0.exists(r14)
            r1 = 0
            if (r0 != 0) goto L_0x000a
            return r1
        L_0x000a:
            int r0 = android.os.Binder.getCallingUid()
            int r13 = r11.updateFlagsForComponent(r13, r14, r12)
            com.android.server.pm.permission.PermissionManagerServiceInternal r2 = r11.mPermissionManager
            r5 = 0
            r6 = 0
            java.lang.String r7 = "get provider info"
            r3 = r0
            r4 = r14
            r2.enforceCrossUserPermission(r3, r4, r5, r6, r7)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r8 = r11.mPackages
            monitor-enter(r8)
            com.android.server.pm.ComponentResolver r2 = r11.mComponentResolver     // Catch:{ all -> 0x0061 }
            android.content.pm.PackageParser$Provider r2 = r2.getProvider(r12)     // Catch:{ all -> 0x0061 }
            r9 = r2
            if (r9 == 0) goto L_0x005f
            com.android.server.pm.Settings r2 = r11.mSettings     // Catch:{ all -> 0x0061 }
            android.content.pm.ProviderInfo r3 = r9.info     // Catch:{ all -> 0x0061 }
            boolean r2 = r2.isEnabledAndMatchLPr(r3, r13, r14)     // Catch:{ all -> 0x0061 }
            if (r2 == 0) goto L_0x005f
            com.android.server.pm.Settings r2 = r11.mSettings     // Catch:{ all -> 0x0061 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r2 = r2.mPackages     // Catch:{ all -> 0x0061 }
            java.lang.String r3 = r12.getPackageName()     // Catch:{ all -> 0x0061 }
            java.lang.Object r2 = r2.get(r3)     // Catch:{ all -> 0x0061 }
            com.android.server.pm.PackageSetting r2 = (com.android.server.pm.PackageSetting) r2     // Catch:{ all -> 0x0061 }
            r10 = r2
            if (r10 != 0) goto L_0x0046
            monitor-exit(r8)     // Catch:{ all -> 0x0061 }
            return r1
        L_0x0046:
            r6 = 4
            r2 = r11
            r3 = r10
            r4 = r0
            r5 = r12
            r7 = r14
            boolean r2 = r2.filterAppAccessLPr(r3, r4, r5, r6, r7)     // Catch:{ all -> 0x0061 }
            if (r2 == 0) goto L_0x0054
            monitor-exit(r8)     // Catch:{ all -> 0x0061 }
            return r1
        L_0x0054:
            android.content.pm.PackageUserState r1 = r10.readUserState(r14)     // Catch:{ all -> 0x0061 }
            android.content.pm.ProviderInfo r1 = android.content.pm.PackageParser.generateProviderInfo(r9, r13, r1, r14)     // Catch:{ all -> 0x0061 }
            monitor-exit(r8)     // Catch:{ all -> 0x0061 }
            return r1
        L_0x005f:
            monitor-exit(r8)     // Catch:{ all -> 0x0061 }
            return r1
        L_0x0061:
            r1 = move-exception
            monitor-exit(r8)     // Catch:{ all -> 0x0061 }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.getProviderInfo(android.content.ComponentName, int, int):android.content.pm.ProviderInfo");
    }

    public ModuleInfo getModuleInfo(String packageName, int flags) {
        return this.mModuleInfoProvider.getModuleInfo(packageName, flags);
    }

    public List<ModuleInfo> getInstalledModules(int flags) {
        return this.mModuleInfoProvider.getInstalledModules(flags);
    }

    public String[] getSystemSharedLibraryNames() {
        synchronized (this.mPackages) {
            Set<String> libs = null;
            int libCount = this.mSharedLibraries.size();
            for (int i = 0; i < libCount; i++) {
                LongSparseArray<SharedLibraryInfo> versionedLib = this.mSharedLibraries.valueAt(i);
                if (versionedLib != null) {
                    int versionCount = versionedLib.size();
                    int j = 0;
                    while (true) {
                        if (j >= versionCount) {
                            break;
                        }
                        SharedLibraryInfo libraryInfo = versionedLib.valueAt(j);
                        if (!libraryInfo.isStatic()) {
                            if (libs == null) {
                                libs = new ArraySet<>();
                            }
                            libs.add(libraryInfo.getName());
                        } else {
                            PackageSetting ps = this.mSettings.getPackageLPr(libraryInfo.getPackageName());
                            if (ps == null || filterSharedLibPackageLPr(ps, Binder.getCallingUid(), UserHandle.getUserId(Binder.getCallingUid()), BroadcastQueueInjector.FLAG_IMMUTABLE)) {
                                j++;
                            } else {
                                if (libs == null) {
                                    libs = new ArraySet<>();
                                }
                                libs.add(libraryInfo.getName());
                            }
                        }
                    }
                }
            }
            if (libs == null) {
                return null;
            }
            String[] libsArray = new String[libs.size()];
            libs.toArray(libsArray);
            return libsArray;
        }
    }

    public String getServicesSystemSharedLibraryPackageName() {
        String str;
        synchronized (this.mPackages) {
            str = this.mServicesSystemSharedLibraryPackageName;
        }
        return str;
    }

    public String getSharedSystemSharedLibraryPackageName() {
        String str;
        synchronized (this.mPackages) {
            str = this.mSharedSystemSharedLibraryPackageName;
        }
        return str;
    }

    @GuardedBy({"mPackages"})
    private void updateSequenceNumberLP(PackageSetting pkgSetting, int[] userList) {
        for (int i = userList.length - 1; i >= 0; i--) {
            int userId = userList[i];
            if (!pkgSetting.getInstantApp(userId)) {
                SparseArray<String> changedPackages = this.mChangedPackages.get(userId);
                if (changedPackages == null) {
                    changedPackages = new SparseArray<>();
                    this.mChangedPackages.put(userId, changedPackages);
                }
                Map<String, Integer> sequenceNumbers = this.mChangedPackagesSequenceNumbers.get(userId);
                if (sequenceNumbers == null) {
                    sequenceNumbers = new HashMap<>();
                    this.mChangedPackagesSequenceNumbers.put(userId, sequenceNumbers);
                }
                Integer sequenceNumber = sequenceNumbers.get(pkgSetting.name);
                if (sequenceNumber != null) {
                    changedPackages.remove(sequenceNumber.intValue());
                }
                changedPackages.put(this.mChangedPackagesSequenceNumber, pkgSetting.name);
                sequenceNumbers.put(pkgSetting.name, Integer.valueOf(this.mChangedPackagesSequenceNumber));
            }
        }
        this.mChangedPackagesSequenceNumber++;
    }

    public ChangedPackages getChangedPackages(int sequenceNumber, int userId) {
        ChangedPackages changedPackages = null;
        if (getInstantAppPackageName(Binder.getCallingUid()) != null) {
            return null;
        }
        synchronized (this.mPackages) {
            if (sequenceNumber >= this.mChangedPackagesSequenceNumber) {
                return null;
            }
            SparseArray<String> changedPackages2 = this.mChangedPackages.get(userId);
            if (changedPackages2 == null) {
                return null;
            }
            List<String> packageNames = new ArrayList<>(this.mChangedPackagesSequenceNumber - sequenceNumber);
            for (int i = sequenceNumber; i < this.mChangedPackagesSequenceNumber; i++) {
                String packageName = changedPackages2.get(i);
                if (packageName != null) {
                    packageNames.add(packageName);
                }
            }
            if (packageNames.isEmpty() == 0) {
                changedPackages = new ChangedPackages(this.mChangedPackagesSequenceNumber, packageNames);
            }
            return changedPackages;
        }
    }

    public ParceledListSlice<FeatureInfo> getSystemAvailableFeatures() {
        ArrayList<FeatureInfo> res;
        synchronized (this.mAvailableFeatures) {
            res = new ArrayList<>(this.mAvailableFeatures.size() + 1);
            res.addAll(this.mAvailableFeatures.values());
        }
        FeatureInfo fi = new FeatureInfo();
        fi.reqGlEsVersion = SystemProperties.getInt("ro.opengles.version", 0);
        res.add(fi);
        return new ParceledListSlice<>(res);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:11:0x0016, code lost:
        return r2;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean hasSystemFeature(java.lang.String r5, int r6) {
        /*
            r4 = this;
            android.util.ArrayMap<java.lang.String, android.content.pm.FeatureInfo> r0 = r4.mAvailableFeatures
            monitor-enter(r0)
            android.util.ArrayMap<java.lang.String, android.content.pm.FeatureInfo> r1 = r4.mAvailableFeatures     // Catch:{ all -> 0x0017 }
            java.lang.Object r1 = r1.get(r5)     // Catch:{ all -> 0x0017 }
            android.content.pm.FeatureInfo r1 = (android.content.pm.FeatureInfo) r1     // Catch:{ all -> 0x0017 }
            r2 = 0
            if (r1 != 0) goto L_0x0010
            monitor-exit(r0)     // Catch:{ all -> 0x0017 }
            return r2
        L_0x0010:
            int r3 = r1.version     // Catch:{ all -> 0x0017 }
            if (r3 < r6) goto L_0x0015
            r2 = 1
        L_0x0015:
            monitor-exit(r0)     // Catch:{ all -> 0x0017 }
            return r2
        L_0x0017:
            r1 = move-exception
            monitor-exit(r0)     // Catch:{ all -> 0x0017 }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.hasSystemFeature(java.lang.String, int):boolean");
    }

    public int checkPermission(String permName, String pkgName, int userId) {
        synchronized (this.mPackages) {
            if (this.mCheckPermissionDelegate == null) {
                int checkPermissionImpl = checkPermissionImpl(permName, pkgName, userId);
                return checkPermissionImpl;
            }
            PackageManagerInternal.CheckPermissionDelegate checkPermissionDelegate = this.mCheckPermissionDelegate;
            return checkPermissionDelegate.checkPermission(permName, pkgName, userId, new TriFunction() {
                public final Object apply(Object obj, Object obj2, Object obj3) {
                    return Integer.valueOf(PackageManagerService.this.checkPermissionImpl((String) obj, (String) obj2, ((Integer) obj3).intValue()));
                }
            });
        }
    }

    /* access modifiers changed from: private */
    public int checkPermissionImpl(String permName, String pkgName, int userId) {
        return this.mPermissionManager.checkPermission(permName, pkgName, getCallingUid(), userId);
    }

    public int checkUidPermission(String permName, int uid) {
        synchronized (this.mPackages) {
            if (this.mCheckPermissionDelegate == null) {
                int checkUidPermissionImpl = checkUidPermissionImpl(permName, uid);
                return checkUidPermissionImpl;
            }
            PackageManagerInternal.CheckPermissionDelegate checkPermissionDelegate = this.mCheckPermissionDelegate;
            return checkPermissionDelegate.checkUidPermission(permName, uid, new BiFunction() {
                public final Object apply(Object obj, Object obj2) {
                    return Integer.valueOf(PackageManagerService.this.checkUidPermissionImpl((String) obj, ((Integer) obj2).intValue()));
                }
            });
        }
    }

    /* access modifiers changed from: private */
    public int checkUidPermissionImpl(String permName, int uid) {
        int checkUidPermission;
        synchronized (this.mPackages) {
            String[] packageNames = getPackagesForUid(uid);
            PackageParser.Package pkg = null;
            int N = packageNames == null ? 0 : packageNames.length;
            int i = 0;
            while (pkg == null && i < N) {
                pkg = this.mPackages.get(packageNames[i]);
                i++;
            }
            checkUidPermission = this.mPermissionManager.checkUidPermission(permName, pkg, uid, getCallingUid());
        }
        return checkUidPermission;
    }

    public boolean isPermissionRevokedByPolicy(String permission, String packageName, int userId) {
        if (UserHandle.getCallingUserId() != userId) {
            Context context = this.mContext;
            context.enforceCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "isPermissionRevokedByPolicy for user " + userId);
        }
        boolean z = false;
        if (checkPermission(permission, packageName, userId) == 0) {
            return false;
        }
        int callingUid = Binder.getCallingUid();
        if (getInstantAppPackageName(callingUid) != null) {
            if (!isCallerSameApp(packageName, callingUid)) {
                return false;
            }
        } else if (isInstantApp(packageName, userId)) {
            return false;
        }
        long identity = Binder.clearCallingIdentity();
        try {
            if ((getPermissionFlags(permission, packageName, userId) & 4) != 0) {
                z = true;
            }
            return z;
        } finally {
            Binder.restoreCallingIdentity(identity);
        }
    }

    public String getPermissionControllerPackageName() {
        String str;
        synchronized (this.mPackages) {
            str = this.mRequiredPermissionControllerPackage;
        }
        return str;
    }

    /* access modifiers changed from: package-private */
    public String getPackageInstallerPackageName() {
        String str;
        synchronized (this.mPackages) {
            str = this.mRequiredInstallerPackage;
        }
        return str;
    }

    private boolean addDynamicPermission(PermissionInfo info, final boolean async) {
        return this.mPermissionManager.addDynamicPermission(info, async, getCallingUid(), new PermissionManagerServiceInternal.PermissionCallback() {
            public void onPermissionChanged() {
                if (!async) {
                    PackageManagerService.this.mSettings.writeLPr();
                } else {
                    PackageManagerService.this.scheduleWriteSettingsLocked();
                }
            }
        });
    }

    public boolean addPermission(PermissionInfo info) {
        boolean addDynamicPermission;
        synchronized (this.mPackages) {
            addDynamicPermission = addDynamicPermission(info, false);
        }
        return addDynamicPermission;
    }

    public boolean addPermissionAsync(PermissionInfo info) {
        boolean addDynamicPermission;
        synchronized (this.mPackages) {
            addDynamicPermission = addDynamicPermission(info, true);
        }
        return addDynamicPermission;
    }

    public void removePermission(String permName) {
        this.mPermissionManager.removeDynamicPermission(permName, getCallingUid(), this.mPermissionCallback);
    }

    public void grantRuntimePermission(String packageName, String permName, int userId) {
        boolean overridePolicy = checkUidPermission("android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY", Binder.getCallingUid()) == 0;
        this.mPermissionManager.grantRuntimePermission(permName, packageName, overridePolicy, getCallingUid(), userId, this.mPermissionCallback);
        PackageManagerServiceInjector.onAppRuntimePermStateModified(permName, packageName, true, getCallingUid(), userId, overridePolicy);
    }

    public void revokeRuntimePermissionNotKill(String packageName, String permName, int userId) {
        boolean overridePolicy = checkUidPermission("android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY", Binder.getCallingUid()) == 0;
        this.mPermissionManager.revokeRuntimePermissionNotKill(permName, packageName, overridePolicy, userId, this.mPermissionCallback);
        PackageManagerServiceInjector.onAppRuntimePermStateModified(permName, packageName, false, getCallingUid(), userId, overridePolicy);
    }

    public void revokeRuntimePermission(String packageName, String permName, int userId) {
        boolean overridePolicy = checkUidPermission("android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY", Binder.getCallingUid()) == 0;
        this.mPermissionManager.revokeRuntimePermission(permName, packageName, overridePolicy, userId, this.mPermissionCallback);
        PackageManagerServiceInjector.onAppRuntimePermStateModified(permName, packageName, false, getCallingUid(), userId, overridePolicy);
    }

    public void resetRuntimePermissions() {
        this.mContext.enforceCallingOrSelfPermission("android.permission.REVOKE_RUNTIME_PERMISSIONS", "revokeRuntimePermission");
        int callingUid = Binder.getCallingUid();
        if (!(callingUid == 1000 || callingUid == 0)) {
            this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "resetRuntimePermissions");
        }
        synchronized (this.mPackages) {
            this.mPermissionManager.updateAllPermissions(StorageManager.UUID_PRIVATE_INTERNAL, false, this.mPackages.values(), this.mPermissionCallback);
            for (int userId : UserManagerService.getInstance().getUserIds()) {
                int packageCount = this.mPackages.size();
                for (int i = 0; i < packageCount; i++) {
                    PackageParser.Package pkg = this.mPackages.valueAt(i);
                    if (pkg.mExtras instanceof PackageSetting) {
                        resetUserChangesToRuntimePermissionsAndFlagsLPw((PackageSetting) pkg.mExtras, userId);
                    }
                }
            }
        }
    }

    public int getPermissionFlags(String permName, String packageName, int userId) {
        return this.mPermissionManager.getPermissionFlags(permName, packageName, getCallingUid(), userId);
    }

    /* Debug info: failed to restart local var, previous not found, register: 12 */
    public void updatePermissionFlags(String permName, String packageName, int flagMask, int flagValues, boolean checkAdjustPolicyFlagPermission, int userId) {
        boolean overridePolicy;
        int callingUid = getCallingUid();
        boolean overridePolicy2 = false;
        if (callingUid == 1000 || callingUid == 0) {
            overridePolicy = false;
        } else {
            long callingIdentity = Binder.clearCallingIdentity();
            if ((flagMask & 4) != 0) {
                if (checkAdjustPolicyFlagPermission) {
                    try {
                        this.mContext.enforceCallingOrSelfPermission("android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY", "Need android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY to change policy flags");
                    } catch (Throwable th) {
                        Binder.restoreCallingIdentity(callingIdentity);
                        throw th;
                    }
                } else if (!hasTargetSdkInUidLowerThan(callingUid, 29)) {
                    throw new IllegalArgumentException("android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY needs  to be checked for packages targeting 29 or later when changing policy flags");
                }
                overridePolicy2 = true;
            }
            Binder.restoreCallingIdentity(callingIdentity);
            overridePolicy = overridePolicy2;
        }
        this.mPermissionManager.updatePermissionFlags(permName, packageName, flagMask, flagValues, callingUid, userId, overridePolicy, this.mPermissionCallback);
        PackageManagerServiceInjector.onAppPermFlagsModified(permName, packageName, flagMask, flagValues, callingUid, userId, overridePolicy);
    }

    public void updatePermissionFlagsForAllApps(int flagMask, int flagValues, int userId) {
        synchronized (this.mPackages) {
            if (this.mPermissionManager.updatePermissionFlagsForAllApps(flagMask, flagValues, getCallingUid(), userId, this.mPackages.values(), this.mPermissionCallback)) {
                this.mSettings.writeRuntimePermissionsForUserLPr(userId, false);
            }
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 10 */
    public List<String> getWhitelistedRestrictedPermissions(String packageName, int whitelistFlags, int userId) {
        Preconditions.checkNotNull(packageName);
        Preconditions.checkFlagsArgument(whitelistFlags, 7);
        Preconditions.checkArgumentNonNegative((float) userId, (String) null);
        if (UserHandle.getCallingUserId() != userId) {
            this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS", "getWhitelistedRestrictedPermissions for user " + userId);
        }
        synchronized (this.mPackages) {
            PackageSetting packageSetting = this.mSettings.mPackages.get(packageName);
            if (packageSetting == null) {
                Slog.w(TAG, "Unknown package: " + packageName);
                return null;
            }
            PackageParser.Package pkg = packageSetting.pkg;
            boolean isCallerInstallerOnRecord = false;
            boolean isCallerPrivileged = this.mContext.checkCallingOrSelfPermission("android.permission.WHITELIST_RESTRICTED_PERMISSIONS") == 0;
            PackageSetting installerPackageSetting = this.mSettings.mPackages.get(packageSetting.installerPackageName);
            if (installerPackageSetting != null && UserHandle.isSameApp(installerPackageSetting.appId, Binder.getCallingUid())) {
                isCallerInstallerOnRecord = true;
            }
            if ((whitelistFlags & 1) != 0) {
                if (!isCallerPrivileged) {
                    throw new SecurityException("Querying system whitelist requires android.permission.WHITELIST_RESTRICTED_PERMISSIONS");
                }
            }
            if ((whitelistFlags & 6) != 0 && !isCallerPrivileged) {
                if (!isCallerInstallerOnRecord) {
                    throw new SecurityException("Querying upgrade or installer whitelist requires being installer on record or android.permission.WHITELIST_RESTRICTED_PERMISSIONS");
                }
            }
            if (filterAppAccessLPr(packageSetting, Binder.getCallingUid(), UserHandle.getCallingUserId())) {
                return null;
            }
            long identity = Binder.clearCallingIdentity();
            try {
                return this.mPermissionManager.getWhitelistedRestrictedPermissions(pkg, whitelistFlags, userId);
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }
    }

    public boolean addWhitelistedRestrictedPermission(String packageName, String permission, int whitelistFlags, int userId) {
        Preconditions.checkNotNull(permission);
        if (!checkExistsAndEnforceCannotModifyImmutablyRestrictedPermission(permission)) {
            return false;
        }
        List<String> permissions = getWhitelistedRestrictedPermissions(packageName, whitelistFlags, userId);
        if (permissions == null) {
            permissions = new ArrayList<>(1);
        }
        if (permissions.indexOf(permission) >= 0) {
            return false;
        }
        permissions.add(permission);
        return setWhitelistedRestrictedPermissions(packageName, permissions, whitelistFlags, userId);
    }

    /* Debug info: failed to restart local var, previous not found, register: 5 */
    private boolean checkExistsAndEnforceCannotModifyImmutablyRestrictedPermission(String permission) {
        synchronized (this.mPackages) {
            BasePermission bp = this.mPermissionManager.getPermissionTEMP(permission);
            if (bp == null) {
                Slog.w(TAG, "No such permissions: " + permission);
                return false;
            }
            if (bp.isHardOrSoftRestricted() && bp.isImmutablyRestricted()) {
                if (this.mContext.checkCallingOrSelfPermission("android.permission.WHITELIST_RESTRICTED_PERMISSIONS") != 0) {
                    throw new SecurityException("Cannot modify whitelisting of an immutably restricted permission: " + permission);
                }
            }
            return true;
        }
    }

    public boolean removeWhitelistedRestrictedPermission(String packageName, String permission, int whitelistFlags, int userId) {
        List<String> permissions;
        Preconditions.checkNotNull(permission);
        if (checkExistsAndEnforceCannotModifyImmutablyRestrictedPermission(permission) && (permissions = getWhitelistedRestrictedPermissions(packageName, whitelistFlags, userId)) != null && permissions.remove(permission)) {
            return setWhitelistedRestrictedPermissions(packageName, permissions, whitelistFlags, userId);
        }
        return false;
    }

    /* Debug info: failed to restart local var, previous not found, register: 16 */
    /* JADX WARNING: Code restructure failed: missing block: B:56:0x00ed, code lost:
        return true;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private boolean setWhitelistedRestrictedPermissions(java.lang.String r17, java.util.List<java.lang.String> r18, int r19, int r20) {
        /*
            r16 = this;
            r1 = r16
            r2 = r17
            r10 = r18
            r11 = r19
            r12 = r20
            com.android.internal.util.Preconditions.checkNotNull(r17)
            r0 = 7
            com.android.internal.util.Preconditions.checkFlagsArgument(r11, r0)
            int r0 = java.lang.Integer.bitCount(r19)
            r3 = 0
            r13 = 1
            if (r0 != r13) goto L_0x001b
            r0 = r13
            goto L_0x001c
        L_0x001b:
            r0 = r3
        L_0x001c:
            com.android.internal.util.Preconditions.checkArgument(r0)
            float r0 = (float) r12
            r4 = 0
            com.android.internal.util.Preconditions.checkArgumentNonNegative(r0, r4)
            int r0 = android.os.UserHandle.getCallingUserId()
            if (r0 == r12) goto L_0x0043
            android.content.Context r0 = r1.mContext
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            r4.<init>()
            java.lang.String r5 = "setWhitelistedRestrictedPermissions for user "
            r4.append(r5)
            r4.append(r12)
            java.lang.String r4 = r4.toString()
            java.lang.String r5 = "android.permission.INTERACT_ACROSS_USERS"
            r0.enforceCallingOrSelfPermission(r5, r4)
        L_0x0043:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r5 = r1.mPackages
            monitor-enter(r5)
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0133 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r0 = r0.mPackages     // Catch:{ all -> 0x0133 }
            java.lang.Object r0 = r0.get(r2)     // Catch:{ all -> 0x0133 }
            com.android.server.pm.PackageSetting r0 = (com.android.server.pm.PackageSetting) r0     // Catch:{ all -> 0x0133 }
            if (r0 != 0) goto L_0x006a
            java.lang.String r4 = "PackageManager"
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ all -> 0x0133 }
            r6.<init>()     // Catch:{ all -> 0x0133 }
            java.lang.String r7 = "Unknown package: "
            r6.append(r7)     // Catch:{ all -> 0x0133 }
            r6.append(r2)     // Catch:{ all -> 0x0133 }
            java.lang.String r6 = r6.toString()     // Catch:{ all -> 0x0133 }
            android.util.Slog.w(r4, r6)     // Catch:{ all -> 0x0133 }
            monitor-exit(r5)     // Catch:{ all -> 0x0133 }
            return r3
        L_0x006a:
            android.content.pm.PackageParser$Package r4 = r0.pkg     // Catch:{ all -> 0x0133 }
            android.content.Context r6 = r1.mContext     // Catch:{ all -> 0x0133 }
            java.lang.String r7 = "android.permission.WHITELIST_RESTRICTED_PERMISSIONS"
            int r6 = r6.checkCallingOrSelfPermission(r7)     // Catch:{ all -> 0x0133 }
            if (r6 != 0) goto L_0x0078
            r6 = r13
            goto L_0x0079
        L_0x0078:
            r6 = r3
        L_0x0079:
            com.android.server.pm.Settings r7 = r1.mSettings     // Catch:{ all -> 0x0133 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r7 = r7.mPackages     // Catch:{ all -> 0x0133 }
            java.lang.String r8 = r0.installerPackageName     // Catch:{ all -> 0x0133 }
            java.lang.Object r7 = r7.get(r8)     // Catch:{ all -> 0x0133 }
            com.android.server.pm.PackageSetting r7 = (com.android.server.pm.PackageSetting) r7     // Catch:{ all -> 0x0133 }
            if (r7 == 0) goto L_0x0095
            int r8 = r7.appId     // Catch:{ all -> 0x0133 }
            int r9 = android.os.Binder.getCallingUid()     // Catch:{ all -> 0x0133 }
            boolean r8 = android.os.UserHandle.isSameApp(r8, r9)     // Catch:{ all -> 0x0133 }
            if (r8 == 0) goto L_0x0095
            r8 = r13
            goto L_0x0096
        L_0x0095:
            r8 = r3
        L_0x0096:
            r9 = r11 & 1
            if (r9 == 0) goto L_0x00a5
            if (r6 == 0) goto L_0x009d
            goto L_0x00a5
        L_0x009d:
            java.lang.SecurityException r3 = new java.lang.SecurityException     // Catch:{ all -> 0x0133 }
            java.lang.String r9 = "Modifying system whitelist requires android.permission.WHITELIST_RESTRICTED_PERMISSIONS"
            r3.<init>(r9)     // Catch:{ all -> 0x0133 }
            throw r3     // Catch:{ all -> 0x0133 }
        L_0x00a5:
            r9 = r11 & 4
            if (r9 == 0) goto L_0x00ee
            if (r6 != 0) goto L_0x00b6
            if (r8 == 0) goto L_0x00ae
            goto L_0x00b6
        L_0x00ae:
            java.lang.SecurityException r3 = new java.lang.SecurityException     // Catch:{ all -> 0x0133 }
            java.lang.String r9 = "Modifying upgrade whitelist requires being installer on record or android.permission.WHITELIST_RESTRICTED_PERMISSIONS"
            r3.<init>(r9)     // Catch:{ all -> 0x0133 }
            throw r3     // Catch:{ all -> 0x0133 }
        L_0x00b6:
            java.util.List r9 = r1.getWhitelistedRestrictedPermissions(r2, r11, r12)     // Catch:{ all -> 0x0133 }
            if (r10 == 0) goto L_0x00e4
            boolean r14 = r18.isEmpty()     // Catch:{ all -> 0x0133 }
            if (r14 == 0) goto L_0x00c3
            goto L_0x00e4
        L_0x00c3:
            int r14 = r18.size()     // Catch:{ all -> 0x0133 }
            r15 = 0
        L_0x00c8:
            if (r15 >= r14) goto L_0x00ee
            if (r9 == 0) goto L_0x00d6
            java.lang.Object r3 = r10.get(r15)     // Catch:{ all -> 0x0133 }
            boolean r3 = r9.contains(r3)     // Catch:{ all -> 0x0133 }
            if (r3 != 0) goto L_0x00d8
        L_0x00d6:
            if (r6 == 0) goto L_0x00dc
        L_0x00d8:
            int r15 = r15 + 1
            r3 = 0
            goto L_0x00c8
        L_0x00dc:
            java.lang.SecurityException r3 = new java.lang.SecurityException     // Catch:{ all -> 0x0133 }
            java.lang.String r13 = "Adding to upgrade whitelist requiresandroid.permission.WHITELIST_RESTRICTED_PERMISSIONS"
            r3.<init>(r13)     // Catch:{ all -> 0x0133 }
            throw r3     // Catch:{ all -> 0x0133 }
        L_0x00e4:
            if (r9 == 0) goto L_0x00ec
            boolean r3 = r9.isEmpty()     // Catch:{ all -> 0x0133 }
            if (r3 == 0) goto L_0x00ee
        L_0x00ec:
            monitor-exit(r5)     // Catch:{ all -> 0x0133 }
            return r13
        L_0x00ee:
            r3 = r11 & 2
            if (r3 == 0) goto L_0x00ff
            if (r6 != 0) goto L_0x00ff
            if (r8 == 0) goto L_0x00f7
            goto L_0x00ff
        L_0x00f7:
            java.lang.SecurityException r3 = new java.lang.SecurityException     // Catch:{ all -> 0x0133 }
            java.lang.String r9 = "Modifying installer whitelist requires being installer on record or android.permission.WHITELIST_RESTRICTED_PERMISSIONS"
            r3.<init>(r9)     // Catch:{ all -> 0x0133 }
            throw r3     // Catch:{ all -> 0x0133 }
        L_0x00ff:
            int r3 = android.os.Binder.getCallingUid()     // Catch:{ all -> 0x0133 }
            int r9 = android.os.UserHandle.getCallingUserId()     // Catch:{ all -> 0x0133 }
            boolean r3 = r1.filterAppAccessLPr(r0, r3, r9)     // Catch:{ all -> 0x0133 }
            if (r3 == 0) goto L_0x0110
            monitor-exit(r5)     // Catch:{ all -> 0x0133 }
            r3 = 0
            return r3
        L_0x0110:
            monitor-exit(r5)     // Catch:{ all -> 0x0133 }
            long r14 = android.os.Binder.clearCallingIdentity()
            com.android.server.pm.permission.PermissionManagerServiceInternal r3 = r1.mPermissionManager     // Catch:{ all -> 0x012e }
            int[] r5 = new int[r13]     // Catch:{ all -> 0x012e }
            r0 = 0
            r5[r0] = r12     // Catch:{ all -> 0x012e }
            int r7 = android.os.Process.myUid()     // Catch:{ all -> 0x012e }
            com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r9 = r1.mPermissionCallback     // Catch:{ all -> 0x012e }
            r6 = r18
            r8 = r19
            r3.setWhitelistedRestrictedPermissions(r4, r5, r6, r7, r8, r9)     // Catch:{ all -> 0x012e }
            android.os.Binder.restoreCallingIdentity(r14)
            return r13
        L_0x012e:
            r0 = move-exception
            android.os.Binder.restoreCallingIdentity(r14)
            throw r0
        L_0x0133:
            r0 = move-exception
            monitor-exit(r5)     // Catch:{ all -> 0x0133 }
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.setWhitelistedRestrictedPermissions(java.lang.String, java.util.List, int, int):boolean");
    }

    /* JADX INFO: finally extract failed */
    public boolean shouldShowRequestPermissionRationale(String permissionName, String packageName, int userId) {
        if (UserHandle.getCallingUserId() != userId) {
            Context context = this.mContext;
            context.enforceCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "canShowRequestPermissionRationale for user " + userId);
        }
        if (UserHandle.getAppId(getCallingUid()) != UserHandle.getAppId(getPackageUid(packageName, 268435456, userId)) || checkPermission(permissionName, packageName, userId) == 0) {
            return false;
        }
        long identity = Binder.clearCallingIdentity();
        try {
            int flags = getPermissionFlags(permissionName, packageName, userId);
            Binder.restoreCallingIdentity(identity);
            if ((flags & 22) == 0 && (flags & 1) != 0) {
                return true;
            }
            return false;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(identity);
            throw th;
        }
    }

    public void addOnPermissionsChangeListener(IOnPermissionsChangeListener listener) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS", "addOnPermissionsChangeListener");
        synchronized (this.mPackages) {
            this.mOnPermissionChangeListeners.addListenerLocked(listener);
        }
    }

    public void removeOnPermissionsChangeListener(IOnPermissionsChangeListener listener) {
        if (getInstantAppPackageName(Binder.getCallingUid()) == null) {
            synchronized (this.mPackages) {
                this.mOnPermissionChangeListeners.removeListenerLocked(listener);
            }
            return;
        }
        throw new SecurityException("Instant applications don't have access to this method");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:17:0x0031, code lost:
        return true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:19:0x0033, code lost:
        return false;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean isProtectedBroadcast(java.lang.String r4) {
        /*
            r3 = this;
            android.util.ArraySet<java.lang.String> r0 = r3.mProtectedBroadcasts
            monitor-enter(r0)
            android.util.ArraySet<java.lang.String> r1 = r3.mProtectedBroadcasts     // Catch:{ all -> 0x0035 }
            boolean r1 = r1.contains(r4)     // Catch:{ all -> 0x0035 }
            r2 = 1
            if (r1 == 0) goto L_0x000e
            monitor-exit(r0)     // Catch:{ all -> 0x0035 }
            return r2
        L_0x000e:
            if (r4 == 0) goto L_0x0032
            java.lang.String r1 = "android.net.netmon.lingerExpired"
            boolean r1 = r4.startsWith(r1)     // Catch:{ all -> 0x0035 }
            if (r1 != 0) goto L_0x0030
            java.lang.String r1 = "com.android.server.sip.SipWakeupTimer"
            boolean r1 = r4.startsWith(r1)     // Catch:{ all -> 0x0035 }
            if (r1 != 0) goto L_0x0030
            java.lang.String r1 = "com.android.internal.telephony.data-reconnect"
            boolean r1 = r4.startsWith(r1)     // Catch:{ all -> 0x0035 }
            if (r1 != 0) goto L_0x0030
            java.lang.String r1 = "android.net.netmon.launchCaptivePortalApp"
            boolean r1 = r4.startsWith(r1)     // Catch:{ all -> 0x0035 }
            if (r1 == 0) goto L_0x0032
        L_0x0030:
            monitor-exit(r0)     // Catch:{ all -> 0x0035 }
            return r2
        L_0x0032:
            monitor-exit(r0)     // Catch:{ all -> 0x0035 }
            r0 = 0
            return r0
        L_0x0035:
            r1 = move-exception
            monitor-exit(r0)     // Catch:{ all -> 0x0035 }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.isProtectedBroadcast(java.lang.String):boolean");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:20:0x004d, code lost:
        return -4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:0x004f, code lost:
        return -4;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public int checkSignatures(java.lang.String r10, java.lang.String r11) {
        /*
            r9 = this;
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r9.mPackages
            monitor-enter(r0)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r9.mPackages     // Catch:{ all -> 0x0050 }
            java.lang.Object r1 = r1.get(r10)     // Catch:{ all -> 0x0050 }
            android.content.pm.PackageParser$Package r1 = (android.content.pm.PackageParser.Package) r1     // Catch:{ all -> 0x0050 }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r9.mPackages     // Catch:{ all -> 0x0050 }
            java.lang.Object r2 = r2.get(r11)     // Catch:{ all -> 0x0050 }
            android.content.pm.PackageParser$Package r2 = (android.content.pm.PackageParser.Package) r2     // Catch:{ all -> 0x0050 }
            r3 = -4
            if (r1 == 0) goto L_0x004e
            java.lang.Object r4 = r1.mExtras     // Catch:{ all -> 0x0050 }
            if (r4 == 0) goto L_0x004e
            if (r2 == 0) goto L_0x004e
            java.lang.Object r4 = r2.mExtras     // Catch:{ all -> 0x0050 }
            if (r4 != 0) goto L_0x0021
            goto L_0x004e
        L_0x0021:
            int r4 = android.os.Binder.getCallingUid()     // Catch:{ all -> 0x0050 }
            int r5 = android.os.UserHandle.getUserId(r4)     // Catch:{ all -> 0x0050 }
            java.lang.Object r6 = r1.mExtras     // Catch:{ all -> 0x0050 }
            com.android.server.pm.PackageSetting r6 = (com.android.server.pm.PackageSetting) r6     // Catch:{ all -> 0x0050 }
            java.lang.Object r7 = r2.mExtras     // Catch:{ all -> 0x0050 }
            com.android.server.pm.PackageSetting r7 = (com.android.server.pm.PackageSetting) r7     // Catch:{ all -> 0x0050 }
            boolean r8 = r9.filterAppAccessLPr(r6, r4, r5)     // Catch:{ all -> 0x0050 }
            if (r8 != 0) goto L_0x004c
            boolean r8 = r9.filterAppAccessLPr(r7, r4, r5)     // Catch:{ all -> 0x0050 }
            if (r8 == 0) goto L_0x003e
            goto L_0x004c
        L_0x003e:
            android.content.pm.PackageParser$SigningDetails r3 = r1.mSigningDetails     // Catch:{ all -> 0x0050 }
            android.content.pm.Signature[] r3 = r3.signatures     // Catch:{ all -> 0x0050 }
            android.content.pm.PackageParser$SigningDetails r8 = r2.mSigningDetails     // Catch:{ all -> 0x0050 }
            android.content.pm.Signature[] r8 = r8.signatures     // Catch:{ all -> 0x0050 }
            int r3 = com.android.server.pm.PackageManagerServiceUtils.compareSignatures(r3, r8)     // Catch:{ all -> 0x0050 }
            monitor-exit(r0)     // Catch:{ all -> 0x0050 }
            return r3
        L_0x004c:
            monitor-exit(r0)     // Catch:{ all -> 0x0050 }
            return r3
        L_0x004e:
            monitor-exit(r0)     // Catch:{ all -> 0x0050 }
            return r3
        L_0x0050:
            r1 = move-exception
            monitor-exit(r0)     // Catch:{ all -> 0x0050 }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.checkSignatures(java.lang.String, java.lang.String):int");
    }

    public int checkUidSignatures(int uid1, int uid2) {
        Signature[] s1;
        Signature[] s2;
        int callingUid = Binder.getCallingUid();
        int callingUserId = UserHandle.getUserId(callingUid);
        boolean isCallerInstantApp = getInstantAppPackageName(callingUid) != null;
        int appId1 = UserHandle.getAppId(uid1);
        int appId2 = UserHandle.getAppId(uid2);
        synchronized (this.mPackages) {
            Object obj = this.mSettings.getSettingLPr(appId1);
            if (obj == null) {
                return -4;
            }
            if (obj instanceof SharedUserSetting) {
                if (isCallerInstantApp) {
                    return -4;
                }
                s1 = ((SharedUserSetting) obj).signatures.mSigningDetails.signatures;
            } else if (!(obj instanceof PackageSetting)) {
                return -4;
            } else {
                PackageSetting ps = (PackageSetting) obj;
                if (filterAppAccessLPr(ps, callingUid, callingUserId)) {
                    return -4;
                }
                s1 = ps.signatures.mSigningDetails.signatures;
            }
            Object obj2 = this.mSettings.getSettingLPr(appId2);
            if (obj2 == null) {
                return -4;
            }
            if (obj2 instanceof SharedUserSetting) {
                if (isCallerInstantApp) {
                    return -4;
                }
                s2 = ((SharedUserSetting) obj2).signatures.mSigningDetails.signatures;
            } else if (!(obj2 instanceof PackageSetting)) {
                return -4;
            } else {
                PackageSetting ps2 = (PackageSetting) obj2;
                if (filterAppAccessLPr(ps2, callingUid, callingUserId)) {
                    return -4;
                }
                s2 = ps2.signatures.mSigningDetails.signatures;
            }
            int compareSignatures = PackageManagerServiceUtils.compareSignatures(s1, s2);
            return compareSignatures;
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:24:0x003f, code lost:
        return false;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean hasSigningCertificate(java.lang.String r8, byte[] r9, int r10) {
        /*
            r7 = this;
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r7.mPackages
            monitor-enter(r0)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r7.mPackages     // Catch:{ all -> 0x0040 }
            java.lang.Object r1 = r1.get(r8)     // Catch:{ all -> 0x0040 }
            android.content.pm.PackageParser$Package r1 = (android.content.pm.PackageParser.Package) r1     // Catch:{ all -> 0x0040 }
            r2 = 0
            if (r1 == 0) goto L_0x003e
            java.lang.Object r3 = r1.mExtras     // Catch:{ all -> 0x0040 }
            if (r3 != 0) goto L_0x0013
            goto L_0x003e
        L_0x0013:
            int r3 = android.os.Binder.getCallingUid()     // Catch:{ all -> 0x0040 }
            int r4 = android.os.UserHandle.getUserId(r3)     // Catch:{ all -> 0x0040 }
            java.lang.Object r5 = r1.mExtras     // Catch:{ all -> 0x0040 }
            com.android.server.pm.PackageSetting r5 = (com.android.server.pm.PackageSetting) r5     // Catch:{ all -> 0x0040 }
            boolean r6 = r7.filterAppAccessLPr(r5, r3, r4)     // Catch:{ all -> 0x0040 }
            if (r6 == 0) goto L_0x0027
            monitor-exit(r0)     // Catch:{ all -> 0x0040 }
            return r2
        L_0x0027:
            if (r10 == 0) goto L_0x0036
            r6 = 1
            if (r10 == r6) goto L_0x002e
            monitor-exit(r0)     // Catch:{ all -> 0x0040 }
            return r2
        L_0x002e:
            android.content.pm.PackageParser$SigningDetails r2 = r1.mSigningDetails     // Catch:{ all -> 0x0040 }
            boolean r2 = r2.hasSha256Certificate(r9)     // Catch:{ all -> 0x0040 }
            monitor-exit(r0)     // Catch:{ all -> 0x0040 }
            return r2
        L_0x0036:
            android.content.pm.PackageParser$SigningDetails r2 = r1.mSigningDetails     // Catch:{ all -> 0x0040 }
            boolean r2 = r2.hasCertificate(r9)     // Catch:{ all -> 0x0040 }
            monitor-exit(r0)     // Catch:{ all -> 0x0040 }
            return r2
        L_0x003e:
            monitor-exit(r0)     // Catch:{ all -> 0x0040 }
            return r2
        L_0x0040:
            r1 = move-exception
            monitor-exit(r0)     // Catch:{ all -> 0x0040 }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.hasSigningCertificate(java.lang.String, byte[], int):boolean");
    }

    public boolean hasUidSigningCertificate(int uid, byte[] certificate, int type) {
        PackageParser.SigningDetails signingDetails;
        int callingUid = Binder.getCallingUid();
        int callingUserId = UserHandle.getUserId(callingUid);
        int appId = UserHandle.getAppId(uid);
        synchronized (this.mPackages) {
            Object obj = this.mSettings.getSettingLPr(appId);
            if (obj == null) {
                return false;
            }
            if (obj instanceof SharedUserSetting) {
                if (getInstantAppPackageName(callingUid) != null) {
                    return false;
                }
                signingDetails = ((SharedUserSetting) obj).signatures.mSigningDetails;
            } else if (!(obj instanceof PackageSetting)) {
                return false;
            } else {
                PackageSetting ps = (PackageSetting) obj;
                if (filterAppAccessLPr(ps, callingUid, callingUserId)) {
                    return false;
                }
                signingDetails = ps.signatures.mSigningDetails;
            }
            if (type == 0) {
                boolean hasCertificate = signingDetails.hasCertificate(certificate);
                return hasCertificate;
            } else if (type != 1) {
                return false;
            } else {
                boolean hasSha256Certificate = signingDetails.hasSha256Certificate(certificate);
                return hasSha256Certificate;
            }
        }
    }

    /* access modifiers changed from: private */
    public void killUid(int appId, int userId, String reason) {
        long identity = Binder.clearCallingIdentity();
        try {
            IActivityManager am = ActivityManager.getService();
            if (am != null) {
                try {
                    am.killUid(appId, userId, reason);
                } catch (RemoteException e) {
                }
            }
        } finally {
            Binder.restoreCallingIdentity(identity);
        }
    }

    private boolean isCompatSignatureUpdateNeeded(PackageParser.Package scannedPkg) {
        return isCompatSignatureUpdateNeeded(getSettingsVersionForPackage(scannedPkg));
    }

    private static boolean isCompatSignatureUpdateNeeded(Settings.VersionInfo ver) {
        return ver.databaseVersion < 2;
    }

    private boolean isRecoverSignatureUpdateNeeded(PackageParser.Package scannedPkg) {
        return isRecoverSignatureUpdateNeeded(getSettingsVersionForPackage(scannedPkg));
    }

    private static boolean isRecoverSignatureUpdateNeeded(Settings.VersionInfo ver) {
        return ver.databaseVersion < 3;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:33:0x008b, code lost:
        return r4;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public java.util.List<java.lang.String> getAllPackages() {
        /*
            r11 = this;
            int r0 = android.os.Binder.getCallingUid()
            int r1 = android.os.UserHandle.getUserId(r0)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r11.mPackages
            monitor-enter(r2)
            boolean r3 = r11.canViewInstantApps(r0, r1)     // Catch:{ all -> 0x008c }
            if (r3 == 0) goto L_0x001e
            java.util.ArrayList r3 = new java.util.ArrayList     // Catch:{ all -> 0x008c }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r4 = r11.mPackages     // Catch:{ all -> 0x008c }
            java.util.Set r4 = r4.keySet()     // Catch:{ all -> 0x008c }
            r3.<init>(r4)     // Catch:{ all -> 0x008c }
            monitor-exit(r2)     // Catch:{ all -> 0x008c }
            return r3
        L_0x001e:
            java.lang.String r3 = r11.getInstantAppPackageName(r0)     // Catch:{ all -> 0x008c }
            java.util.ArrayList r4 = new java.util.ArrayList     // Catch:{ all -> 0x008c }
            r4.<init>()     // Catch:{ all -> 0x008c }
            if (r3 == 0) goto L_0x004c
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r5 = r11.mPackages     // Catch:{ all -> 0x008c }
            java.util.Collection r5 = r5.values()     // Catch:{ all -> 0x008c }
            java.util.Iterator r5 = r5.iterator()     // Catch:{ all -> 0x008c }
        L_0x0033:
            boolean r6 = r5.hasNext()     // Catch:{ all -> 0x008c }
            if (r6 == 0) goto L_0x004b
            java.lang.Object r6 = r5.next()     // Catch:{ all -> 0x008c }
            android.content.pm.PackageParser$Package r6 = (android.content.pm.PackageParser.Package) r6     // Catch:{ all -> 0x008c }
            boolean r7 = r6.visibleToInstantApps     // Catch:{ all -> 0x008c }
            if (r7 != 0) goto L_0x0044
            goto L_0x0033
        L_0x0044:
            java.lang.String r7 = r6.packageName     // Catch:{ all -> 0x008c }
            r4.add(r7)     // Catch:{ all -> 0x008c }
            goto L_0x0033
        L_0x004b:
            goto L_0x008a
        L_0x004c:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r5 = r11.mPackages     // Catch:{ all -> 0x008c }
            java.util.Collection r5 = r5.values()     // Catch:{ all -> 0x008c }
            java.util.Iterator r5 = r5.iterator()     // Catch:{ all -> 0x008c }
        L_0x0056:
            boolean r6 = r5.hasNext()     // Catch:{ all -> 0x008c }
            if (r6 == 0) goto L_0x008a
            java.lang.Object r6 = r5.next()     // Catch:{ all -> 0x008c }
            android.content.pm.PackageParser$Package r6 = (android.content.pm.PackageParser.Package) r6     // Catch:{ all -> 0x008c }
            java.lang.Object r7 = r6.mExtras     // Catch:{ all -> 0x008c }
            if (r7 == 0) goto L_0x006b
            java.lang.Object r7 = r6.mExtras     // Catch:{ all -> 0x008c }
            com.android.server.pm.PackageSetting r7 = (com.android.server.pm.PackageSetting) r7     // Catch:{ all -> 0x008c }
            goto L_0x006c
        L_0x006b:
            r7 = 0
        L_0x006c:
            if (r7 == 0) goto L_0x0083
            boolean r8 = r7.getInstantApp(r1)     // Catch:{ all -> 0x008c }
            if (r8 == 0) goto L_0x0083
            com.android.server.pm.InstantAppRegistry r8 = r11.mInstantAppRegistry     // Catch:{ all -> 0x008c }
            int r9 = android.os.UserHandle.getAppId(r0)     // Catch:{ all -> 0x008c }
            int r10 = r7.appId     // Catch:{ all -> 0x008c }
            boolean r8 = r8.isInstantAccessGranted(r1, r9, r10)     // Catch:{ all -> 0x008c }
            if (r8 != 0) goto L_0x0083
            goto L_0x0056
        L_0x0083:
            java.lang.String r8 = r6.packageName     // Catch:{ all -> 0x008c }
            r4.add(r8)     // Catch:{ all -> 0x008c }
            goto L_0x0056
        L_0x008a:
            monitor-exit(r2)     // Catch:{ all -> 0x008c }
            return r4
        L_0x008c:
            r3 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x008c }
            throw r3
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.getAllPackages():java.util.List");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:32:0x007f, code lost:
        return null;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public java.lang.String[] getPackagesForUid(int r15) {
        /*
            r14 = this;
            int r0 = android.os.Binder.getCallingUid()
            java.lang.String r1 = r14.getInstantAppPackageName(r0)
            r2 = 1
            r3 = 0
            if (r1 == 0) goto L_0x000e
            r1 = r2
            goto L_0x000f
        L_0x000e:
            r1 = r3
        L_0x000f:
            int r4 = android.os.UserHandle.getUserId(r15)
            int r5 = android.os.UserHandle.getAppId(r15)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r6 = r14.mPackages
            monitor-enter(r6)
            com.android.server.pm.Settings r7 = r14.mSettings     // Catch:{ all -> 0x0080 }
            com.android.server.pm.SettingBase r7 = r7.getSettingLPr(r5)     // Catch:{ all -> 0x0080 }
            boolean r8 = r7 instanceof com.android.server.pm.SharedUserSetting     // Catch:{ all -> 0x0080 }
            r9 = 0
            if (r8 == 0) goto L_0x0063
            if (r1 == 0) goto L_0x0029
            monitor-exit(r6)     // Catch:{ all -> 0x0080 }
            return r9
        L_0x0029:
            r2 = r7
            com.android.server.pm.SharedUserSetting r2 = (com.android.server.pm.SharedUserSetting) r2     // Catch:{ all -> 0x0080 }
            android.util.ArraySet<com.android.server.pm.PackageSetting> r8 = r2.packages     // Catch:{ all -> 0x0080 }
            int r8 = r8.size()     // Catch:{ all -> 0x0080 }
            java.lang.String[] r9 = new java.lang.String[r8]     // Catch:{ all -> 0x0080 }
            android.util.ArraySet<com.android.server.pm.PackageSetting> r10 = r2.packages     // Catch:{ all -> 0x0080 }
            java.util.Iterator r10 = r10.iterator()     // Catch:{ all -> 0x0080 }
        L_0x003b:
            boolean r11 = r10.hasNext()     // Catch:{ all -> 0x0080 }
            if (r11 == 0) goto L_0x0061
            java.lang.Object r11 = r10.next()     // Catch:{ all -> 0x0080 }
            com.android.server.pm.PackageSetting r11 = (com.android.server.pm.PackageSetting) r11     // Catch:{ all -> 0x0080 }
            boolean r12 = r11.getInstalled(r4)     // Catch:{ all -> 0x0080 }
            if (r12 == 0) goto L_0x0055
            int r12 = r3 + 1
            java.lang.String r13 = r11.name     // Catch:{ all -> 0x0080 }
            r9[r3] = r13     // Catch:{ all -> 0x0080 }
            r3 = r12
            goto L_0x0060
        L_0x0055:
            java.lang.Class<java.lang.String> r12 = java.lang.String.class
            r13 = r9[r3]     // Catch:{ all -> 0x0080 }
            java.lang.Object[] r12 = com.android.internal.util.ArrayUtils.removeElement(r12, r9, r13)     // Catch:{ all -> 0x0080 }
            java.lang.String[] r12 = (java.lang.String[]) r12     // Catch:{ all -> 0x0080 }
            r9 = r12
        L_0x0060:
            goto L_0x003b
        L_0x0061:
            monitor-exit(r6)     // Catch:{ all -> 0x0080 }
            return r9
        L_0x0063:
            boolean r8 = r7 instanceof com.android.server.pm.PackageSetting     // Catch:{ all -> 0x0080 }
            if (r8 == 0) goto L_0x007e
            r8 = r7
            com.android.server.pm.PackageSetting r8 = (com.android.server.pm.PackageSetting) r8     // Catch:{ all -> 0x0080 }
            boolean r10 = r8.getInstalled(r4)     // Catch:{ all -> 0x0080 }
            if (r10 == 0) goto L_0x007e
            boolean r10 = r14.filterAppAccessLPr(r8, r0, r4)     // Catch:{ all -> 0x0080 }
            if (r10 != 0) goto L_0x007e
            java.lang.String[] r2 = new java.lang.String[r2]     // Catch:{ all -> 0x0080 }
            java.lang.String r9 = r8.name     // Catch:{ all -> 0x0080 }
            r2[r3] = r9     // Catch:{ all -> 0x0080 }
            monitor-exit(r6)     // Catch:{ all -> 0x0080 }
            return r2
        L_0x007e:
            monitor-exit(r6)     // Catch:{ all -> 0x0080 }
            return r9
        L_0x0080:
            r2 = move-exception
            monitor-exit(r6)     // Catch:{ all -> 0x0080 }
            throw r2
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.getPackagesForUid(int):java.lang.String[]");
    }

    public String getNameForUid(int uid) {
        int callingUid = Binder.getCallingUid();
        if (getInstantAppPackageName(callingUid) != null) {
            return null;
        }
        int appId = UserHandle.getAppId(uid);
        synchronized (this.mPackages) {
            SettingBase settingLPr = this.mSettings.getSettingLPr(appId);
            if (settingLPr instanceof SharedUserSetting) {
                SharedUserSetting sus = (SharedUserSetting) settingLPr;
                String str = sus.name + ":" + sus.userId;
                return str;
            } else if (!(settingLPr instanceof PackageSetting)) {
                return null;
            } else {
                PackageSetting ps = (PackageSetting) settingLPr;
                if (filterAppAccessLPr(ps, callingUid, UserHandle.getUserId(callingUid))) {
                    return null;
                }
                String str2 = ps.name;
                return str2;
            }
        }
    }

    public String[] getNamesForUids(int[] uids) {
        if (uids == null || uids.length == 0) {
            return null;
        }
        int callingUid = Binder.getCallingUid();
        if (getInstantAppPackageName(callingUid) != null) {
            return null;
        }
        String[] names = new String[uids.length];
        synchronized (this.mPackages) {
            for (int i = uids.length - 1; i >= 0; i--) {
                SettingBase settingLPr = this.mSettings.getSettingLPr(UserHandle.getAppId(uids[i]));
                if (settingLPr instanceof SharedUserSetting) {
                    names[i] = "shared:" + ((SharedUserSetting) settingLPr).name;
                } else if (settingLPr instanceof PackageSetting) {
                    PackageSetting ps = (PackageSetting) settingLPr;
                    if (filterAppAccessLPr(ps, callingUid, UserHandle.getUserId(callingUid))) {
                        names[i] = null;
                    } else {
                        names[i] = ps.name;
                    }
                } else {
                    names[i] = null;
                }
            }
        }
        return names;
    }

    public int getUidForSharedUser(String sharedUserName) {
        if (getInstantAppPackageName(Binder.getCallingUid()) != null || sharedUserName == null) {
            return -1;
        }
        synchronized (this.mPackages) {
            try {
                SharedUserSetting suid = this.mSettings.getSharedUserLPw(sharedUserName, 0, 0, false);
                if (suid != null) {
                    int i = suid.userId;
                    return i;
                }
            } catch (PackageManagerException e) {
            } catch (Throwable th) {
                throw th;
            }
        }
        return -1;
    }

    public int getFlagsForUid(int uid) {
        int callingUid = Binder.getCallingUid();
        if (getInstantAppPackageName(callingUid) != null) {
            return 0;
        }
        int appId = UserHandle.getAppId(uid);
        synchronized (this.mPackages) {
            SettingBase settingLPr = this.mSettings.getSettingLPr(appId);
            if (settingLPr instanceof SharedUserSetting) {
                int i = ((SharedUserSetting) settingLPr).pkgFlags;
                return i;
            } else if (!(settingLPr instanceof PackageSetting)) {
                return 0;
            } else {
                PackageSetting ps = (PackageSetting) settingLPr;
                if (filterAppAccessLPr(ps, callingUid, UserHandle.getUserId(callingUid))) {
                    return 0;
                }
                int i2 = ps.pkgFlags;
                return i2;
            }
        }
    }

    public int getPrivateFlagsForUid(int uid) {
        int callingUid = Binder.getCallingUid();
        if (getInstantAppPackageName(callingUid) != null) {
            return 0;
        }
        int appId = UserHandle.getAppId(uid);
        synchronized (this.mPackages) {
            SettingBase settingLPr = this.mSettings.getSettingLPr(appId);
            if (settingLPr instanceof SharedUserSetting) {
                int i = ((SharedUserSetting) settingLPr).pkgPrivateFlags;
                return i;
            } else if (!(settingLPr instanceof PackageSetting)) {
                return 0;
            } else {
                PackageSetting ps = (PackageSetting) settingLPr;
                if (filterAppAccessLPr(ps, callingUid, UserHandle.getUserId(callingUid))) {
                    return 0;
                }
                int i2 = ps.pkgPrivateFlags;
                return i2;
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:23:0x004b, code lost:
        return false;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean isUidPrivileged(int r8) {
        /*
            r7 = this;
            int r0 = android.os.Binder.getCallingUid()
            java.lang.String r0 = r7.getInstantAppPackageName(r0)
            r1 = 0
            if (r0 == 0) goto L_0x000c
            return r1
        L_0x000c:
            int r0 = android.os.UserHandle.getAppId(r8)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r7.mPackages
            monitor-enter(r2)
            com.android.server.pm.Settings r3 = r7.mSettings     // Catch:{ all -> 0x004c }
            com.android.server.pm.SettingBase r3 = r3.getSettingLPr(r0)     // Catch:{ all -> 0x004c }
            boolean r4 = r3 instanceof com.android.server.pm.SharedUserSetting     // Catch:{ all -> 0x004c }
            if (r4 == 0) goto L_0x003c
            r4 = r3
            com.android.server.pm.SharedUserSetting r4 = (com.android.server.pm.SharedUserSetting) r4     // Catch:{ all -> 0x004c }
            android.util.ArraySet<com.android.server.pm.PackageSetting> r5 = r4.packages     // Catch:{ all -> 0x004c }
            java.util.Iterator r5 = r5.iterator()     // Catch:{ all -> 0x004c }
        L_0x0026:
            boolean r6 = r5.hasNext()     // Catch:{ all -> 0x004c }
            if (r6 == 0) goto L_0x003b
            java.lang.Object r6 = r5.next()     // Catch:{ all -> 0x004c }
            com.android.server.pm.PackageSetting r6 = (com.android.server.pm.PackageSetting) r6     // Catch:{ all -> 0x004c }
            boolean r6 = r6.isPrivileged()     // Catch:{ all -> 0x004c }
            if (r6 == 0) goto L_0x0026
            r1 = 1
            monitor-exit(r2)     // Catch:{ all -> 0x004c }
            return r1
        L_0x003b:
            goto L_0x0049
        L_0x003c:
            boolean r4 = r3 instanceof com.android.server.pm.PackageSetting     // Catch:{ all -> 0x004c }
            if (r4 == 0) goto L_0x0049
            r1 = r3
            com.android.server.pm.PackageSetting r1 = (com.android.server.pm.PackageSetting) r1     // Catch:{ all -> 0x004c }
            boolean r4 = r1.isPrivileged()     // Catch:{ all -> 0x004c }
            monitor-exit(r2)     // Catch:{ all -> 0x004c }
            return r4
        L_0x0049:
            monitor-exit(r2)     // Catch:{ all -> 0x004c }
            return r1
        L_0x004c:
            r1 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x004c }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.isUidPrivileged(int):boolean");
    }

    public String[] getAppOpPermissionPackages(String permName) {
        return this.mPermissionManager.getAppOpPermissionPackages(permName);
    }

    public ResolveInfo resolveIntent(Intent intent, String resolvedType, int flags, int userId) {
        return resolveIntentInternal(intent, resolvedType, flags, userId, false, Binder.getCallingUid());
    }

    /* access modifiers changed from: private */
    public ResolveInfo resolveIntentInternal(Intent intent, String resolvedType, int flags, int userId, boolean resolveForStart, int filterCallingUid) {
        try {
            Trace.traceBegin(262144, "resolveIntent");
            if (!sUserManager.exists(userId)) {
                Trace.traceEnd(262144);
                return null;
            }
            int callingUid = Binder.getCallingUid();
            int flags2 = updateFlagsForResolve(flags, userId, intent, filterCallingUid, resolveForStart);
            try {
                this.mPermissionManager.enforceCrossUserPermission(callingUid, userId, false, false, "resolve intent");
                Trace.traceBegin(262144, "queryIntentActivities");
                List<ResolveInfo> query = queryIntentActivitiesInternal(intent, resolvedType, flags2, filterCallingUid, userId, resolveForStart, true);
                Trace.traceEnd(262144);
                ResolveInfo bestChoice = chooseBestActivity(intent, resolvedType, flags2, query, userId);
                Trace.traceEnd(262144);
                return bestChoice;
            } catch (Throwable th) {
                th = th;
                Trace.traceEnd(262144);
                throw th;
            }
        } catch (Throwable th2) {
            th = th2;
            int i = flags;
            Trace.traceEnd(262144);
            throw th;
        }
    }

    public ResolveInfo findPersistentPreferredActivity(Intent intent, int userId) {
        ResolveInfo findPersistentPreferredActivityLP;
        if (!UserHandle.isSameApp(Binder.getCallingUid(), 1000)) {
            throw new SecurityException("findPersistentPreferredActivity can only be run by the system");
        } else if (!sUserManager.exists(userId)) {
            return null;
        } else {
            int callingUid = Binder.getCallingUid();
            Intent intent2 = updateIntentForResolve(intent);
            String resolvedType = intent2.resolveTypeIfNeeded(this.mContext.getContentResolver());
            int flags = updateFlagsForResolve(0, userId, intent2, callingUid, false);
            List<ResolveInfo> query = queryIntentActivitiesInternal(intent2, resolvedType, flags, userId);
            synchronized (this.mPackages) {
                findPersistentPreferredActivityLP = findPersistentPreferredActivityLP(intent2, resolvedType, flags, query, false, userId);
            }
            return findPersistentPreferredActivityLP;
        }
    }

    public void setLastChosenActivity(Intent intent, String resolvedType, int flags, IntentFilter filter, int match, ComponentName activity) {
        Intent intent2 = intent;
        if (getInstantAppPackageName(Binder.getCallingUid()) == null) {
            int userId = UserHandle.getCallingUserId();
            intent2.setComponent((ComponentName) null);
            findPreferredActivityNotLocked(intent, resolvedType, flags, queryIntentActivitiesInternal(intent2, resolvedType, flags, userId), 0, false, true, false, userId);
            addPreferredActivityInternal(filter, match, (ComponentName[]) null, activity, false, userId, "Setting last chosen");
        }
    }

    public ResolveInfo getLastChosenActivity(Intent intent, String resolvedType, int flags) {
        if (getInstantAppPackageName(Binder.getCallingUid()) != null) {
            return null;
        }
        int userId = UserHandle.getCallingUserId();
        return findPreferredActivityNotLocked(intent, resolvedType, flags, queryIntentActivitiesInternal(intent, resolvedType, flags, userId), 0, false, false, false, userId);
    }

    private boolean areWebInstantAppsDisabled(int userId) {
        return this.mWebInstantAppsDisabled.get(userId);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:51:0x00b8, code lost:
        return false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:58:0x00da, code lost:
        return false;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private boolean isInstantAppResolutionAllowed(android.content.Intent r17, java.util.List<android.content.pm.ResolveInfo> r18, int r19, boolean r20) {
        /*
            r16 = this;
            r1 = r16
            r2 = r18
            r3 = r19
            com.android.server.pm.InstantAppResolverConnection r0 = r1.mInstantAppResolverConnection
            r4 = 0
            if (r0 != 0) goto L_0x000c
            return r4
        L_0x000c:
            android.content.pm.ActivityInfo r0 = r1.mInstantAppInstallerActivity
            if (r0 != 0) goto L_0x0011
            return r4
        L_0x0011:
            android.content.ComponentName r0 = r17.getComponent()
            if (r0 == 0) goto L_0x0018
            return r4
        L_0x0018:
            int r0 = r17.getFlags()
            r0 = r0 & 512(0x200, float:7.175E-43)
            if (r0 == 0) goto L_0x0021
            return r4
        L_0x0021:
            if (r20 != 0) goto L_0x002a
            java.lang.String r0 = r17.getPackage()
            if (r0 == 0) goto L_0x002a
            return r4
        L_0x002a:
            boolean r0 = r17.isWebIntent()
            if (r0 != 0) goto L_0x0041
            if (r2 == 0) goto L_0x0038
            int r0 = r18.size()
            if (r0 != 0) goto L_0x0040
        L_0x0038:
            int r0 = r17.getFlags()
            r0 = r0 & 2048(0x800, float:2.87E-42)
            if (r0 != 0) goto L_0x005e
        L_0x0040:
            return r4
        L_0x0041:
            android.net.Uri r0 = r17.getData()
            if (r0 == 0) goto L_0x00e4
            android.net.Uri r0 = r17.getData()
            java.lang.String r0 = r0.getHost()
            boolean r0 = android.text.TextUtils.isEmpty(r0)
            if (r0 == 0) goto L_0x0057
            goto L_0x00e4
        L_0x0057:
            boolean r0 = r1.areWebInstantAppsDisabled(r3)
            if (r0 == 0) goto L_0x005e
            return r4
        L_0x005e:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r5 = r1.mPackages
            monitor-enter(r5)
            if (r2 != 0) goto L_0x0065
            r0 = r4
            goto L_0x0069
        L_0x0065:
            int r0 = r18.size()     // Catch:{ all -> 0x00e1 }
        L_0x0069:
            r6 = 0
        L_0x006a:
            if (r6 >= r0) goto L_0x00de
            java.lang.Object r7 = r2.get(r6)     // Catch:{ all -> 0x00e1 }
            android.content.pm.ResolveInfo r7 = (android.content.pm.ResolveInfo) r7     // Catch:{ all -> 0x00e1 }
            android.content.pm.ActivityInfo r8 = r7.activityInfo     // Catch:{ all -> 0x00e1 }
            java.lang.String r8 = r8.packageName     // Catch:{ all -> 0x00e1 }
            com.android.server.pm.Settings r9 = r1.mSettings     // Catch:{ all -> 0x00e1 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r9 = r9.mPackages     // Catch:{ all -> 0x00e1 }
            java.lang.Object r9 = r9.get(r8)     // Catch:{ all -> 0x00e1 }
            com.android.server.pm.PackageSetting r9 = (com.android.server.pm.PackageSetting) r9     // Catch:{ all -> 0x00e1 }
            if (r9 == 0) goto L_0x00db
            boolean r10 = r7.handleAllWebDataURI     // Catch:{ all -> 0x00e1 }
            if (r10 != 0) goto L_0x00b9
            long r10 = r1.getDomainVerificationStatusLPr(r9, r3)     // Catch:{ all -> 0x00e1 }
            r12 = 32
            long r12 = r10 >> r12
            int r12 = (int) r12     // Catch:{ all -> 0x00e1 }
            r13 = 2
            if (r12 == r13) goto L_0x0095
            r13 = 4
            if (r12 != r13) goto L_0x00b9
        L_0x0095:
            boolean r13 = DEBUG_INSTANT     // Catch:{ all -> 0x00e1 }
            if (r13 == 0) goto L_0x00b7
            java.lang.String r13 = "PackageManager"
            java.lang.StringBuilder r14 = new java.lang.StringBuilder     // Catch:{ all -> 0x00e1 }
            r14.<init>()     // Catch:{ all -> 0x00e1 }
            java.lang.String r15 = "DENY instant app; pkg: "
            r14.append(r15)     // Catch:{ all -> 0x00e1 }
            r14.append(r8)     // Catch:{ all -> 0x00e1 }
            java.lang.String r15 = ", status: "
            r14.append(r15)     // Catch:{ all -> 0x00e1 }
            r14.append(r12)     // Catch:{ all -> 0x00e1 }
            java.lang.String r14 = r14.toString()     // Catch:{ all -> 0x00e1 }
            android.util.Slog.v(r13, r14)     // Catch:{ all -> 0x00e1 }
        L_0x00b7:
            monitor-exit(r5)     // Catch:{ all -> 0x00e1 }
            return r4
        L_0x00b9:
            boolean r10 = r9.getInstantApp(r3)     // Catch:{ all -> 0x00e1 }
            if (r10 == 0) goto L_0x00db
            boolean r10 = DEBUG_INSTANT     // Catch:{ all -> 0x00e1 }
            if (r10 == 0) goto L_0x00d9
            java.lang.String r10 = "PackageManager"
            java.lang.StringBuilder r11 = new java.lang.StringBuilder     // Catch:{ all -> 0x00e1 }
            r11.<init>()     // Catch:{ all -> 0x00e1 }
            java.lang.String r12 = "DENY instant app installed; pkg: "
            r11.append(r12)     // Catch:{ all -> 0x00e1 }
            r11.append(r8)     // Catch:{ all -> 0x00e1 }
            java.lang.String r11 = r11.toString()     // Catch:{ all -> 0x00e1 }
            android.util.Slog.v(r10, r11)     // Catch:{ all -> 0x00e1 }
        L_0x00d9:
            monitor-exit(r5)     // Catch:{ all -> 0x00e1 }
            return r4
        L_0x00db:
            int r6 = r6 + 1
            goto L_0x006a
        L_0x00de:
            monitor-exit(r5)     // Catch:{ all -> 0x00e1 }
            r0 = 1
            return r0
        L_0x00e1:
            r0 = move-exception
            monitor-exit(r5)     // Catch:{ all -> 0x00e1 }
            throw r0
        L_0x00e4:
            return r4
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.isInstantAppResolutionAllowed(android.content.Intent, java.util.List, int, boolean):boolean");
    }

    /* access modifiers changed from: private */
    public void requestInstantAppResolutionPhaseTwo(AuxiliaryResolveInfo responseObj, Intent origIntent, String resolvedType, String callingPackage, Bundle verificationBundle, int userId) {
        this.mHandler.sendMessage(this.mHandler.obtainMessage(20, new InstantAppRequest(responseObj, origIntent, resolvedType, callingPackage, userId, verificationBundle, false)));
    }

    private ResolveInfo chooseBestActivity(Intent intent, String resolvedType, int flags, List<ResolveInfo> query, int userId) {
        boolean z;
        ResolveInfo ri;
        Intent intent2 = intent;
        List<ResolveInfo> list = query;
        int i = userId;
        if (list == null) {
            return null;
        }
        int N = query.size();
        if (N == 1) {
            if (intent.getComponent() != null || ((!"http".equals(intent.getScheme()) && !"https".equals(intent.getScheme())) || (ri = PackageManagerServiceInjector.checkMiuiIntent(this, intent, resolvedType, flags, query, userId)) == this.mResolveInfo)) {
                return list.get(0);
            }
            return ri;
        } else if (N <= 1) {
            return null;
        } else {
            boolean debug = (intent.getFlags() & 8) != 0;
            ResolveInfo r0 = list.get(0);
            ResolveInfo r1 = list.get(1);
            if (debug) {
                Slog.v(TAG, r0.activityInfo.name + "=" + r0.priority + " vs " + r1.activityInfo.name + "=" + r1.priority);
            }
            if (r0.priority != r1.priority || r0.preferredOrder != r1.preferredOrder) {
                ResolveInfo resolveInfo = r0;
            } else if (r0.isDefault != r1.isDefault) {
                ResolveInfo resolveInfo2 = r1;
                ResolveInfo resolveInfo3 = r0;
            } else {
                if (PackageManagerServiceInjector.canInterceptByMiAppStore(this, list)) {
                    Log.i(TAG, "Removing FLAG_ACTIVITY_NO_HISTORY flag for Intent {" + intent2.toShortString(true, true, true, false) + "}");
                    intent2.setFlags(intent.getFlags() & -1073741825);
                }
                ResolveInfo resolveInfo4 = r1;
                ResolveInfo resolveInfo5 = r0;
                ResolveInfo ri2 = findPreferredActivityNotLocked(intent, resolvedType, flags, query, r0.priority, true, false, debug, userId);
                if (ri2 != null) {
                    return ri2;
                }
                for (int i2 = 0; i2 < N; i2++) {
                    ResolveInfo ri3 = list.get(i2);
                    if (ri3.activityInfo.applicationInfo.isInstantApp()) {
                        if (((int) (getDomainVerificationStatusLPr(this.mSettings.mPackages.get(ri3.activityInfo.packageName), i) >> 32)) != 4) {
                            return ri3;
                        }
                    }
                }
                ResolveInfo ri4 = PackageManagerServiceInjector.checkMiuiIntent(this, intent, resolvedType, flags, query, userId);
                ResolveInfo resolveInfo6 = this.mResolveInfo;
                if (ri4 != resolveInfo6) {
                    return ri4;
                }
                ResolveInfo ri5 = new ResolveInfo(resolveInfo6);
                ri5.activityInfo = new ActivityInfo(ri5.activityInfo);
                ri5.activityInfo.labelRes = ResolverActivity.getLabelRes(intent.getAction());
                String intentPackage = intent.getPackage();
                if (TextUtils.isEmpty(intentPackage) || !allHavePackage(list, intentPackage)) {
                    z = true;
                } else {
                    ApplicationInfo appi = list.get(0).activityInfo.applicationInfo;
                    ri5.resolvePackageName = intentPackage;
                    if (userNeedsBadging(i)) {
                        z = true;
                        ri5.noResourceId = true;
                    } else {
                        z = true;
                        ri5.icon = appi.icon;
                    }
                    ri5.iconResourceId = appi.icon;
                    ri5.labelRes = appi.labelRes;
                }
                ri5.activityInfo.applicationInfo = new ApplicationInfo(ri5.activityInfo.applicationInfo);
                if (i != 0) {
                    ri5.activityInfo.applicationInfo.uid = UserHandle.getUid(i, UserHandle.getAppId(ri5.activityInfo.applicationInfo.uid));
                }
                if (ri5.activityInfo.metaData == null) {
                    ri5.activityInfo.metaData = new Bundle();
                }
                ri5.activityInfo.metaData.putBoolean("android.dock_home", z);
                return ri5;
            }
            return list.get(0);
        }
    }

    private boolean allHavePackage(List<ResolveInfo> list, String packageName) {
        if (ArrayUtils.isEmpty(list)) {
            return false;
        }
        int N = list.size();
        for (int i = 0; i < N; i++) {
            ResolveInfo ri = list.get(i);
            ActivityInfo ai = ri != null ? ri.activityInfo : null;
            if (ai == null || !packageName.equals(ai.packageName)) {
                return false;
            }
        }
        return true;
    }

    @GuardedBy({"mPackages"})
    private ResolveInfo findPersistentPreferredActivityLP(Intent intent, String resolvedType, int flags, List<ResolveInfo> query, boolean debug, int userId) {
        List<PersistentPreferredActivity> pprefs;
        PackageManagerService packageManagerService = this;
        int i = flags;
        int i2 = userId;
        int N = query.size();
        PersistentPreferredIntentResolver ppir = packageManagerService.mSettings.mPersistentPreferredActivities.get(i2);
        if (debug) {
            Slog.v(TAG, "Looking for presistent preferred activities...");
        }
        int i3 = 0;
        if (ppir != null) {
            pprefs = ppir.queryIntent(intent, resolvedType, (65536 & i) != 0, i2);
        } else {
            Intent intent2 = intent;
            String str = resolvedType;
            pprefs = null;
        }
        if (pprefs == null || pprefs.size() <= 0) {
            List<ResolveInfo> list = query;
            return null;
        }
        int M = pprefs.size();
        int i4 = 0;
        while (i4 < M) {
            PersistentPreferredActivity ppa = pprefs.get(i4);
            if (debug) {
                StringBuilder sb = new StringBuilder();
                sb.append("Checking PersistentPreferredActivity ds=");
                sb.append(ppa.countDataSchemes() > 0 ? ppa.getDataScheme(i3) : "<none>");
                sb.append("\n  component=");
                sb.append(ppa.mComponent);
                Slog.v(TAG, sb.toString());
                ppa.dump(new LogPrinter(2, TAG, 3), "  ");
            }
            ActivityInfo ai = packageManagerService.getActivityInfo(ppa.mComponent, i | 512, i2);
            if (debug) {
                Slog.v(TAG, "Found persistent preferred activity:");
                if (ai != null) {
                    ai.dump(new LogPrinter(2, TAG, 3), "  ");
                } else {
                    Slog.v(TAG, "  null");
                }
            }
            if (ai != null) {
                int j = 0;
                while (j < N) {
                    ResolveInfo ri = query.get(j);
                    if (ri.activityInfo.applicationInfo.packageName.equals(ai.applicationInfo.packageName) && ri.activityInfo.name.equals(ai.name)) {
                        if (debug) {
                            Slog.v(TAG, "Returning persistent preferred activity: " + ri.activityInfo.packageName + SliceClientPermissions.SliceAuthority.DELIMITER + ri.activityInfo.name);
                        }
                        return ri;
                    }
                    j++;
                    int i5 = flags;
                }
                continue;
            }
            List<ResolveInfo> list2 = query;
            i4++;
            i3 = 0;
            packageManagerService = this;
            i = flags;
        }
        List<ResolveInfo> list3 = query;
        return null;
    }

    private boolean isHomeIntent(Intent intent) {
        return "android.intent.action.MAIN".equals(intent.getAction()) && intent.hasCategory("android.intent.category.HOME") && intent.hasCategory("android.intent.category.DEFAULT");
    }

    /* Debug info: failed to restart local var, previous not found, register: 32 */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v2, resolved type: android.content.Intent} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v9, resolved type: android.content.Intent} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v11, resolved type: android.content.Intent} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v12, resolved type: android.content.Intent} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v34, resolved type: android.content.pm.ResolveInfo} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v36, resolved type: android.content.pm.ResolveInfo} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v13, resolved type: android.content.Intent} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v38, resolved type: android.content.pm.ResolveInfo} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v15, resolved type: android.content.Intent} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v44, resolved type: android.content.pm.ResolveInfo} */
    /* JADX WARNING: type inference failed for: r5v11 */
    /* JADX WARNING: type inference failed for: r5v15 */
    /* JADX WARNING: type inference failed for: r5v16 */
    /* JADX WARNING: type inference failed for: r18v1, types: [android.content.pm.ResolveInfo] */
    /* JADX WARNING: type inference failed for: r5v24 */
    /* JADX WARNING: type inference failed for: r5v27 */
    /* JADX WARNING: type inference failed for: r5v28 */
    /* JADX WARNING: type inference failed for: r5v29 */
    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:136:0x02b0, code lost:
        if (r39 == false) goto L_0x02b9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:137:0x02b2, code lost:
        r2.removeFilter(r7);
        r5 = 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:138:0x02b9, code lost:
        if (r38 == false) goto L_0x0386;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:140:0x02c1, code lost:
        if (r7.mPref.sameSet(r10, r0) != false) goto L_0x0386;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:142:0x02c9, code lost:
        if (r7.mPref.isSuperset(r10, r0) == false) goto L_0x0303;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:143:0x02cb, code lost:
        if (r0 != false) goto L_0x02fd;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:144:0x02cd, code lost:
        r14 = r7.mPref.mMatch;
        r33 = r0;
        r23 = r7.mPref.discardObsoleteComponents(r10);
        r0 = r7.mPref.mComponent;
        r31 = r1;
        r2.removeFilter(r7);
        r2.addFilter(new com.android.server.pm.PreferredActivity(r7, r14, r23, r0, r7.mPref.mAlways));
        r5 = 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:145:0x02fd, code lost:
        r33 = r0;
        r31 = r1;
        r5 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:146:0x0303, code lost:
        r33 = r0;
        r31 = r1;
        android.util.Slog.i(TAG, "Result set changed, dropping preferred activity for " + r15 + " type " + r9);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:147:0x0329, code lost:
        if (android.miui.AppOpsUtils.isXOptMode() == false) goto L_0x035d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:148:0x032b, code lost:
        android.util.Slog.i(TAG, "preferred:" + java.util.Arrays.toString(r7.mPref.mSetClasses) + ", while query:" + java.util.Arrays.toString(r10.toArray(new android.content.pm.ResolveInfo[0])));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:149:0x035d, code lost:
        r2.removeFilter(r7);
        r2.addFilter(new com.android.server.pm.PreferredActivity(r7, r7.mPref.mMatch, (android.content.ComponentName[]) null, r7.mPref.mComponent, false));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:151:0x037e, code lost:
        if (1 == 0) goto L_0x0383;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:153:?, code lost:
        scheduleWritePackageRestrictionsLocked(r11);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:154:0x0383, code lost:
        monitor-exit(r17);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:155:0x0384, code lost:
        return null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:156:0x0386, code lost:
        r33 = r0;
        r31 = r1;
        r5 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:157:0x038a, code lost:
        if (r40 == false) goto L_0x03b3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:159:0x038e, code lost:
        r5 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:160:?, code lost:
        android.util.Slog.v(TAG, "Returning preferred activity: " + r13.activityInfo.packageName + com.android.server.slice.SliceClientPermissions.SliceAuthority.DELIMITER + r13.activityInfo.name);
        r5 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:161:0x03b3, code lost:
        if (r5 == null) goto L_0x03b8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:163:?, code lost:
        scheduleWritePackageRestrictionsLocked(r11);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:164:0x03b8, code lost:
        monitor-exit(r17);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:165:0x03b9, code lost:
        return r13;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:170:0x03d1, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:171:0x03d2, code lost:
        r27 = r3;
        r28 = r13;
        r5 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:191:0x0418, code lost:
        r0 = th;
     */
    /* JADX WARNING: Failed to process nested try/catch */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:180:0x03fc A[Catch:{ all -> 0x03d1, all -> 0x0418 }] */
    /* JADX WARNING: Removed duplicated region for block: B:185:0x040a  */
    /* JADX WARNING: Removed duplicated region for block: B:208:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public android.content.pm.ResolveInfo findPreferredActivityNotLocked(android.content.Intent r33, java.lang.String r34, int r35, java.util.List<android.content.pm.ResolveInfo> r36, int r37, boolean r38, boolean r39, boolean r40, int r41) {
        /*
            r32 = this;
            r8 = r32
            r9 = r34
            r10 = r36
            r11 = r41
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r8.mPackages
            boolean r0 = java.lang.Thread.holdsLock(r0)
            if (r0 == 0) goto L_0x0038
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "Calling thread "
            r0.append(r1)
            java.lang.Thread r1 = java.lang.Thread.currentThread()
            java.lang.String r1 = r1.getName()
            r0.append(r1)
            java.lang.String r1 = " is holding mPackages"
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            java.lang.Throwable r1 = new java.lang.Throwable
            r1.<init>()
            java.lang.String r2 = "PackageManager"
            android.util.Slog.wtf(r2, r0, r1)
        L_0x0038:
            com.android.server.pm.UserManagerService r0 = sUserManager
            boolean r0 = r0.exists(r11)
            r12 = 0
            if (r0 != 0) goto L_0x0042
            return r12
        L_0x0042:
            int r13 = android.os.Binder.getCallingUid()
            android.content.Context r0 = r8.mContext
            android.content.ContentResolver r0 = r0.getContentResolver()
            r14 = 0
            java.lang.String r1 = "device_provisioned"
            int r0 = android.provider.Settings.Global.getInt(r0, r1, r14)
            r15 = 1
            if (r0 != r15) goto L_0x0058
            r0 = r15
            goto L_0x0059
        L_0x0058:
            r0 = r14
        L_0x0059:
            r16 = r0
            r6 = 0
            r1 = r32
            r2 = r35
            r3 = r41
            r4 = r33
            r5 = r13
            int r7 = r1.updateFlagsForResolve(r2, r3, r4, r5, r6)
            android.content.Intent r6 = r32.updateIntentForResolve(r33)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r5 = r8.mPackages
            monitor-enter(r5)
            r1 = r32
            r2 = r6
            r3 = r34
            r4 = r7
            r17 = r5
            r5 = r36
            r15 = r6
            r6 = r40
            r12 = r7
            r7 = r41
            android.content.pm.ResolveInfo r1 = r1.findPersistentPreferredActivityLP(r2, r3, r4, r5, r6, r7)     // Catch:{ all -> 0x0413 }
            if (r1 == 0) goto L_0x008d
            monitor-exit(r17)     // Catch:{ all -> 0x0088 }
            return r1
        L_0x0088:
            r0 = move-exception
            r28 = r13
            goto L_0x0416
        L_0x008d:
            com.android.server.pm.Settings r2 = r8.mSettings     // Catch:{ all -> 0x0413 }
            android.util.SparseArray<com.android.server.pm.PreferredIntentResolver> r2 = r2.mPreferredActivities     // Catch:{ all -> 0x0413 }
            java.lang.Object r2 = r2.get(r11)     // Catch:{ all -> 0x0413 }
            com.android.server.pm.PreferredIntentResolver r2 = (com.android.server.pm.PreferredIntentResolver) r2     // Catch:{ all -> 0x0413 }
            if (r40 == 0) goto L_0x00a0
            java.lang.String r3 = "PackageManager"
            java.lang.String r4 = "Looking for preferred activities..."
            android.util.Slog.v(r3, r4)     // Catch:{ all -> 0x0088 }
        L_0x00a0:
            if (r2 == 0) goto L_0x00af
            r3 = 65536(0x10000, float:9.18355E-41)
            r3 = r3 & r12
            if (r3 == 0) goto L_0x00a9
            r3 = 1
            goto L_0x00aa
        L_0x00a9:
            r3 = r14
        L_0x00aa:
            java.util.List r3 = r2.queryIntent(r15, r9, r3, r11)     // Catch:{ all -> 0x0088 }
            goto L_0x00b0
        L_0x00af:
            r3 = 0
        L_0x00b0:
            if (r3 == 0) goto L_0x0401
            int r4 = r3.size()     // Catch:{ all -> 0x0413 }
            if (r4 <= 0) goto L_0x0401
            r4 = 0
            r5 = 0
            if (r40 == 0) goto L_0x00cf
            java.lang.String r6 = "PackageManager"
            java.lang.String r7 = "Figuring out best match..."
            android.util.Slog.v(r6, r7)     // Catch:{ all -> 0x00c5 }
            goto L_0x00cf
        L_0x00c5:
            r0 = move-exception
            r19 = r1
            r27 = r3
            r5 = r4
            r28 = r13
            goto L_0x03fa
        L_0x00cf:
            int r6 = r36.size()     // Catch:{ all -> 0x03ef }
            r7 = 0
        L_0x00d4:
            if (r7 >= r6) goto L_0x0138
            java.lang.Object r18 = r10.get(r7)     // Catch:{ all -> 0x012b }
            android.content.pm.ResolveInfo r18 = (android.content.pm.ResolveInfo) r18     // Catch:{ all -> 0x012b }
            r33 = r18
            if (r40 == 0) goto L_0x0116
            java.lang.String r0 = "PackageManager"
            java.lang.StringBuilder r14 = new java.lang.StringBuilder     // Catch:{ all -> 0x012b }
            r14.<init>()     // Catch:{ all -> 0x012b }
            r19 = r1
            java.lang.String r1 = "Match for "
            r14.append(r1)     // Catch:{ all -> 0x010b }
            r1 = r33
            r33 = r4
            android.content.pm.ActivityInfo r4 = r1.activityInfo     // Catch:{ all -> 0x0159 }
            r14.append(r4)     // Catch:{ all -> 0x0159 }
            java.lang.String r4 = ": 0x"
            r14.append(r4)     // Catch:{ all -> 0x0159 }
            java.lang.String r4 = java.lang.Integer.toHexString(r5)     // Catch:{ all -> 0x0159 }
            r14.append(r4)     // Catch:{ all -> 0x0159 }
            java.lang.String r4 = r14.toString()     // Catch:{ all -> 0x0159 }
            android.util.Slog.v(r0, r4)     // Catch:{ all -> 0x0159 }
            goto L_0x011c
        L_0x010b:
            r0 = move-exception
            r33 = r4
            r5 = r33
            r27 = r3
            r28 = r13
            goto L_0x03fa
        L_0x0116:
            r19 = r1
            r1 = r33
            r33 = r4
        L_0x011c:
            int r0 = r1.match     // Catch:{ all -> 0x0159 }
            if (r0 <= r5) goto L_0x0123
            int r0 = r1.match     // Catch:{ all -> 0x0159 }
            r5 = r0
        L_0x0123:
            int r7 = r7 + 1
            r4 = r33
            r1 = r19
            r14 = 0
            goto L_0x00d4
        L_0x012b:
            r0 = move-exception
            r19 = r1
            r33 = r4
            r5 = r33
            r27 = r3
            r28 = r13
            goto L_0x03fa
        L_0x0138:
            r19 = r1
            r33 = r4
            if (r40 == 0) goto L_0x0162
            java.lang.String r0 = "PackageManager"
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x0159 }
            r1.<init>()     // Catch:{ all -> 0x0159 }
            java.lang.String r4 = "Best match: 0x"
            r1.append(r4)     // Catch:{ all -> 0x0159 }
            java.lang.String r4 = java.lang.Integer.toHexString(r5)     // Catch:{ all -> 0x0159 }
            r1.append(r4)     // Catch:{ all -> 0x0159 }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x0159 }
            android.util.Slog.v(r0, r1)     // Catch:{ all -> 0x0159 }
            goto L_0x0162
        L_0x0159:
            r0 = move-exception
            r5 = r33
            r27 = r3
            r28 = r13
            goto L_0x03fa
        L_0x0162:
            r0 = 268369920(0xfff0000, float:2.5144941E-29)
            r0 = r0 & r5
            int r1 = r3.size()     // Catch:{ all -> 0x03e7 }
            r4 = 0
            r5 = r33
        L_0x016c:
            if (r4 >= r1) goto L_0x03d7
            java.lang.Object r7 = r3.get(r4)     // Catch:{ all -> 0x03d1 }
            com.android.server.pm.PreferredActivity r7 = (com.android.server.pm.PreferredActivity) r7     // Catch:{ all -> 0x03d1 }
            if (r40 == 0) goto L_0x01c7
            java.lang.String r14 = "PackageManager"
            r26 = r1
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x03d1 }
            r1.<init>()     // Catch:{ all -> 0x03d1 }
            r27 = r3
            java.lang.String r3 = "Checking PreferredActivity ds="
            r1.append(r3)     // Catch:{ all -> 0x01c2 }
            int r3 = r7.countDataSchemes()     // Catch:{ all -> 0x01c2 }
            if (r3 <= 0) goto L_0x0197
            r3 = 0
            java.lang.String r21 = r7.getDataScheme(r3)     // Catch:{ all -> 0x0192 }
            goto L_0x0199
        L_0x0192:
            r0 = move-exception
            r28 = r13
            goto L_0x03fa
        L_0x0197:
            java.lang.String r21 = "<none>"
        L_0x0199:
            r3 = r21
            r1.append(r3)     // Catch:{ all -> 0x01c2 }
            java.lang.String r3 = "\n  component="
            r1.append(r3)     // Catch:{ all -> 0x01c2 }
            com.android.server.pm.PreferredComponent r3 = r7.mPref     // Catch:{ all -> 0x01c2 }
            android.content.ComponentName r3 = r3.mComponent     // Catch:{ all -> 0x01c2 }
            r1.append(r3)     // Catch:{ all -> 0x01c2 }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x01c2 }
            android.util.Slog.v(r14, r1)     // Catch:{ all -> 0x01c2 }
            android.util.LogPrinter r1 = new android.util.LogPrinter     // Catch:{ all -> 0x01c2 }
            java.lang.String r3 = "PackageManager"
            r28 = r13
            r13 = 2
            r14 = 3
            r1.<init>(r13, r3, r14)     // Catch:{ all -> 0x03cf }
            java.lang.String r3 = "  "
            r7.dump(r1, r3)     // Catch:{ all -> 0x03cf }
            goto L_0x01cd
        L_0x01c2:
            r0 = move-exception
            r28 = r13
            goto L_0x03fa
        L_0x01c7:
            r26 = r1
            r27 = r3
            r28 = r13
        L_0x01cd:
            com.android.server.pm.PreferredComponent r1 = r7.mPref     // Catch:{ all -> 0x03cf }
            int r1 = r1.mMatch     // Catch:{ all -> 0x03cf }
            if (r1 == r0) goto L_0x01fa
            if (r40 == 0) goto L_0x01f3
            java.lang.String r1 = "PackageManager"
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x03cf }
            r3.<init>()     // Catch:{ all -> 0x03cf }
            java.lang.String r13 = "Skipping bad match "
            r3.append(r13)     // Catch:{ all -> 0x03cf }
            com.android.server.pm.PreferredComponent r13 = r7.mPref     // Catch:{ all -> 0x03cf }
            int r13 = r13.mMatch     // Catch:{ all -> 0x03cf }
            java.lang.String r13 = java.lang.Integer.toHexString(r13)     // Catch:{ all -> 0x03cf }
            r3.append(r13)     // Catch:{ all -> 0x03cf }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x03cf }
            android.util.Slog.v(r1, r3)     // Catch:{ all -> 0x03cf }
        L_0x01f3:
            r29 = r0
            r30 = r6
            r6 = 0
            goto L_0x03c1
        L_0x01fa:
            if (r38 == 0) goto L_0x0212
            com.android.server.pm.PreferredComponent r1 = r7.mPref     // Catch:{ all -> 0x03cf }
            boolean r1 = r1.mAlways     // Catch:{ all -> 0x03cf }
            if (r1 != 0) goto L_0x0212
            if (r40 == 0) goto L_0x020b
            java.lang.String r1 = "PackageManager"
            java.lang.String r3 = "Skipping mAlways=false entry"
            android.util.Slog.v(r1, r3)     // Catch:{ all -> 0x03cf }
        L_0x020b:
            r29 = r0
            r30 = r6
            r6 = 0
            goto L_0x03c1
        L_0x0212:
            com.android.server.pm.PreferredComponent r1 = r7.mPref     // Catch:{ all -> 0x03cf }
            android.content.ComponentName r1 = r1.mComponent     // Catch:{ all -> 0x03cf }
            r3 = r12 | 512(0x200, float:7.175E-43)
            r13 = 524288(0x80000, float:7.34684E-40)
            r3 = r3 | r13
            r13 = 262144(0x40000, float:3.67342E-40)
            r3 = r3 | r13
            android.content.pm.ActivityInfo r1 = r8.getActivityInfo(r1, r3, r11)     // Catch:{ all -> 0x03cf }
            if (r40 == 0) goto L_0x0248
            java.lang.String r3 = "PackageManager"
            java.lang.String r13 = "Found preferred activity:"
            android.util.Slog.v(r3, r13)     // Catch:{ all -> 0x03cf }
            if (r1 == 0) goto L_0x023e
            android.util.LogPrinter r3 = new android.util.LogPrinter     // Catch:{ all -> 0x03cf }
            java.lang.String r13 = "PackageManager"
            r29 = r0
            r0 = 2
            r14 = 3
            r3.<init>(r0, r13, r14)     // Catch:{ all -> 0x03cf }
            java.lang.String r0 = "  "
            r1.dump(r3, r0)     // Catch:{ all -> 0x03cf }
            goto L_0x024a
        L_0x023e:
            r29 = r0
            java.lang.String r0 = "PackageManager"
            java.lang.String r3 = "  null"
            android.util.Slog.v(r0, r3)     // Catch:{ all -> 0x03cf }
            goto L_0x024a
        L_0x0248:
            r29 = r0
        L_0x024a:
            boolean r0 = r8.isHomeIntent(r15)     // Catch:{ all -> 0x03cf }
            if (r0 == 0) goto L_0x0254
            if (r16 != 0) goto L_0x0254
            r0 = 1
            goto L_0x0255
        L_0x0254:
            r0 = 0
        L_0x0255:
            if (r1 != 0) goto L_0x0282
            if (r0 == 0) goto L_0x025e
            r30 = r6
            r6 = 0
            goto L_0x03c1
        L_0x025e:
            java.lang.String r3 = "PackageManager"
            java.lang.StringBuilder r13 = new java.lang.StringBuilder     // Catch:{ all -> 0x03cf }
            r13.<init>()     // Catch:{ all -> 0x03cf }
            java.lang.String r14 = "Removing dangling preferred activity: "
            r13.append(r14)     // Catch:{ all -> 0x03cf }
            com.android.server.pm.PreferredComponent r14 = r7.mPref     // Catch:{ all -> 0x03cf }
            android.content.ComponentName r14 = r14.mComponent     // Catch:{ all -> 0x03cf }
            r13.append(r14)     // Catch:{ all -> 0x03cf }
            java.lang.String r13 = r13.toString()     // Catch:{ all -> 0x03cf }
            android.util.Slog.w(r3, r13)     // Catch:{ all -> 0x03cf }
            r2.removeFilter(r7)     // Catch:{ all -> 0x03cf }
            r3 = 1
            r5 = r3
            r30 = r6
            r6 = 0
            goto L_0x03c1
        L_0x0282:
            r3 = 0
        L_0x0283:
            if (r3 >= r6) goto L_0x03ba
            java.lang.Object r13 = r10.get(r3)     // Catch:{ all -> 0x03cf }
            android.content.pm.ResolveInfo r13 = (android.content.pm.ResolveInfo) r13     // Catch:{ all -> 0x03cf }
            android.content.pm.ActivityInfo r14 = r13.activityInfo     // Catch:{ all -> 0x03cf }
            android.content.pm.ApplicationInfo r14 = r14.applicationInfo     // Catch:{ all -> 0x03cf }
            java.lang.String r14 = r14.packageName     // Catch:{ all -> 0x03cf }
            r30 = r6
            android.content.pm.ApplicationInfo r6 = r1.applicationInfo     // Catch:{ all -> 0x03cf }
            java.lang.String r6 = r6.packageName     // Catch:{ all -> 0x03cf }
            boolean r6 = r14.equals(r6)     // Catch:{ all -> 0x03cf }
            if (r6 != 0) goto L_0x029e
            goto L_0x02ab
        L_0x029e:
            android.content.pm.ActivityInfo r6 = r13.activityInfo     // Catch:{ all -> 0x03cf }
            java.lang.String r6 = r6.name     // Catch:{ all -> 0x03cf }
            java.lang.String r14 = r1.name     // Catch:{ all -> 0x03cf }
            boolean r6 = r6.equals(r14)     // Catch:{ all -> 0x03cf }
            if (r6 != 0) goto L_0x02b0
        L_0x02ab:
            int r3 = r3 + 1
            r6 = r30
            goto L_0x0283
        L_0x02b0:
            if (r39 == 0) goto L_0x02b9
            r2.removeFilter(r7)     // Catch:{ all -> 0x03cf }
            r5 = 1
            r6 = 0
            goto L_0x03c1
        L_0x02b9:
            if (r38 == 0) goto L_0x0386
            com.android.server.pm.PreferredComponent r6 = r7.mPref     // Catch:{ all -> 0x03cf }
            boolean r6 = r6.sameSet(r10, r0)     // Catch:{ all -> 0x03cf }
            if (r6 != 0) goto L_0x0386
            com.android.server.pm.PreferredComponent r6 = r7.mPref     // Catch:{ all -> 0x03cf }
            boolean r6 = r6.isSuperset(r10, r0)     // Catch:{ all -> 0x03cf }
            if (r6 == 0) goto L_0x0303
            if (r0 != 0) goto L_0x02fd
            com.android.server.pm.PreferredActivity r6 = new com.android.server.pm.PreferredActivity     // Catch:{ all -> 0x03cf }
            com.android.server.pm.PreferredComponent r14 = r7.mPref     // Catch:{ all -> 0x03cf }
            int r14 = r14.mMatch     // Catch:{ all -> 0x03cf }
            r33 = r0
            com.android.server.pm.PreferredComponent r0 = r7.mPref     // Catch:{ all -> 0x03cf }
            android.content.ComponentName[] r23 = r0.discardObsoleteComponents(r10)     // Catch:{ all -> 0x03cf }
            com.android.server.pm.PreferredComponent r0 = r7.mPref     // Catch:{ all -> 0x03cf }
            android.content.ComponentName r0 = r0.mComponent     // Catch:{ all -> 0x03cf }
            r31 = r1
            com.android.server.pm.PreferredComponent r1 = r7.mPref     // Catch:{ all -> 0x03cf }
            boolean r1 = r1.mAlways     // Catch:{ all -> 0x03cf }
            r20 = r6
            r21 = r7
            r22 = r14
            r24 = r0
            r25 = r1
            r20.<init>(r21, r22, r23, r24, r25)     // Catch:{ all -> 0x03cf }
            r0 = r6
            r2.removeFilter(r7)     // Catch:{ all -> 0x03cf }
            r2.addFilter(r0)     // Catch:{ all -> 0x03cf }
            r0 = 1
            r5 = r0
            goto L_0x038a
        L_0x02fd:
            r33 = r0
            r31 = r1
            goto L_0x038a
        L_0x0303:
            r33 = r0
            r31 = r1
            java.lang.String r0 = "PackageManager"
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x03cf }
            r1.<init>()     // Catch:{ all -> 0x03cf }
            java.lang.String r6 = "Result set changed, dropping preferred activity for "
            r1.append(r6)     // Catch:{ all -> 0x03cf }
            r1.append(r15)     // Catch:{ all -> 0x03cf }
            java.lang.String r6 = " type "
            r1.append(r6)     // Catch:{ all -> 0x03cf }
            r1.append(r9)     // Catch:{ all -> 0x03cf }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x03cf }
            android.util.Slog.i(r0, r1)     // Catch:{ all -> 0x03cf }
            boolean r0 = android.miui.AppOpsUtils.isXOptMode()     // Catch:{ all -> 0x03cf }
            if (r0 == 0) goto L_0x035d
            java.lang.String r0 = "PackageManager"
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x03cf }
            r1.<init>()     // Catch:{ all -> 0x03cf }
            java.lang.String r6 = "preferred:"
            r1.append(r6)     // Catch:{ all -> 0x03cf }
            com.android.server.pm.PreferredComponent r6 = r7.mPref     // Catch:{ all -> 0x03cf }
            java.lang.String[] r6 = r6.mSetClasses     // Catch:{ all -> 0x03cf }
            java.lang.String r6 = java.util.Arrays.toString(r6)     // Catch:{ all -> 0x03cf }
            r1.append(r6)     // Catch:{ all -> 0x03cf }
            java.lang.String r6 = ", while query:"
            r1.append(r6)     // Catch:{ all -> 0x03cf }
            r6 = 0
            android.content.pm.ResolveInfo[] r6 = new android.content.pm.ResolveInfo[r6]     // Catch:{ all -> 0x03cf }
            java.lang.Object[] r6 = r10.toArray(r6)     // Catch:{ all -> 0x03cf }
            java.lang.String r6 = java.util.Arrays.toString(r6)     // Catch:{ all -> 0x03cf }
            r1.append(r6)     // Catch:{ all -> 0x03cf }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x03cf }
            android.util.Slog.i(r0, r1)     // Catch:{ all -> 0x03cf }
        L_0x035d:
            r2.removeFilter(r7)     // Catch:{ all -> 0x03cf }
            com.android.server.pm.PreferredActivity r0 = new com.android.server.pm.PreferredActivity     // Catch:{ all -> 0x03cf }
            com.android.server.pm.PreferredComponent r1 = r7.mPref     // Catch:{ all -> 0x03cf }
            int r1 = r1.mMatch     // Catch:{ all -> 0x03cf }
            r23 = 0
            com.android.server.pm.PreferredComponent r6 = r7.mPref     // Catch:{ all -> 0x03cf }
            android.content.ComponentName r6 = r6.mComponent     // Catch:{ all -> 0x03cf }
            r25 = 0
            r20 = r0
            r21 = r7
            r22 = r1
            r24 = r6
            r20.<init>(r21, r22, r23, r24, r25)     // Catch:{ all -> 0x03cf }
            r2.addFilter(r0)     // Catch:{ all -> 0x03cf }
            r1 = 1
            if (r1 == 0) goto L_0x0383
            r8.scheduleWritePackageRestrictionsLocked((int) r11)     // Catch:{ all -> 0x0418 }
        L_0x0383:
            monitor-exit(r17)     // Catch:{ all -> 0x0418 }
            r5 = 0
            return r5
        L_0x0386:
            r33 = r0
            r31 = r1
        L_0x038a:
            if (r40 == 0) goto L_0x03b2
            java.lang.String r0 = "PackageManager"
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x03cf }
            r1.<init>()     // Catch:{ all -> 0x03cf }
            java.lang.String r6 = "Returning preferred activity: "
            r1.append(r6)     // Catch:{ all -> 0x03cf }
            android.content.pm.ActivityInfo r6 = r13.activityInfo     // Catch:{ all -> 0x03cf }
            java.lang.String r6 = r6.packageName     // Catch:{ all -> 0x03cf }
            r1.append(r6)     // Catch:{ all -> 0x03cf }
            java.lang.String r6 = "/"
            r1.append(r6)     // Catch:{ all -> 0x03cf }
            android.content.pm.ActivityInfo r6 = r13.activityInfo     // Catch:{ all -> 0x03cf }
            java.lang.String r6 = r6.name     // Catch:{ all -> 0x03cf }
            r1.append(r6)     // Catch:{ all -> 0x03cf }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x03cf }
            android.util.Slog.v(r0, r1)     // Catch:{ all -> 0x03cf }
        L_0x03b2:
            if (r5 == 0) goto L_0x03b8
            r8.scheduleWritePackageRestrictionsLocked((int) r11)     // Catch:{ all -> 0x0418 }
        L_0x03b8:
            monitor-exit(r17)     // Catch:{ all -> 0x0418 }
            return r13
        L_0x03ba:
            r33 = r0
            r31 = r1
            r30 = r6
            r6 = 0
        L_0x03c1:
            int r4 = r4 + 1
            r1 = r26
            r3 = r27
            r13 = r28
            r0 = r29
            r6 = r30
            goto L_0x016c
        L_0x03cf:
            r0 = move-exception
            goto L_0x03fa
        L_0x03d1:
            r0 = move-exception
            r27 = r3
            r28 = r13
            goto L_0x03fa
        L_0x03d7:
            r29 = r0
            r26 = r1
            r27 = r3
            r30 = r6
            r28 = r13
            if (r5 == 0) goto L_0x0407
            r8.scheduleWritePackageRestrictionsLocked((int) r11)     // Catch:{ all -> 0x0418 }
            goto L_0x0407
        L_0x03e7:
            r0 = move-exception
            r27 = r3
            r28 = r13
            r5 = r33
            goto L_0x03fa
        L_0x03ef:
            r0 = move-exception
            r19 = r1
            r27 = r3
            r33 = r4
            r28 = r13
            r5 = r33
        L_0x03fa:
            if (r5 == 0) goto L_0x03ff
            r8.scheduleWritePackageRestrictionsLocked((int) r11)     // Catch:{ all -> 0x0418 }
        L_0x03ff:
            throw r0     // Catch:{ all -> 0x0418 }
        L_0x0401:
            r19 = r1
            r27 = r3
            r28 = r13
        L_0x0407:
            monitor-exit(r17)     // Catch:{ all -> 0x0418 }
            if (r40 == 0) goto L_0x0411
            java.lang.String r0 = "PackageManager"
            java.lang.String r1 = "No preferred activity to return"
            android.util.Slog.v(r0, r1)
        L_0x0411:
            r0 = 0
            return r0
        L_0x0413:
            r0 = move-exception
            r28 = r13
        L_0x0416:
            monitor-exit(r17)     // Catch:{ all -> 0x0418 }
            throw r0
        L_0x0418:
            r0 = move-exception
            goto L_0x0416
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.findPreferredActivityNotLocked(android.content.Intent, java.lang.String, int, java.util.List, int, boolean, boolean, boolean, int):android.content.pm.ResolveInfo");
    }

    public boolean canForwardTo(Intent intent, String resolvedType, int sourceUserId, int targetUserId) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", (String) null);
        List<CrossProfileIntentFilter> matches = getMatchingCrossProfileIntentFilters(intent, resolvedType, sourceUserId);
        boolean z = true;
        if (matches != null) {
            int size = matches.size();
            for (int i = 0; i < size; i++) {
                if (matches.get(i).getTargetUserId() == targetUserId) {
                    return true;
                }
            }
            int i2 = targetUserId;
        } else {
            int i3 = targetUserId;
        }
        if (intent.hasWebURI()) {
            int callingUid = Binder.getCallingUid();
            UserInfo parent = getProfileParent(sourceUserId);
            synchronized (this.mPackages) {
                if (getCrossProfileDomainPreferredLpr(intent, resolvedType, updateFlagsForResolve(0, parent.id, intent, callingUid, false), sourceUserId, parent.id) == null) {
                    z = false;
                }
            }
            return z;
        }
        int i4 = sourceUserId;
        return false;
    }

    private UserInfo getProfileParent(int userId) {
        long identity = Binder.clearCallingIdentity();
        try {
            return sUserManager.getProfileParent(userId);
        } finally {
            Binder.restoreCallingIdentity(identity);
        }
    }

    private List<CrossProfileIntentFilter> getMatchingCrossProfileIntentFilters(Intent intent, String resolvedType, int userId) {
        CrossProfileIntentResolver resolver = this.mSettings.mCrossProfileIntentResolvers.get(userId);
        if (resolver != null) {
            return resolver.queryIntent(intent, resolvedType, false, userId);
        }
        return null;
    }

    public ParceledListSlice<ResolveInfo> queryIntentActivities(Intent intent, String resolvedType, int flags, int userId) {
        try {
            Trace.traceBegin(262144, "queryIntentActivities");
            return new ParceledListSlice<>(queryIntentActivitiesInternal(intent, resolvedType, flags, userId));
        } finally {
            Trace.traceEnd(262144);
        }
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x0031, code lost:
        return r4;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public java.lang.String getInstantAppPackageName(int r7) {
        /*
            r6 = this;
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r6.mPackages
            monitor-enter(r0)
            boolean r1 = android.os.Process.isIsolated(r7)     // Catch:{ all -> 0x0034 }
            if (r1 == 0) goto L_0x0010
            android.util.SparseIntArray r1 = r6.mIsolatedOwners     // Catch:{ all -> 0x0034 }
            int r1 = r1.get(r7)     // Catch:{ all -> 0x0034 }
            r7 = r1
        L_0x0010:
            int r1 = android.os.UserHandle.getAppId(r7)     // Catch:{ all -> 0x0034 }
            com.android.server.pm.Settings r2 = r6.mSettings     // Catch:{ all -> 0x0034 }
            com.android.server.pm.SettingBase r2 = r2.getSettingLPr(r1)     // Catch:{ all -> 0x0034 }
            boolean r3 = r2 instanceof com.android.server.pm.PackageSetting     // Catch:{ all -> 0x0034 }
            r4 = 0
            if (r3 == 0) goto L_0x0032
            r3 = r2
            com.android.server.pm.PackageSetting r3 = (com.android.server.pm.PackageSetting) r3     // Catch:{ all -> 0x0034 }
            int r5 = android.os.UserHandle.getUserId(r7)     // Catch:{ all -> 0x0034 }
            boolean r5 = r3.getInstantApp(r5)     // Catch:{ all -> 0x0034 }
            if (r5 == 0) goto L_0x0030
            android.content.pm.PackageParser$Package r4 = r3.pkg     // Catch:{ all -> 0x0034 }
            java.lang.String r4 = r4.packageName     // Catch:{ all -> 0x0034 }
        L_0x0030:
            monitor-exit(r0)     // Catch:{ all -> 0x0034 }
            return r4
        L_0x0032:
            monitor-exit(r0)     // Catch:{ all -> 0x0034 }
            return r4
        L_0x0034:
            r1 = move-exception
            monitor-exit(r0)     // Catch:{ all -> 0x0034 }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.getInstantAppPackageName(int):java.lang.String");
    }

    private List<ResolveInfo> queryIntentActivitiesInternal(Intent intent, String resolvedType, int flags, int userId) {
        return queryIntentActivitiesInternal(intent, resolvedType, flags, Binder.getCallingUid(), userId, false, true);
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:123:0x01fb A[Catch:{ all -> 0x02e2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:173:0x02d2  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public java.util.List<android.content.pm.ResolveInfo> queryIntentActivitiesInternal(android.content.Intent r26, java.lang.String r27, int r28, int r29, int r30, boolean r31, boolean r32) {
        /*
            r25 = this;
            r15 = r25
            r14 = r27
            r0 = r30
            com.android.server.pm.UserManagerService r1 = sUserManager
            boolean r1 = r1.exists(r0)
            if (r1 != 0) goto L_0x0013
            java.util.List r1 = java.util.Collections.emptyList()
            return r1
        L_0x0013:
            r13 = r29
            java.lang.String r12 = r15.getInstantAppPackageName(r13)
            com.android.server.pm.permission.PermissionManagerServiceInternal r1 = r15.mPermissionManager
            int r2 = android.os.Binder.getCallingUid()
            r4 = 0
            r5 = 0
            java.lang.String r6 = "query intent activities"
            r3 = r30
            r1.enforceCrossUserPermission(r2, r3, r4, r5, r6)
            java.lang.String r11 = r26.getPackage()
            android.content.ComponentName r1 = r26.getComponent()
            if (r1 != 0) goto L_0x0044
            android.content.Intent r2 = r26.getSelector()
            if (r2 == 0) goto L_0x0044
            android.content.Intent r2 = r26.getSelector()
            android.content.ComponentName r1 = r2.getComponent()
            r9 = r1
            r10 = r2
            goto L_0x0047
        L_0x0044:
            r10 = r26
            r9 = r1
        L_0x0047:
            r7 = 1
            if (r9 != 0) goto L_0x0050
            if (r11 == 0) goto L_0x004d
            goto L_0x0050
        L_0x004d:
            r16 = 0
            goto L_0x0052
        L_0x0050:
            r16 = r7
        L_0x0052:
            r1 = r25
            r2 = r28
            r3 = r30
            r4 = r10
            r5 = r29
            r6 = r31
            r8 = r7
            r7 = r16
            int r1 = r1.updateFlagsForResolve(r2, r3, r4, r5, r6, r7)
            boolean r2 = miui.securityspace.XSpaceUserHandle.isXSpaceUserCalling()
            if (r2 == 0) goto L_0x006f
            r2 = 4194304(0x400000, float:5.877472E-39)
            r1 = r1 | r2
            r7 = r1
            goto L_0x0070
        L_0x006f:
            r7 = r1
        L_0x0070:
            if (r9 == 0) goto L_0x011c
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>(r8)
            r6 = r1
            android.content.pm.ActivityInfo r5 = r15.getActivityInfo(r9, r7, r0)
            if (r5 == 0) goto L_0x0100
            r1 = 8388608(0x800000, float:1.17549435E-38)
            r1 = r1 & r7
            if (r1 == 0) goto L_0x0085
            r1 = r8
            goto L_0x0086
        L_0x0085:
            r1 = 0
        L_0x0086:
            r2 = 16777216(0x1000000, float:2.3509887E-38)
            r2 = r2 & r7
            if (r2 == 0) goto L_0x008d
            r2 = r8
            goto L_0x008e
        L_0x008d:
            r2 = 0
        L_0x008e:
            r3 = 33554432(0x2000000, float:9.403955E-38)
            r3 = r3 & r7
            if (r3 == 0) goto L_0x0095
            r3 = r8
            goto L_0x0096
        L_0x0095:
            r3 = 0
        L_0x0096:
            if (r12 == 0) goto L_0x009a
            r4 = r8
            goto L_0x009b
        L_0x009a:
            r4 = 0
        L_0x009b:
            java.lang.String r8 = r9.getPackageName()
            boolean r8 = r8.equals(r12)
            r17 = r7
            android.content.pm.ApplicationInfo r7 = r5.applicationInfo
            int r7 = r7.privateFlags
            r7 = r7 & 128(0x80, float:1.794E-43)
            if (r7 == 0) goto L_0x00b0
            r7 = 1
            goto L_0x00b1
        L_0x00b0:
            r7 = 0
        L_0x00b1:
            r18 = r9
            int r9 = r5.flags
            r19 = 1048576(0x100000, float:1.469368E-39)
            r9 = r9 & r19
            if (r9 == 0) goto L_0x00bd
            r9 = 1
            goto L_0x00be
        L_0x00bd:
            r9 = 0
        L_0x00be:
            if (r9 == 0) goto L_0x00ca
            int r13 = r5.flags
            r19 = 2097152(0x200000, float:2.938736E-39)
            r13 = r13 & r19
            if (r13 != 0) goto L_0x00ca
            r13 = 1
            goto L_0x00cb
        L_0x00ca:
            r13 = 0
        L_0x00cb:
            if (r9 == 0) goto L_0x00d5
            if (r3 == 0) goto L_0x00d2
            if (r13 != 0) goto L_0x00d2
            goto L_0x00d5
        L_0x00d2:
            r19 = 0
            goto L_0x00d7
        L_0x00d5:
            r19 = 1
        L_0x00d7:
            if (r8 != 0) goto L_0x00e8
            if (r1 != 0) goto L_0x00df
            if (r4 != 0) goto L_0x00df
            if (r7 != 0) goto L_0x00e5
        L_0x00df:
            if (r2 == 0) goto L_0x00e8
            if (r4 == 0) goto L_0x00e8
            if (r19 == 0) goto L_0x00e8
        L_0x00e5:
            r16 = 1
            goto L_0x00ea
        L_0x00e8:
            r16 = 0
        L_0x00ea:
            if (r16 != 0) goto L_0x00fd
            android.content.pm.ResolveInfo r20 = new android.content.pm.ResolveInfo
            r20.<init>()
            r26 = r20
            r28 = r1
            r1 = r26
            r1.activityInfo = r5
            r6.add(r1)
            goto L_0x0104
        L_0x00fd:
            r28 = r1
            goto L_0x0104
        L_0x0100:
            r17 = r7
            r18 = r9
        L_0x0104:
            r1 = r25
            r2 = r6
            r3 = r12
            r4 = r32
            r9 = r5
            r5 = r29
            r13 = r6
            r6 = r31
            r8 = r17
            r7 = r30
            r28 = r8
            r8 = r10
            java.util.List r1 = r1.applyPostResolutionFilter(r2, r3, r4, r5, r6, r7, r8)
            return r1
        L_0x011c:
            r28 = r7
            r18 = r9
            r13 = 0
            r17 = 0
            int r9 = com.android.server.pm.PackageManagerServiceInjector.resolveUserId(r10, r14, r0)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r8 = r15.mPackages
            monitor-enter(r8)
            if (r11 != 0) goto L_0x0326
            java.util.List r2 = r15.getMatchingCrossProfileIntentFilters(r10, r14, r9)     // Catch:{ all -> 0x031b }
            r1 = r25
            r3 = r10
            r4 = r27
            r5 = r28
            r6 = r9
            android.content.pm.ResolveInfo r0 = r1.querySkipCurrentProfileIntents(r2, r3, r4, r5, r6)     // Catch:{ all -> 0x031b }
            if (r0 == 0) goto L_0x0179
            java.util.ArrayList r1 = new java.util.ArrayList     // Catch:{ all -> 0x016e }
            r7 = 1
            r1.<init>(r7)     // Catch:{ all -> 0x016e }
            r1.add(r0)     // Catch:{ all -> 0x016e }
            java.util.List r4 = r15.filterIfNotSystemUser(r1, r9)     // Catch:{ all -> 0x016e }
            r3 = r25
            r5 = r12
            r6 = r32
            r7 = r29
            r19 = r8
            r8 = r31
            r30 = r9
            r20 = r10
            java.util.List r3 = r3.applyPostResolutionFilter(r4, r5, r6, r7, r8, r9, r10)     // Catch:{ all -> 0x0162 }
            monitor-exit(r19)     // Catch:{ all -> 0x0162 }
            return r3
        L_0x0162:
            r0 = move-exception
            r21 = r28
            r9 = r30
            r24 = r12
            r10 = r15
            r12 = r20
            goto L_0x039f
        L_0x016e:
            r0 = move-exception
            r19 = r8
            r21 = r28
            r24 = r12
            r12 = r10
            r10 = r15
            goto L_0x039f
        L_0x0179:
            r19 = r8
            r30 = r9
            r20 = r10
            r7 = 1
            com.android.server.pm.ComponentResolver r1 = r15.mComponentResolver     // Catch:{ all -> 0x030f }
            r6 = r28
            r8 = r30
            r10 = r20
            java.util.List r1 = r1.queryActivities(r10, r14, r6, r8)     // Catch:{ all -> 0x0305 }
            java.util.List r1 = r15.filterIfNotSystemUser(r1, r8)     // Catch:{ all -> 0x0305 }
            r5 = 0
            boolean r3 = r15.isInstantAppResolutionAllowed(r10, r1, r8, r5)     // Catch:{ all -> 0x0305 }
            r20 = r3
            boolean r9 = r15.hasNonNegativePriority(r1)     // Catch:{ all -> 0x02f9 }
            r3 = r25
            r4 = r2
            r16 = r5
            r5 = r10
            r21 = r6
            r6 = r27
            r17 = r7
            r7 = r21
            r26 = r0
            r30 = r8
            r0 = r17
            android.content.pm.ResolveInfo r3 = r3.queryCrossProfileIntents(r4, r5, r6, r7, r8, r9)     // Catch:{ all -> 0x02ee }
            r8 = r3
            if (r8 == 0) goto L_0x01f1
            int r3 = r8.targetUserId     // Catch:{ all -> 0x01e6 }
            boolean r3 = r15.isUserEnabled(r3)     // Catch:{ all -> 0x01e6 }
            if (r3 == 0) goto L_0x01f1
            java.util.List r3 = java.util.Collections.singletonList(r8)     // Catch:{ all -> 0x01e6 }
            r7 = r30
            java.util.List r3 = r15.filterIfNotSystemUser(r3, r7)     // Catch:{ all -> 0x01dc }
            int r3 = r3.size()     // Catch:{ all -> 0x01dc }
            if (r3 <= 0) goto L_0x01d1
            r16 = r0
        L_0x01d1:
            r3 = r16
            if (r3 == 0) goto L_0x01f3
            r1.add(r8)     // Catch:{ all -> 0x01dc }
            r13 = 1
            r22 = r13
            goto L_0x01f5
        L_0x01dc:
            r0 = move-exception
            r9 = r7
            r24 = r12
            r17 = r20
            r12 = r10
            r10 = r15
            goto L_0x039f
        L_0x01e6:
            r0 = move-exception
            r9 = r30
            r24 = r12
            r17 = r20
            r12 = r10
            r10 = r15
            goto L_0x039f
        L_0x01f1:
            r7 = r30
        L_0x01f3:
            r22 = r13
        L_0x01f5:
            boolean r3 = r10.hasWebURI()     // Catch:{ all -> 0x02e2 }
            if (r3 == 0) goto L_0x02d2
            r13 = 0
            android.content.pm.UserInfo r3 = r15.getProfileParent(r7)     // Catch:{ all -> 0x02e2 }
            r6 = r3
            if (r6 == 0) goto L_0x0234
            int r5 = r6.id     // Catch:{ all -> 0x0228 }
            r3 = r25
            r4 = r10
            r16 = r5
            r5 = r27
            r23 = r6
            r6 = r21
            r30 = r7
            r0 = r8
            r8 = r16
            com.android.server.pm.PackageManagerService$CrossProfileDomainInfo r3 = r3.getCrossProfileDomainPreferredLpr(r4, r5, r6, r7, r8)     // Catch:{ all -> 0x021b }
            r8 = r3
            goto L_0x023a
        L_0x021b:
            r0 = move-exception
            r9 = r30
            r24 = r12
            r17 = r20
            r13 = r22
            r12 = r10
            r10 = r15
            goto L_0x039f
        L_0x0228:
            r0 = move-exception
            r9 = r7
            r24 = r12
            r17 = r20
            r13 = r22
            r12 = r10
            r10 = r15
            goto L_0x039f
        L_0x0234:
            r23 = r6
            r30 = r7
            r0 = r8
            r8 = r13
        L_0x023a:
            if (r8 == 0) goto L_0x0279
            if (r0 == 0) goto L_0x0241
            r1.remove(r0)     // Catch:{ all -> 0x021b }
        L_0x0241:
            int r3 = r1.size()     // Catch:{ all -> 0x026c }
            if (r3 != 0) goto L_0x0266
            if (r20 != 0) goto L_0x0266
            android.content.pm.ResolveInfo r3 = r8.resolveInfo     // Catch:{ all -> 0x026c }
            r1.add(r3)     // Catch:{ all -> 0x026c }
            r7 = r10
            r10 = r25
            r6 = r11
            r11 = r1
            r24 = r12
            r13 = r32
            r14 = r29
            r5 = r15
            r15 = r31
            r16 = r30
            r17 = r7
            java.util.List r3 = r10.applyPostResolutionFilter(r11, r12, r13, r14, r15, r16, r17)     // Catch:{ all -> 0x029c }
            monitor-exit(r19)     // Catch:{ all -> 0x029c }
            return r3
        L_0x0266:
            r7 = r10
            r6 = r11
            r24 = r12
            r5 = r15
            goto L_0x02a8
        L_0x026c:
            r0 = move-exception
            r24 = r12
            r9 = r30
            r12 = r10
            r10 = r15
            r17 = r20
            r13 = r22
            goto L_0x039f
        L_0x0279:
            r7 = r10
            r6 = r11
            r24 = r12
            r5 = r15
            int r3 = r1.size()     // Catch:{ all -> 0x02c6 }
            r4 = 1
            if (r3 > r4) goto L_0x02a8
            if (r20 != 0) goto L_0x02a8
            r10 = r25
            r11 = r1
            r12 = r24
            r13 = r32
            r14 = r29
            r15 = r31
            r16 = r30
            r17 = r7
            java.util.List r3 = r10.applyPostResolutionFilter(r11, r12, r13, r14, r15, r16, r17)     // Catch:{ all -> 0x029c }
            monitor-exit(r19)     // Catch:{ all -> 0x029c }
            return r3
        L_0x029c:
            r0 = move-exception
            r9 = r30
            r10 = r5
            r11 = r6
            r12 = r7
            r17 = r20
            r13 = r22
            goto L_0x039f
        L_0x02a8:
            r3 = r25
            r4 = r7
            r10 = r5
            r5 = r21
            r11 = r6
            r6 = r1
            r12 = r7
            r7 = r8
            r13 = r8
            r8 = r30
            java.util.List r3 = r3.filterCandidatesWithDomainPreferredActivitiesLPr(r4, r5, r6, r7, r8)     // Catch:{ all -> 0x02bd }
            r1 = r3
            r3 = 1
            r13 = r3
            goto L_0x02db
        L_0x02bd:
            r0 = move-exception
            r9 = r30
            r17 = r20
            r13 = r22
            goto L_0x039f
        L_0x02c6:
            r0 = move-exception
            r10 = r5
            r11 = r6
            r12 = r7
            r9 = r30
            r17 = r20
            r13 = r22
            goto L_0x039f
        L_0x02d2:
            r30 = r7
            r0 = r8
            r24 = r12
            r12 = r10
            r10 = r15
            r13 = r22
        L_0x02db:
            r9 = r30
            r0 = r1
            r17 = r20
            goto L_0x0371
        L_0x02e2:
            r0 = move-exception
            r24 = r12
            r12 = r10
            r10 = r15
            r9 = r7
            r17 = r20
            r13 = r22
            goto L_0x039f
        L_0x02ee:
            r0 = move-exception
            r24 = r12
            r12 = r10
            r10 = r15
            r9 = r30
            r17 = r20
            goto L_0x039f
        L_0x02f9:
            r0 = move-exception
            r21 = r6
            r24 = r12
            r12 = r10
            r10 = r15
            r9 = r8
            r17 = r20
            goto L_0x039f
        L_0x0305:
            r0 = move-exception
            r21 = r6
            r24 = r12
            r12 = r10
            r10 = r15
            r9 = r8
            goto L_0x039f
        L_0x030f:
            r0 = move-exception
            r21 = r28
            r24 = r12
            r10 = r15
            r12 = r20
            r9 = r30
            goto L_0x039f
        L_0x031b:
            r0 = move-exception
            r21 = r28
            r19 = r8
            r24 = r12
            r12 = r10
            r10 = r15
            goto L_0x039f
        L_0x0326:
            r21 = r28
            r19 = r8
            r30 = r9
            r24 = r12
            r12 = r10
            r10 = r15
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r10.mPackages     // Catch:{ all -> 0x039c }
            java.lang.Object r0 = r0.get(r11)     // Catch:{ all -> 0x039c }
            android.content.pm.PackageParser$Package r0 = (android.content.pm.PackageParser.Package) r0     // Catch:{ all -> 0x039c }
            r7 = 0
            if (r0 == 0) goto L_0x0352
            com.android.server.pm.ComponentResolver r1 = r10.mComponentResolver     // Catch:{ all -> 0x039c }
            java.util.ArrayList r5 = r0.activities     // Catch:{ all -> 0x039c }
            r2 = r12
            r3 = r27
            r4 = r21
            r6 = r30
            java.util.List r1 = r1.queryActivities(r2, r3, r4, r5, r6)     // Catch:{ all -> 0x039c }
            r9 = r30
            java.util.List r1 = r10.filterIfNotSystemUser(r1, r9)     // Catch:{ all -> 0x03a1 }
            r7 = r1
            goto L_0x0354
        L_0x0352:
            r9 = r30
        L_0x0354:
            if (r7 == 0) goto L_0x035f
            int r1 = r7.size()     // Catch:{ all -> 0x03a1 }
            if (r1 != 0) goto L_0x035d
            goto L_0x035f
        L_0x035d:
            r0 = r7
            goto L_0x0371
        L_0x035f:
            r1 = 0
            r2 = 1
            boolean r1 = r10.isInstantAppResolutionAllowed(r12, r1, r9, r2)     // Catch:{ all -> 0x03a1 }
            r17 = r1
            if (r7 != 0) goto L_0x0370
            java.util.ArrayList r1 = new java.util.ArrayList     // Catch:{ all -> 0x03a1 }
            r1.<init>()     // Catch:{ all -> 0x03a1 }
            r0 = r1
            goto L_0x0371
        L_0x0370:
            r0 = r7
        L_0x0371:
            monitor-exit(r19)     // Catch:{ all -> 0x03a1 }
            if (r17 == 0) goto L_0x0383
            r1 = r25
            r2 = r0
            r3 = r12
            r4 = r27
            r5 = r21
            r6 = r9
            r7 = r31
            java.util.List r0 = r1.maybeAddInstantAppInstaller(r2, r3, r4, r5, r6, r7)
        L_0x0383:
            if (r13 == 0) goto L_0x038a
            java.util.Comparator<android.content.pm.ResolveInfo> r1 = com.android.server.pm.ComponentResolver.RESOLVE_PRIORITY_SORTER
            java.util.Collections.sort(r0, r1)
        L_0x038a:
            r1 = r25
            r2 = r0
            r3 = r24
            r4 = r32
            r5 = r29
            r6 = r31
            r7 = r9
            r8 = r12
            java.util.List r1 = r1.applyPostResolutionFilter(r2, r3, r4, r5, r6, r7, r8)
            return r1
        L_0x039c:
            r0 = move-exception
            r9 = r30
        L_0x039f:
            monitor-exit(r19)     // Catch:{ all -> 0x03a1 }
            throw r0
        L_0x03a1:
            r0 = move-exception
            goto L_0x039f
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.queryIntentActivitiesInternal(android.content.Intent, java.lang.String, int, int, int, boolean, boolean):java.util.List");
    }

    /* JADX WARNING: Removed duplicated region for block: B:27:0x00a6  */
    /* JADX WARNING: Removed duplicated region for block: B:30:0x00e9  */
    /* JADX WARNING: Removed duplicated region for block: B:41:0x0138  */
    /* JADX WARNING: Removed duplicated region for block: B:49:0x016a  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private java.util.List<android.content.pm.ResolveInfo> maybeAddInstantAppInstaller(java.util.List<android.content.pm.ResolveInfo> r22, android.content.Intent r23, java.lang.String r24, int r25, int r26, boolean r27) {
        /*
            r21 = this;
            r0 = r21
            r1 = r22
            r10 = r26
            r2 = 8388608(0x800000, float:1.17549435E-38)
            r3 = r25 & r2
            r11 = 1
            if (r3 == 0) goto L_0x000f
            r3 = r11
            goto L_0x0010
        L_0x000f:
            r3 = 0
        L_0x0010:
            r13 = r3
            r3 = 0
            r4 = 0
            java.lang.String r14 = "PackageManager"
            if (r13 != 0) goto L_0x009c
            com.android.server.pm.ComponentResolver r5 = r0.mComponentResolver
            r6 = r25 | 64
            r2 = r2 | r6
            r6 = 16777216(0x1000000, float:2.3509887E-38)
            r2 = r2 | r6
            r15 = r23
            r9 = r24
            java.util.List r2 = r5.queryActivities(r15, r9, r2, r10)
            int r5 = r2.size()
            int r5 = r5 - r11
        L_0x002c:
            if (r5 < 0) goto L_0x0099
            java.lang.Object r6 = r2.get(r5)
            android.content.pm.ResolveInfo r6 = (android.content.pm.ResolveInfo) r6
            android.content.pm.ActivityInfo r7 = r6.activityInfo
            java.lang.String r7 = r7.packageName
            com.android.server.pm.Settings r8 = r0.mSettings
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r8 = r8.mPackages
            java.lang.Object r8 = r8.get(r7)
            com.android.server.pm.PackageSetting r8 = (com.android.server.pm.PackageSetting) r8
            boolean r16 = r8.getInstantApp(r10)
            if (r16 == 0) goto L_0x0093
            long r16 = r0.getDomainVerificationStatusLPr(r8, r10)
            r18 = 32
            long r11 = r16 >> r18
            int r11 = (int) r11
            r12 = 3
            if (r11 != r12) goto L_0x0075
            boolean r12 = DEBUG_INSTANT
            if (r12 == 0) goto L_0x006f
            java.lang.StringBuilder r12 = new java.lang.StringBuilder
            r12.<init>()
            r18 = r2
            java.lang.String r2 = "Instant app marked to never run; pkg: "
            r12.append(r2)
            r12.append(r7)
            java.lang.String r2 = r12.toString()
            android.util.Slog.v(r14, r2)
            goto L_0x0071
        L_0x006f:
            r18 = r2
        L_0x0071:
            r4 = 1
            r12 = r3
            r11 = r4
            goto L_0x00a2
        L_0x0075:
            r18 = r2
            boolean r2 = DEBUG_INSTANT
            if (r2 == 0) goto L_0x008f
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r12 = "Found installed instant app; pkg: "
            r2.append(r12)
            r2.append(r7)
            java.lang.String r2 = r2.toString()
            android.util.Slog.v(r14, r2)
        L_0x008f:
            r3 = r6
            r12 = r3
            r11 = r4
            goto L_0x00a2
        L_0x0093:
            r18 = r2
            int r5 = r5 + -1
            r11 = 1
            goto L_0x002c
        L_0x0099:
            r18 = r2
            goto L_0x00a0
        L_0x009c:
            r15 = r23
            r9 = r24
        L_0x00a0:
            r12 = r3
            r11 = r4
        L_0x00a2:
            r16 = 0
            if (r11 != 0) goto L_0x00e9
            if (r12 != 0) goto L_0x00d4
            r7 = 262144(0x40000, double:1.295163E-318)
            java.lang.String r2 = "resolveEphemeral"
            android.os.Trace.traceBegin(r7, r2)
            android.content.pm.InstantAppRequest r17 = new android.content.pm.InstantAppRequest
            r3 = 0
            r6 = 0
            r18 = 0
            r2 = r17
            r4 = r23
            r5 = r24
            r19 = r7
            r7 = r26
            r8 = r18
            r9 = r27
            r2.<init>(r3, r4, r5, r6, r7, r8, r9)
            com.android.server.pm.InstantAppResolverConnection r3 = r0.mInstantAppResolverConnection
            android.content.pm.AuxiliaryResolveInfo r16 = com.android.server.pm.InstantAppResolver.doInstantAppResolutionPhaseOne(r3, r2)
            android.os.Trace.traceEnd(r19)
            r2 = r16
            goto L_0x00eb
        L_0x00d4:
            android.content.pm.ActivityInfo r2 = r12.activityInfo
            android.content.pm.ApplicationInfo r2 = r2.applicationInfo
            android.content.pm.AuxiliaryResolveInfo r9 = new android.content.pm.AuxiliaryResolveInfo
            r4 = 0
            java.lang.String r5 = r2.packageName
            long r6 = r2.longVersionCode
            r8 = 0
            r3 = r9
            r3.<init>(r4, r5, r6, r8)
            r16 = r9
            r2 = r16
            goto L_0x00eb
        L_0x00e9:
            r2 = r16
        L_0x00eb:
            boolean r3 = r23.isWebIntent()
            if (r3 == 0) goto L_0x00f4
            if (r2 != 0) goto L_0x00f4
            return r1
        L_0x00f4:
            com.android.server.pm.Settings r3 = r0.mSettings
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r3 = r3.mPackages
            android.content.pm.ActivityInfo r4 = r0.mInstantAppInstallerActivity
            java.lang.String r4 = r4.packageName
            java.lang.Object r3 = r3.get(r4)
            com.android.server.pm.PackageSetting r3 = (com.android.server.pm.PackageSetting) r3
            if (r3 == 0) goto L_0x0173
            android.content.pm.PackageUserState r4 = r3.readUserState(r10)
            android.content.pm.ActivityInfo r5 = r0.mInstantAppInstallerActivity
            r6 = 0
            boolean r4 = r4.isEnabled(r5, r6)
            if (r4 != 0) goto L_0x0112
            goto L_0x0173
        L_0x0112:
            android.content.pm.ResolveInfo r4 = new android.content.pm.ResolveInfo
            android.content.pm.ResolveInfo r5 = r0.mInstantAppInstallerInfo
            r4.<init>(r5)
            android.content.pm.ActivityInfo r5 = r0.mInstantAppInstallerActivity
            android.content.pm.PackageUserState r6 = r3.readUserState(r10)
            r7 = 0
            android.content.pm.ActivityInfo r5 = android.content.pm.PackageParser.generateActivityInfo(r5, r7, r6, r10)
            r4.activityInfo = r5
            r5 = 5799936(0x588000, float:8.127441E-39)
            r4.match = r5
            android.content.IntentFilter r5 = new android.content.IntentFilter
            r5.<init>()
            r4.filter = r5
            java.lang.String r5 = r23.getAction()
            if (r5 == 0) goto L_0x0141
            android.content.IntentFilter r5 = r4.filter
            java.lang.String r6 = r23.getAction()
            r5.addAction(r6)
        L_0x0141:
            android.net.Uri r5 = r23.getData()
            if (r5 == 0) goto L_0x015f
            android.net.Uri r5 = r23.getData()
            java.lang.String r5 = r5.getPath()
            if (r5 == 0) goto L_0x015f
            android.content.IntentFilter r5 = r4.filter
            android.net.Uri r6 = r23.getData()
            java.lang.String r6 = r6.getPath()
            r7 = 0
            r5.addDataPath(r6, r7)
        L_0x015f:
            r5 = 1
            r4.isInstantAppAvailable = r5
            r4.isDefault = r5
            r4.auxiliaryInfo = r2
            boolean r5 = DEBUG_INSTANT
            if (r5 == 0) goto L_0x016f
            java.lang.String r5 = "Adding ephemeral installer to the ResolveInfo list"
            android.util.Slog.v(r14, r5)
        L_0x016f:
            r1.add(r4)
            return r1
        L_0x0173:
            return r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.maybeAddInstantAppInstaller(java.util.List, android.content.Intent, java.lang.String, int, int, boolean):java.util.List");
    }

    private static class CrossProfileDomainInfo {
        int bestDomainVerificationStatus;
        ResolveInfo resolveInfo;

        private CrossProfileDomainInfo() {
        }
    }

    private CrossProfileDomainInfo getCrossProfileDomainPreferredLpr(Intent intent, String resolvedType, int flags, int sourceUserId, int parentUserId) {
        List<ResolveInfo> resultTargetUser;
        int i = sourceUserId;
        int i2 = parentUserId;
        if (!sUserManager.hasUserRestriction("allow_parent_profile_app_linking", i)) {
            return null;
        }
        List<ResolveInfo> resultTargetUser2 = this.mComponentResolver.queryActivities(intent, resolvedType, flags, i2);
        if (resultTargetUser2 == null) {
            return null;
        } else if (resultTargetUser2.isEmpty()) {
            List<ResolveInfo> list = resultTargetUser2;
            return null;
        } else {
            CrossProfileDomainInfo result = null;
            int size = resultTargetUser2.size();
            int i3 = 0;
            while (i3 < size) {
                ResolveInfo riTargetUser = resultTargetUser2.get(i3);
                if (riTargetUser.handleAllWebDataURI) {
                    resultTargetUser = resultTargetUser2;
                } else {
                    PackageSetting ps = this.mSettings.mPackages.get(riTargetUser.activityInfo.packageName);
                    if (ps == null) {
                        resultTargetUser = resultTargetUser2;
                    } else {
                        int status = (int) (getDomainVerificationStatusLPr(ps, i2) >> 32);
                        if (result == null) {
                            resultTargetUser = resultTargetUser2;
                            CrossProfileDomainInfo result2 = new CrossProfileDomainInfo();
                            result2.resolveInfo = createForwardingResolveInfoUnchecked(new IntentFilter(), i, i2);
                            result2.bestDomainVerificationStatus = status;
                            result = result2;
                        } else {
                            resultTargetUser = resultTargetUser2;
                            result.bestDomainVerificationStatus = bestDomainVerificationStatus(status, result.bestDomainVerificationStatus);
                        }
                    }
                }
                i3++;
                Intent intent2 = intent;
                resultTargetUser2 = resultTargetUser;
            }
            if (result == null || result.bestDomainVerificationStatus != 3) {
                return result;
            }
            return null;
        }
    }

    private int bestDomainVerificationStatus(int status1, int status2) {
        if (status1 == 3) {
            return status2;
        }
        if (status2 == 3) {
            return status1;
        }
        return (int) MathUtils.max(status1, status2);
    }

    private boolean isUserEnabled(int userId) {
        long callingId = Binder.clearCallingIdentity();
        try {
            UserInfo userInfo = sUserManager.getUserInfo(userId);
            return userInfo != null && userInfo.isEnabled();
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    private List<ResolveInfo> filterIfNotSystemUser(List<ResolveInfo> resolveInfos, int userId) {
        if (userId == 0) {
            return resolveInfos;
        }
        for (int i = resolveInfos.size() - 1; i >= 0; i--) {
            if ((resolveInfos.get(i).activityInfo.flags & 536870912) != 0) {
                resolveInfos.remove(i);
            }
        }
        return resolveInfos;
    }

    private List<ResolveInfo> applyPostResolutionFilter(List<ResolveInfo> resolveInfos, String ephemeralPkgName, boolean allowDynamicSplits, int filterCallingUid, boolean resolveForStart, int userId, Intent intent) {
        List<ResolveInfo> list = resolveInfos;
        String str = ephemeralPkgName;
        int i = userId;
        boolean blockInstant = intent.isWebIntent() && areWebInstantAppsDisabled(i);
        for (int i2 = resolveInfos.size() - 1; i2 >= 0; i2--) {
            ResolveInfo info = list.get(i2);
            if (!info.isInstantAppAvailable || !blockInstant) {
                if (!allowDynamicSplits || info.activityInfo == null || info.activityInfo.splitName == null) {
                    int i3 = filterCallingUid;
                } else if (ArrayUtils.contains(info.activityInfo.applicationInfo.splitNames, info.activityInfo.splitName)) {
                    int i4 = filterCallingUid;
                } else if (this.mInstantAppInstallerActivity == null) {
                    list.remove(i2);
                    int i5 = filterCallingUid;
                } else if (!blockInstant || !isInstantApp(info.activityInfo.packageName, i)) {
                    ResolveInfo installerInfo = new ResolveInfo(this.mInstantAppInstallerInfo);
                    AuxiliaryResolveInfo auxiliaryResolveInfo = r11;
                    AuxiliaryResolveInfo auxiliaryResolveInfo2 = new AuxiliaryResolveInfo(findInstallFailureActivity(info.activityInfo.packageName, filterCallingUid, i), info.activityInfo.packageName, info.activityInfo.applicationInfo.longVersionCode, info.activityInfo.splitName);
                    installerInfo.auxiliaryInfo = auxiliaryResolveInfo;
                    installerInfo.filter = new IntentFilter();
                    installerInfo.resolvePackageName = info.getComponentInfo().packageName;
                    installerInfo.labelRes = info.resolveLabelResId();
                    installerInfo.icon = info.resolveIconResId();
                    installerInfo.isInstantAppAvailable = true;
                    list.set(i2, installerInfo);
                } else {
                    list.remove(i2);
                    int i6 = filterCallingUid;
                }
                if (str != null && !str.equals(info.activityInfo.packageName) && ((!resolveForStart || !((intent.isWebIntent() || (intent.getFlags() & 2048) != 0) && intent.getPackage() == null && intent.getComponent() == null)) && (info.activityInfo.applicationInfo.isInstantApp() || (info.activityInfo.flags & 1048576) == 0))) {
                    list.remove(i2);
                }
            } else {
                list.remove(i2);
                int i7 = filterCallingUid;
            }
        }
        int i8 = filterCallingUid;
        return list;
    }

    private ComponentName findInstallFailureActivity(String packageName, int filterCallingUid, int userId) {
        Intent failureActivityIntent = new Intent("android.intent.action.INSTALL_FAILURE");
        failureActivityIntent.setPackage(packageName);
        List<ResolveInfo> result = queryIntentActivitiesInternal(failureActivityIntent, (String) null, 0, filterCallingUid, userId, false, false);
        int NR = result.size();
        if (NR <= 0) {
            return null;
        }
        for (int i = 0; i < NR; i++) {
            ResolveInfo info = result.get(i);
            if (info.activityInfo.splitName == null) {
                return new ComponentName(packageName, info.activityInfo.name);
            }
        }
        return null;
    }

    private boolean hasNonNegativePriority(List<ResolveInfo> resolveInfos) {
        return resolveInfos.size() > 0 && resolveInfos.get(0).priority >= 0;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:97:0x0219, code lost:
        return r8;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private java.util.List<android.content.pm.ResolveInfo> filterCandidatesWithDomainPreferredActivitiesLPr(android.content.Intent r28, int r29, java.util.List<android.content.pm.ResolveInfo> r30, com.android.server.pm.PackageManagerService.CrossProfileDomainInfo r31, int r32) {
        /*
            r27 = this;
            r1 = r27
            r2 = r30
            r3 = r31
            r4 = r32
            int r0 = r28.getFlags()
            r0 = r0 & 8
            if (r0 == 0) goto L_0x0012
            r0 = 1
            goto L_0x0013
        L_0x0012:
            r0 = 0
        L_0x0013:
            r7 = r0
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r8 = r0
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r9 = r0
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r10 = r0
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r11 = r0
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r12 = r0
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r13 = r0
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r14 = r1.mPackages
            monitor-enter(r14)
            int r0 = r30.size()     // Catch:{ all -> 0x021e }
            r15 = 0
        L_0x0040:
            if (r15 >= r0) goto L_0x0124
            java.lang.Object r17 = r2.get(r15)     // Catch:{ all -> 0x021a }
            android.content.pm.ResolveInfo r17 = (android.content.pm.ResolveInfo) r17     // Catch:{ all -> 0x021a }
            r18 = r17
            r6 = r18
            android.content.pm.ActivityInfo r5 = r6.activityInfo     // Catch:{ all -> 0x021a }
            java.lang.String r5 = r5.packageName     // Catch:{ all -> 0x021a }
            r19 = r0
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x021a }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r0 = r0.mPackages     // Catch:{ all -> 0x021a }
            java.lang.Object r0 = r0.get(r5)     // Catch:{ all -> 0x021a }
            com.android.server.pm.PackageSetting r0 = (com.android.server.pm.PackageSetting) r0     // Catch:{ all -> 0x021a }
            if (r0 == 0) goto L_0x0114
            r20 = r5
            boolean r5 = r6.handleAllWebDataURI     // Catch:{ all -> 0x021a }
            if (r5 == 0) goto L_0x0069
            r13.add(r6)     // Catch:{ all -> 0x021e }
            goto L_0x0118
        L_0x0069:
            long r21 = r1.getDomainVerificationStatusLPr(r0, r4)     // Catch:{ all -> 0x021a }
            r5 = 32
            r23 = r0
            long r0 = r21 >> r5
            int r0 = (int) r0     // Catch:{ all -> 0x021a }
            r24 = -1
            long r1 = r21 & r24
            int r1 = (int) r1     // Catch:{ all -> 0x021a }
            r2 = 2
            if (r0 != r2) goto L_0x00a7
            if (r7 == 0) goto L_0x00a0
            java.lang.String r2 = "PackageManager"
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ all -> 0x021a }
            r5.<init>()     // Catch:{ all -> 0x021a }
            java.lang.String r4 = "  + always: "
            r5.append(r4)     // Catch:{ all -> 0x021a }
            android.content.pm.ActivityInfo r4 = r6.activityInfo     // Catch:{ all -> 0x021a }
            java.lang.String r4 = r4.packageName     // Catch:{ all -> 0x021a }
            r5.append(r4)     // Catch:{ all -> 0x021a }
            java.lang.String r4 = " : linkgen="
            r5.append(r4)     // Catch:{ all -> 0x021a }
            r5.append(r1)     // Catch:{ all -> 0x021a }
            java.lang.String r4 = r5.toString()     // Catch:{ all -> 0x021a }
            android.util.Slog.i(r2, r4)     // Catch:{ all -> 0x021a }
        L_0x00a0:
            r6.preferredOrder = r1     // Catch:{ all -> 0x021a }
            r9.add(r6)     // Catch:{ all -> 0x021a }
            goto L_0x0118
        L_0x00a7:
            r2 = 3
            if (r0 != r2) goto L_0x00ca
            if (r7 == 0) goto L_0x00c6
            java.lang.String r2 = "PackageManager"
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x021a }
            r4.<init>()     // Catch:{ all -> 0x021a }
            java.lang.String r5 = "  + never: "
            r4.append(r5)     // Catch:{ all -> 0x021a }
            android.content.pm.ActivityInfo r5 = r6.activityInfo     // Catch:{ all -> 0x021a }
            java.lang.String r5 = r5.packageName     // Catch:{ all -> 0x021a }
            r4.append(r5)     // Catch:{ all -> 0x021a }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x021a }
            android.util.Slog.i(r2, r4)     // Catch:{ all -> 0x021a }
        L_0x00c6:
            r12.add(r6)     // Catch:{ all -> 0x021a }
            goto L_0x0118
        L_0x00ca:
            r2 = 4
            if (r0 != r2) goto L_0x00ed
            if (r7 == 0) goto L_0x00e9
            java.lang.String r2 = "PackageManager"
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x021a }
            r4.<init>()     // Catch:{ all -> 0x021a }
            java.lang.String r5 = "  + always-ask: "
            r4.append(r5)     // Catch:{ all -> 0x021a }
            android.content.pm.ActivityInfo r5 = r6.activityInfo     // Catch:{ all -> 0x021a }
            java.lang.String r5 = r5.packageName     // Catch:{ all -> 0x021a }
            r4.append(r5)     // Catch:{ all -> 0x021a }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x021a }
            android.util.Slog.i(r2, r4)     // Catch:{ all -> 0x021a }
        L_0x00e9:
            r11.add(r6)     // Catch:{ all -> 0x021a }
            goto L_0x0118
        L_0x00ed:
            if (r0 == 0) goto L_0x00f3
            r2 = 1
            if (r0 != r2) goto L_0x0118
            goto L_0x00f4
        L_0x00f3:
            r2 = 1
        L_0x00f4:
            if (r7 == 0) goto L_0x0110
            java.lang.String r4 = "PackageManager"
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ all -> 0x021a }
            r5.<init>()     // Catch:{ all -> 0x021a }
            java.lang.String r2 = "  + ask: "
            r5.append(r2)     // Catch:{ all -> 0x021a }
            android.content.pm.ActivityInfo r2 = r6.activityInfo     // Catch:{ all -> 0x021a }
            java.lang.String r2 = r2.packageName     // Catch:{ all -> 0x021a }
            r5.append(r2)     // Catch:{ all -> 0x021a }
            java.lang.String r2 = r5.toString()     // Catch:{ all -> 0x021a }
            android.util.Slog.i(r4, r2)     // Catch:{ all -> 0x021a }
        L_0x0110:
            r10.add(r6)     // Catch:{ all -> 0x021a }
            goto L_0x0118
        L_0x0114:
            r23 = r0
            r20 = r5
        L_0x0118:
            int r15 = r15 + 1
            r1 = r27
            r2 = r30
            r4 = r32
            r0 = r19
            goto L_0x0040
        L_0x0124:
            r19 = r0
            r0 = 0
            int r1 = r9.size()     // Catch:{ all -> 0x021a }
            if (r1 <= 0) goto L_0x0131
            r8.addAll(r9)     // Catch:{ all -> 0x021a }
            goto L_0x0141
        L_0x0131:
            r8.addAll(r10)     // Catch:{ all -> 0x021a }
            if (r3 == 0) goto L_0x0140
            int r1 = r3.bestDomainVerificationStatus     // Catch:{ all -> 0x021a }
            r2 = 3
            if (r1 == r2) goto L_0x0140
            android.content.pm.ResolveInfo r1 = r3.resolveInfo     // Catch:{ all -> 0x021a }
            r8.add(r1)     // Catch:{ all -> 0x021a }
        L_0x0140:
            r0 = 1
        L_0x0141:
            int r1 = r11.size()     // Catch:{ all -> 0x021a }
            if (r1 <= 0) goto L_0x015f
            java.util.Iterator r1 = r8.iterator()     // Catch:{ all -> 0x021a }
        L_0x014b:
            boolean r2 = r1.hasNext()     // Catch:{ all -> 0x021a }
            if (r2 == 0) goto L_0x015b
            java.lang.Object r2 = r1.next()     // Catch:{ all -> 0x021a }
            android.content.pm.ResolveInfo r2 = (android.content.pm.ResolveInfo) r2     // Catch:{ all -> 0x021a }
            r4 = 0
            r2.preferredOrder = r4     // Catch:{ all -> 0x021a }
            goto L_0x014b
        L_0x015b:
            r8.addAll(r11)     // Catch:{ all -> 0x021a }
            r0 = 1
        L_0x015f:
            if (r0 == 0) goto L_0x0214
            r1 = 131072(0x20000, float:1.83671E-40)
            r1 = r29 & r1
            if (r1 == 0) goto L_0x016e
            r8.addAll(r13)     // Catch:{ all -> 0x021a }
            r16 = r0
            goto L_0x0202
        L_0x016e:
            r1 = r27
            r2 = r32
            java.lang.String r4 = r1.getDefaultBrowserPackageName(r2)     // Catch:{ all -> 0x021a }
            r5 = 0
            r6 = 0
            int r15 = r13.size()     // Catch:{ all -> 0x021a }
            r16 = 0
            r26 = r16
            r16 = r0
            r0 = r5
            r5 = r26
        L_0x0185:
            if (r5 >= r15) goto L_0x01d7
            java.lang.Object r17 = r13.get(r5)     // Catch:{ all -> 0x021a }
            android.content.pm.ResolveInfo r17 = (android.content.pm.ResolveInfo) r17     // Catch:{ all -> 0x021a }
            r18 = r17
            r1 = r18
            int r2 = r1.priority     // Catch:{ all -> 0x021a }
            if (r2 <= r0) goto L_0x0198
            int r2 = r1.priority     // Catch:{ all -> 0x021a }
            r0 = r2
        L_0x0198:
            android.content.pm.ActivityInfo r2 = r1.activityInfo     // Catch:{ all -> 0x021a }
            java.lang.String r2 = r2.packageName     // Catch:{ all -> 0x021a }
            boolean r2 = r2.equals(r4)     // Catch:{ all -> 0x021a }
            if (r2 == 0) goto L_0x01ca
            if (r6 == 0) goto L_0x01ad
            int r2 = r6.priority     // Catch:{ all -> 0x021a }
            r17 = r0
            int r0 = r1.priority     // Catch:{ all -> 0x021a }
            if (r2 >= r0) goto L_0x01cc
            goto L_0x01af
        L_0x01ad:
            r17 = r0
        L_0x01af:
            if (r7 == 0) goto L_0x01c7
            java.lang.String r0 = "PackageManager"
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x021a }
            r2.<init>()     // Catch:{ all -> 0x021a }
            java.lang.String r3 = "Considering default browser match "
            r2.append(r3)     // Catch:{ all -> 0x021a }
            r2.append(r1)     // Catch:{ all -> 0x021a }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x021a }
            android.util.Slog.v(r0, r2)     // Catch:{ all -> 0x021a }
        L_0x01c7:
            r0 = r1
            r6 = r0
            goto L_0x01cc
        L_0x01ca:
            r17 = r0
        L_0x01cc:
            int r5 = r5 + 1
            r1 = r27
            r3 = r31
            r2 = r32
            r0 = r17
            goto L_0x0185
        L_0x01d7:
            if (r6 == 0) goto L_0x01ff
            int r1 = r6.priority     // Catch:{ all -> 0x021a }
            if (r1 < r0) goto L_0x01ff
            boolean r1 = android.text.TextUtils.isEmpty(r4)     // Catch:{ all -> 0x021a }
            if (r1 != 0) goto L_0x01ff
            if (r7 == 0) goto L_0x01fb
            java.lang.String r1 = "PackageManager"
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x021a }
            r2.<init>()     // Catch:{ all -> 0x021a }
            java.lang.String r3 = "Default browser match "
            r2.append(r3)     // Catch:{ all -> 0x021a }
            r2.append(r6)     // Catch:{ all -> 0x021a }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x021a }
            android.util.Slog.v(r1, r2)     // Catch:{ all -> 0x021a }
        L_0x01fb:
            r8.add(r6)     // Catch:{ all -> 0x021a }
            goto L_0x0202
        L_0x01ff:
            r8.addAll(r13)     // Catch:{ all -> 0x021a }
        L_0x0202:
            int r0 = r8.size()     // Catch:{ all -> 0x021a }
            if (r0 != 0) goto L_0x0211
            r1 = r30
            r8.addAll(r1)     // Catch:{ all -> 0x0222 }
            r8.removeAll(r12)     // Catch:{ all -> 0x0222 }
            goto L_0x0218
        L_0x0211:
            r1 = r30
            goto L_0x0218
        L_0x0214:
            r1 = r30
            r16 = r0
        L_0x0218:
            monitor-exit(r14)     // Catch:{ all -> 0x0222 }
            return r8
        L_0x021a:
            r0 = move-exception
            r1 = r30
            goto L_0x0220
        L_0x021e:
            r0 = move-exception
            r1 = r2
        L_0x0220:
            monitor-exit(r14)     // Catch:{ all -> 0x0222 }
            throw r0
        L_0x0222:
            r0 = move-exception
            goto L_0x0220
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.filterCandidatesWithDomainPreferredActivitiesLPr(android.content.Intent, int, java.util.List, com.android.server.pm.PackageManagerService$CrossProfileDomainInfo, int):java.util.List");
    }

    private long getDomainVerificationStatusLPr(PackageSetting ps, int userId) {
        long result = ps.getDomainVerificationStatusForUser(userId);
        if ((result >> 32) != 0 || ps.getIntentFilterVerificationInfo() == null) {
            return result;
        }
        return ((long) ps.getIntentFilterVerificationInfo().getStatus()) << 32;
    }

    private ResolveInfo querySkipCurrentProfileIntents(List<CrossProfileIntentFilter> matchingFilters, Intent intent, String resolvedType, int flags, int sourceUserId) {
        ResolveInfo resolveInfo;
        if (matchingFilters == null) {
            return null;
        }
        int size = matchingFilters.size();
        for (int i = 0; i < size; i++) {
            CrossProfileIntentFilter filter = matchingFilters.get(i);
            if ((filter.getFlags() & 2) != 0 && (resolveInfo = createForwardingResolveInfo(filter, intent, resolvedType, flags, sourceUserId)) != null) {
                return resolveInfo;
            }
        }
        return null;
    }

    private ResolveInfo queryCrossProfileIntents(List<CrossProfileIntentFilter> matchingFilters, Intent intent, String resolvedType, int flags, int sourceUserId, boolean matchInCurrentProfile) {
        List<CrossProfileIntentFilter> list = matchingFilters;
        if (list == null) {
            return null;
        }
        SparseBooleanArray alreadyTriedUserIds = new SparseBooleanArray();
        int size = matchingFilters.size();
        for (int i = 0; i < size; i++) {
            CrossProfileIntentFilter filter = list.get(i);
            int targetUserId = filter.getTargetUserId();
            boolean z = false;
            boolean skipCurrentProfile = (filter.getFlags() & 2) != 0;
            if ((filter.getFlags() & 4) != 0) {
                z = true;
            }
            boolean skipCurrentProfileIfNoMatchFound = z;
            if (!skipCurrentProfile && !alreadyTriedUserIds.get(targetUserId) && (!skipCurrentProfileIfNoMatchFound || !matchInCurrentProfile)) {
                ResolveInfo resolveInfo = createForwardingResolveInfo(filter, intent, resolvedType, flags, sourceUserId);
                if (resolveInfo != null) {
                    return resolveInfo;
                }
                alreadyTriedUserIds.put(targetUserId, true);
            }
        }
        return null;
    }

    private ResolveInfo createForwardingResolveInfo(CrossProfileIntentFilter filter, Intent intent, String resolvedType, int flags, int sourceUserId) {
        int targetUserId = filter.getTargetUserId();
        List<ResolveInfo> resultTargetUser = this.mComponentResolver.queryActivities(intent, resolvedType, flags, targetUserId);
        if (resultTargetUser == null || !isUserEnabled(targetUserId)) {
            return null;
        }
        for (int i = resultTargetUser.size() - 1; i >= 0; i--) {
            if ((resultTargetUser.get(i).activityInfo.applicationInfo.flags & 1073741824) == 0) {
                return createForwardingResolveInfoUnchecked(filter, sourceUserId, targetUserId);
            }
        }
        return null;
    }

    private ResolveInfo createForwardingResolveInfoUnchecked(IntentFilter filter, int sourceUserId, int targetUserId) {
        String className;
        ResolveInfo forwardingResolveInfo = new ResolveInfo();
        long ident = Binder.clearCallingIdentity();
        try {
            boolean targetIsProfile = sUserManager.getUserInfo(targetUserId).isManagedProfile();
            if (targetIsProfile) {
                className = IntentForwarderActivity.FORWARD_INTENT_TO_MANAGED_PROFILE;
            } else {
                className = IntentForwarderActivity.FORWARD_INTENT_TO_PARENT;
            }
            ActivityInfo forwardingActivityInfo = getActivityInfo(new ComponentName(this.mAndroidApplication.packageName, className), 0, sourceUserId);
            if (!targetIsProfile) {
                forwardingActivityInfo.showUserIcon = targetUserId;
                forwardingResolveInfo.noResourceId = true;
            }
            forwardingResolveInfo.activityInfo = forwardingActivityInfo;
            forwardingResolveInfo.priority = 0;
            forwardingResolveInfo.preferredOrder = 0;
            forwardingResolveInfo.match = 0;
            forwardingResolveInfo.isDefault = true;
            forwardingResolveInfo.filter = filter;
            forwardingResolveInfo.targetUserId = targetUserId;
            return forwardingResolveInfo;
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public ParceledListSlice<ResolveInfo> queryIntentActivityOptions(ComponentName caller, Intent[] specifics, String[] specificTypes, Intent intent, String resolvedType, int flags, int userId) {
        return new ParceledListSlice<>(queryIntentActivityOptionsInternal(caller, specifics, specificTypes, intent, resolvedType, flags, userId));
    }

    private List<ResolveInfo> queryIntentActivityOptionsInternal(ComponentName caller, Intent[] specifics, String[] specificTypes, Intent intent, String resolvedType, int flags, int userId) {
        Iterator<String> it;
        ActivityInfo ai;
        PackageManagerService packageManagerService = this;
        Intent[] intentArr = specifics;
        int i = userId;
        if (!sUserManager.exists(i)) {
            return Collections.emptyList();
        }
        int callingUid = Binder.getCallingUid();
        int i2 = userId;
        int flags2 = updateFlagsForResolve(flags, i2, intent, callingUid, false);
        packageManagerService.mPermissionManager.enforceCrossUserPermission(callingUid, i2, false, false, "query intent activity options");
        String resultsAction = intent.getAction();
        List<ResolveInfo> results = packageManagerService.queryIntentActivitiesInternal(intent, resolvedType, flags2 | 64, i);
        int specificsPos = 0;
        if (intentArr != null) {
            int i3 = 0;
            while (i3 < intentArr.length) {
                Intent sintent = intentArr[i3];
                if (sintent != null) {
                    String action = sintent.getAction();
                    if (resultsAction != null && resultsAction.equals(action)) {
                        action = null;
                    }
                    ResolveInfo ri = null;
                    ComponentName comp = sintent.getComponent();
                    if (comp == null) {
                        ri = packageManagerService.resolveIntent(sintent, specificTypes != null ? specificTypes[i3] : null, flags2, i);
                        if (ri != null) {
                            ResolveInfo resolveInfo = packageManagerService.mResolveInfo;
                            ai = ri.activityInfo;
                            comp = new ComponentName(ai.applicationInfo.packageName, ai.name);
                        }
                    } else {
                        ai = packageManagerService.getActivityInfo(comp, flags2, i);
                        if (ai == null) {
                        }
                    }
                    int N = results.size();
                    int j = specificsPos;
                    while (j < N) {
                        ResolveInfo sri = results.get(j);
                        if ((sri.activityInfo.name.equals(comp.getClassName()) && sri.activityInfo.applicationInfo.packageName.equals(comp.getPackageName())) || (action != null && sri.filter.matchAction(action))) {
                            results.remove(j);
                            if (ri == null) {
                                ri = sri;
                            }
                            j--;
                            N--;
                        }
                        j++;
                        int i4 = userId;
                    }
                    if (ri == null) {
                        ri = new ResolveInfo();
                        ri.activityInfo = ai;
                    }
                    results.add(specificsPos, ri);
                    ri.specificIndex = i3;
                    specificsPos++;
                }
                i3++;
                packageManagerService = this;
                intentArr = specifics;
                Intent intent2 = intent;
                String str = resolvedType;
                i = userId;
            }
        }
        int N2 = results.size();
        for (int i5 = specificsPos; i5 < N2 - 1; i5++) {
            ResolveInfo rii = results.get(i5);
            if (!(rii.filter == null || (it = rii.filter.actionsIterator()) == null)) {
                while (it.hasNext()) {
                    String action2 = it.next();
                    if (resultsAction == null || !resultsAction.equals(action2)) {
                        int j2 = i5 + 1;
                        while (j2 < N2) {
                            ResolveInfo rij = results.get(j2);
                            if (rij.filter != null && rij.filter.hasAction(action2)) {
                                results.remove(j2);
                                j2--;
                                N2--;
                            }
                            j2++;
                        }
                    }
                }
                if ((flags2 & 64) == 0) {
                    rii.filter = null;
                }
            }
        }
        if (caller != null) {
            int N3 = results.size();
            int i6 = 0;
            while (true) {
                if (i6 >= N3) {
                    break;
                }
                ActivityInfo ainfo = results.get(i6).activityInfo;
                if (caller.getPackageName().equals(ainfo.applicationInfo.packageName) && caller.getClassName().equals(ainfo.name)) {
                    results.remove(i6);
                    break;
                }
                i6++;
            }
        }
        if ((flags2 & 64) == 0) {
            int N4 = results.size();
            for (int i7 = 0; i7 < N4; i7++) {
                results.get(i7).filter = null;
            }
        }
        return results;
    }

    public ParceledListSlice<ResolveInfo> queryIntentReceivers(Intent intent, String resolvedType, int flags, int userId) {
        return new ParceledListSlice<>(queryIntentReceiversInternal(intent, resolvedType, flags, userId, false));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:57:0x00c8  */
    /* JADX WARNING: Removed duplicated region for block: B:58:0x00d9  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public java.util.List<android.content.pm.ResolveInfo> queryIntentReceiversInternal(android.content.Intent r21, java.lang.String r22, int r23, int r24, boolean r25) {
        /*
            r20 = this;
            r9 = r20
            r10 = r24
            com.android.server.pm.UserManagerService r0 = sUserManager
            boolean r0 = r0.exists(r10)
            if (r0 != 0) goto L_0x0011
            java.util.List r0 = java.util.Collections.emptyList()
            return r0
        L_0x0011:
            int r11 = android.os.Binder.getCallingUid()
            com.android.server.pm.permission.PermissionManagerServiceInternal r1 = r9.mPermissionManager
            r4 = 0
            r5 = 0
            java.lang.String r6 = "query intent receivers"
            r2 = r11
            r3 = r24
            r1.enforceCrossUserPermission(r2, r3, r4, r5, r6)
            java.lang.String r12 = r9.getInstantAppPackageName(r11)
            r6 = 0
            r1 = r20
            r2 = r23
            r4 = r21
            r5 = r11
            int r13 = r1.updateFlagsForResolve(r2, r3, r4, r5, r6)
            android.content.ComponentName r0 = r21.getComponent()
            if (r0 != 0) goto L_0x0049
            android.content.Intent r1 = r21.getSelector()
            if (r1 == 0) goto L_0x0049
            android.content.Intent r1 = r21.getSelector()
            android.content.ComponentName r0 = r1.getComponent()
            r14 = r0
            r15 = r1
            goto L_0x004c
        L_0x0049:
            r15 = r21
            r14 = r0
        L_0x004c:
            if (r14 == 0) goto L_0x00ef
            java.util.ArrayList r0 = new java.util.ArrayList
            r1 = 1
            r0.<init>(r1)
            android.content.pm.ActivityInfo r8 = r9.getReceiverInfo(r14, r13, r10)
            if (r8 == 0) goto L_0x00dc
            r2 = 8388608(0x800000, float:1.17549435E-38)
            r2 = r2 & r13
            if (r2 == 0) goto L_0x0061
            r2 = r1
            goto L_0x0062
        L_0x0061:
            r2 = 0
        L_0x0062:
            r4 = 16777216(0x1000000, float:2.3509887E-38)
            r4 = r4 & r13
            if (r4 == 0) goto L_0x0069
            r4 = r1
            goto L_0x006a
        L_0x0069:
            r4 = 0
        L_0x006a:
            r5 = 33554432(0x2000000, float:9.403955E-38)
            r5 = r5 & r13
            if (r5 == 0) goto L_0x0071
            r5 = r1
            goto L_0x0072
        L_0x0071:
            r5 = 0
        L_0x0072:
            if (r12 == 0) goto L_0x0076
            r6 = r1
            goto L_0x0077
        L_0x0076:
            r6 = 0
        L_0x0077:
            java.lang.String r7 = r14.getPackageName()
            boolean r7 = r7.equals(r12)
            android.content.pm.ApplicationInfo r1 = r8.applicationInfo
            int r1 = r1.privateFlags
            r1 = r1 & 128(0x80, float:1.794E-43)
            if (r1 == 0) goto L_0x008a
            r1 = 1
            goto L_0x008b
        L_0x008a:
            r1 = 0
        L_0x008b:
            int r3 = r8.flags
            r16 = 1048576(0x100000, float:1.469368E-39)
            r3 = r3 & r16
            if (r3 == 0) goto L_0x0095
            r3 = 1
            goto L_0x0096
        L_0x0095:
            r3 = 0
        L_0x0096:
            if (r3 == 0) goto L_0x00a4
            r16 = r14
            int r14 = r8.flags
            r17 = 2097152(0x200000, float:2.938736E-39)
            r14 = r14 & r17
            if (r14 != 0) goto L_0x00a6
            r14 = 1
            goto L_0x00a7
        L_0x00a4:
            r16 = r14
        L_0x00a6:
            r14 = 0
        L_0x00a7:
            if (r3 == 0) goto L_0x00b1
            if (r5 == 0) goto L_0x00ae
            if (r14 != 0) goto L_0x00ae
            goto L_0x00b1
        L_0x00ae:
            r17 = 0
            goto L_0x00b3
        L_0x00b1:
            r17 = 1
        L_0x00b3:
            if (r7 != 0) goto L_0x00c4
            if (r2 != 0) goto L_0x00bb
            if (r6 != 0) goto L_0x00bb
            if (r1 != 0) goto L_0x00c1
        L_0x00bb:
            if (r4 == 0) goto L_0x00c4
            if (r6 == 0) goto L_0x00c4
            if (r17 == 0) goto L_0x00c4
        L_0x00c1:
            r18 = 1
            goto L_0x00c6
        L_0x00c4:
            r18 = 0
        L_0x00c6:
            if (r18 != 0) goto L_0x00d9
            android.content.pm.ResolveInfo r19 = new android.content.pm.ResolveInfo
            r19.<init>()
            r21 = r19
            r23 = r1
            r1 = r21
            r1.activityInfo = r8
            r0.add(r1)
            goto L_0x00de
        L_0x00d9:
            r23 = r1
            goto L_0x00de
        L_0x00dc:
            r16 = r14
        L_0x00de:
            r6 = 0
            r1 = r20
            r2 = r0
            r3 = r12
            r4 = r25
            r5 = r11
            r7 = r24
            r14 = r8
            r8 = r15
            java.util.List r1 = r1.applyPostResolutionFilter(r2, r3, r4, r5, r6, r7, r8)
            return r1
        L_0x00ef:
            r16 = r14
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r14 = r9.mPackages
            monitor-enter(r14)
            java.lang.String r0 = r15.getPackage()     // Catch:{ all -> 0x0145 }
            if (r0 != 0) goto L_0x0112
            com.android.server.pm.ComponentResolver r1 = r9.mComponentResolver     // Catch:{ all -> 0x0145 }
            r8 = r22
            java.util.List r2 = r1.queryReceivers(r15, r8, r13, r10)     // Catch:{ all -> 0x0145 }
            r6 = 0
            r1 = r20
            r3 = r12
            r4 = r25
            r5 = r11
            r7 = r24
            r8 = r15
            java.util.List r1 = r1.applyPostResolutionFilter(r2, r3, r4, r5, r6, r7, r8)     // Catch:{ all -> 0x0145 }
            monitor-exit(r14)     // Catch:{ all -> 0x0145 }
            return r1
        L_0x0112:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r9.mPackages     // Catch:{ all -> 0x0145 }
            java.lang.Object r1 = r1.get(r0)     // Catch:{ all -> 0x0145 }
            android.content.pm.PackageParser$Package r1 = (android.content.pm.PackageParser.Package) r1     // Catch:{ all -> 0x0145 }
            r8 = r1
            if (r8 == 0) goto L_0x013d
            com.android.server.pm.ComponentResolver r1 = r9.mComponentResolver     // Catch:{ all -> 0x0145 }
            java.util.ArrayList r5 = r8.receivers     // Catch:{ all -> 0x0145 }
            r2 = r15
            r3 = r22
            r4 = r13
            r6 = r24
            java.util.List r2 = r1.queryReceivers(r2, r3, r4, r5, r6)     // Catch:{ all -> 0x0145 }
            r6 = 0
            r1 = r20
            r3 = r12
            r4 = r25
            r5 = r11
            r7 = r24
            r17 = r8
            r8 = r15
            java.util.List r1 = r1.applyPostResolutionFilter(r2, r3, r4, r5, r6, r7, r8)     // Catch:{ all -> 0x0145 }
            monitor-exit(r14)     // Catch:{ all -> 0x0145 }
            return r1
        L_0x013d:
            r17 = r8
            java.util.List r1 = java.util.Collections.emptyList()     // Catch:{ all -> 0x0145 }
            monitor-exit(r14)     // Catch:{ all -> 0x0145 }
            return r1
        L_0x0145:
            r0 = move-exception
            monitor-exit(r14)     // Catch:{ all -> 0x0145 }
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.queryIntentReceiversInternal(android.content.Intent, java.lang.String, int, int, boolean):java.util.List");
    }

    public ResolveInfo resolveService(Intent intent, String resolvedType, int flags, int userId) {
        return resolveServiceInternal(intent, resolvedType, flags, userId, Binder.getCallingUid());
    }

    /* access modifiers changed from: private */
    public ResolveInfo resolveServiceInternal(Intent intent, String resolvedType, int flags, int userId, int callingUid) {
        if (!sUserManager.exists(userId)) {
            return null;
        }
        int flags2 = updateFlagsForResolve(flags, userId, intent, callingUid, false);
        List<ResolveInfo> query = queryIntentServicesInternal(intent, resolvedType, flags2, userId, callingUid, false);
        if (query == null || (query.isEmpty() && XSpaceUserHandle.isXSpaceUserId(userId))) {
            query = queryIntentServicesInternal(intent, resolvedType, flags2, 0, callingUid, false);
        }
        if (query == null || query.size() < 1) {
            return null;
        }
        return query.get(0);
    }

    public ParceledListSlice<ResolveInfo> queryIntentServices(Intent intent, String resolvedType, int flags, int userId) {
        return new ParceledListSlice<>(queryIntentServicesInternal(intent, resolvedType, flags, userId, Binder.getCallingUid(), false));
    }

    /* access modifiers changed from: private */
    public List<ResolveInfo> queryIntentServicesInternal(Intent intent, String resolvedType, int flags, int userId, int callingUid, boolean includeInstantApps) {
        Intent intent2;
        ComponentName comp;
        String str = resolvedType;
        int i = userId;
        if (!sUserManager.exists(i)) {
            return Collections.emptyList();
        }
        int i2 = userId;
        this.mPermissionManager.enforceCrossUserPermission(callingUid, i2, false, false, "query intent receivers");
        String instantAppPkgName = getInstantAppPackageName(callingUid);
        Intent intent3 = intent;
        int flags2 = PackageManagerServiceInjector.checkAndResolveFlags(intent3, str, updateFlagsForResolve(flags, i2, intent, callingUid, includeInstantApps), i);
        ComponentName comp2 = intent.getComponent();
        if (comp2 != null || intent.getSelector() == null) {
            comp = comp2;
            intent2 = intent3;
        } else {
            Intent intent4 = intent.getSelector();
            comp = intent4.getComponent();
            intent2 = intent4;
        }
        if (comp != null) {
            List<ResolveInfo> list = new ArrayList<>(1);
            ServiceInfo si = getServiceInfo(comp, flags2, i);
            if (si != null) {
                boolean matchInstantApp = (8388608 & flags2) != 0;
                boolean matchVisibleToInstantAppOnly = (16777216 & flags2) != 0;
                boolean isCallerInstantApp = instantAppPkgName != null;
                boolean isTargetSameInstantApp = comp.getPackageName().equals(instantAppPkgName);
                boolean isTargetInstantApp = (si.applicationInfo.privateFlags & 128) != 0;
                if (!(!isTargetSameInstantApp && ((!matchInstantApp && !isCallerInstantApp && isTargetInstantApp) || (matchVisibleToInstantAppOnly && isCallerInstantApp && ((si.flags & 1048576) == 0))))) {
                    boolean z = isTargetInstantApp;
                    ResolveInfo ri = new ResolveInfo();
                    ri.serviceInfo = si;
                    list.add(ri);
                }
            }
            return list;
        }
        synchronized (this.mPackages) {
            String pkgName = intent2.getPackage();
            if (pkgName == null) {
                List<ResolveInfo> applyPostServiceResolutionFilter = applyPostServiceResolutionFilter(this.mComponentResolver.queryServices(intent2, str, flags2, i), instantAppPkgName);
                return applyPostServiceResolutionFilter;
            }
            PackageParser.Package pkg = this.mPackages.get(pkgName);
            if (pkg != null) {
                PackageParser.Package packageR = pkg;
                List<ResolveInfo> applyPostServiceResolutionFilter2 = applyPostServiceResolutionFilter(this.mComponentResolver.queryServices(intent2, resolvedType, flags2, pkg.services, userId), instantAppPkgName);
                return applyPostServiceResolutionFilter2;
            }
            List<ResolveInfo> emptyList = Collections.emptyList();
            return emptyList;
        }
    }

    private List<ResolveInfo> applyPostServiceResolutionFilter(List<ResolveInfo> resolveInfos, String instantAppPkgName) {
        if (instantAppPkgName == null) {
            return resolveInfos;
        }
        for (int i = resolveInfos.size() - 1; i >= 0; i--) {
            ResolveInfo info = resolveInfos.get(i);
            boolean isEphemeralApp = info.serviceInfo.applicationInfo.isInstantApp();
            if (!isEphemeralApp || !instantAppPkgName.equals(info.serviceInfo.packageName)) {
                if (isEphemeralApp || (info.serviceInfo.flags & 1048576) == 0) {
                    resolveInfos.remove(i);
                }
            } else if (info.serviceInfo.splitName != null && !ArrayUtils.contains(info.serviceInfo.applicationInfo.splitNames, info.serviceInfo.splitName)) {
                if (DEBUG_INSTANT) {
                    Slog.v(TAG, "Adding ephemeral installer to the ResolveInfo list");
                }
                ResolveInfo installerInfo = new ResolveInfo(this.mInstantAppInstallerInfo);
                installerInfo.auxiliaryInfo = new AuxiliaryResolveInfo((ComponentName) null, info.serviceInfo.packageName, info.serviceInfo.applicationInfo.longVersionCode, info.serviceInfo.splitName);
                installerInfo.filter = new IntentFilter();
                installerInfo.resolvePackageName = info.getComponentInfo().packageName;
                resolveInfos.set(i, installerInfo);
            }
        }
        return resolveInfos;
    }

    public ParceledListSlice<ResolveInfo> queryIntentContentProviders(Intent intent, String resolvedType, int flags, int userId) {
        return new ParceledListSlice<>(queryIntentContentProvidersInternal(intent, resolvedType, flags, userId));
    }

    private List<ResolveInfo> queryIntentContentProvidersInternal(Intent intent, String resolvedType, int flags, int userId) {
        Intent intent2;
        ComponentName comp;
        int i = userId;
        if (!sUserManager.exists(i)) {
            return Collections.emptyList();
        }
        int callingUid = Binder.getCallingUid();
        String instantAppPkgName = getInstantAppPackageName(callingUid);
        int flags2 = updateFlagsForResolve(flags, userId, intent, callingUid, false);
        ComponentName comp2 = intent.getComponent();
        if (comp2 != null || intent.getSelector() == null) {
            intent2 = intent;
            comp = comp2;
        } else {
            Intent intent3 = intent.getSelector();
            comp = intent3.getComponent();
            intent2 = intent3;
        }
        if (comp != null) {
            List<ResolveInfo> list = new ArrayList<>(1);
            ProviderInfo pi = getProviderInfo(comp, flags2, i);
            if (pi != null) {
                boolean blockResolution = false;
                boolean matchInstantApp = (8388608 & flags2) != 0;
                boolean matchVisibleToInstantAppOnly = (16777216 & flags2) != 0;
                boolean isCallerInstantApp = instantAppPkgName != null;
                boolean isTargetSameInstantApp = comp.getPackageName().equals(instantAppPkgName);
                boolean isTargetInstantApp = (pi.applicationInfo.privateFlags & 128) != 0;
                boolean isTargetHiddenFromInstantApp = (pi.flags & 1048576) == 0;
                if (!isTargetSameInstantApp && ((!matchInstantApp && !isCallerInstantApp && isTargetInstantApp) || (matchVisibleToInstantAppOnly && isCallerInstantApp && isTargetHiddenFromInstantApp))) {
                    blockResolution = true;
                }
                if (!blockResolution) {
                    boolean z = isTargetHiddenFromInstantApp;
                    ResolveInfo ri = new ResolveInfo();
                    ri.providerInfo = pi;
                    list.add(ri);
                }
            }
            return list;
        }
        synchronized (this.mPackages) {
            try {
                String pkgName = intent2.getPackage();
                if (pkgName == null) {
                    List<ResolveInfo> applyPostContentProviderResolutionFilter = applyPostContentProviderResolutionFilter(this.mComponentResolver.queryProviders(intent2, resolvedType, flags2, i), instantAppPkgName);
                    return applyPostContentProviderResolutionFilter;
                }
                String str = resolvedType;
                PackageParser.Package pkg = this.mPackages.get(pkgName);
                if (pkg != null) {
                    PackageParser.Package packageR = pkg;
                    List<ResolveInfo> applyPostContentProviderResolutionFilter2 = applyPostContentProviderResolutionFilter(this.mComponentResolver.queryProviders(intent2, resolvedType, flags2, (List<PackageParser.Provider>) pkg.providers, userId), instantAppPkgName);
                    return applyPostContentProviderResolutionFilter2;
                }
                List<ResolveInfo> emptyList = Collections.emptyList();
                return emptyList;
            } catch (Throwable th) {
                th = th;
                throw th;
            }
        }
    }

    private List<ResolveInfo> applyPostContentProviderResolutionFilter(List<ResolveInfo> resolveInfos, String instantAppPkgName) {
        if (instantAppPkgName == null) {
            return resolveInfos;
        }
        for (int i = resolveInfos.size() - 1; i >= 0; i--) {
            ResolveInfo info = resolveInfos.get(i);
            boolean isEphemeralApp = info.providerInfo.applicationInfo.isInstantApp();
            if (!isEphemeralApp || !instantAppPkgName.equals(info.providerInfo.packageName)) {
                if (isEphemeralApp || (info.providerInfo.flags & 1048576) == 0) {
                    resolveInfos.remove(i);
                }
            } else if (info.providerInfo.splitName != null && !ArrayUtils.contains(info.providerInfo.applicationInfo.splitNames, info.providerInfo.splitName)) {
                if (DEBUG_INSTANT) {
                    Slog.v(TAG, "Adding ephemeral installer to the ResolveInfo list");
                }
                ResolveInfo installerInfo = new ResolveInfo(this.mInstantAppInstallerInfo);
                installerInfo.auxiliaryInfo = new AuxiliaryResolveInfo((ComponentName) null, info.providerInfo.packageName, info.providerInfo.applicationInfo.longVersionCode, info.providerInfo.splitName);
                installerInfo.filter = new IntentFilter();
                installerInfo.resolvePackageName = info.getComponentInfo().packageName;
                resolveInfos.set(i, installerInfo);
            }
        }
        return resolveInfos;
    }

    public ParceledListSlice<PackageInfo> getInstalledPackages(int flags, int userId) {
        ArrayList<PackageInfo> list;
        ParceledListSlice<PackageInfo> parceledListSlice;
        int callingUid = Binder.getCallingUid();
        if (getInstantAppPackageName(callingUid) != null) {
            return ParceledListSlice.emptyList();
        }
        if (!sUserManager.exists(userId)) {
            return ParceledListSlice.emptyList();
        }
        int flags2 = updateFlagsForPackage(flags, userId, (Object) null);
        boolean z = true;
        boolean listUninstalled = (4202496 & flags2) != 0;
        boolean listApex = (1073741824 & flags2) != 0;
        if ((2097152 & flags2) == 0) {
            z = false;
        }
        boolean listFactory = z;
        this.mPermissionManager.enforceCrossUserPermission(callingUid, userId, false, false, "get installed packages");
        boolean havePermission = true;
        if (!PackageManagerServiceInjector.checkGetInstalledAppsPermission(Binder.getCallingPid(), Binder.getCallingUid(), "getInstalledPackages")) {
            havePermission = false;
        }
        synchronized (this.mPackages) {
            if (listUninstalled) {
                list = new ArrayList<>(this.mSettings.mPackages.size());
                for (PackageSetting ps : this.mSettings.mPackages.values()) {
                    if (!filterSharedLibPackageLPr(ps, callingUid, userId, flags2)) {
                        if (!filterAppAccessLPr(ps, callingUid, userId)) {
                            PackageInfo pi = generatePackageInfo(ps, flags2, userId);
                            if (pi != null) {
                                list.add(pi);
                            }
                        }
                    }
                }
            } else {
                list = new ArrayList<>(this.mPackages.size());
                for (PackageParser.Package p : this.mPackages.values()) {
                    PackageSetting ps2 = (PackageSetting) p.mExtras;
                    if (!filterSharedLibPackageLPr(ps2, callingUid, userId, flags2)) {
                        if (!filterAppAccessLPr(ps2, callingUid, userId)) {
                            PackageInfo pi2 = generatePackageInfo((PackageSetting) p.mExtras, flags2, userId);
                            if (pi2 != null) {
                                list.add(pi2);
                            }
                        }
                    }
                }
            }
            if (listApex) {
                if (listFactory) {
                    list.addAll(this.mApexManager.getFactoryPackages());
                } else {
                    list.addAll(this.mApexManager.getActivePackages());
                }
                if (listUninstalled) {
                    list.addAll(this.mApexManager.getInactivePackages());
                }
            }
            if (!havePermission) {
                list = PackageManagerServiceInjector.getInstalledPackagesWithoutPermission(Binder.getCallingUid(), list);
            }
            parceledListSlice = new ParceledListSlice<>(list);
        }
        return parceledListSlice;
    }

    private void addPackageHoldingPermissions(ArrayList<PackageInfo> list, PackageSetting ps, String[] permissions, boolean[] tmp, int flags, int userId) {
        PackageInfo pi;
        int numMatch = 0;
        PermissionsState permissionsState = ps.getPermissionsState();
        for (int i = 0; i < permissions.length; i++) {
            if (permissionsState.hasPermission(permissions[i], userId)) {
                tmp[i] = true;
                numMatch++;
            } else {
                tmp[i] = false;
            }
        }
        if (numMatch != 0 && (pi = generatePackageInfo(ps, flags, userId)) != null) {
            if ((flags & 4096) == 0) {
                if (numMatch == permissions.length) {
                    pi.requestedPermissions = permissions;
                } else {
                    pi.requestedPermissions = new String[numMatch];
                    int numMatch2 = 0;
                    for (int i2 = 0; i2 < permissions.length; i2++) {
                        if (tmp[i2]) {
                            pi.requestedPermissions[numMatch2] = permissions[i2];
                            numMatch2++;
                        }
                    }
                }
            }
            list.add(pi);
        }
    }

    /* JADX WARNING: type inference failed for: r4v0 */
    /* JADX WARNING: type inference failed for: r4v1 */
    /* JADX WARNING: type inference failed for: r4v12 */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public android.content.pm.ParceledListSlice<android.content.pm.PackageInfo> getPackagesHoldingPermissions(java.lang.String[] r19, int r20, int r21) {
        /*
            r18 = this;
            r13 = r18
            r14 = r19
            r15 = r21
            com.android.server.pm.UserManagerService r0 = sUserManager
            boolean r0 = r0.exists(r15)
            if (r0 != 0) goto L_0x0013
            android.content.pm.ParceledListSlice r0 = android.content.pm.ParceledListSlice.emptyList()
            return r0
        L_0x0013:
            r0 = r20
            int r16 = r13.updateFlagsForPackage(r0, r15, r14)
            com.android.server.pm.permission.PermissionManagerServiceInternal r1 = r13.mPermissionManager
            int r2 = android.os.Binder.getCallingUid()
            r4 = 1
            r5 = 0
            java.lang.String r6 = "get packages holding permissions"
            r3 = r21
            r1.enforceCrossUserPermission(r2, r3, r4, r5, r6)
            r0 = 4202496(0x402000, float:5.888951E-39)
            r0 = r16 & r0
            if (r0 == 0) goto L_0x0031
            r0 = 1
            goto L_0x0032
        L_0x0031:
            r0 = 0
        L_0x0032:
            r17 = r0
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r12 = r13.mPackages
            monitor-enter(r12)
            java.util.ArrayList r0 = new java.util.ArrayList     // Catch:{ all -> 0x00a0 }
            r0.<init>()     // Catch:{ all -> 0x00a0 }
            int r1 = r14.length     // Catch:{ all -> 0x00a0 }
            boolean[] r5 = new boolean[r1]     // Catch:{ all -> 0x00a0 }
            if (r17 == 0) goto L_0x0069
            com.android.server.pm.Settings r1 = r13.mSettings     // Catch:{ all -> 0x00a0 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r1 = r1.mPackages     // Catch:{ all -> 0x00a0 }
            java.util.Collection r1 = r1.values()     // Catch:{ all -> 0x00a0 }
            java.util.Iterator r8 = r1.iterator()     // Catch:{ all -> 0x00a0 }
        L_0x004d:
            boolean r1 = r8.hasNext()     // Catch:{ all -> 0x00a0 }
            if (r1 == 0) goto L_0x0067
            java.lang.Object r1 = r8.next()     // Catch:{ all -> 0x00a0 }
            r3 = r1
            com.android.server.pm.PackageSetting r3 = (com.android.server.pm.PackageSetting) r3     // Catch:{ all -> 0x00a0 }
            r1 = r18
            r2 = r0
            r4 = r19
            r6 = r16
            r7 = r21
            r1.addPackageHoldingPermissions(r2, r3, r4, r5, r6, r7)     // Catch:{ all -> 0x00a0 }
            goto L_0x004d
        L_0x0067:
            r4 = r12
            goto L_0x0099
        L_0x0069:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r13.mPackages     // Catch:{ all -> 0x00a0 }
            java.util.Collection r1 = r1.values()     // Catch:{ all -> 0x00a0 }
            java.util.Iterator r1 = r1.iterator()     // Catch:{ all -> 0x00a0 }
        L_0x0073:
            boolean r2 = r1.hasNext()     // Catch:{ all -> 0x00a0 }
            if (r2 == 0) goto L_0x0098
            java.lang.Object r2 = r1.next()     // Catch:{ all -> 0x00a0 }
            android.content.pm.PackageParser$Package r2 = (android.content.pm.PackageParser.Package) r2     // Catch:{ all -> 0x00a0 }
            java.lang.Object r3 = r2.mExtras     // Catch:{ all -> 0x00a0 }
            com.android.server.pm.PackageSetting r3 = (com.android.server.pm.PackageSetting) r3     // Catch:{ all -> 0x00a0 }
            if (r3 == 0) goto L_0x0095
            r6 = r18
            r7 = r0
            r8 = r3
            r9 = r19
            r10 = r5
            r11 = r16
            r4 = r12
            r12 = r21
            r6.addPackageHoldingPermissions(r7, r8, r9, r10, r11, r12)     // Catch:{ all -> 0x00a4 }
            goto L_0x0096
        L_0x0095:
            r4 = r12
        L_0x0096:
            r12 = r4
            goto L_0x0073
        L_0x0098:
            r4 = r12
        L_0x0099:
            android.content.pm.ParceledListSlice r1 = new android.content.pm.ParceledListSlice     // Catch:{ all -> 0x00a4 }
            r1.<init>(r0)     // Catch:{ all -> 0x00a4 }
            monitor-exit(r4)     // Catch:{ all -> 0x00a4 }
            return r1
        L_0x00a0:
            r0 = move-exception
            r4 = r12
        L_0x00a2:
            monitor-exit(r4)     // Catch:{ all -> 0x00a4 }
            throw r0
        L_0x00a4:
            r0 = move-exception
            goto L_0x00a2
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.getPackagesHoldingPermissions(java.lang.String[], int, int):android.content.pm.ParceledListSlice");
    }

    public ParceledListSlice<ApplicationInfo> getInstalledApplications(int flags, int userId) {
        return new ParceledListSlice<>(getInstalledApplicationsListInternal(flags, userId, Binder.getCallingUid()));
    }

    /* access modifiers changed from: private */
    public List<ApplicationInfo> getInstalledApplicationsListInternal(int flags, int userId, int callingUid) {
        ArrayList<ApplicationInfo> list;
        ApplicationInfo ai;
        if (getInstantAppPackageName(callingUid) != null) {
            return Collections.emptyList();
        }
        if (!sUserManager.exists(userId)) {
            return Collections.emptyList();
        }
        int flags2 = updateFlagsForApplication(flags, userId, (Object) null);
        boolean listUninstalled = (4202496 & flags2) != 0;
        boolean havePermission = true;
        if (!PackageManagerServiceInjector.checkGetInstalledAppsPermission(Binder.getCallingPid(), Binder.getCallingUid(), "getInstalledApplications")) {
            havePermission = false;
        }
        this.mPermissionManager.enforceCrossUserPermission(callingUid, userId, false, false, "get installed application info");
        synchronized (this.mPackages) {
            if (listUninstalled) {
                list = new ArrayList<>(this.mSettings.mPackages.size());
                for (PackageSetting ps : this.mSettings.mPackages.values()) {
                    int effectiveFlags = flags2;
                    if (ps.isSystem()) {
                        effectiveFlags |= 4194304;
                    }
                    if (ps.pkg == null) {
                        ai = generateApplicationInfoFromSettingsLPw(ps.name, callingUid, effectiveFlags, userId);
                    } else if (!filterSharedLibPackageLPr(ps, callingUid, userId, flags2)) {
                        if (!filterAppAccessLPr(ps, callingUid, userId)) {
                            ai = PackageParser.generateApplicationInfo(ps.pkg, effectiveFlags, ps.readUserState(userId), userId);
                            if (ai != null) {
                                ai.packageName = resolveExternalPackageNameLPr(ps.pkg);
                            }
                        }
                    }
                    if (ai != null) {
                        list.add(ai);
                    }
                }
            } else {
                list = new ArrayList<>(this.mPackages.size());
                for (PackageParser.Package p : this.mPackages.values()) {
                    if (p.mExtras != null) {
                        PackageSetting ps2 = (PackageSetting) p.mExtras;
                        if (!filterSharedLibPackageLPr(ps2, Binder.getCallingUid(), userId, flags2)) {
                            if (!filterAppAccessLPr(ps2, callingUid, userId)) {
                                ApplicationInfo ai2 = PackageParser.generateApplicationInfo(p, flags2, ps2.readUserState(userId), userId);
                                if (ai2 != null) {
                                    ai2.packageName = resolveExternalPackageNameLPr(p);
                                    list.add(ai2);
                                }
                            }
                        }
                    }
                }
            }
            if (!havePermission) {
                list = PackageManagerServiceInjector.getInstalledApplicationsWithoutPermission(Binder.getCallingUid(), list);
            }
        }
        return list;
    }

    public ParceledListSlice<InstantAppInfo> getInstantApps(int userId) {
        if (!canViewInstantApps(Binder.getCallingUid(), userId)) {
            this.mContext.enforceCallingOrSelfPermission("android.permission.ACCESS_INSTANT_APPS", "getEphemeralApplications");
        }
        this.mPermissionManager.enforceCrossUserPermission(Binder.getCallingUid(), userId, true, false, "getEphemeralApplications");
        synchronized (this.mPackages) {
            List<InstantAppInfo> instantApps = this.mInstantAppRegistry.getInstantAppsLPr(userId);
            if (instantApps == null) {
                return null;
            }
            ParceledListSlice<InstantAppInfo> parceledListSlice = new ParceledListSlice<>(instantApps);
            return parceledListSlice;
        }
    }

    public boolean isInstantApp(String packageName, int userId) {
        this.mPermissionManager.enforceCrossUserPermission(Binder.getCallingUid(), userId, true, false, "isInstantApp");
        synchronized (this.mPackages) {
            int callingUid = Binder.getCallingUid();
            if (Process.isIsolated(callingUid)) {
                callingUid = this.mIsolatedOwners.get(callingUid);
            }
            PackageSetting ps = this.mSettings.mPackages.get(packageName);
            PackageParser.Package packageR = this.mPackages.get(packageName);
            if (!(ps != null && (isCallerSameApp(packageName, callingUid) || canViewInstantApps(callingUid, userId) || this.mInstantAppRegistry.isInstantAccessGranted(userId, UserHandle.getAppId(callingUid), ps.appId)))) {
                return false;
            }
            boolean instantApp = ps.getInstantApp(userId);
            return instantApp;
        }
    }

    public byte[] getInstantAppCookie(String packageName, int userId) {
        byte[] instantAppCookieLPw;
        this.mPermissionManager.enforceCrossUserPermission(Binder.getCallingUid(), userId, true, false, "getInstantAppCookie");
        if (!isCallerSameApp(packageName, Binder.getCallingUid())) {
            return null;
        }
        synchronized (this.mPackages) {
            instantAppCookieLPw = this.mInstantAppRegistry.getInstantAppCookieLPw(packageName, userId);
        }
        return instantAppCookieLPw;
    }

    public boolean setInstantAppCookie(String packageName, byte[] cookie, int userId) {
        boolean instantAppCookieLPw;
        this.mPermissionManager.enforceCrossUserPermission(Binder.getCallingUid(), userId, true, true, "setInstantAppCookie");
        if (!isCallerSameApp(packageName, Binder.getCallingUid())) {
            return false;
        }
        synchronized (this.mPackages) {
            instantAppCookieLPw = this.mInstantAppRegistry.setInstantAppCookieLPw(packageName, cookie, userId);
        }
        return instantAppCookieLPw;
    }

    public Bitmap getInstantAppIcon(String packageName, int userId) {
        Bitmap instantAppIconLPw;
        if (!canViewInstantApps(Binder.getCallingUid(), userId)) {
            this.mContext.enforceCallingOrSelfPermission("android.permission.ACCESS_INSTANT_APPS", "getInstantAppIcon");
        }
        this.mPermissionManager.enforceCrossUserPermission(Binder.getCallingUid(), userId, true, false, "getInstantAppIcon");
        synchronized (this.mPackages) {
            instantAppIconLPw = this.mInstantAppRegistry.getInstantAppIconLPw(packageName, userId);
        }
        return instantAppIconLPw;
    }

    private boolean isCallerSameApp(String packageName, int uid) {
        PackageParser.Package pkg = this.mPackages.get(packageName);
        return pkg != null && UserHandle.getAppId(uid) == pkg.applicationInfo.uid;
    }

    public ParceledListSlice<ApplicationInfo> getPersistentApplications(int flags) {
        if (getInstantAppPackageName(Binder.getCallingUid()) != null) {
            return ParceledListSlice.emptyList();
        }
        return new ParceledListSlice<>(getPersistentApplicationsInternal(flags));
    }

    private List<ApplicationInfo> getPersistentApplicationsInternal(int flags) {
        PackageSetting ps;
        ApplicationInfo ai;
        ArrayList<ApplicationInfo> finalList = new ArrayList<>();
        synchronized (this.mPackages) {
            int userId = UserHandle.getCallingUserId();
            for (PackageParser.Package p : this.mPackages.values()) {
                if (p.applicationInfo != null) {
                    boolean matchesAware = true;
                    boolean matchesUnaware = (262144 & flags) != 0 && !p.applicationInfo.isDirectBootAware();
                    if ((524288 & flags) == 0 || !p.applicationInfo.isDirectBootAware()) {
                        matchesAware = false;
                    }
                    if ((p.applicationInfo.flags & 8) != 0 && ((!this.mSafeMode || isSystemApp(p)) && !((!matchesUnaware && !matchesAware) || (ps = this.mSettings.mPackages.get(p.packageName)) == null || (ai = PackageParser.generateApplicationInfo(p, flags, ps.readUserState(userId), userId)) == null))) {
                        finalList.add(ai);
                    }
                }
            }
        }
        return finalList;
    }

    public ProviderInfo resolveContentProvider(String name, int flags, int userId) {
        return resolveContentProviderInternal(name, flags, userId);
    }

    /* access modifiers changed from: private */
    public ProviderInfo resolveContentProviderInternal(String name, int flags, int userId) {
        boolean isXspaceProvider;
        ProviderInfo providerInfo;
        if (!sUserManager.exists(userId)) {
            return null;
        }
        int flags2 = updateFlagsForComponent(flags, userId, name);
        int callingUid = Binder.getCallingUid();
        ProviderInfo providerInfo2 = this.mComponentResolver.queryProvider(name, flags2, userId);
        int i = 0;
        if (providerInfo2 == null) {
            ProviderInfo providerInfo3 = PackageManagerServiceInjector.queryProvider(this.mComponentResolver, name, flags2, userId);
            providerInfo = providerInfo3;
            isXspaceProvider = providerInfo3 != null;
        } else {
            providerInfo = providerInfo2;
            isXspaceProvider = false;
        }
        if (providerInfo == null) {
            return null;
        }
        Settings settings = this.mSettings;
        if (!isXspaceProvider) {
            i = userId;
        }
        if (!settings.isEnabledAndMatchLPr(providerInfo, flags2, i)) {
            return null;
        }
        synchronized (this.mPackages) {
            if (filterAppAccessLPr(this.mSettings.mPackages.get(providerInfo.packageName), callingUid, new ComponentName(providerInfo.packageName, providerInfo.name), 4, userId)) {
                return null;
            }
            return providerInfo;
        }
    }

    @Deprecated
    public void querySyncProviders(List<String> outNames, List<ProviderInfo> outInfo) {
        if (getInstantAppPackageName(Binder.getCallingUid()) == null) {
            this.mComponentResolver.querySyncProviders(outNames, outInfo, this.mSafeMode, UserHandle.getCallingUserId());
        }
    }

    public ParceledListSlice<ProviderInfo> queryContentProviders(String processName, int uid, int flags, String metaDataKey) {
        int i;
        ArrayList<ProviderInfo> finalList;
        PackageManagerService packageManagerService = this;
        String str = processName;
        int callingUid = Binder.getCallingUid();
        if (str != null) {
            i = UserHandle.getUserId(uid);
        } else {
            i = UserHandle.getCallingUserId();
        }
        int userId = i;
        if (!sUserManager.exists(userId)) {
            return ParceledListSlice.emptyList();
        }
        int flags2 = packageManagerService.updateFlagsForComponent(flags, userId, str);
        List<ProviderInfo> matchList = packageManagerService.mComponentResolver.queryProviders(processName, metaDataKey, uid, flags2, userId);
        int listSize = matchList == null ? 0 : matchList.size();
        synchronized (packageManagerService.mPackages) {
            finalList = null;
            int i2 = 0;
            while (i2 < listSize) {
                ProviderInfo providerInfo = matchList.get(i2);
                if (packageManagerService.mSettings.isEnabledAndMatchLPr(providerInfo, flags2, userId)) {
                    ProviderInfo providerInfo2 = providerInfo;
                    if (!filterAppAccessLPr(packageManagerService.mSettings.mPackages.get(providerInfo.packageName), callingUid, new ComponentName(providerInfo.packageName, providerInfo.name), 4, userId)) {
                        if (finalList == null) {
                            finalList = new ArrayList<>(listSize - i2);
                        }
                        finalList.add(providerInfo2);
                    }
                }
                i2++;
                packageManagerService = this;
            }
        }
        if (finalList == null) {
            return ParceledListSlice.emptyList();
        }
        finalList.sort(sProviderInitOrderSorter);
        return new ParceledListSlice<>(finalList);
    }

    public InstrumentationInfo getInstrumentationInfo(ComponentName component, int flags) {
        synchronized (this.mPackages) {
            int callingUid = Binder.getCallingUid();
            int callingUserId = UserHandle.getUserId(callingUid);
            PackageSetting ps = this.mSettings.mPackages.get(component.getPackageName());
            if (ps == null) {
                return null;
            }
            if (filterAppAccessLPr(ps, callingUid, component, 0, callingUserId)) {
                return null;
            }
            InstrumentationInfo generateInstrumentationInfo = PackageParser.generateInstrumentationInfo(this.mInstrumentation.get(component), flags);
            return generateInstrumentationInfo;
        }
    }

    public ParceledListSlice<InstrumentationInfo> queryInstrumentation(String targetPackage, int flags) {
        int callingUid = Binder.getCallingUid();
        if (filterAppAccessLPr(this.mSettings.mPackages.get(targetPackage), callingUid, UserHandle.getUserId(callingUid))) {
            return ParceledListSlice.emptyList();
        }
        return new ParceledListSlice<>(queryInstrumentationInternal(targetPackage, flags));
    }

    private List<InstrumentationInfo> queryInstrumentationInternal(String targetPackage, int flags) {
        InstrumentationInfo ii;
        ArrayList<InstrumentationInfo> finalList = new ArrayList<>();
        synchronized (this.mPackages) {
            for (PackageParser.Instrumentation p : this.mInstrumentation.values()) {
                if ((targetPackage == null || targetPackage.equals(p.info.targetPackage)) && (ii = PackageParser.generateInstrumentationInfo(p, flags)) != null) {
                    finalList.add(ii);
                }
            }
        }
        return finalList;
    }

    private void scanDirTracedLI(File scanDir, int parseFlags, int scanFlags, long currentTime) {
        Trace.traceBegin(262144, "scanDir [" + scanDir.getAbsolutePath() + "]");
        try {
            scanDirLI(scanDir, parseFlags, scanFlags, currentTime);
        } finally {
            Trace.traceEnd(262144);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 19 */
    /* JADX WARNING: Removed duplicated region for block: B:60:0x0123 A[Catch:{ all -> 0x0163 }] */
    /* JADX WARNING: Removed duplicated region for block: B:63:0x0143 A[Catch:{ all -> 0x0163 }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void scanDirLI(java.io.File r20, int r21, int r22, long r23) {
        /*
            r19 = this;
            r8 = r19
            java.io.File[] r9 = r20.listFiles()
            boolean r0 = com.android.internal.util.ArrayUtils.isEmpty(r9)
            java.lang.String r10 = "PackageManager"
            if (r0 == 0) goto L_0x0025
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "No files in app dir "
            r0.append(r1)
            r11 = r20
            r0.append(r11)
            java.lang.String r0 = r0.toString()
            android.util.Log.d(r10, r0)
            return
        L_0x0025:
            r11 = r20
            com.android.server.pm.ParallelPackageParser r0 = new com.android.server.pm.ParallelPackageParser
            java.lang.String[] r2 = r8.mSeparateProcesses
            boolean r3 = r8.mOnlyCore
            android.util.DisplayMetrics r4 = r8.mMetrics
            java.io.File r5 = r8.mCacheDir
            com.android.server.pm.PackageManagerService$ParallelPackageParserCallback r6 = r8.mParallelPackageParserCallback
            r1 = r0
            r1.<init>(r2, r3, r4, r5, r6)
            r12 = r0
            r0 = 0
            int r1 = r9.length     // Catch:{ all -> 0x016f }
            r2 = 0
            r3 = r0
            r0 = r2
        L_0x003d:
            if (r0 >= r1) goto L_0x007f
            r4 = r9[r0]     // Catch:{ all -> 0x0077 }
            boolean r5 = android.content.pm.PackageParser.isApkFile(r4)     // Catch:{ all -> 0x0077 }
            if (r5 != 0) goto L_0x004d
            boolean r5 = r4.isDirectory()     // Catch:{ all -> 0x0077 }
            if (r5 == 0) goto L_0x0059
        L_0x004d:
            java.lang.String r5 = r4.getName()     // Catch:{ all -> 0x0077 }
            boolean r5 = com.android.server.pm.PackageInstallerService.isStageName(r5)     // Catch:{ all -> 0x0077 }
            if (r5 != 0) goto L_0x0059
            r14 = 1
            goto L_0x005a
        L_0x0059:
            r14 = r2
        L_0x005a:
            r5 = r14
            if (r5 == 0) goto L_0x0072
            java.lang.String r6 = r4.getPath()     // Catch:{ all -> 0x0077 }
            boolean r6 = com.android.server.pm.PackageManagerServiceInjector.ignoreApk(r6)     // Catch:{ all -> 0x0077 }
            if (r6 == 0) goto L_0x006a
            r15 = r21
            goto L_0x0074
        L_0x006a:
            r15 = r21
            r12.submit(r4, r15)     // Catch:{ all -> 0x00a3 }
            int r3 = r3 + 1
            goto L_0x0074
        L_0x0072:
            r15 = r21
        L_0x0074:
            int r0 = r0 + 1
            goto L_0x003d
        L_0x0077:
            r0 = move-exception
            r15 = r21
        L_0x007a:
            r1 = r0
            r18 = r9
            goto L_0x0175
        L_0x007f:
            r15 = r21
            r16 = r3
        L_0x0083:
            if (r16 <= 0) goto L_0x0168
            com.android.server.pm.ParallelPackageParser$ParseResult r0 = r12.take()     // Catch:{ all -> 0x0166 }
            r7 = r0
            java.lang.Throwable r0 = r7.throwable     // Catch:{ all -> 0x0166 }
            r5 = r0
            r17 = 1
            java.lang.String r6 = ": "
            if (r5 != 0) goto L_0x00eb
            android.content.pm.PackageParser$Package r0 = r7.pkg     // Catch:{ all -> 0x0166 }
            android.content.pm.ApplicationInfo r0 = r0.applicationInfo     // Catch:{ all -> 0x0166 }
            boolean r0 = r0.isStaticSharedLibrary()     // Catch:{ all -> 0x0166 }
            if (r0 == 0) goto L_0x00a5
            android.content.pm.PackageParser$Package r0 = r7.pkg     // Catch:{ all -> 0x00a3 }
            renameStaticSharedLibraryPackage(r0)     // Catch:{ all -> 0x00a3 }
            goto L_0x00a5
        L_0x00a3:
            r0 = move-exception
            goto L_0x007a
        L_0x00a5:
            android.content.pm.PackageParser$Package r2 = r7.pkg     // Catch:{ PackageManagerException -> 0x00be }
            r0 = 0
            r1 = r19
            r3 = r21
            r4 = r22
            r13 = r5
            r14 = r6
            r5 = r23
            r18 = r9
            r9 = r7
            r7 = r0
            r1.scanPackageChildLI(r2, r3, r4, r5, r7)     // Catch:{ PackageManagerException -> 0x00bc }
            r0 = r17
            goto L_0x011d
        L_0x00bc:
            r0 = move-exception
            goto L_0x00c4
        L_0x00be:
            r0 = move-exception
            r13 = r5
            r14 = r6
            r18 = r9
            r9 = r7
        L_0x00c4:
            int r1 = r0.error     // Catch:{ all -> 0x0163 }
            r17 = r1
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x0163 }
            r1.<init>()     // Catch:{ all -> 0x0163 }
            java.lang.String r2 = "Failed to scan "
            r1.append(r2)     // Catch:{ all -> 0x0163 }
            java.io.File r2 = r9.scanFile     // Catch:{ all -> 0x0163 }
            r1.append(r2)     // Catch:{ all -> 0x0163 }
            r1.append(r14)     // Catch:{ all -> 0x0163 }
            java.lang.String r2 = r0.getMessage()     // Catch:{ all -> 0x0163 }
            r1.append(r2)     // Catch:{ all -> 0x0163 }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x0163 }
            android.util.Slog.w(r10, r1)     // Catch:{ all -> 0x0163 }
            r0 = r17
            goto L_0x011d
        L_0x00eb:
            r13 = r5
            r14 = r6
            r18 = r9
            r9 = r7
            boolean r0 = r13 instanceof android.content.pm.PackageParser.PackageParserException     // Catch:{ all -> 0x0163 }
            if (r0 == 0) goto L_0x014a
            r0 = r13
            android.content.pm.PackageParser$PackageParserException r0 = (android.content.pm.PackageParser.PackageParserException) r0     // Catch:{ all -> 0x0163 }
            int r1 = r0.error     // Catch:{ all -> 0x0163 }
            r17 = r1
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x0163 }
            r1.<init>()     // Catch:{ all -> 0x0163 }
            java.lang.String r2 = "Failed to parse "
            r1.append(r2)     // Catch:{ all -> 0x0163 }
            java.io.File r2 = r9.scanFile     // Catch:{ all -> 0x0163 }
            r1.append(r2)     // Catch:{ all -> 0x0163 }
            r1.append(r14)     // Catch:{ all -> 0x0163 }
            java.lang.String r2 = r0.getMessage()     // Catch:{ all -> 0x0163 }
            r1.append(r2)     // Catch:{ all -> 0x0163 }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x0163 }
            android.util.Slog.w(r10, r1)     // Catch:{ all -> 0x0163 }
            r0 = r17
        L_0x011d:
            r1 = 131072(0x20000, float:1.83671E-40)
            r1 = r22 & r1
            if (r1 != 0) goto L_0x0143
            r1 = 1
            if (r0 == r1) goto L_0x0144
            r2 = 5
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x0163 }
            r3.<init>()     // Catch:{ all -> 0x0163 }
            java.lang.String r4 = "Deleting invalid package at "
            r3.append(r4)     // Catch:{ all -> 0x0163 }
            java.io.File r4 = r9.scanFile     // Catch:{ all -> 0x0163 }
            r3.append(r4)     // Catch:{ all -> 0x0163 }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x0163 }
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r2, r3)     // Catch:{ all -> 0x0163 }
            java.io.File r2 = r9.scanFile     // Catch:{ all -> 0x0163 }
            r8.removeCodePathLI(r2)     // Catch:{ all -> 0x0163 }
            goto L_0x0144
        L_0x0143:
            r1 = 1
        L_0x0144:
            int r16 = r16 + -1
            r9 = r18
            goto L_0x0083
        L_0x014a:
            java.lang.IllegalStateException r0 = new java.lang.IllegalStateException     // Catch:{ all -> 0x0163 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x0163 }
            r1.<init>()     // Catch:{ all -> 0x0163 }
            java.lang.String r2 = "Unexpected exception occurred while parsing "
            r1.append(r2)     // Catch:{ all -> 0x0163 }
            java.io.File r2 = r9.scanFile     // Catch:{ all -> 0x0163 }
            r1.append(r2)     // Catch:{ all -> 0x0163 }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x0163 }
            r0.<init>(r1, r13)     // Catch:{ all -> 0x0163 }
            throw r0     // Catch:{ all -> 0x0163 }
        L_0x0163:
            r0 = move-exception
            r1 = r0
            goto L_0x0175
        L_0x0166:
            r0 = move-exception
            goto L_0x0172
        L_0x0168:
            r18 = r9
            r1 = 0
            $closeResource(r1, r12)
            return
        L_0x016f:
            r0 = move-exception
            r15 = r21
        L_0x0172:
            r18 = r9
            r1 = r0
        L_0x0175:
            throw r1     // Catch:{ all -> 0x0176 }
        L_0x0176:
            r0 = move-exception
            r2 = r0
            $closeResource(r1, r12)
            throw r2
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.scanDirLI(java.io.File, int, int, long):void");
    }

    public static void reportSettingsProblem(int priority, String msg) {
        PackageManagerServiceUtils.logCriticalInfo(priority, msg);
    }

    /* Debug info: failed to restart local var, previous not found, register: 7 */
    private void collectCertificatesLI(PackageSetting ps, PackageParser.Package pkg, boolean forceCollect, boolean skipVerify) throws PackageManagerException {
        long lastModifiedTime = this.mIsPreNMR1Upgrade ? new File(pkg.codePath).lastModified() : PackageManagerServiceUtils.getLastModifiedTime(pkg);
        Settings.VersionInfo settingsVersionForPackage = getSettingsVersionForPackage(pkg);
        if (ps == null || forceCollect || !ps.codePathString.equals(pkg.codePath) || ps.timeStamp != lastModifiedTime || isCompatSignatureUpdateNeeded(settingsVersionForPackage) || isRecoverSignatureUpdateNeeded(settingsVersionForPackage)) {
            StringBuilder sb = new StringBuilder();
            sb.append(pkg.codePath);
            sb.append(" changed; collecting certs");
            sb.append(forceCollect ? " (forced)" : "");
            Slog.i(TAG, sb.toString());
        } else if (ps.signatures.mSigningDetails.signatures == null || ps.signatures.mSigningDetails.signatures.length == 0 || ps.signatures.mSigningDetails.signatureSchemeVersion == 0) {
            Slog.w(TAG, "PackageSetting for " + ps.name + " is missing signatures.  Collecting certs again to recover them.");
        } else {
            pkg.mSigningDetails = new PackageParser.SigningDetails(ps.signatures.mSigningDetails);
            return;
        }
        try {
            Trace.traceBegin(262144, "collectCertificates");
            PackageParser.collectCertificates(pkg, skipVerify);
            Trace.traceEnd(262144);
        } catch (PackageParser.PackageParserException e) {
            throw PackageManagerException.from(e);
        } catch (Throwable th) {
            Trace.traceEnd(262144);
            throw th;
        }
    }

    private void maybeClearProfilesForUpgradesLI(PackageSetting originalPkgSetting, PackageParser.Package currentPkg) {
        if (originalPkgSetting != null && isDeviceUpgrading() && originalPkgSetting.versionCode != ((long) currentPkg.mVersionCode)) {
            clearAppProfilesLIF(currentPkg, -1);
        }
    }

    private void tryIgnorePackage(PackageParser.Package pkg, File scanFile, String logPriex) throws PackageManagerException {
        if (pkg != null && pkg.packageName != null && scanFile != null && PackageManagerServiceInjector.ignorePackage(pkg.packageName)) {
            Slog.w(TAG, "[" + logPriex + "]Skip to scan package, packageName=" + pkg.packageName + " path=" + scanFile.getPath());
            throw new PackageManagerException(JobSchedulerShellCommand.CMD_ERR_NO_PACKAGE, (String) null);
        }
    }

    @GuardedBy({"mInstallLock", "mPackages"})
    private PackageParser.Package scanPackageTracedLI(File scanFile, int parseFlags, int scanFlags, long currentTime, UserHandle user) throws PackageManagerException {
        Trace.traceBegin(262144, "scanPackage [" + scanFile.toString() + "]");
        try {
            return scanPackageLI(scanFile, parseFlags, scanFlags, currentTime, user);
        } finally {
            Trace.traceEnd(262144);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 12 */
    @GuardedBy({"mInstallLock", "mPackages"})
    private PackageParser.Package scanPackageLI(File scanFile, int parseFlags, int scanFlags, long currentTime, UserHandle user) throws PackageManagerException {
        File file = scanFile;
        PackageParser pp = new PackageParser();
        pp.setSeparateProcesses(this.mSeparateProcesses);
        pp.setOnlyCoreApps(this.mOnlyCore);
        pp.setDisplayMetrics(this.mMetrics);
        pp.setCallback(this.mPackageParserCallback);
        Trace.traceBegin(262144, "parsePackage");
        int i = parseFlags;
        try {
            PackageParser.Package pkg = pp.parsePackage(scanFile, parseFlags);
            Trace.traceEnd(262144);
            if (pkg.applicationInfo.isStaticSharedLibrary()) {
                renameStaticSharedLibraryPackage(pkg);
            }
            tryIgnorePackage(pkg, scanFile, "boot scanning");
            return scanPackageChildLI(pkg, parseFlags, scanFlags, currentTime, user);
        } catch (PackageParser.PackageParserException e) {
            throw PackageManagerException.from(e);
        } catch (Throwable pkg2) {
            Trace.traceEnd(262144);
            throw pkg2;
        }
    }

    @GuardedBy({"mInstallLock", "mPackages"})
    private PackageParser.Package scanPackageChildLI(PackageParser.Package pkg, int parseFlags, int scanFlags, long currentTime, UserHandle user) throws PackageManagerException {
        int scanFlags2;
        PackageParser.Package packageR = pkg;
        int scanFlags3 = scanFlags;
        if ((scanFlags3 & 1024) != 0) {
            scanFlags2 = scanFlags3 & -1025;
        } else if (packageR.childPackages == null || packageR.childPackages.size() <= 0) {
            scanFlags2 = scanFlags3;
        } else {
            scanFlags2 = scanFlags3 | 1024;
        }
        PackageParser.Package scannedPkg = addForInitLI(pkg, parseFlags, scanFlags2, currentTime, user);
        int childCount = packageR.childPackages != null ? packageR.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            addForInitLI((PackageParser.Package) packageR.childPackages.get(i), parseFlags, scanFlags2, currentTime, user);
        }
        if ((scanFlags2 & 1024) == 0) {
            return scannedPkg;
        }
        int i2 = childCount;
        return scanPackageChildLI(pkg, parseFlags, scanFlags2, currentTime, user);
    }

    private boolean canSkipForcedPackageVerification(PackageParser.Package pkg) {
        if (!canSkipForcedApkVerification(pkg.baseCodePath)) {
            return false;
        }
        if (ArrayUtils.isEmpty(pkg.splitCodePaths)) {
            return true;
        }
        for (String canSkipForcedApkVerification : pkg.splitCodePaths) {
            if (!canSkipForcedApkVerification(canSkipForcedApkVerification)) {
                return false;
            }
        }
        return true;
    }

    /* Debug info: failed to restart local var, previous not found, register: 4 */
    private boolean canSkipForcedApkVerification(String apkPath) {
        if (!PackageManagerServiceUtils.isLegacyApkVerityEnabled()) {
            return VerityUtils.hasFsverity(apkPath);
        }
        try {
            byte[] rootHashObserved = VerityUtils.generateApkVerityRootHash(apkPath);
            if (rootHashObserved == null) {
                return false;
            }
            synchronized (this.mInstallLock) {
                this.mInstaller.assertFsverityRootHashMatches(apkPath, rootHashObserved);
            }
            return true;
        } catch (Installer.InstallerException | IOException | DigestException | NoSuchAlgorithmException e) {
            Slog.w(TAG, "Error in fsverity check. Fallback to full apk verification.", e);
            return false;
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 42 */
    /* JADX INFO: finally extract failed */
    /* JADX WARNING: Code restructure failed: missing block: B:214:0x044f, code lost:
        r0 = th;
     */
    /* JADX WARNING: Removed duplicated region for block: B:176:0x03d5  */
    /* JADX WARNING: Removed duplicated region for block: B:198:0x0436  */
    @com.android.internal.annotations.GuardedBy({"mInstallLock", "mPackages"})
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private android.content.pm.PackageParser.Package addForInitLI(android.content.pm.PackageParser.Package r43, int r44, int r45, long r46, android.os.UserHandle r48) throws com.android.server.pm.PackageManagerException {
        /*
            r42 = this;
            r10 = r42
            r9 = r43
            r8 = r44
            r7 = r45
            r0 = r8 & 16
            r1 = 0
            r6 = 1
            if (r0 == 0) goto L_0x0010
            r0 = r6
            goto L_0x0011
        L_0x0010:
            r0 = r1
        L_0x0011:
            r23 = r0
            java.lang.String r0 = r9.volumeUuid
            r9.setApplicationVolumeUuid(r0)
            java.lang.String r0 = r9.codePath
            r9.setApplicationInfoCodePath(r0)
            java.lang.String r0 = r9.baseCodePath
            r9.setApplicationInfoBaseCodePath(r0)
            java.lang.String[] r0 = r9.splitCodePaths
            r9.setApplicationInfoSplitCodePaths(r0)
            java.lang.String r0 = r9.codePath
            r9.setApplicationInfoResourcePath(r0)
            java.lang.String r0 = r9.baseCodePath
            r9.setApplicationInfoBaseResourcePath(r0)
            java.lang.String[] r0 = r9.splitCodePaths
            r9.setApplicationInfoSplitResourcePaths(r0)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r10.mPackages
            monitor-enter(r2)
            com.android.server.pm.Settings r0 = r10.mSettings     // Catch:{ all -> 0x044b }
            java.lang.String r3 = r9.mRealPackage     // Catch:{ all -> 0x044b }
            java.lang.String r0 = r0.getRenamedPackageLPr(r3)     // Catch:{ all -> 0x044b }
            r5 = r0
            java.lang.String r0 = getRealPackageName(r9, r5)     // Catch:{ all -> 0x044b }
            if (r0 == 0) goto L_0x004b
            ensurePackageRenamed(r9, r5)     // Catch:{ all -> 0x044b }
        L_0x004b:
            com.android.server.pm.PackageSetting r3 = r10.getOriginalPackageLocked(r9, r5)     // Catch:{ all -> 0x044b }
            com.android.server.pm.Settings r4 = r10.mSettings     // Catch:{ all -> 0x044b }
            java.lang.String r11 = r9.packageName     // Catch:{ all -> 0x044b }
            com.android.server.pm.PackageSetting r4 = r4.getPackageLPr(r11)     // Catch:{ all -> 0x044b }
            if (r3 != 0) goto L_0x005b
            r11 = r4
            goto L_0x005c
        L_0x005b:
            r11 = r3
        L_0x005c:
            r15 = r11
            if (r15 == 0) goto L_0x0061
            r11 = r6
            goto L_0x0062
        L_0x0061:
            r11 = r1
        L_0x0062:
            r24 = r11
            if (r24 == 0) goto L_0x0069
            java.lang.String r11 = r15.name     // Catch:{ all -> 0x044b }
            goto L_0x006b
        L_0x0069:
            java.lang.String r11 = r9.packageName     // Catch:{ all -> 0x044b }
        L_0x006b:
            r14 = r11
            com.android.server.pm.Settings r11 = r10.mSettings     // Catch:{ all -> 0x044b }
            com.android.server.pm.PackageSetting r11 = r11.getDisabledSystemPkgLPr((java.lang.String) r14)     // Catch:{ all -> 0x044b }
            r12 = r11
            if (r12 == 0) goto L_0x0077
            r11 = r6
            goto L_0x0078
        L_0x0077:
            r11 = r1
        L_0x0078:
            r25 = r11
            boolean r11 = r10.mSystemReady     // Catch:{ all -> 0x044b }
            r13 = 0
            if (r11 != 0) goto L_0x0086
            java.lang.String r11 = r9.mSharedUserId     // Catch:{ all -> 0x044b }
            if (r11 == 0) goto L_0x0086
            com.android.server.pm.PackageManagerServiceInjector.fixUpAppIdLPr(r10, r13, r9)     // Catch:{ all -> 0x044b }
        L_0x0086:
            java.lang.String r11 = r9.mSharedUserId     // Catch:{ all -> 0x044b }
            if (r11 == 0) goto L_0x0094
            com.android.server.pm.Settings r11 = r10.mSettings     // Catch:{ all -> 0x044b }
            java.lang.String r13 = r9.mSharedUserId     // Catch:{ all -> 0x044b }
            com.android.server.pm.SharedUserSetting r11 = r11.getSharedUserLPw(r13, r1, r1, r6)     // Catch:{ all -> 0x044b }
            r13 = r11
            goto L_0x0095
        L_0x0094:
            r13 = 0
        L_0x0095:
            r11 = 0
            if (r23 == 0) goto L_0x015f
            if (r25 == 0) goto L_0x0152
            java.util.ArrayList r1 = r9.childPackages     // Catch:{ all -> 0x044b }
            if (r1 == 0) goto L_0x00a5
            java.util.ArrayList r1 = r9.childPackages     // Catch:{ all -> 0x044b }
            int r1 = r1.size()     // Catch:{ all -> 0x044b }
            goto L_0x00a6
        L_0x00a5:
            r1 = 0
        L_0x00a6:
            java.util.List r11 = r12.childPackageNames     // Catch:{ all -> 0x044b }
            if (r11 == 0) goto L_0x00b1
            java.util.List r11 = r12.childPackageNames     // Catch:{ all -> 0x044b }
            int r11 = r11.size()     // Catch:{ all -> 0x044b }
            goto L_0x00b2
        L_0x00b1:
            r11 = 0
        L_0x00b2:
            r17 = 0
            r6 = r17
        L_0x00b6:
            if (r6 >= r11) goto L_0x0100
            r27 = r0
            java.util.List r0 = r12.childPackageNames     // Catch:{ all -> 0x044b }
            java.lang.Object r0 = r0.get(r6)     // Catch:{ all -> 0x044b }
            java.lang.String r0 = (java.lang.String) r0     // Catch:{ all -> 0x044b }
            r17 = 0
            r18 = 0
            r28 = r3
            r3 = r18
        L_0x00ca:
            if (r3 >= r1) goto L_0x00ea
            r29 = r1
            java.util.ArrayList r1 = r9.childPackages     // Catch:{ all -> 0x044b }
            java.lang.Object r1 = r1.get(r3)     // Catch:{ all -> 0x044b }
            android.content.pm.PackageParser$Package r1 = (android.content.pm.PackageParser.Package) r1     // Catch:{ all -> 0x044b }
            r30 = r4
            java.lang.String r4 = r1.packageName     // Catch:{ all -> 0x044b }
            boolean r4 = r4.equals(r0)     // Catch:{ all -> 0x044b }
            if (r4 == 0) goto L_0x00e3
            r17 = 1
            goto L_0x00ee
        L_0x00e3:
            int r3 = r3 + 1
            r1 = r29
            r4 = r30
            goto L_0x00ca
        L_0x00ea:
            r29 = r1
            r30 = r4
        L_0x00ee:
            if (r17 != 0) goto L_0x00f5
            com.android.server.pm.Settings r1 = r10.mSettings     // Catch:{ all -> 0x044b }
            r1.removeDisabledSystemPackageLPw(r0)     // Catch:{ all -> 0x044b }
        L_0x00f5:
            int r6 = r6 + 1
            r0 = r27
            r3 = r28
            r1 = r29
            r4 = r30
            goto L_0x00b6
        L_0x0100:
            r27 = r0
            r29 = r1
            r28 = r3
            r30 = r4
            com.android.server.pm.PackageManagerService$ScanRequest r0 = new com.android.server.pm.PackageManagerService$ScanRequest     // Catch:{ all -> 0x044b }
            r1 = 0
            r3 = 0
            r17 = 0
            r18 = 0
            android.content.pm.PackageParser$Package r4 = r10.mPlatformPackage     // Catch:{ all -> 0x044b }
            if (r9 != r4) goto L_0x0117
            r21 = 1
            goto L_0x0119
        L_0x0117:
            r21 = 0
        L_0x0119:
            r4 = r11
            r6 = 0
            r11 = r0
            r31 = r12
            r12 = r43
            r32 = r14
            r14 = r1
            r1 = r15
            r15 = r31
            r16 = r3
            r19 = r44
            r20 = r45
            r22 = r48
            r11.<init>(r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22)     // Catch:{ all -> 0x044b }
            android.content.pm.PackageParser$Package r3 = r10.mPlatformPackage     // Catch:{ all -> 0x044b }
            applyPolicy(r9, r8, r7, r3)     // Catch:{ all -> 0x044b }
            boolean r3 = r10.mFactoryTest     // Catch:{ all -> 0x044b }
            r11 = -1
            com.android.server.pm.PackageManagerService$ScanResult r3 = scanPackageOnlyLI(r0, r3, r11)     // Catch:{ all -> 0x044b }
            boolean r11 = r3.existingSettingCopied     // Catch:{ all -> 0x044b }
            if (r11 == 0) goto L_0x016b
            com.android.server.pm.PackageManagerService$ScanRequest r11 = r3.request     // Catch:{ all -> 0x044b }
            com.android.server.pm.PackageSetting r11 = r11.pkgSetting     // Catch:{ all -> 0x044b }
            if (r11 == 0) goto L_0x016b
            com.android.server.pm.PackageManagerService$ScanRequest r11 = r3.request     // Catch:{ all -> 0x044b }
            com.android.server.pm.PackageSetting r11 = r11.pkgSetting     // Catch:{ all -> 0x044b }
            com.android.server.pm.PackageSetting r12 = r3.pkgSetting     // Catch:{ all -> 0x044b }
            r11.updateFrom(r12)     // Catch:{ all -> 0x044b }
            goto L_0x016b
        L_0x0152:
            r27 = r0
            r28 = r3
            r30 = r4
            r6 = r11
            r31 = r12
            r32 = r14
            r1 = r15
            goto L_0x016b
        L_0x015f:
            r27 = r0
            r28 = r3
            r30 = r4
            r6 = r11
            r31 = r12
            r32 = r14
            r1 = r15
        L_0x016b:
            monitor-exit(r2)     // Catch:{ all -> 0x044b }
            if (r24 == 0) goto L_0x017a
            java.lang.String r0 = r1.codePathString
            java.lang.String r2 = r9.codePath
            boolean r0 = r0.equals(r2)
            if (r0 != 0) goto L_0x017a
            r0 = 1
            goto L_0x017b
        L_0x017a:
            r0 = 0
        L_0x017b:
            r11 = r0
            if (r24 == 0) goto L_0x018a
            long r2 = r43.getLongVersionCode()
            long r12 = r1.versionCode
            int r0 = (r2 > r12 ? 1 : (r2 == r12 ? 0 : -1))
            if (r0 <= 0) goto L_0x018a
            r0 = 1
            goto L_0x018b
        L_0x018a:
            r0 = 0
        L_0x018b:
            r12 = r0
            if (r23 == 0) goto L_0x0196
            if (r25 == 0) goto L_0x0196
            if (r11 == 0) goto L_0x0196
            if (r12 == 0) goto L_0x0196
            r0 = 1
            goto L_0x0197
        L_0x0196:
            r0 = 0
        L_0x0197:
            r13 = r0
            r0 = 5
            if (r13 == 0) goto L_0x0207
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r10.mPackages
            monitor-enter(r2)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r10.mPackages     // Catch:{ all -> 0x0204 }
            java.lang.String r4 = r1.name     // Catch:{ all -> 0x0204 }
            r3.remove(r4)     // Catch:{ all -> 0x0204 }
            monitor-exit(r2)     // Catch:{ all -> 0x0204 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r3 = "System package updated; name: "
            r2.append(r3)
            java.lang.String r3 = r1.name
            r2.append(r3)
            java.lang.String r3 = "; "
            r2.append(r3)
            long r3 = r1.versionCode
            r2.append(r3)
            java.lang.String r3 = " --> "
            r2.append(r3)
            long r3 = r43.getLongVersionCode()
            r2.append(r3)
            java.lang.String r3 = "; "
            r2.append(r3)
            java.lang.String r3 = r1.codePathString
            r2.append(r3)
            java.lang.String r3 = " --> "
            r2.append(r3)
            java.lang.String r3 = r9.codePath
            r2.append(r3)
            java.lang.String r2 = r2.toString()
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r0, r2)
            java.lang.String r2 = r1.codePathString
            java.lang.String r3 = r1.resourcePathString
            java.lang.String[] r4 = com.android.server.pm.InstructionSets.getAppDexInstructionSets((com.android.server.pm.PackageSetting) r1)
            com.android.server.pm.PackageManagerService$InstallArgs r3 = r10.createInstallArgsForExisting(r2, r3, r4)
            r3.cleanUpResourcesLI()
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r4 = r10.mPackages
            monitor-enter(r4)
            com.android.server.pm.Settings r2 = r10.mSettings     // Catch:{ all -> 0x0201 }
            java.lang.String r14 = r1.name     // Catch:{ all -> 0x0201 }
            r2.enableSystemPackageLPw(r14)     // Catch:{ all -> 0x0201 }
            monitor-exit(r4)     // Catch:{ all -> 0x0201 }
            goto L_0x0207
        L_0x0201:
            r0 = move-exception
            monitor-exit(r4)     // Catch:{ all -> 0x0201 }
            throw r0
        L_0x0204:
            r0 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x0204 }
            throw r0
        L_0x0207:
            if (r23 == 0) goto L_0x0247
            if (r25 == 0) goto L_0x0247
            if (r13 == 0) goto L_0x020e
            goto L_0x0247
        L_0x020e:
            com.android.server.pm.PackageManagerException r2 = new com.android.server.pm.PackageManagerException
            java.lang.StringBuilder r3 = new java.lang.StringBuilder
            r3.<init>()
            java.lang.String r4 = "Package "
            r3.append(r4)
            java.lang.String r4 = r9.packageName
            r3.append(r4)
            java.lang.String r4 = " at "
            r3.append(r4)
            java.lang.String r4 = r9.codePath
            r3.append(r4)
            java.lang.String r4 = " ignored: updated version "
            r3.append(r4)
            long r14 = r1.versionCode
            r3.append(r14)
            java.lang.String r4 = " better than this "
            r3.append(r4)
            long r14 = r43.getLongVersionCode()
            r3.append(r14)
            java.lang.String r3 = r3.toString()
            r2.<init>(r0, r3)
            throw r2
        L_0x0247:
            boolean r2 = r10.mIsUpgrade
            if (r2 == 0) goto L_0x024d
            if (r23 != 0) goto L_0x0253
        L_0x024d:
            boolean r2 = com.android.server.pm.PackageManagerServiceUtils.isApkVerificationForced(r31)
            if (r2 == 0) goto L_0x0255
        L_0x0253:
            r2 = 1
            goto L_0x0256
        L_0x0255:
            r2 = 0
        L_0x0256:
            r14 = r2
            if (r23 != 0) goto L_0x0265
            if (r14 == 0) goto L_0x0262
            boolean r2 = r42.canSkipForcedPackageVerification(r43)
            if (r2 == 0) goto L_0x0262
            goto L_0x0265
        L_0x0262:
            r26 = 0
            goto L_0x0267
        L_0x0265:
            r26 = 1
        L_0x0267:
            r15 = r26
            r10.collectCertificatesLI(r1, r9, r14, r15)
            r10.maybeClearProfilesForUpgradesLI(r1, r9)
            r16 = 0
            if (r23 == 0) goto L_0x03ba
            if (r25 != 0) goto L_0x03ba
            if (r24 == 0) goto L_0x03ba
            boolean r2 = r1.isSystem()
            if (r2 != 0) goto L_0x03b3
            android.content.pm.PackageParser$SigningDetails r2 = r9.mSigningDetails
            com.android.server.pm.PackageSignatures r3 = r1.signatures
            android.content.pm.PackageParser$SigningDetails r3 = r3.mSigningDetails
            r4 = 1
            boolean r2 = r2.checkCapability(r3, r4)
            if (r2 != 0) goto L_0x030c
            com.android.server.pm.PackageSignatures r2 = r1.signatures
            android.content.pm.PackageParser$SigningDetails r2 = r2.mSigningDetails
            android.content.pm.PackageParser$SigningDetails r3 = r9.mSigningDetails
            r4 = 8
            boolean r2 = r2.checkCapability(r3, r4)
            if (r2 != 0) goto L_0x0304
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r3 = "System package signature mismatch; name: "
            r2.append(r3)
            java.lang.String r3 = r1.name
            r2.append(r3)
            java.lang.String r2 = r2.toString()
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r0, r2)
            java.lang.String r0 = r9.packageName
            java.lang.String r2 = "scanPackageInternalLI"
            com.android.server.pm.PackageManagerService$PackageFreezer r4 = r10.freezePackage(r0, r2)
            java.lang.String r2 = r9.packageName     // Catch:{ all -> 0x02f1 }
            r3 = 0
            r0 = 1
            r17 = 0
            r18 = 0
            r19 = 0
            r20 = 0
            r21 = 0
            r33 = r1
            r1 = r42
            r34 = r4
            r22 = 1
            r4 = r0
            r26 = r5
            r5 = r17
            r0 = r6
            r6 = r18
            r7 = r19
            r8 = r20
            r17 = r11
            r11 = r9
            r9 = r21
            r1.deletePackageLIF(r2, r3, r4, r5, r6, r7, r8, r9)     // Catch:{ all -> 0x02ec }
            r1 = r34
            if (r1 == 0) goto L_0x02e8
            $closeResource(r0, r1)
        L_0x02e8:
            r0 = 0
            r8 = r0
            goto L_0x03c1
        L_0x02ec:
            r0 = move-exception
            r1 = r34
            r2 = r0
            goto L_0x02fb
        L_0x02f1:
            r0 = move-exception
            r33 = r1
            r1 = r4
            r26 = r5
            r17 = r11
            r11 = r9
            r2 = r0
        L_0x02fb:
            throw r2     // Catch:{ all -> 0x02fc }
        L_0x02fc:
            r0 = move-exception
            r3 = r0
            if (r1 == 0) goto L_0x0303
            $closeResource(r2, r1)
        L_0x0303:
            throw r3
        L_0x0304:
            r33 = r1
            r26 = r5
            r17 = r11
            r11 = r9
            goto L_0x0313
        L_0x030c:
            r33 = r1
            r26 = r5
            r17 = r11
            r11 = r9
        L_0x0313:
            if (r12 == 0) goto L_0x036e
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "System package enabled; name: "
            r1.append(r2)
            r2 = r33
            java.lang.String r3 = r2.name
            r1.append(r3)
            java.lang.String r3 = "; "
            r1.append(r3)
            long r3 = r2.versionCode
            r1.append(r3)
            java.lang.String r3 = " --> "
            r1.append(r3)
            long r3 = r43.getLongVersionCode()
            r1.append(r3)
            java.lang.String r3 = "; "
            r1.append(r3)
            java.lang.String r3 = r2.codePathString
            r1.append(r3)
            java.lang.String r3 = " --> "
            r1.append(r3)
            java.lang.String r3 = r11.codePath
            r1.append(r3)
            java.lang.String r1 = r1.toString()
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r0, r1)
            java.lang.String r0 = r2.codePathString
            java.lang.String r1 = r2.resourcePathString
            java.lang.String[] r3 = com.android.server.pm.InstructionSets.getAppDexInstructionSets((com.android.server.pm.PackageSetting) r2)
            com.android.server.pm.PackageManagerService$InstallArgs r1 = r10.createInstallArgsForExisting(r0, r1, r3)
            java.lang.Object r3 = r10.mInstallLock
            monitor-enter(r3)
            r1.cleanUpResourcesLI()     // Catch:{ all -> 0x036b }
            monitor-exit(r3)     // Catch:{ all -> 0x036b }
            goto L_0x03c0
        L_0x036b:
            r0 = move-exception
            monitor-exit(r3)     // Catch:{ all -> 0x036b }
            throw r0
        L_0x036e:
            r2 = r33
            r16 = 1
            r0 = 4
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r3 = "System package disabled; name: "
            r1.append(r3)
            java.lang.String r3 = r2.name
            r1.append(r3)
            java.lang.String r3 = "; old: "
            r1.append(r3)
            java.lang.String r3 = r2.codePathString
            r1.append(r3)
            java.lang.String r3 = " @ "
            r1.append(r3)
            long r3 = r2.versionCode
            r1.append(r3)
            java.lang.String r3 = "; new: "
            r1.append(r3)
            java.lang.String r3 = r11.codePath
            r1.append(r3)
            java.lang.String r3 = " @ "
            r1.append(r3)
            java.lang.String r3 = r11.codePath
            r1.append(r3)
            java.lang.String r1 = r1.toString()
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r0, r1)
            r8 = r2
            goto L_0x03c1
        L_0x03b3:
            r2 = r1
            r26 = r5
            r17 = r11
            r11 = r9
            goto L_0x03c0
        L_0x03ba:
            r2 = r1
            r26 = r5
            r17 = r11
            r11 = r9
        L_0x03c0:
            r8 = r2
        L_0x03c1:
            r4 = r45 | 2
            r1 = r42
            r2 = r43
            r3 = r44
            r5 = r46
            r7 = r48
            com.android.server.pm.PackageManagerService$ScanResult r1 = r1.scanPackageNewLI(r2, r3, r4, r5, r7)
            boolean r0 = r1.success
            if (r0 == 0) goto L_0x0434
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r10.mPackages
            monitor-enter(r2)
            r3 = 0
            com.android.server.pm.PackageSetting r0 = r1.pkgSetting     // Catch:{ PackageManagerException -> 0x042a }
            java.lang.String r0 = r0.name     // Catch:{ PackageManagerException -> 0x042a }
            com.android.server.pm.PackageManagerService$ReconcileRequest r4 = new com.android.server.pm.PackageManagerService$ReconcileRequest     // Catch:{ PackageManagerException -> 0x042a }
            java.util.Map r36 = java.util.Collections.singletonMap(r0, r1)     // Catch:{ PackageManagerException -> 0x042a }
            android.util.ArrayMap<java.lang.String, android.util.LongSparseArray<android.content.pm.SharedLibraryInfo>> r5 = r10.mSharedLibraries     // Catch:{ PackageManagerException -> 0x042a }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r6 = r10.mPackages     // Catch:{ PackageManagerException -> 0x042a }
            com.android.server.pm.Settings$VersionInfo r7 = r42.getSettingsVersionForPackage(r43)     // Catch:{ PackageManagerException -> 0x042a }
            java.util.Map r39 = java.util.Collections.singletonMap(r0, r7)     // Catch:{ PackageManagerException -> 0x042a }
            com.android.server.pm.PackageSetting r7 = r10.getSharedLibLatestVersionSetting(r1)     // Catch:{ PackageManagerException -> 0x042a }
            java.util.Map r40 = java.util.Collections.singletonMap(r0, r7)     // Catch:{ PackageManagerException -> 0x042a }
            r41 = 0
            r35 = r4
            r37 = r5
            r38 = r6
            r35.<init>(r36, r37, r38, r39, r40)     // Catch:{ PackageManagerException -> 0x042a }
            com.android.server.pm.Settings r5 = r10.mSettings     // Catch:{ PackageManagerException -> 0x042a }
            com.android.server.pm.KeySetManagerService r5 = r5.mKeySetManagerService     // Catch:{ PackageManagerException -> 0x042a }
            java.util.Map r4 = reconcilePackagesLocked(r4, r5)     // Catch:{ PackageManagerException -> 0x042a }
            boolean r5 = r10.mSystemReady     // Catch:{ PackageManagerException -> 0x042a }
            if (r5 != 0) goto L_0x0417
            java.lang.String r5 = r11.mSharedUserId     // Catch:{ PackageManagerException -> 0x042a }
            if (r5 != 0) goto L_0x0417
            com.android.server.pm.PackageSetting r5 = r1.pkgSetting     // Catch:{ PackageManagerException -> 0x042a }
            com.android.server.pm.PackageManagerServiceInjector.fixUpAppIdLPr(r10, r5, r11)     // Catch:{ PackageManagerException -> 0x042a }
        L_0x0417:
            boolean r5 = r10.optimisticallyRegisterAppId(r1)     // Catch:{ PackageManagerException -> 0x042a }
            r3 = r5
            java.lang.Object r5 = r4.get(r0)     // Catch:{ PackageManagerException -> 0x042a }
            com.android.server.pm.PackageManagerService$ReconciledPackage r5 = (com.android.server.pm.PackageManagerService.ReconciledPackage) r5     // Catch:{ PackageManagerException -> 0x042a }
            r10.commitReconciledScanResultLocked(r5)     // Catch:{ PackageManagerException -> 0x042a }
            monitor-exit(r2)     // Catch:{ all -> 0x0428 }
            goto L_0x0434
        L_0x0428:
            r0 = move-exception
            goto L_0x0432
        L_0x042a:
            r0 = move-exception
            if (r3 == 0) goto L_0x0430
            r10.cleanUpAppIdCreation(r1)     // Catch:{ all -> 0x0428 }
        L_0x0430:
            throw r0     // Catch:{ all -> 0x0428 }
        L_0x0432:
            monitor-exit(r2)     // Catch:{ all -> 0x0428 }
            throw r0
        L_0x0434:
            if (r16 == 0) goto L_0x0446
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r10.mPackages
            monitor-enter(r2)
            com.android.server.pm.Settings r0 = r10.mSettings     // Catch:{ all -> 0x0443 }
            java.lang.String r3 = r11.packageName     // Catch:{ all -> 0x0443 }
            r4 = 1
            r0.disableSystemPackageLPw(r3, r4)     // Catch:{ all -> 0x0443 }
            monitor-exit(r2)     // Catch:{ all -> 0x0443 }
            goto L_0x0446
        L_0x0443:
            r0 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x0443 }
            throw r0
        L_0x0446:
            com.android.server.pm.PackageSetting r0 = r1.pkgSetting
            android.content.pm.PackageParser$Package r0 = r0.pkg
            return r0
        L_0x044b:
            r0 = move-exception
            r11 = r9
        L_0x044d:
            monitor-exit(r2)     // Catch:{ all -> 0x044f }
            throw r0
        L_0x044f:
            r0 = move-exception
            goto L_0x044d
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.addForInitLI(android.content.pm.PackageParser$Package, int, int, long, android.os.UserHandle):android.content.pm.PackageParser$Package");
    }

    private static void renameStaticSharedLibraryPackage(PackageParser.Package pkg) {
        pkg.setPackageName(pkg.packageName + STATIC_SHARED_LIB_DELIMITER + pkg.staticSharedLibVersion);
    }

    static String fixProcessName(String defProcessName, String processName) {
        if (processName == null) {
            return defProcessName;
        }
        return processName;
    }

    private static void enforceSystemOrRoot(String message) {
        int uid = Binder.getCallingUid();
        if (uid != 1000 && uid != 0) {
            throw new SecurityException(message);
        }
    }

    private static void enforceSystemOrRootOrShell(String message) {
        int uid = Binder.getCallingUid();
        if (uid != 1000 && uid != 0 && uid != SHELL_UID) {
            throw new SecurityException(message);
        }
    }

    public void performFstrimIfNeeded() {
        enforceSystemOrRoot("Only the system can request fstrim");
        try {
            IStorageManager sm = PackageHelper.getStorageManager();
            if (sm != null) {
                boolean doTrim = false;
                long interval = Settings.Global.getLong(this.mContext.getContentResolver(), "fstrim_mandatory_interval", DEFAULT_MANDATORY_FSTRIM_INTERVAL);
                if (interval > 0) {
                    long timeSinceLast = System.currentTimeMillis() - sm.lastMaintenance();
                    if (timeSinceLast > interval) {
                        doTrim = true;
                        Slog.w(TAG, "No disk maintenance in " + timeSinceLast + "; running immediately");
                    }
                }
                if (doTrim) {
                    sm.runMaintenance();
                }
                return;
            }
            Slog.e(TAG, "storageManager service unavailable!");
        } catch (RemoteException e) {
        }
    }

    public void updatePackagesIfNeeded() {
        List<PackageParser.Package> pkgs;
        enforceSystemOrRoot("Only the system can request package update");
        boolean causeUpgrade = isDeviceUpgrading();
        boolean causeFirstBoot = isFirstBoot() || this.mIsPreNUpgrade;
        boolean causePrunedCache = VMRuntime.didPruneDalvikCache();
        if (causeUpgrade || causeFirstBoot || causePrunedCache) {
            SystemProperties.set("pm.dexopt.is_upgrade", "true");
            synchronized (this.mPackages) {
                pkgs = PackageManagerServiceUtils.getPackagesForDexopt(this.mPackages.values(), this);
            }
            long startTime = System.nanoTime();
            int[] stats = performDexOptUpgrade(pkgs, this.mIsPreNUpgrade, causeFirstBoot ? 0 : 8, false);
            MetricsLogger.histogram(this.mContext, "opt_dialog_num_dexopted", stats[0]);
            MetricsLogger.histogram(this.mContext, "opt_dialog_num_skipped", stats[1]);
            MetricsLogger.histogram(this.mContext, "opt_dialog_num_failed", stats[2]);
            MetricsLogger.histogram(this.mContext, "opt_dialog_num_total", getOptimizablePackages().size());
            MetricsLogger.histogram(this.mContext, "opt_dialog_time_s", (int) TimeUnit.NANOSECONDS.toSeconds(System.nanoTime() - startTime));
            return;
        }
        SystemProperties.set("pm.dexopt.is_upgrade", "false");
    }

    private static String getPrebuildProfilePath(PackageParser.Package pkg) {
        return pkg.baseCodePath + ".prof";
    }

    /* JADX WARNING: Removed duplicated region for block: B:42:0x0109  */
    /* JADX WARNING: Removed duplicated region for block: B:43:0x0110  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private int[] performDexOptUpgrade(java.util.List<android.content.pm.PackageParser.Package> r20, boolean r21, int r22, boolean r23) {
        /*
            r19 = this;
            r1 = r19
            r0 = 0
            r2 = 0
            r3 = 0
            r4 = 0
            int r5 = r20.size()
            java.util.Iterator r6 = r20.iterator()
        L_0x000e:
            boolean r7 = r6.hasNext()
            if (r7 == 0) goto L_0x01a1
            java.lang.Object r7 = r6.next()
            android.content.pm.PackageParser$Package r7 = (android.content.pm.PackageParser.Package) r7
            int r11 = r0 + 1
            r12 = 0
            boolean r0 = r19.isFirstBoot()
            if (r0 != 0) goto L_0x002e
            boolean r0 = r19.isDeviceUpgrading()
            if (r0 == 0) goto L_0x002a
            goto L_0x002e
        L_0x002a:
            r18 = r6
            goto L_0x0103
        L_0x002e:
            boolean r0 = isSystemApp((android.content.pm.PackageParser.Package) r7)
            if (r0 == 0) goto L_0x0101
            java.io.File r0 = new java.io.File
            java.lang.String r13 = getPrebuildProfilePath(r7)
            r0.<init>(r13)
            r13 = r0
            boolean r0 = r13.exists()
            r14 = 0
            if (r0 == 0) goto L_0x0087
            com.android.server.pm.Installer r0 = r1.mInstaller     // Catch:{ Exception -> 0x0063 }
            java.lang.String r15 = r13.getAbsolutePath()     // Catch:{ Exception -> 0x0063 }
            android.content.pm.ApplicationInfo r10 = r7.applicationInfo     // Catch:{ Exception -> 0x0063 }
            int r10 = r10.uid     // Catch:{ Exception -> 0x0063 }
            java.lang.String r9 = r7.packageName     // Catch:{ Exception -> 0x0063 }
            java.lang.String r14 = android.content.pm.dex.ArtManager.getProfileName(r14)     // Catch:{ Exception -> 0x0063 }
            boolean r0 = r0.copySystemProfile(r15, r10, r9, r14)     // Catch:{ Exception -> 0x0063 }
            if (r0 != 0) goto L_0x0083
            java.lang.String r0 = "PackageManager"
            java.lang.String r9 = "Installer failed to copy system profile!"
            android.util.Log.e(r0, r9)     // Catch:{ Exception -> 0x0063 }
            goto L_0x0083
        L_0x0063:
            r0 = move-exception
            java.lang.StringBuilder r9 = new java.lang.StringBuilder
            r9.<init>()
            java.lang.String r10 = "Failed to copy profile "
            r9.append(r10)
            java.lang.String r10 = r13.getAbsolutePath()
            r9.append(r10)
            java.lang.String r10 = " "
            r9.append(r10)
            java.lang.String r9 = r9.toString()
            java.lang.String r10 = "PackageManager"
            android.util.Log.e(r10, r9, r0)
        L_0x0083:
            r18 = r6
            goto L_0x0103
        L_0x0087:
            com.android.server.pm.Settings r0 = r1.mSettings
            java.lang.String r9 = r7.packageName
            com.android.server.pm.PackageSetting r9 = r0.getDisabledSystemPkgLPr((java.lang.String) r9)
            if (r9 == 0) goto L_0x00fe
            android.content.pm.PackageParser$Package r0 = r9.pkg
            boolean r0 = r0.isStub
            if (r0 == 0) goto L_0x00fe
            android.content.pm.PackageParser$Package r0 = r9.pkg
            java.lang.String r0 = getPrebuildProfilePath(r0)
            java.lang.String r10 = "-Stub"
            java.lang.String r15 = ""
            java.lang.String r10 = r0.replace(r10, r15)
            java.io.File r0 = new java.io.File
            r0.<init>(r10)
            r13 = r0
            boolean r0 = r13.exists()
            if (r0 == 0) goto L_0x00fb
            com.android.server.pm.Installer r0 = r1.mInstaller     // Catch:{ Exception -> 0x00d8 }
            java.lang.String r15 = r13.getAbsolutePath()     // Catch:{ Exception -> 0x00d8 }
            android.content.pm.ApplicationInfo r8 = r7.applicationInfo     // Catch:{ Exception -> 0x00d8 }
            int r8 = r8.uid     // Catch:{ Exception -> 0x00d8 }
            java.lang.String r14 = r7.packageName     // Catch:{ Exception -> 0x00d8 }
            r18 = r6
            r17 = 0
            java.lang.String r6 = android.content.pm.dex.ArtManager.getProfileName(r17)     // Catch:{ Exception -> 0x00d6 }
            boolean r0 = r0.copySystemProfile(r15, r8, r14, r6)     // Catch:{ Exception -> 0x00d6 }
            if (r0 != 0) goto L_0x00d3
            java.lang.String r0 = "PackageManager"
            java.lang.String r6 = "Failed to copy system profile for stub package!"
            android.util.Log.e(r0, r6)     // Catch:{ Exception -> 0x00d6 }
            goto L_0x00d5
        L_0x00d3:
            r0 = 1
            r12 = r0
        L_0x00d5:
            goto L_0x0103
        L_0x00d6:
            r0 = move-exception
            goto L_0x00db
        L_0x00d8:
            r0 = move-exception
            r18 = r6
        L_0x00db:
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            java.lang.String r8 = "Failed to copy profile "
            r6.append(r8)
            java.lang.String r8 = r13.getAbsolutePath()
            r6.append(r8)
            java.lang.String r8 = " "
            r6.append(r8)
            java.lang.String r6 = r6.toString()
            java.lang.String r8 = "PackageManager"
            android.util.Log.e(r8, r6, r0)
            goto L_0x0103
        L_0x00fb:
            r18 = r6
            goto L_0x0103
        L_0x00fe:
            r18 = r6
            goto L_0x0103
        L_0x0101:
            r18 = r6
        L_0x0103:
            boolean r0 = com.android.server.pm.PackageDexOptimizer.canOptimizePackage(r7)
            if (r0 != 0) goto L_0x0110
            int r3 = r3 + 1
            r0 = r11
            r6 = r18
            goto L_0x000e
        L_0x0110:
            if (r21 == 0) goto L_0x0144
            android.app.IActivityManager r0 = android.app.ActivityManager.getService()     // Catch:{ RemoteException -> 0x0138 }
            android.content.Context r6 = r1.mContext     // Catch:{ RemoteException -> 0x0138 }
            android.content.res.Resources r6 = r6.getResources()     // Catch:{ RemoteException -> 0x0138 }
            r8 = 17039505(0x1040091, float:2.4244977E-38)
            r9 = 2
            java.lang.Object[] r9 = new java.lang.Object[r9]     // Catch:{ RemoteException -> 0x0138 }
            java.lang.Integer r10 = java.lang.Integer.valueOf(r11)     // Catch:{ RemoteException -> 0x0138 }
            r13 = 0
            r9[r13] = r10     // Catch:{ RemoteException -> 0x0138 }
            java.lang.Integer r10 = java.lang.Integer.valueOf(r5)     // Catch:{ RemoteException -> 0x0138 }
            r13 = 1
            r9[r13] = r10     // Catch:{ RemoteException -> 0x0138 }
            java.lang.String r6 = r6.getString(r8, r9)     // Catch:{ RemoteException -> 0x0138 }
            r0.showBootMessage(r6, r13)     // Catch:{ RemoteException -> 0x0138 }
            goto L_0x0139
        L_0x0138:
            r0 = move-exception
        L_0x0139:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r6 = r1.mPackages
            monitor-enter(r6)
            r8 = 1
            r1.mDexOptDialogShown = r8     // Catch:{ all -> 0x0141 }
            monitor-exit(r6)     // Catch:{ all -> 0x0141 }
            goto L_0x0144
        L_0x0141:
            r0 = move-exception
            monitor-exit(r6)     // Catch:{ all -> 0x0141 }
            throw r0
        L_0x0144:
            r0 = r22
            if (r12 == 0) goto L_0x0149
            r0 = 3
        L_0x0149:
            java.lang.String r6 = "pm.precompile_layouts"
            r8 = 0
            boolean r6 = android.os.SystemProperties.getBoolean(r6, r8)
            if (r6 == 0) goto L_0x0158
            com.android.server.pm.dex.ArtManagerService r6 = r1.mArtManagerService
            r6.compileLayouts(r7)
        L_0x0158:
            if (r23 == 0) goto L_0x015e
            r9 = 4
            r16 = r9
            goto L_0x0160
        L_0x015e:
            r16 = 0
        L_0x0160:
            r6 = r16
            if (r22 != 0) goto L_0x0166
            r6 = r6 | 1024(0x400, float:1.435E-42)
        L_0x0166:
            com.android.server.pm.dex.DexoptOptions r8 = new com.android.server.pm.dex.DexoptOptions
            java.lang.String r9 = r7.packageName
            r8.<init>((java.lang.String) r9, (int) r0, (int) r6)
            int r8 = r1.performDexOptTraced(r8)
            r9 = -1
            if (r8 == r9) goto L_0x0199
            if (r8 == 0) goto L_0x0196
            r9 = 1
            if (r8 == r9) goto L_0x0190
            java.lang.StringBuilder r9 = new java.lang.StringBuilder
            r9.<init>()
            java.lang.String r10 = "Unexpected dexopt return code "
            r9.append(r10)
            r9.append(r8)
            java.lang.String r9 = r9.toString()
            java.lang.String r10 = "PackageManager"
            android.util.Log.e(r10, r9)
            goto L_0x019c
        L_0x0190:
            int r2 = r2 + 1
            com.android.server.pm.PackageManagerServiceInjector.markPackageOptimized(r7)
            goto L_0x019c
        L_0x0196:
            int r3 = r3 + 1
            goto L_0x019c
        L_0x0199:
            int r4 = r4 + 1
        L_0x019c:
            r0 = r11
            r6 = r18
            goto L_0x000e
        L_0x01a1:
            r6 = 3
            int[] r6 = new int[r6]
            r7 = 0
            r6[r7] = r2
            r7 = 1
            r6[r7] = r3
            r7 = 2
            r6[r7] = r4
            return r6
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.performDexOptUpgrade(java.util.List, boolean, int, boolean):int[]");
    }

    public void notifyPackageUse(String packageName, int reason) {
        synchronized (this.mPackages) {
            int callingUid = Binder.getCallingUid();
            int callingUserId = UserHandle.getUserId(callingUid);
            if (getInstantAppPackageName(callingUid) != null) {
                if (!isCallerSameApp(packageName, callingUid)) {
                    return;
                }
            } else if (isInstantApp(packageName, callingUserId)) {
                return;
            }
            notifyPackageUseLocked(packageName, reason);
        }
    }

    @GuardedBy({"mPackages"})
    public PackageManagerInternal.CheckPermissionDelegate getCheckPermissionDelegateLocked() {
        return this.mCheckPermissionDelegate;
    }

    @GuardedBy({"mPackages"})
    public void setCheckPermissionDelegateLocked(PackageManagerInternal.CheckPermissionDelegate delegate) {
        this.mCheckPermissionDelegate = delegate;
    }

    /* access modifiers changed from: private */
    @GuardedBy({"mPackages"})
    public void notifyPackageUseLocked(final String packageName, int reason) {
        PackageParser.Package p = this.mPackages.get(packageName);
        if (p != null) {
            if (reason == 0 && p.mLastPackageUsageTimeInMills[reason] <= 0) {
                this.mHandler.postDelayed(new Runnable() {
                    public void run() {
                        PackageManagerServiceInjector.processFirstUseActivity(PackageManagerService.this, packageName);
                    }
                }, 9000);
            }
            p.mLastPackageUsageTimeInMills[reason] = System.currentTimeMillis();
        }
    }

    public void notifyDexLoad(String loadingPackageName, List<String> classLoaderNames, List<String> classPaths, String loaderIsa) {
        notifyDexLoadWithStatus(loadingPackageName, classLoaderNames, classPaths, loaderIsa, (int[]) null);
    }

    public void notifyDexLoadWithStatus(String loadingPackageName, List<String> classLoaderNames, List<String> classPaths, String loaderIsa, int[] status) {
        int userId = UserHandle.getCallingUserId();
        ApplicationInfo ai = getApplicationInfo(loadingPackageName, 0, userId);
        if (ai == null) {
            Slog.w(TAG, "Loading a package that does not exist for the calling user. package=" + loadingPackageName + ", user=" + userId);
            return;
        }
        this.mDexManager.notifyDexLoadWithStatus(ai, classLoaderNames, classPaths, loaderIsa, userId, status);
    }

    public void registerDexModule(String packageName, String dexModulePath, boolean isSharedModule, IDexModuleRegisterCallback callback) {
        DexManager.RegisterDexModuleResult result;
        int userId = UserHandle.getCallingUserId();
        ApplicationInfo ai = getApplicationInfo(packageName, 0, userId);
        if (ai == null) {
            Slog.w(TAG, "Registering a dex module for a package that does not exist for the calling user. package=" + packageName + ", user=" + userId);
            result = new DexManager.RegisterDexModuleResult(false, "Package not installed");
        } else {
            result = this.mDexManager.registerDexModule(ai, dexModulePath, isSharedModule, userId);
        }
        if (callback != null) {
            this.mHandler.post(new Runnable(callback, dexModulePath, result) {
                private final /* synthetic */ IDexModuleRegisterCallback f$0;
                private final /* synthetic */ String f$1;
                private final /* synthetic */ DexManager.RegisterDexModuleResult f$2;

                {
                    this.f$0 = r1;
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    PackageManagerService.lambda$registerDexModule$3(this.f$0, this.f$1, this.f$2);
                }
            });
        }
    }

    static /* synthetic */ void lambda$registerDexModule$3(IDexModuleRegisterCallback callback, String dexModulePath, DexManager.RegisterDexModuleResult result) {
        try {
            callback.onDexModuleRegistered(dexModulePath, result.success, result.message);
        } catch (RemoteException e) {
            Slog.w(TAG, "Failed to callback after module registration " + dexModulePath, e);
        }
    }

    public boolean performDexOptMode(String packageName, boolean checkProfiles, String targetCompilerFilter, boolean force, boolean bootComplete, String splitName) {
        int i = 0;
        int i2 = (force ? 2 : 0) | checkProfiles;
        if (bootComplete) {
            i = 4;
        }
        return performDexOpt(new DexoptOptions(packageName, -1, targetCompilerFilter, splitName, (int) (i | i2)));
    }

    public boolean performDexOptSecondary(String packageName, String compilerFilter, boolean force) {
        return performDexOpt(new DexoptOptions(packageName, compilerFilter, (force ? 2 : 0) | 13));
    }

    public boolean compileLayouts(String packageName) {
        synchronized (this.mPackages) {
            PackageParser.Package pkg = this.mPackages.get(packageName);
            if (pkg == null) {
                return false;
            }
            return this.mViewCompiler.compileLayouts(pkg);
        }
    }

    /* access modifiers changed from: package-private */
    public boolean performDexOpt(DexoptOptions options) {
        if (getInstantAppPackageName(Binder.getCallingUid()) != null || isInstantApp(options.getPackageName(), UserHandle.getCallingUserId())) {
            return false;
        }
        if (options.isDexoptOnlySecondaryDex()) {
            return this.mDexManager.dexoptSecondaryDex(options);
        }
        if (performDexOptWithStatus(options) != -1) {
            return true;
        }
        return false;
    }

    /* access modifiers changed from: package-private */
    public int performDexOptWithStatus(DexoptOptions options) {
        return performDexOptTraced(options);
    }

    private int performDexOptTraced(DexoptOptions options) {
        Trace.traceBegin(262144, "dexopt");
        String originalFilter = options.getCompilerFilter();
        String adjustedFilter = PackageManagerServiceInjector.getAdjustedFilterIfNeeded(this, options.getPackageName(), originalFilter);
        if (!adjustedFilter.equals(originalFilter)) {
            options = new DexoptOptions(options.getPackageName(), adjustedFilter, options.getFlags());
        }
        try {
            return performDexOptInternal(options);
        } finally {
            Trace.traceEnd(262144);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 5 */
    private int performDexOptInternal(DexoptOptions options) {
        int performDexOptInternalWithDependenciesLI;
        synchronized (this.mPackages) {
            PackageParser.Package p = this.mPackages.get(options.getPackageName());
            if (p == null) {
                return -1;
            }
            this.mPackageUsage.maybeWriteAsync(this.mPackages);
            this.mCompilerStats.maybeWriteAsync();
            long callingId = Binder.clearCallingIdentity();
            try {
                synchronized (this.mInstallLock) {
                    performDexOptInternalWithDependenciesLI = performDexOptInternalWithDependenciesLI(p, options);
                }
                Binder.restoreCallingIdentity(callingId);
                return performDexOptInternalWithDependenciesLI;
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(callingId);
                throw th;
            }
        }
    }

    public ArraySet<String> getOptimizablePackages() {
        ArraySet<String> pkgs = new ArraySet<>();
        synchronized (this.mPackages) {
            for (PackageParser.Package p : this.mPackages.values()) {
                if (PackageDexOptimizer.canOptimizePackage(p)) {
                    pkgs.add(p.packageName);
                }
            }
        }
        return pkgs;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:16:0x0063, code lost:
        if (r10 == null) goto L_0x0044;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:17:0x0065, code lost:
        r1.performDexOpt(r10, r9, getOrCreateCompilerPackageStats(r10), r11.mDexManager.getPackageUseInfoOrDefault(r10.packageName), r6);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private int performDexOptInternalWithDependenciesLI(android.content.pm.PackageParser.Package r12, com.android.server.pm.dex.DexoptOptions r13) {
        /*
            r11 = this;
            boolean r0 = r13.isForce()
            if (r0 == 0) goto L_0x000f
            com.android.server.pm.PackageDexOptimizer$ForcedUpdatePackageDexOptimizer r0 = new com.android.server.pm.PackageDexOptimizer$ForcedUpdatePackageDexOptimizer
            com.android.server.pm.PackageDexOptimizer r1 = r11.mPackageDexOptimizer
            r0.<init>(r1)
            r1 = r0
            goto L_0x0012
        L_0x000f:
            com.android.server.pm.PackageDexOptimizer r0 = r11.mPackageDexOptimizer
            r1 = r0
        L_0x0012:
            java.util.List r0 = findSharedLibraries(r12)
            android.content.pm.ApplicationInfo r2 = r12.applicationInfo
            java.lang.String[] r9 = com.android.server.pm.InstructionSets.getAppDexInstructionSets((android.content.pm.ApplicationInfo) r2)
            boolean r2 = r0.isEmpty()
            if (r2 != 0) goto L_0x007f
            com.android.server.pm.dex.DexoptOptions r2 = new com.android.server.pm.dex.DexoptOptions
            java.lang.String r4 = r13.getPackageName()
            int r5 = r13.getCompilationReason()
            java.lang.String r6 = r13.getCompilerFilter()
            java.lang.String r7 = r13.getSplitName()
            int r3 = r13.getFlags()
            r8 = r3 | 64
            r3 = r2
            r3.<init>(r4, r5, r6, r7, r8)
            r6 = r2
            java.util.Iterator r7 = r0.iterator()
        L_0x0044:
            boolean r2 = r7.hasNext()
            if (r2 == 0) goto L_0x007f
            java.lang.Object r2 = r7.next()
            r8 = r2
            android.content.pm.SharedLibraryInfo r8 = (android.content.pm.SharedLibraryInfo) r8
            r2 = 0
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r11.mPackages
            monitor-enter(r3)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r4 = r11.mPackages     // Catch:{ all -> 0x007c }
            java.lang.String r5 = r8.getPackageName()     // Catch:{ all -> 0x007c }
            java.lang.Object r4 = r4.get(r5)     // Catch:{ all -> 0x007c }
            android.content.pm.PackageParser$Package r4 = (android.content.pm.PackageParser.Package) r4     // Catch:{ all -> 0x007c }
            r10 = r4
            monitor-exit(r3)     // Catch:{ all -> 0x0078 }
            if (r10 == 0) goto L_0x0077
            com.android.server.pm.CompilerStats$PackageStats r4 = r11.getOrCreateCompilerPackageStats((android.content.pm.PackageParser.Package) r10)
            com.android.server.pm.dex.DexManager r2 = r11.mDexManager
            java.lang.String r3 = r10.packageName
            com.android.server.pm.dex.PackageDexUsage$PackageUseInfo r5 = r2.getPackageUseInfoOrDefault(r3)
            r2 = r10
            r3 = r9
            r1.performDexOpt(r2, r3, r4, r5, r6)
        L_0x0077:
            goto L_0x0044
        L_0x0078:
            r2 = move-exception
            r4 = r2
            r2 = r10
            goto L_0x007d
        L_0x007c:
            r4 = move-exception
        L_0x007d:
            monitor-exit(r3)     // Catch:{ all -> 0x007c }
            throw r4
        L_0x007f:
            com.android.server.pm.CompilerStats$PackageStats r6 = r11.getOrCreateCompilerPackageStats((android.content.pm.PackageParser.Package) r12)
            com.android.server.pm.dex.DexManager r2 = r11.mDexManager
            java.lang.String r3 = r12.packageName
            com.android.server.pm.dex.PackageDexUsage$PackageUseInfo r7 = r2.getPackageUseInfoOrDefault(r3)
            r3 = r1
            r4 = r12
            r5 = r9
            r8 = r13
            int r2 = r3.performDexOpt(r4, r5, r6, r7, r8)
            return r2
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.performDexOptInternalWithDependenciesLI(android.content.pm.PackageParser$Package, com.android.server.pm.dex.DexoptOptions):int");
    }

    public void reconcileSecondaryDexFiles(String packageName) {
        if (getInstantAppPackageName(Binder.getCallingUid()) == null && !isInstantApp(packageName, UserHandle.getCallingUserId())) {
            this.mDexManager.reconcileSecondaryDexFiles(packageName);
        }
    }

    /* access modifiers changed from: package-private */
    public DexManager getDexManager() {
        return this.mDexManager;
    }

    public boolean runBackgroundDexoptJob(List<String> packageNames) {
        if (getInstantAppPackageName(Binder.getCallingUid()) != null) {
            return false;
        }
        enforceSystemOrRootOrShell("runBackgroundDexoptJob");
        long identity = Binder.clearCallingIdentity();
        try {
            return BackgroundDexOptService.runIdleOptimizationsNow(this, this.mContext, packageNames);
        } finally {
            Binder.restoreCallingIdentity(identity);
        }
    }

    private static List<SharedLibraryInfo> findSharedLibraries(PackageParser.Package p) {
        if (p.usesLibraryInfos == null) {
            return Collections.emptyList();
        }
        ArrayList<SharedLibraryInfo> retValue = new ArrayList<>();
        Set<String> collectedNames = new HashSet<>();
        Iterator it = p.usesLibraryInfos.iterator();
        while (it.hasNext()) {
            findSharedLibrariesRecursive((SharedLibraryInfo) it.next(), retValue, collectedNames);
        }
        return retValue;
    }

    private static void findSharedLibrariesRecursive(SharedLibraryInfo info, ArrayList<SharedLibraryInfo> collected, Set<String> collectedNames) {
        if (!collectedNames.contains(info.getName())) {
            collectedNames.add(info.getName());
            collected.add(info);
            if (info.getDependencies() != null) {
                for (SharedLibraryInfo dep : info.getDependencies()) {
                    findSharedLibrariesRecursive(dep, collected, collectedNames);
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public List<PackageParser.Package> findSharedNonSystemLibraries(PackageParser.Package pkg) {
        List<SharedLibraryInfo> deps = findSharedLibraries(pkg);
        if (deps.isEmpty()) {
            return Collections.emptyList();
        }
        ArrayList<PackageParser.Package> retValue = new ArrayList<>();
        synchronized (this.mPackages) {
            for (SharedLibraryInfo info : deps) {
                PackageParser.Package depPackage = this.mPackages.get(info.getPackageName());
                if (depPackage != null) {
                    retValue.add(depPackage);
                }
            }
        }
        return retValue;
    }

    private SharedLibraryInfo getSharedLibraryInfoLPr(String name, long version) {
        return getSharedLibraryInfo(name, version, this.mSharedLibraries, (Map<String, LongSparseArray<SharedLibraryInfo>>) null);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v0, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v5, resolved type: android.content.pm.SharedLibraryInfo} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private static android.content.pm.SharedLibraryInfo getSharedLibraryInfo(java.lang.String r3, long r4, java.util.Map<java.lang.String, android.util.LongSparseArray<android.content.pm.SharedLibraryInfo>> r6, java.util.Map<java.lang.String, android.util.LongSparseArray<android.content.pm.SharedLibraryInfo>> r7) {
        /*
            if (r7 == 0) goto L_0x0015
            java.lang.Object r0 = r7.get(r3)
            android.util.LongSparseArray r0 = (android.util.LongSparseArray) r0
            r1 = 0
            if (r0 == 0) goto L_0x0012
            java.lang.Object r2 = r0.get(r4)
            r1 = r2
            android.content.pm.SharedLibraryInfo r1 = (android.content.pm.SharedLibraryInfo) r1
        L_0x0012:
            if (r1 == 0) goto L_0x0015
            return r1
        L_0x0015:
            java.lang.Object r0 = r6.get(r3)
            android.util.LongSparseArray r0 = (android.util.LongSparseArray) r0
            if (r0 != 0) goto L_0x001f
            r1 = 0
            return r1
        L_0x001f:
            java.lang.Object r1 = r0.get(r4)
            android.content.pm.SharedLibraryInfo r1 = (android.content.pm.SharedLibraryInfo) r1
            return r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.getSharedLibraryInfo(java.lang.String, long, java.util.Map, java.util.Map):android.content.pm.SharedLibraryInfo");
    }

    private SharedLibraryInfo getLatestSharedLibraVersionLPr(PackageParser.Package pkg) {
        LongSparseArray<SharedLibraryInfo> versionedLib = this.mSharedLibraries.get(pkg.staticSharedLibName);
        if (versionedLib == null) {
            return null;
        }
        long previousLibVersion = -1;
        int versionCount = versionedLib.size();
        for (int i = 0; i < versionCount; i++) {
            long libVersion = versionedLib.keyAt(i);
            if (libVersion < pkg.staticSharedLibVersion) {
                previousLibVersion = Math.max(previousLibVersion, libVersion);
            }
        }
        if (previousLibVersion >= 0) {
            return versionedLib.get(previousLibVersion);
        }
        return null;
    }

    private PackageSetting getSharedLibLatestVersionSetting(ScanResult scanResult) {
        PackageSetting sharedLibPackage = null;
        synchronized (this.mPackages) {
            SharedLibraryInfo latestSharedLibraVersionLPr = getLatestSharedLibraVersionLPr(scanResult.pkgSetting.pkg);
            if (latestSharedLibraVersionLPr != null) {
                sharedLibPackage = this.mSettings.getPackageLPr(latestSharedLibraVersionLPr.getPackageName());
            }
        }
        return sharedLibPackage;
    }

    public void shutdown() {
        this.mPackageUsage.writeNow(this.mPackages);
        this.mCompilerStats.writeNow();
        this.mDexManager.writePackageDexUsageNow();
        PackageWatchdog.getInstance(this.mContext).writeNow();
        synchronized (this.mPackages) {
            if (this.mHandler.hasMessages(14)) {
                this.mHandler.removeMessages(14);
                Iterator<Integer> it = this.mDirtyUsers.iterator();
                while (it.hasNext()) {
                    this.mSettings.writePackageRestrictionsLPr(it.next().intValue());
                }
                this.mDirtyUsers.clear();
            }
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 6 */
    public void dumpProfiles(String packageName) {
        PackageParser.Package pkg;
        synchronized (this.mPackages) {
            pkg = this.mPackages.get(packageName);
            if (pkg == null) {
                throw new IllegalArgumentException("Unknown package: " + packageName);
            }
        }
        int callingUid = Binder.getCallingUid();
        if (callingUid == SHELL_UID || callingUid == 0 || callingUid == pkg.applicationInfo.uid) {
            synchronized (this.mInstallLock) {
                Trace.traceBegin(262144, "dump profiles");
                this.mArtManagerService.dumpProfiles(pkg);
                Trace.traceEnd(262144);
            }
            return;
        }
        throw new SecurityException("dumpProfiles");
    }

    /* Debug info: failed to restart local var, previous not found, register: 7 */
    public void forceDexOpt(String packageName) {
        PackageParser.Package pkg;
        enforceSystemOrRoot("forceDexOpt");
        synchronized (this.mPackages) {
            pkg = this.mPackages.get(packageName);
            if (pkg == null) {
                throw new IllegalArgumentException("Unknown package: " + packageName);
            }
        }
        synchronized (this.mInstallLock) {
            Trace.traceBegin(262144, "dexopt");
            int res = performDexOptInternalWithDependenciesLI(pkg, new DexoptOptions(packageName, PackageManagerServiceCompilerMapping.getDefaultCompilerFilter(), 6));
            Trace.traceEnd(262144);
            if (res != 1) {
                throw new IllegalStateException("Failed to dexopt: " + res);
            }
        }
    }

    @GuardedBy({"mPackages"})
    private boolean verifyPackageUpdateLPr(PackageSetting oldPkg, PackageParser.Package newPkg) {
        if ((oldPkg.pkgFlags & 1) == 0) {
            Slog.w(TAG, "Unable to update from " + oldPkg.name + " to " + newPkg.packageName + ": old package not in system partition");
            return false;
        } else if (this.mPackages.get(oldPkg.name) == null) {
            return true;
        } else {
            Slog.w(TAG, "Unable to update from " + oldPkg.name + " to " + newPkg.packageName + ": old package still exists");
            return false;
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"mInstallLock"})
    public void removeCodePathLI(File codePath) {
        if (codePath.isDirectory()) {
            try {
                this.mInstaller.rmPackageDir(codePath.getAbsolutePath());
            } catch (Installer.InstallerException e) {
                Slog.w(TAG, "Failed to remove code path", e);
            }
        } else {
            codePath.delete();
        }
    }

    private int[] resolveUserIds(int userId) {
        if (userId == -1) {
            return sUserManager.getUserIds();
        }
        return new int[]{userId};
    }

    private void clearAppDataLIF(PackageParser.Package pkg, int userId, int flags) {
        if (pkg == null) {
            Slog.wtf(TAG, "Package was null!", new Throwable());
            return;
        }
        clearAppDataLeafLIF(pkg, userId, flags);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            clearAppDataLeafLIF((PackageParser.Package) pkg.childPackages.get(i), userId, flags);
        }
        if ((131072 & flags) == 0) {
            clearAppProfilesLIF(pkg, -1);
        }
    }

    private void clearAppDataLeafLIF(PackageParser.Package pkg, int userId, int flags) {
        PackageSetting ps;
        synchronized (this.mPackages) {
            ps = this.mSettings.mPackages.get(pkg.packageName);
        }
        for (int realUserId : resolveUserIds(userId)) {
            try {
                this.mInstaller.clearAppData(pkg.volumeUuid, pkg.packageName, realUserId, flags, ps != null ? ps.getCeDataInode(realUserId) : 0);
            } catch (Installer.InstallerException e) {
                Slog.w(TAG, String.valueOf(e));
            }
        }
    }

    private void destroyAppDataLIF(PackageParser.Package pkg, int userId, int flags) {
        if (pkg == null) {
            Slog.wtf(TAG, "Package was null!", new Throwable());
            return;
        }
        destroyAppDataLeafLIF(pkg, userId, flags);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            destroyAppDataLeafLIF((PackageParser.Package) pkg.childPackages.get(i), userId, flags);
        }
    }

    private void destroyAppDataLeafLIF(PackageParser.Package pkg, int userId, int flags) {
        PackageSetting ps;
        synchronized (this.mPackages) {
            ps = this.mSettings.mPackages.get(pkg.packageName);
        }
        for (int realUserId : resolveUserIds(userId)) {
            try {
                this.mInstaller.destroyAppData(pkg.volumeUuid, pkg.packageName, realUserId, flags, ps != null ? ps.getCeDataInode(realUserId) : 0);
            } catch (Installer.InstallerException e) {
                Slog.w(TAG, String.valueOf(e));
            }
            this.mDexManager.notifyPackageDataDestroyed(pkg.packageName, userId);
        }
    }

    private void destroyAppProfilesLIF(PackageParser.Package pkg) {
        if (pkg == null) {
            Slog.wtf(TAG, "Package was null!", new Throwable());
            return;
        }
        destroyAppProfilesLeafLIF(pkg);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            destroyAppProfilesLeafLIF((PackageParser.Package) pkg.childPackages.get(i));
        }
    }

    private void destroyAppProfilesLeafLIF(PackageParser.Package pkg) {
        try {
            this.mInstaller.destroyAppProfiles(pkg.packageName);
        } catch (Installer.InstallerException e) {
            Slog.w(TAG, String.valueOf(e));
        }
    }

    private void clearAppProfilesLIF(PackageParser.Package pkg, int userId) {
        if (pkg == null) {
            Slog.wtf(TAG, "Package was null!", new Throwable());
            return;
        }
        this.mArtManagerService.clearAppProfiles(pkg);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            this.mArtManagerService.clearAppProfiles((PackageParser.Package) pkg.childPackages.get(i));
        }
    }

    private void setInstallAndUpdateTime(PackageParser.Package pkg, long firstInstallTime, long lastUpdateTime) {
        PackageSetting ps = (PackageSetting) pkg.mExtras;
        if (ps != null) {
            ps.firstInstallTime = firstInstallTime;
            ps.lastUpdateTime = lastUpdateTime;
        }
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            PackageSetting ps2 = (PackageSetting) ((PackageParser.Package) pkg.childPackages.get(i)).mExtras;
            if (ps2 != null) {
                ps2.firstInstallTime = firstInstallTime;
                ps2.lastUpdateTime = lastUpdateTime;
            }
        }
    }

    @GuardedBy({"mPackages"})
    private void applyDefiningSharedLibraryUpdateLocked(PackageParser.Package pkg, SharedLibraryInfo libInfo, BiConsumer<SharedLibraryInfo, SharedLibraryInfo> action) {
        if (!pkg.isLibrary()) {
            return;
        }
        if (pkg.staticSharedLibName != null) {
            SharedLibraryInfo definedLibrary = getSharedLibraryInfoLPr(pkg.staticSharedLibName, pkg.staticSharedLibVersion);
            if (definedLibrary != null) {
                action.accept(definedLibrary, libInfo);
                return;
            }
            return;
        }
        Iterator it = pkg.libraryNames.iterator();
        while (it.hasNext()) {
            SharedLibraryInfo definedLibrary2 = getSharedLibraryInfoLPr((String) it.next(), -1);
            if (definedLibrary2 != null) {
                action.accept(definedLibrary2, libInfo);
            }
        }
    }

    @GuardedBy({"mPackages"})
    private void addSharedLibraryLPr(PackageParser.Package pkg, Set<String> usesLibraryFiles, SharedLibraryInfo libInfo, PackageParser.Package changingLib) {
        if (libInfo.getPath() != null) {
            usesLibraryFiles.add(libInfo.getPath());
            return;
        }
        PackageParser.Package p = this.mPackages.get(libInfo.getPackageName());
        if (changingLib != null && changingLib.packageName.equals(libInfo.getPackageName()) && (p == null || p.packageName.equals(changingLib.packageName))) {
            p = changingLib;
        }
        if (p != null) {
            usesLibraryFiles.addAll(p.getAllCodePaths());
            applyDefiningSharedLibraryUpdateLocked(pkg, libInfo, $$Lambda$PackageManagerService$xJ_pDKPvSH0lgOwva8xeI2zJ2ns.INSTANCE);
            if (p.usesLibraryFiles != null) {
                Collections.addAll(usesLibraryFiles, p.usesLibraryFiles);
            }
        }
    }

    @GuardedBy({"mPackages"})
    private void updateSharedLibrariesLocked(PackageParser.Package pkg, PackageParser.Package changingLib, Map<String, PackageParser.Package> availablePackages) throws PackageManagerException {
        executeSharedLibrariesUpdateLPr(pkg, changingLib, collectSharedLibraryInfos(pkg, availablePackages, this.mSharedLibraries, (Map<String, LongSparseArray<SharedLibraryInfo>>) null));
    }

    private static ArrayList<SharedLibraryInfo> collectSharedLibraryInfos(PackageParser.Package pkg, Map<String, PackageParser.Package> availablePackages, Map<String, LongSparseArray<SharedLibraryInfo>> existingLibraries, Map<String, LongSparseArray<SharedLibraryInfo>> newLibraries) throws PackageManagerException {
        if (pkg == null) {
            return null;
        }
        ArrayList<SharedLibraryInfo> usesLibraryInfos = null;
        if (pkg.usesLibraries != null) {
            usesLibraryInfos = collectSharedLibraryInfos(pkg.usesLibraries, (long[]) null, (String[][]) null, pkg.packageName, true, pkg.applicationInfo.targetSdkVersion, (ArrayList<SharedLibraryInfo>) null, availablePackages, existingLibraries, newLibraries);
        }
        if (pkg.usesStaticLibraries != null) {
            usesLibraryInfos = collectSharedLibraryInfos(pkg.usesStaticLibraries, pkg.usesStaticLibrariesVersions, pkg.usesStaticLibrariesCertDigests, pkg.packageName, true, pkg.applicationInfo.targetSdkVersion, usesLibraryInfos, availablePackages, existingLibraries, newLibraries);
        }
        if (pkg.usesOptionalLibraries != null) {
            return collectSharedLibraryInfos(pkg.usesOptionalLibraries, (long[]) null, (String[][]) null, pkg.packageName, false, pkg.applicationInfo.targetSdkVersion, usesLibraryInfos, availablePackages, existingLibraries, newLibraries);
        }
        return usesLibraryInfos;
    }

    private void executeSharedLibrariesUpdateLPr(PackageParser.Package pkg, PackageParser.Package changingLib, ArrayList<SharedLibraryInfo> usesLibraryInfos) {
        applyDefiningSharedLibraryUpdateLocked(pkg, (SharedLibraryInfo) null, $$Lambda$PackageManagerService$JUo3M6zuPH65x1voKjSOJvOMHRw.INSTANCE);
        if (usesLibraryInfos != null) {
            pkg.usesLibraryInfos = usesLibraryInfos;
            Set<String> usesLibraryFiles = new LinkedHashSet<>();
            Iterator<SharedLibraryInfo> it = usesLibraryInfos.iterator();
            while (it.hasNext()) {
                addSharedLibraryLPr(pkg, usesLibraryFiles, it.next(), changingLib);
            }
            pkg.usesLibraryFiles = (String[]) usesLibraryFiles.toArray(new String[usesLibraryFiles.size()]);
            return;
        }
        pkg.usesLibraryInfos = null;
        pkg.usesLibraryFiles = null;
    }

    @GuardedBy({"mPackages"})
    private static ArrayList<SharedLibraryInfo> collectSharedLibraryInfos(List<String> requestedLibraries, long[] requiredVersions, String[][] requiredCertDigests, String packageName, boolean required, int targetSdk, ArrayList<SharedLibraryInfo> outUsedLibraries, Map<String, PackageParser.Package> availablePackages, Map<String, LongSparseArray<SharedLibraryInfo>> existingLibraries, Map<String, LongSparseArray<SharedLibraryInfo>> newLibraries) throws PackageManagerException {
        long libVersion;
        int libCount;
        String[] strArr;
        String str = packageName;
        int libCount2 = requestedLibraries.size();
        int i = 0;
        ArrayList<SharedLibraryInfo> outUsedLibraries2 = outUsedLibraries;
        while (i < libCount2) {
            String libName = requestedLibraries.get(i);
            if (requiredVersions != null) {
                libVersion = requiredVersions[i];
            } else {
                libVersion = -1;
            }
            SharedLibraryInfo libraryInfo = getSharedLibraryInfo(libName, libVersion, existingLibraries, newLibraries);
            if (libraryInfo != null) {
                if (requiredVersions == null || requiredCertDigests == null) {
                    Map<String, PackageParser.Package> map = availablePackages;
                    libCount = libCount2;
                    long j = libVersion;
                } else if (libraryInfo.getLongVersion() == requiredVersions[i]) {
                    PackageParser.Package libPkg = availablePackages.get(libraryInfo.getPackageName());
                    if (libPkg != null) {
                        String[] expectedCertDigests = requiredCertDigests[i];
                        libCount = libCount2;
                        if (expectedCertDigests.length > 1) {
                            if (targetSdk >= 27) {
                                strArr = PackageUtils.computeSignaturesSha256Digests(libPkg.mSigningDetails.signatures);
                            } else {
                                strArr = PackageUtils.computeSignaturesSha256Digests(new Signature[]{libPkg.mSigningDetails.signatures[0]});
                            }
                            String[] libCertDigests = strArr;
                            long j2 = libVersion;
                            if (expectedCertDigests.length == libCertDigests.length) {
                                Arrays.sort(libCertDigests);
                                Arrays.sort(expectedCertDigests);
                                int certCount = libCertDigests.length;
                                int j3 = 0;
                                while (j3 < certCount) {
                                    String[] libCertDigests2 = libCertDigests;
                                    if (libCertDigests[j3].equalsIgnoreCase(expectedCertDigests[j3])) {
                                        j3++;
                                        libCertDigests = libCertDigests2;
                                    } else {
                                        throw new PackageManagerException(-9, "Package " + str + " requires differently signed static shared library; failing!");
                                    }
                                }
                            } else {
                                String[] strArr2 = libCertDigests;
                                throw new PackageManagerException(-9, "Package " + str + " requires differently signed static shared library; failing!");
                            }
                        } else {
                            if (!libPkg.mSigningDetails.hasSha256Certificate(ByteStringUtils.fromHexToByteArray(expectedCertDigests[0]))) {
                                throw new PackageManagerException(-9, "Package " + str + " requires differently signed static shared library; failing!");
                            }
                        }
                    } else {
                        long j4 = libVersion;
                        throw new PackageManagerException(-9, "Package " + str + " requires unavailable static shared library; failing!");
                    }
                } else {
                    long j5 = libVersion;
                    throw new PackageManagerException(-9, "Package " + str + " requires unavailable static shared library " + libName + " version " + libraryInfo.getLongVersion() + "; failing!");
                }
                if (outUsedLibraries2 == null) {
                    outUsedLibraries2 = new ArrayList<>();
                }
                outUsedLibraries2.add(libraryInfo);
            } else if (!required) {
                Map<String, PackageParser.Package> map2 = availablePackages;
                libCount = libCount2;
            } else {
                throw new PackageManagerException(-9, "Package " + str + " requires unavailable shared library " + libName + "; failing!");
            }
            i++;
            libCount2 = libCount;
        }
        return outUsedLibraries2;
    }

    private static boolean hasString(List<String> list, List<String> which) {
        if (list == null || which == null) {
            return false;
        }
        for (int i = list.size() - 1; i >= 0; i--) {
            for (int j = which.size() - 1; j >= 0; j--) {
                if (which.get(j).equals(list.get(i))) {
                    return true;
                }
            }
        }
        return false;
    }

    /* JADX WARNING: Removed duplicated region for block: B:10:0x002c  */
    /* JADX WARNING: Removed duplicated region for block: B:6:0x0019  */
    /* JADX WARNING: Removed duplicated region for block: B:7:0x001b  */
    @com.android.internal.annotations.GuardedBy({"mPackages"})
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private java.util.ArrayList<android.content.pm.PackageParser.Package> updateAllSharedLibrariesLocked(android.content.pm.PackageParser.Package r22, java.util.Map<java.lang.String, android.content.pm.PackageParser.Package> r23) {
        /*
            r21 = this;
            r10 = r21
            r11 = r22
            r0 = 0
            r1 = 0
            r2 = 0
            r12 = 1
            if (r11 == 0) goto L_0x0015
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>(r12)
            r2 = r3
            r2.add(r11)
            r13 = r2
            goto L_0x0016
        L_0x0015:
            r13 = r2
        L_0x0016:
            r14 = 0
            if (r13 != 0) goto L_0x001b
            r2 = 0
            goto L_0x0021
        L_0x001b:
            java.lang.Object r2 = r13.remove(r14)
            android.content.pm.PackageParser$Package r2 = (android.content.pm.PackageParser.Package) r2
        L_0x0021:
            r15 = r2
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r10.mPackages
            int r2 = r2.size()
            int r2 = r2 - r12
            r9 = r2
        L_0x002a:
            if (r9 < 0) goto L_0x00f6
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r10.mPackages
            java.lang.Object r2 = r2.valueAt(r9)
            r8 = r2
            android.content.pm.PackageParser$Package r8 = (android.content.pm.PackageParser.Package) r8
            if (r15 == 0) goto L_0x0059
            java.util.ArrayList r2 = r8.usesLibraries
            java.util.ArrayList r3 = r15.libraryNames
            boolean r2 = hasString(r2, r3)
            if (r2 != 0) goto L_0x0059
            java.util.ArrayList r2 = r8.usesOptionalLibraries
            java.util.ArrayList r3 = r15.libraryNames
            boolean r2 = hasString(r2, r3)
            if (r2 != 0) goto L_0x0059
            java.util.ArrayList r2 = r8.usesStaticLibraries
            java.lang.String r3 = r15.staticSharedLibName
            boolean r2 = com.android.internal.util.ArrayUtils.contains(r2, r3)
            if (r2 != 0) goto L_0x0059
            r19 = r9
            goto L_0x00f2
        L_0x0059:
            if (r0 != 0) goto L_0x0063
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r0 = r2
            r7 = r0
            goto L_0x0064
        L_0x0063:
            r7 = r0
        L_0x0064:
            r7.add(r8)
            if (r15 == 0) goto L_0x0084
            if (r1 != 0) goto L_0x0071
            android.util.ArraySet r0 = new android.util.ArraySet
            r0.<init>()
            r1 = r0
        L_0x0071:
            java.lang.String r0 = r8.packageName
            boolean r0 = r1.contains(r0)
            if (r0 != 0) goto L_0x0081
            java.lang.String r0 = r8.packageName
            r1.add(r0)
            r13.add(r8)
        L_0x0081:
            r16 = r1
            goto L_0x0086
        L_0x0084:
            r16 = r1
        L_0x0086:
            r5 = r23
            r10.updateSharedLibrariesLocked(r8, r15, r5)     // Catch:{ PackageManagerException -> 0x0090 }
            r17 = r7
            r19 = r9
            goto L_0x00ee
        L_0x0090:
            r0 = move-exception
            r1 = r0
            r0 = r1
            boolean r1 = r8.isSystem()
            if (r1 == 0) goto L_0x00a7
            boolean r1 = r8.isUpdatedSystemApp()
            if (r1 == 0) goto L_0x00a0
            goto L_0x00a7
        L_0x00a0:
            r17 = r7
            r18 = r8
            r19 = r9
            goto L_0x00d3
        L_0x00a7:
            boolean r1 = r8.isUpdatedSystemApp()
            if (r1 == 0) goto L_0x00af
            r6 = r12
            goto L_0x00b0
        L_0x00af:
            r6 = r14
        L_0x00b0:
            java.lang.String r2 = r8.packageName
            r3 = 0
            r4 = 1
            com.android.server.pm.UserManagerService r1 = sUserManager
            int[] r17 = r1.getUserIds()
            r18 = 0
            r19 = 1
            r20 = 0
            r1 = r21
            r5 = r17
            r17 = r7
            r7 = r18
            r18 = r8
            r8 = r19
            r19 = r9
            r9 = r20
            r1.deletePackageLIF(r2, r3, r4, r5, r6, r7, r8, r9)
        L_0x00d3:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "updateAllSharedLibrariesLPw failed: "
            r1.append(r2)
            java.lang.String r2 = r0.getMessage()
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            java.lang.String r2 = "PackageManager"
            android.util.Slog.e(r2, r1)
        L_0x00ee:
            r1 = r16
            r0 = r17
        L_0x00f2:
            int r9 = r19 + -1
            goto L_0x002a
        L_0x00f6:
            r19 = r9
            if (r13 == 0) goto L_0x0100
            int r2 = r13.size()
            if (r2 > 0) goto L_0x0016
        L_0x0100:
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.updateAllSharedLibrariesLocked(android.content.pm.PackageParser$Package, java.util.Map):java.util.ArrayList");
    }

    /* JADX INFO: finally extract failed */
    @GuardedBy({"mInstallLock", "mPackages"})
    private List<ScanResult> scanPackageTracedLI(PackageParser.Package pkg, int parseFlags, int scanFlags, long currentTime, UserHandle user) throws PackageManagerException {
        int scanFlags2;
        PackageParser.Package packageR = pkg;
        int scanFlags3 = scanFlags;
        Trace.traceBegin(262144, "scanPackage");
        if ((scanFlags3 & 1024) != 0) {
            scanFlags2 = scanFlags3 & -1025;
        } else if (packageR.childPackages == null || packageR.childPackages.size() <= 0) {
            scanFlags2 = scanFlags3;
        } else {
            scanFlags2 = scanFlags3 | 1024;
        }
        int childCount = packageR.childPackages != null ? packageR.childPackages.size() : 0;
        List<ScanResult> scanResults = new ArrayList<>(childCount + 1);
        try {
            scanResults.add(scanPackageNewLI(pkg, parseFlags, scanFlags2, currentTime, user));
            for (int i = 0; i < childCount; i++) {
                scanResults.add(scanPackageNewLI((PackageParser.Package) packageR.childPackages.get(i), parseFlags, scanFlags2, currentTime, user));
            }
            Trace.traceEnd(262144);
            if ((scanFlags2 & 1024) != 0) {
                return scanPackageTracedLI(pkg, parseFlags, scanFlags2, currentTime, user);
            }
            return scanResults;
        } catch (Throwable th) {
            Trace.traceEnd(262144);
            throw th;
        }
    }

    private static class ScanResult {
        public final List<String> changedAbiCodePath;
        public final List<SharedLibraryInfo> dynamicSharedLibraryInfos;
        public final boolean existingSettingCopied;
        public final PackageSetting pkgSetting;
        public final ScanRequest request;
        public final SharedLibraryInfo staticSharedLibraryInfo;
        public final boolean success;

        public ScanResult(ScanRequest request2, boolean success2, PackageSetting pkgSetting2, List<String> changedAbiCodePath2, boolean existingSettingCopied2, SharedLibraryInfo staticSharedLibraryInfo2, List<SharedLibraryInfo> dynamicSharedLibraryInfos2) {
            this.request = request2;
            this.success = success2;
            this.pkgSetting = pkgSetting2;
            this.changedAbiCodePath = changedAbiCodePath2;
            this.existingSettingCopied = existingSettingCopied2;
            this.staticSharedLibraryInfo = staticSharedLibraryInfo2;
            this.dynamicSharedLibraryInfos = dynamicSharedLibraryInfos2;
        }
    }

    private static class ScanRequest {
        public final PackageSetting disabledPkgSetting;
        public final boolean isPlatformPackage;
        public final PackageParser.Package oldPkg;
        public final PackageSetting oldPkgSetting;
        public final PackageSetting originalPkgSetting;
        public final int parseFlags;
        public final PackageParser.Package pkg;
        public final PackageSetting pkgSetting;
        public final String realPkgName;
        public final int scanFlags;
        public final SharedUserSetting sharedUserSetting;
        public final UserHandle user;

        public ScanRequest(PackageParser.Package pkg2, SharedUserSetting sharedUserSetting2, PackageParser.Package oldPkg2, PackageSetting pkgSetting2, PackageSetting disabledPkgSetting2, PackageSetting originalPkgSetting2, String realPkgName2, int parseFlags2, int scanFlags2, boolean isPlatformPackage2, UserHandle user2) {
            this.pkg = pkg2;
            this.oldPkg = oldPkg2;
            this.pkgSetting = pkgSetting2;
            this.sharedUserSetting = sharedUserSetting2;
            this.oldPkgSetting = pkgSetting2 == null ? null : new PackageSetting(pkgSetting2);
            this.disabledPkgSetting = disabledPkgSetting2;
            this.originalPkgSetting = originalPkgSetting2;
            this.realPkgName = realPkgName2;
            this.parseFlags = parseFlags2;
            this.scanFlags = scanFlags2;
            this.isPlatformPackage = isPlatformPackage2;
            this.user = user2;
        }
    }

    private int adjustScanFlags(int scanFlags, PackageSetting pkgSetting, PackageSetting disabledPkgSetting, UserHandle user, PackageParser.Package pkg) {
        PackageSetting systemPkgSetting;
        if ((scanFlags & 4) == 0 || disabledPkgSetting != null || pkgSetting == null || !pkgSetting.isSystem()) {
            systemPkgSetting = disabledPkgSetting;
        } else {
            systemPkgSetting = pkgSetting;
        }
        if (systemPkgSetting != null) {
            scanFlags |= 131072;
            if ((systemPkgSetting.pkgPrivateFlags & 8) != 0) {
                scanFlags |= 262144;
            }
            if ((131072 & systemPkgSetting.pkgPrivateFlags) != 0) {
                scanFlags |= 524288;
            }
            if ((systemPkgSetting.pkgPrivateFlags & 262144) != 0) {
                scanFlags |= 1048576;
            }
            if ((systemPkgSetting.pkgPrivateFlags & 524288) != 0) {
                scanFlags |= 2097152;
            }
            if ((systemPkgSetting.pkgPrivateFlags & 2097152) != 0) {
                scanFlags |= 4194304;
            }
            if ((systemPkgSetting.pkgPrivateFlags & 1073741824) != 0) {
                scanFlags |= 8388608;
            }
        }
        if (pkgSetting != null) {
            int userId = user == null ? 0 : user.getIdentifier();
            if (pkgSetting.getInstantApp(userId)) {
                scanFlags |= 16384;
            }
            if (pkgSetting.getVirtulalPreload(userId)) {
                scanFlags |= 65536;
            }
        }
        boolean skipVendorPrivilegeScan = (1048576 & scanFlags) != 0 && SystemProperties.getInt("ro.vndk.version", 28) < 28;
        if ((scanFlags & 262144) == 0 && !pkg.isPrivileged() && pkg.mSharedUserId != null && !skipVendorPrivilegeScan) {
            SharedUserSetting sharedUserSetting = null;
            try {
                sharedUserSetting = this.mSettings.getSharedUserLPw(pkg.mSharedUserId, 0, 0, false);
            } catch (PackageManagerException e) {
            }
            if (sharedUserSetting != null && sharedUserSetting.isPrivileged()) {
                synchronized (this.mPackages) {
                    if (PackageManagerServiceUtils.compareSignatures(this.mSettings.mPackages.get(PLATFORM_PACKAGE_NAME).signatures.mSigningDetails.signatures, pkg.mSigningDetails.signatures) != 0) {
                        scanFlags |= 262144;
                    }
                }
            }
        }
        return scanFlags;
    }

    @GuardedBy({"mInstallLock", "mPackages"})
    private ScanResult scanPackageNewLI(PackageParser.Package pkg, int parseFlags, int scanFlags, long currentTime, UserHandle user) throws PackageManagerException {
        PackageParser.Package packageR = pkg;
        int i = parseFlags;
        String renamedPkgName = this.mSettings.getRenamedPackageLPr(packageR.mRealPackage);
        String realPkgName = getRealPackageName(packageR, renamedPkgName);
        if (realPkgName != null) {
            ensurePackageRenamed(packageR, renamedPkgName);
        }
        PackageSetting originalPkgSetting = getOriginalPackageLocked(packageR, renamedPkgName);
        PackageSetting pkgSetting = this.mSettings.getPackageLPr(packageR.packageName);
        PackageSetting disabledPkgSetting = this.mSettings.getDisabledSystemPkgLPr(packageR.packageName);
        if (this.mTransferedPackages.contains(packageR.packageName)) {
            Slog.w(TAG, "Package " + packageR.packageName + " was transferred to another, but its .apk remains");
        }
        File scanFile = new File(packageR.codePath);
        tryIgnorePackage(packageR, scanFile, "install");
        int scanFlags2 = adjustScanFlags(scanFlags, pkgSetting, disabledPkgSetting, user, pkg);
        synchronized (this.mPackages) {
            try {
                applyPolicy(packageR, i, scanFlags2, this.mPlatformPackage);
                assertPackageIsValid(packageR, i, scanFlags2);
                SharedUserSetting sharedUserSetting = null;
                if (packageR.mSharedUserId != null) {
                    try {
                        sharedUserSetting = this.mSettings.getSharedUserLPw(packageR.mSharedUserId, 0, 0, true);
                    } catch (Throwable th) {
                        th = th;
                        long j = currentTime;
                        File file = scanFile;
                        PackageSetting packageSetting = pkgSetting;
                        String str = renamedPkgName;
                        throw th;
                    }
                }
                File file2 = scanFile;
                PackageSetting packageSetting2 = pkgSetting;
                String str2 = renamedPkgName;
                try {
                    ScanRequest scanRequest = new ScanRequest(pkg, sharedUserSetting, pkgSetting == null ? null : pkgSetting.pkg, pkgSetting, disabledPkgSetting, originalPkgSetting, realPkgName, parseFlags, scanFlags2, packageR == this.mPlatformPackage, user);
                    ScanResult scanPackageOnlyLI = scanPackageOnlyLI(scanRequest, this.mFactoryTest, currentTime);
                    return scanPackageOnlyLI;
                } catch (Throwable th2) {
                    th = th2;
                    throw th;
                }
            } catch (Throwable th3) {
                th = th3;
                long j2 = currentTime;
                File file3 = scanFile;
                PackageSetting packageSetting3 = pkgSetting;
                String str3 = renamedPkgName;
                throw th;
            }
        }
    }

    private boolean optimisticallyRegisterAppId(ScanResult result) throws PackageManagerException {
        if (!result.existingSettingCopied) {
            return this.mSettings.registerAppIdLPw(result.pkgSetting);
        }
        return false;
    }

    private void cleanUpAppIdCreation(ScanResult result) {
        if (result.pkgSetting.appId > 0) {
            this.mSettings.removeAppIdLPw(result.pkgSetting.appId);
        }
    }

    @GuardedBy({"mPackages", "mInstallLock"})
    private void commitReconciledScanResultLocked(ReconciledPackage reconciledPkg) {
        PackageSetting pkgSetting;
        String realPkgName;
        PackageSetting pkgSetting2;
        String realPkgName2;
        PackageSetting pkgSetting3;
        ReconciledPackage reconciledPackage = reconciledPkg;
        ScanResult result = reconciledPackage.scanResult;
        ScanRequest request = result.request;
        PackageParser.Package pkg = request.pkg;
        PackageParser.Package oldPkg = request.oldPkg;
        int parseFlags = request.parseFlags;
        int scanFlags = request.scanFlags;
        PackageSetting oldPkgSetting = request.oldPkgSetting;
        PackageSetting originalPkgSetting = request.originalPkgSetting;
        UserHandle user = request.user;
        String realPkgName3 = request.realPkgName;
        List<String> changedAbiCodePath = result.changedAbiCodePath;
        if (!(request.pkgSetting == null || request.pkgSetting.sharedUser == null || request.pkgSetting.sharedUser == result.pkgSetting.sharedUser)) {
            request.pkgSetting.sharedUser.removePackage(request.pkgSetting);
        }
        if (result.existingSettingCopied) {
            PackageSetting pkgSetting4 = request.pkgSetting;
            pkgSetting4.updateFrom(result.pkgSetting);
            pkg.mExtras = pkgSetting4;
            pkgSetting = pkgSetting4;
        } else {
            PackageSetting pkgSetting5 = result.pkgSetting;
            if (originalPkgSetting != null) {
                pkgSetting3 = pkgSetting5;
                this.mSettings.addRenamedPackageLPw(pkg.packageName, originalPkgSetting.name);
            } else {
                pkgSetting3 = pkgSetting5;
            }
            if (originalPkgSetting != null && (scanFlags & 1024) == 0) {
                this.mTransferedPackages.add(originalPkgSetting.name);
            }
            pkgSetting = pkgSetting3;
        }
        if (pkgSetting.sharedUser != null) {
            pkgSetting.sharedUser.addPackage(pkgSetting);
        }
        pkg.applicationInfo.uid = pkgSetting.appId;
        this.mSettings.writeUserRestrictionsLPw(pkgSetting, oldPkgSetting);
        if ((scanFlags & 1024) == 0 && realPkgName3 != null) {
            this.mTransferedPackages.add(pkg.packageName);
        }
        if (reconciledPackage.collectedSharedLibraryInfos != null) {
            executeSharedLibrariesUpdateLPr(pkg, (PackageParser.Package) null, reconciledPackage.collectedSharedLibraryInfos);
        }
        KeySetManagerService ksms = this.mSettings.mKeySetManagerService;
        if (reconciledPackage.removeAppKeySetData) {
            ksms.removeAppKeySetDataLPw(pkg.packageName);
        }
        if (reconciledPackage.sharedUserSignaturesChanged) {
            KeySetManagerService keySetManagerService = ksms;
            pkgSetting.sharedUser.signaturesChanged = Boolean.TRUE;
            pkgSetting.sharedUser.signatures.mSigningDetails = reconciledPackage.signingDetails;
        }
        pkgSetting.signatures.mSigningDetails = reconciledPackage.signingDetails;
        if ((scanFlags & 1024) != 0 || pkg.mAdoptPermissions == null) {
            pkgSetting2 = pkgSetting;
            realPkgName = realPkgName3;
        } else {
            int i = pkg.mAdoptPermissions.size() - 1;
            while (i >= 0) {
                String origName = (String) pkg.mAdoptPermissions.get(i);
                PackageSetting pkgSetting6 = pkgSetting;
                PackageSetting orig = this.mSettings.getPackageLPr(origName);
                if (orig == null) {
                    realPkgName2 = realPkgName3;
                } else if (verifyPackageUpdateLPr(orig, pkg)) {
                    PackageSetting packageSetting = orig;
                    StringBuilder sb = new StringBuilder();
                    realPkgName2 = realPkgName3;
                    sb.append("Adopting permissions from ");
                    sb.append(origName);
                    sb.append(" to ");
                    sb.append(pkg.packageName);
                    Slog.i(TAG, sb.toString());
                    this.mSettings.mPermissions.transferPermissions(origName, pkg.packageName);
                } else {
                    realPkgName2 = realPkgName3;
                }
                i--;
                pkgSetting = pkgSetting6;
                realPkgName3 = realPkgName2;
            }
            pkgSetting2 = pkgSetting;
            realPkgName = realPkgName3;
        }
        if (changedAbiCodePath != null && changedAbiCodePath.size() > 0) {
            for (int i2 = changedAbiCodePath.size() - 1; i2 >= 0; i2--) {
                try {
                    this.mInstaller.rmdex(changedAbiCodePath.get(i2), InstructionSets.getDexCodeInstructionSet(InstructionSets.getPreferredInstructionSet()));
                } catch (Installer.InstallerException e) {
                }
            }
        }
        if ((scanFlags & 1024) == 0) {
            boolean z = false;
            int userId = user == null ? 0 : user.getIdentifier();
            if ((Integer.MIN_VALUE & parseFlags) != 0) {
                z = true;
            }
            PackageSetting pkgSetting7 = pkgSetting2;
            List<String> list = changedAbiCodePath;
            int userId2 = userId;
            String str = realPkgName;
            UserHandle userHandle = user;
            PackageSetting packageSetting2 = originalPkgSetting;
            PackageSetting packageSetting3 = oldPkgSetting;
            commitPackageSettings(pkg, oldPkg, pkgSetting7, scanFlags, z, reconciledPkg);
            PackageSetting pkgSetting8 = pkgSetting7;
            if (pkgSetting8.getInstantApp(userId2)) {
                this.mInstantAppRegistry.addInstantAppLPw(userId2, pkgSetting8.appId);
            }
        } else if (oldPkgSetting != null) {
            synchronized (this.mPackages) {
                this.mSettings.mPackages.put(oldPkgSetting.name, oldPkgSetting);
            }
            PackageSetting packageSetting4 = originalPkgSetting;
            PackageSetting packageSetting5 = oldPkgSetting;
            PackageSetting packageSetting6 = pkgSetting2;
            String str2 = realPkgName;
            List<String> list2 = changedAbiCodePath;
            UserHandle userHandle2 = user;
        } else {
            PackageSetting packageSetting7 = originalPkgSetting;
            PackageSetting packageSetting8 = oldPkgSetting;
            PackageSetting packageSetting9 = pkgSetting2;
            String str3 = realPkgName;
            List<String> list3 = changedAbiCodePath;
            UserHandle userHandle3 = user;
        }
    }

    private static String getRealPackageName(PackageParser.Package pkg, String renamedPkgName) {
        if (isPackageRenamed(pkg, renamedPkgName)) {
            return pkg.mRealPackage;
        }
        return null;
    }

    private static boolean isPackageRenamed(PackageParser.Package pkg, String renamedPkgName) {
        return pkg.mOriginalPackages != null && pkg.mOriginalPackages.contains(renamedPkgName);
    }

    @GuardedBy({"mPackages"})
    private PackageSetting getOriginalPackageLocked(PackageParser.Package pkg, String renamedPkgName) {
        if (!isPackageRenamed(pkg, renamedPkgName)) {
            return null;
        }
        for (int i = pkg.mOriginalPackages.size() - 1; i >= 0; i--) {
            PackageSetting originalPs = this.mSettings.getPackageLPr((String) pkg.mOriginalPackages.get(i));
            if (originalPs != null && verifyPackageUpdateLPr(originalPs, pkg)) {
                if (originalPs.sharedUser == null || originalPs.sharedUser.name.equals(pkg.mSharedUserId)) {
                    return originalPs;
                }
                Slog.w(TAG, "Unable to migrate data from " + originalPs.name + " to " + pkg.packageName + ": old uid " + originalPs.sharedUser.name + " differs from " + pkg.mSharedUserId);
            }
        }
        return null;
    }

    private static void ensurePackageRenamed(PackageParser.Package pkg, String renamedPackageName) {
        if (pkg.mOriginalPackages != null && pkg.mOriginalPackages.contains(renamedPackageName) && !pkg.packageName.equals(renamedPackageName)) {
            pkg.setPackageName(renamedPackageName);
        }
    }

    @GuardedBy({"mInstallLock"})
    private static ScanResult scanPackageOnlyLI(ScanRequest request, boolean isUnderFactoryTest, long currentTime) throws PackageManagerException {
        boolean needToDeriveAbi;
        String primaryCpuAbiFromSettings;
        String secondaryCpuAbiFromSettings;
        int parseFlags;
        String str;
        String secondaryCpuAbiFromSettings2;
        boolean isPlatformPackage;
        PackageSetting pkgSetting;
        String primaryCpuAbiFromSettings2;
        UserHandle user;
        String secondaryCpuAbiFromSettings3;
        boolean z;
        String secondaryCpuAbiFromSettings4;
        SharedLibraryInfo staticSharedLibraryInfo;
        List<SharedLibraryInfo> dynamicSharedLibraryInfos;
        String str2;
        String str3;
        String str4;
        ScanRequest scanRequest = request;
        long j = currentTime;
        PackageParser.Package pkg = scanRequest.pkg;
        PackageSetting pkgSetting2 = scanRequest.pkgSetting;
        PackageSetting disabledPkgSetting = scanRequest.disabledPkgSetting;
        PackageSetting originalPkgSetting = scanRequest.originalPkgSetting;
        int parseFlags2 = scanRequest.parseFlags;
        int scanFlags = scanRequest.scanFlags;
        String realPkgName = scanRequest.realPkgName;
        SharedUserSetting sharedUserSetting = scanRequest.sharedUserSetting;
        UserHandle user2 = scanRequest.user;
        boolean isPlatformPackage2 = scanRequest.isPlatformPackage;
        List<String> changedAbiCodePath = null;
        new File(pkg.codePath);
        File destCodeFile = new File(pkg.applicationInfo.getCodePath());
        File destResourceFile = new File(pkg.applicationInfo.getResourcePath());
        String secondaryCpuAbiFromSettings5 = null;
        boolean needToDeriveAbi2 = (scanFlags & 8192) != 0;
        if (needToDeriveAbi2) {
            needToDeriveAbi = needToDeriveAbi2;
            primaryCpuAbiFromSettings = null;
        } else if (pkgSetting2 != null) {
            String primaryCpuAbiFromSettings3 = pkgSetting2.primaryCpuAbiString;
            secondaryCpuAbiFromSettings5 = pkgSetting2.secondaryCpuAbiString;
            needToDeriveAbi = needToDeriveAbi2;
            primaryCpuAbiFromSettings = primaryCpuAbiFromSettings3;
        } else {
            needToDeriveAbi = true;
            primaryCpuAbiFromSettings = null;
        }
        if (pkgSetting2 == null || pkgSetting2.sharedUser == sharedUserSetting) {
            secondaryCpuAbiFromSettings = secondaryCpuAbiFromSettings5;
        } else {
            StringBuilder sb = new StringBuilder();
            secondaryCpuAbiFromSettings = secondaryCpuAbiFromSettings5;
            sb.append("Package ");
            sb.append(pkg.packageName);
            sb.append(" shared user changed from ");
            if (pkgSetting2.sharedUser != null) {
                str3 = pkgSetting2.sharedUser.name;
            } else {
                str3 = "<nothing>";
            }
            sb.append(str3);
            sb.append(" to ");
            if (sharedUserSetting != null) {
                str4 = sharedUserSetting.name;
            } else {
                str4 = "<nothing>";
            }
            sb.append(str4);
            sb.append("; replacing with new");
            reportSettingsProblem(5, sb.toString());
            if (pkgSetting2.sharedUser != null) {
                pkgSetting2.sharedUser.removePackage(pkgSetting2);
            }
            pkgSetting2 = null;
        }
        String[] usesStaticLibraries = null;
        if (pkg.usesStaticLibraries != null) {
            usesStaticLibraries = new String[pkg.usesStaticLibraries.size()];
            pkg.usesStaticLibraries.toArray(usesStaticLibraries);
        }
        boolean createNewPackage = pkgSetting2 == null;
        if (createNewPackage) {
            str = " to ";
            parseFlags = parseFlags2;
            String secondaryCpuAbiFromSettings6 = secondaryCpuAbiFromSettings;
            primaryCpuAbiFromSettings2 = primaryCpuAbiFromSettings;
            isPlatformPackage = isPlatformPackage2;
            String str5 = realPkgName;
            secondaryCpuAbiFromSettings2 = secondaryCpuAbiFromSettings6;
            pkgSetting = Settings.createNewSetting(pkg.packageName, originalPkgSetting, disabledPkgSetting, realPkgName, sharedUserSetting, destCodeFile, destResourceFile, pkg.applicationInfo.nativeLibraryRootDir, pkg.applicationInfo.primaryCpuAbi, pkg.applicationInfo.secondaryCpuAbi, (long) pkg.mVersionCode, pkg.applicationInfo.flags, pkg.applicationInfo.privateFlags, user2, true, (scanFlags & 16384) != 0, (65536 & scanFlags) != 0, pkg.parentPackage != null ? pkg.parentPackage.packageName : null, pkg.getChildPackageNames(), UserManagerService.getInstance(), usesStaticLibraries, pkg.usesStaticLibrariesVersions);
        } else {
            parseFlags = parseFlags2;
            str = " to ";
            primaryCpuAbiFromSettings2 = primaryCpuAbiFromSettings;
            isPlatformPackage = isPlatformPackage2;
            String secondaryCpuAbiFromSettings7 = secondaryCpuAbiFromSettings;
            PackageSetting pkgSetting3 = new PackageSetting(pkgSetting2);
            pkgSetting3.pkg = pkg;
            String str6 = realPkgName;
            secondaryCpuAbiFromSettings2 = secondaryCpuAbiFromSettings7;
            Settings.updatePackageSetting(pkgSetting3, disabledPkgSetting, sharedUserSetting, destCodeFile, destResourceFile, pkg.applicationInfo.nativeLibraryDir, pkg.applicationInfo.primaryCpuAbi, pkg.applicationInfo.secondaryCpuAbi, pkg.applicationInfo.flags, pkg.applicationInfo.privateFlags, pkg.getChildPackageNames(), UserManagerService.getInstance(), usesStaticLibraries, pkg.usesStaticLibrariesVersions);
            pkgSetting = pkgSetting3;
        }
        if (createNewPackage && originalPkgSetting != null) {
            pkg.setPackageName(originalPkgSetting.name);
            reportSettingsProblem(5, "New package " + pkgSetting.realName + " renamed to replace old package " + pkgSetting.name);
        }
        int userId = user2 == null ? 0 : user2.getIdentifier();
        if (!createNewPackage) {
            setInstantAppForUser(pkgSetting, userId, (scanFlags & 16384) != 0, (32768 & scanFlags) != 0);
        }
        if (!(disabledPkgSetting == null && ((scanFlags & 4) == 0 || pkgSetting == null || !pkgSetting.isSystem()))) {
            pkg.applicationInfo.flags |= 128;
        }
        int targetSdkVersion = (sharedUserSetting == null || sharedUserSetting.packages.size() == 0) ? pkg.applicationInfo.targetSdkVersion : sharedUserSetting.seInfoTargetSdkVersion;
        boolean isPrivileged = sharedUserSetting != null ? sharedUserSetting.isPrivileged() | pkg.isPrivileged() : pkg.isPrivileged();
        pkg.applicationInfo.seInfo = SELinuxMMAC.getSeInfo(pkg, isPrivileged, pkg.applicationInfo.targetSandboxVersion, targetSdkVersion);
        pkg.applicationInfo.seInfoUser = SELinuxUtil.assignSeinfoUser(pkgSetting.readUserState(userId == -1 ? 0 : userId));
        pkg.mExtras = pkgSetting;
        pkg.applicationInfo.processName = fixProcessName(pkg.applicationInfo.packageName, pkg.applicationInfo.processName);
        if (!isPlatformPackage) {
            pkg.applicationInfo.initForUser(0);
        }
        String cpuAbiOverride = PackageManagerServiceUtils.deriveAbiOverride(pkg.cpuAbiOverride, pkgSetting);
        if ((scanFlags & 4) != 0) {
            user = user2;
            SharedUserSetting sharedUserSetting2 = sharedUserSetting;
            secondaryCpuAbiFromSettings3 = secondaryCpuAbiFromSettings2;
            if ((scanFlags & 256) != 0) {
                pkg.applicationInfo.primaryCpuAbi = pkgSetting.primaryCpuAbiString;
                pkg.applicationInfo.secondaryCpuAbi = pkgSetting.secondaryCpuAbiString;
            }
            setNativeLibraryPaths(pkg, sAppLib32InstallDir);
        } else if (needToDeriveAbi) {
            user = user2;
            SharedUserSetting sharedUserSetting3 = sharedUserSetting;
            Trace.traceBegin(262144, "derivePackageAbi");
            derivePackageAbi(pkg, cpuAbiOverride, !pkg.isLibrary());
            Trace.traceEnd(262144);
            if (isSystemApp(pkg) && !pkg.isUpdatedSystemApp() && pkg.applicationInfo.primaryCpuAbi == null) {
                setBundledAppAbisAndRoots(pkg, pkgSetting);
                setNativeLibraryPaths(pkg, sAppLib32InstallDir);
            }
            secondaryCpuAbiFromSettings3 = secondaryCpuAbiFromSettings2;
        } else {
            user = user2;
            SharedUserSetting sharedUserSetting4 = sharedUserSetting;
            pkg.applicationInfo.primaryCpuAbi = primaryCpuAbiFromSettings2;
            secondaryCpuAbiFromSettings3 = secondaryCpuAbiFromSettings2;
            pkg.applicationInfo.secondaryCpuAbi = secondaryCpuAbiFromSettings3;
            setNativeLibraryPaths(pkg, sAppLib32InstallDir);
        }
        if (isPlatformPackage) {
            ApplicationInfo applicationInfo = pkg.applicationInfo;
            if (VMRuntime.getRuntime().is64Bit()) {
                z = false;
                str2 = Build.SUPPORTED_64_BIT_ABIS[0];
            } else {
                z = false;
                str2 = Build.SUPPORTED_32_BIT_ABIS[0];
            }
            applicationInfo.primaryCpuAbi = str2;
        } else {
            z = false;
        }
        if ((scanFlags & 1) != 0 || (scanFlags & 4) == 0) {
            secondaryCpuAbiFromSettings4 = secondaryCpuAbiFromSettings3;
        } else if (cpuAbiOverride != null || pkg.packageName == null) {
            secondaryCpuAbiFromSettings4 = secondaryCpuAbiFromSettings3;
        } else {
            StringBuilder sb2 = new StringBuilder();
            secondaryCpuAbiFromSettings4 = secondaryCpuAbiFromSettings3;
            sb2.append("Ignoring persisted ABI override ");
            sb2.append(cpuAbiOverride);
            sb2.append(" for package ");
            sb2.append(pkg.packageName);
            Slog.w(TAG, sb2.toString());
        }
        pkgSetting.primaryCpuAbiString = pkg.applicationInfo.primaryCpuAbi;
        pkgSetting.secondaryCpuAbiString = pkg.applicationInfo.secondaryCpuAbi;
        pkgSetting.cpuAbiOverrideString = cpuAbiOverride;
        pkg.cpuAbiOverride = cpuAbiOverride;
        pkgSetting.legacyNativeLibraryPathString = pkg.applicationInfo.nativeLibraryRootDir;
        if ((scanFlags & 16) == 0 && pkgSetting.sharedUser != null) {
            changedAbiCodePath = adjustCpuAbisForSharedUserLPw(pkgSetting.sharedUser.packages, pkg);
        }
        if (isUnderFactoryTest && pkg.requestedPermissions.contains("android.permission.FACTORY_TEST")) {
            pkg.applicationInfo.flags |= 16;
        }
        if (isSystemApp(pkg)) {
            pkgSetting.isOrphaned = true;
        }
        int i = userId;
        int i2 = targetSdkVersion;
        long scanFileTime = PackageManagerServiceUtils.getLastModifiedTime(pkg);
        boolean z2 = isPrivileged;
        String str7 = cpuAbiOverride;
        String str8 = secondaryCpuAbiFromSettings4;
        long j2 = currentTime;
        if (j2 != 0) {
            if (pkgSetting.firstInstallTime == 0) {
                pkgSetting.lastUpdateTime = j2;
                pkgSetting.firstInstallTime = j2;
            } else if ((scanFlags & 8) != 0) {
                pkgSetting.lastUpdateTime = j2;
            }
        } else if (pkgSetting.firstInstallTime == 0) {
            pkgSetting.lastUpdateTime = scanFileTime;
            pkgSetting.firstInstallTime = scanFileTime;
        } else if (!((parseFlags & 16) == 0 || scanFileTime == pkgSetting.timeStamp)) {
            pkgSetting.lastUpdateTime = scanFileTime;
        }
        pkgSetting.setTimeStamp(scanFileTime);
        pkgSetting.pkg = pkg;
        pkgSetting.pkgFlags = pkg.applicationInfo.flags;
        UserHandle userHandle = user;
        int i3 = scanFlags;
        if (pkg.getLongVersionCode() != pkgSetting.versionCode) {
            pkgSetting.versionCode = pkg.getLongVersionCode();
        }
        String volumeUuid = pkg.applicationInfo.volumeUuid;
        if (!Objects.equals(volumeUuid, pkgSetting.volumeUuid)) {
            StringBuilder sb3 = new StringBuilder();
            sb3.append("Update");
            sb3.append(pkgSetting.isSystem() ? " system" : "");
            sb3.append(" package ");
            sb3.append(pkg.packageName);
            sb3.append(" volume from ");
            sb3.append(pkgSetting.volumeUuid);
            sb3.append(str);
            sb3.append(volumeUuid);
            Slog.i(TAG, sb3.toString());
            pkgSetting.volumeUuid = volumeUuid;
        }
        if (!TextUtils.isEmpty(pkg.staticSharedLibName)) {
            staticSharedLibraryInfo = SharedLibraryInfo.createForStatic(pkg);
        } else {
            staticSharedLibraryInfo = null;
        }
        if (!ArrayUtils.isEmpty(pkg.libraryNames)) {
            List<SharedLibraryInfo> dynamicSharedLibraryInfos2 = new ArrayList<>(pkg.libraryNames.size());
            Iterator it = pkg.libraryNames.iterator();
            while (it.hasNext()) {
                dynamicSharedLibraryInfos2.add(SharedLibraryInfo.createForDynamic(pkg, (String) it.next()));
            }
            dynamicSharedLibraryInfos = dynamicSharedLibraryInfos2;
        } else {
            dynamicSharedLibraryInfos = null;
        }
        if (!createNewPackage) {
            z = true;
        }
        String str9 = volumeUuid;
        String str10 = primaryCpuAbiFromSettings2;
        int i4 = parseFlags;
        boolean z3 = z;
        PackageSetting packageSetting = originalPkgSetting;
        PackageSetting packageSetting2 = disabledPkgSetting;
        return new ScanResult(request, true, pkgSetting, changedAbiCodePath, z3, staticSharedLibraryInfo, dynamicSharedLibraryInfos);
    }

    private static boolean apkHasCode(String fileName) {
        StrictJarFile jarFile = null;
        boolean z = false;
        try {
            StrictJarFile jarFile2 = new StrictJarFile(fileName, false, false);
            if (jarFile2.findEntry("classes.dex") != null) {
                z = true;
            }
            try {
                jarFile2.close();
            } catch (IOException e) {
            }
            return z;
        } catch (IOException e2) {
            if (jarFile != null) {
                try {
                    jarFile.close();
                } catch (IOException e3) {
                }
            }
            return false;
        } catch (Throwable th) {
            if (jarFile != null) {
                try {
                    jarFile.close();
                } catch (IOException e4) {
                }
            }
            throw th;
        }
    }

    private static void assertCodePolicy(PackageParser.Package pkg) throws PackageManagerException {
        if (((pkg.applicationInfo.flags & 4) != 0) && !apkHasCode(pkg.baseCodePath)) {
            throw new PackageManagerException(-2, "Package " + pkg.baseCodePath + " code is missing");
        } else if (!ArrayUtils.isEmpty(pkg.splitCodePaths)) {
            int i = 0;
            while (i < pkg.splitCodePaths.length) {
                if (!((pkg.splitFlags[i] & 4) != 0) || apkHasCode(pkg.splitCodePaths[i])) {
                    i++;
                } else {
                    throw new PackageManagerException(-2, "Package " + pkg.splitCodePaths[i] + " code is missing");
                }
            }
        }
    }

    private static void applyPolicy(PackageParser.Package pkg, int parseFlags, int scanFlags, PackageParser.Package platformPkg) {
        if ((scanFlags & 131072) != 0) {
            pkg.applicationInfo.flags |= 1;
            if (pkg.applicationInfo.isDirectBootAware()) {
                Iterator it = pkg.services.iterator();
                while (it.hasNext()) {
                    PackageParser.Service s = (PackageParser.Service) it.next();
                    ServiceInfo serviceInfo = s.info;
                    s.info.directBootAware = true;
                    serviceInfo.encryptionAware = true;
                }
                Iterator it2 = pkg.providers.iterator();
                while (it2.hasNext()) {
                    PackageParser.Provider p = (PackageParser.Provider) it2.next();
                    ProviderInfo providerInfo = p.info;
                    p.info.directBootAware = true;
                    providerInfo.encryptionAware = true;
                }
                Iterator it3 = pkg.activities.iterator();
                while (it3.hasNext()) {
                    PackageParser.Activity a = (PackageParser.Activity) it3.next();
                    ActivityInfo activityInfo = a.info;
                    a.info.directBootAware = true;
                    activityInfo.encryptionAware = true;
                }
                Iterator it4 = pkg.receivers.iterator();
                while (it4.hasNext()) {
                    PackageParser.Activity r = (PackageParser.Activity) it4.next();
                    ActivityInfo activityInfo2 = r.info;
                    r.info.directBootAware = true;
                    activityInfo2.encryptionAware = true;
                }
            }
            if (PackageManagerServiceUtils.compressedFileExists(pkg.codePath)) {
                pkg.isStub = true;
            }
        } else {
            pkg.coreApp = false;
            pkg.applicationInfo.flags &= -9;
            pkg.applicationInfo.privateFlags &= -33;
            pkg.applicationInfo.privateFlags &= -65;
            if (pkg.permissionGroups != null && pkg.permissionGroups.size() > 0) {
                for (int i = pkg.permissionGroups.size() - 1; i >= 0; i--) {
                    ((PackageParser.PermissionGroup) pkg.permissionGroups.get(i)).info.priority = 0;
                }
            }
        }
        if ((scanFlags & 262144) == 0) {
            pkg.protectedBroadcasts = null;
            if (pkg.receivers != null) {
                for (int i2 = pkg.receivers.size() - 1; i2 >= 0; i2--) {
                    PackageParser.Activity receiver = (PackageParser.Activity) pkg.receivers.get(i2);
                    if ((receiver.info.flags & 1073741824) != 0) {
                        receiver.info.exported = false;
                    }
                }
            }
            if (pkg.services != null) {
                for (int i3 = pkg.services.size() - 1; i3 >= 0; i3--) {
                    PackageParser.Service service = (PackageParser.Service) pkg.services.get(i3);
                    if ((service.info.flags & 1073741824) != 0) {
                        service.info.exported = false;
                    }
                }
            }
            if (pkg.providers != null) {
                for (int i4 = pkg.providers.size() - 1; i4 >= 0; i4--) {
                    PackageParser.Provider provider = (PackageParser.Provider) pkg.providers.get(i4);
                    if ((provider.info.flags & 1073741824) != 0) {
                        provider.info.exported = false;
                    }
                }
            }
        }
        if ((scanFlags & 262144) != 0) {
            pkg.applicationInfo.privateFlags |= 8;
        }
        if ((scanFlags & 524288) != 0) {
            ApplicationInfo applicationInfo = pkg.applicationInfo;
            applicationInfo.privateFlags = 131072 | applicationInfo.privateFlags;
        }
        if ((scanFlags & 1048576) != 0) {
            ApplicationInfo applicationInfo2 = pkg.applicationInfo;
            applicationInfo2.privateFlags = 262144 | applicationInfo2.privateFlags;
        }
        if ((scanFlags & 2097152) != 0) {
            ApplicationInfo applicationInfo3 = pkg.applicationInfo;
            applicationInfo3.privateFlags = 524288 | applicationInfo3.privateFlags;
        }
        if ((4194304 & scanFlags) != 0) {
            ApplicationInfo applicationInfo4 = pkg.applicationInfo;
            applicationInfo4.privateFlags = 2097152 | applicationInfo4.privateFlags;
        }
        if ((8388608 & scanFlags) != 0) {
            pkg.applicationInfo.privateFlags |= 1073741824;
        }
        if (PLATFORM_PACKAGE_NAME.equals(pkg.packageName) || (platformPkg != null && PackageManagerServiceUtils.compareSignatures(platformPkg.mSigningDetails.signatures, pkg.mSigningDetails.signatures) == 0)) {
            ApplicationInfo applicationInfo5 = pkg.applicationInfo;
            applicationInfo5.privateFlags = 1048576 | applicationInfo5.privateFlags;
        }
        if (!isSystemApp(pkg)) {
            pkg.mOriginalPackages = null;
            pkg.mRealPackage = null;
            pkg.mAdoptPermissions = null;
        }
        PackageBackwardCompatibility.modifySharedLibraries(pkg);
    }

    private static <T> T assertNotNull(T object, String message) throws PackageManagerException {
        if (object != null) {
            return object;
        }
        throw new PackageManagerException(RequestStatus.SYS_ETIMEDOUT, message);
    }

    /* Debug info: failed to restart local var, previous not found, register: 23 */
    /* JADX WARNING: Code restructure failed: missing block: B:241:0x051c, code lost:
        return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void assertPackageIsValid(android.content.pm.PackageParser.Package r24, int r25, int r26) throws com.android.server.pm.PackageManagerException {
        /*
            r23 = this;
            r1 = r23
            r2 = r24
            r3 = r26
            r0 = r25 & 64
            if (r0 == 0) goto L_0x000d
            assertCodePolicy(r24)
        L_0x000d:
            android.content.pm.ApplicationInfo r0 = r2.applicationInfo
            java.lang.String r0 = r0.getCodePath()
            if (r0 == 0) goto L_0x053f
            android.content.pm.ApplicationInfo r0 = r2.applicationInfo
            java.lang.String r0 = r0.getResourcePath()
            if (r0 == 0) goto L_0x053f
            r0 = r3 & 16
            r4 = 1
            if (r0 != 0) goto L_0x0024
            r0 = r4
            goto L_0x0025
        L_0x0024:
            r0 = 0
        L_0x0025:
            r6 = r0
            r0 = r3 & 8192(0x2000, float:1.14794E-41)
            if (r0 == 0) goto L_0x002b
            goto L_0x002c
        L_0x002b:
            r4 = 0
        L_0x002c:
            r0 = -5
            if (r6 != 0) goto L_0x0031
            if (r4 == 0) goto L_0x003b
        L_0x0031:
            com.android.server.pm.ApexManager r7 = r1.mApexManager
            java.lang.String r8 = r2.packageName
            boolean r7 = r7.isApexPackage(r8)
            if (r7 != 0) goto L_0x0524
        L_0x003b:
            com.android.server.pm.Settings r7 = r1.mSettings
            com.android.server.pm.KeySetManagerService r7 = r7.mKeySetManagerService
            r7.assertScannedPackageValid(r2)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r8 = r1.mPackages
            monitor-enter(r8)
            java.lang.String r9 = r2.packageName     // Catch:{ all -> 0x051d }
            java.lang.String r10 = "android"
            boolean r9 = r9.equals(r10)     // Catch:{ all -> 0x051d }
            if (r9 == 0) goto L_0x008e
            android.content.pm.ApplicationInfo r9 = r1.mAndroidApplication     // Catch:{ all -> 0x0089 }
            if (r9 != 0) goto L_0x0054
            goto L_0x008e
        L_0x0054:
            java.lang.String r5 = "PackageManager"
            java.lang.String r9 = "*************************************************"
            android.util.Slog.w(r5, r9)     // Catch:{ all -> 0x0089 }
            java.lang.String r5 = "PackageManager"
            java.lang.String r9 = "Core android package being redefined.  Skipping."
            android.util.Slog.w(r5, r9)     // Catch:{ all -> 0x0089 }
            java.lang.String r5 = "PackageManager"
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ all -> 0x0089 }
            r9.<init>()     // Catch:{ all -> 0x0089 }
            java.lang.String r10 = " codePath="
            r9.append(r10)     // Catch:{ all -> 0x0089 }
            java.lang.String r10 = r2.codePath     // Catch:{ all -> 0x0089 }
            r9.append(r10)     // Catch:{ all -> 0x0089 }
            java.lang.String r9 = r9.toString()     // Catch:{ all -> 0x0089 }
            android.util.Slog.w(r5, r9)     // Catch:{ all -> 0x0089 }
            java.lang.String r5 = "PackageManager"
            java.lang.String r9 = "*************************************************"
            android.util.Slog.w(r5, r9)     // Catch:{ all -> 0x0089 }
            com.android.server.pm.PackageManagerException r5 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0089 }
            java.lang.String r9 = "Core android package being redefined.  Skipping."
            r5.<init>(r0, r9)     // Catch:{ all -> 0x0089 }
            throw r5     // Catch:{ all -> 0x0089 }
        L_0x0089:
            r0 = move-exception
            r20 = r6
            goto L_0x0520
        L_0x008e:
            r9 = r3 & 4
            if (r9 != 0) goto L_0x00bb
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r9 = r1.mPackages     // Catch:{ all -> 0x0089 }
            java.lang.String r10 = r2.packageName     // Catch:{ all -> 0x0089 }
            boolean r9 = r9.containsKey(r10)     // Catch:{ all -> 0x0089 }
            if (r9 != 0) goto L_0x009d
            goto L_0x00bb
        L_0x009d:
            com.android.server.pm.PackageManagerException r5 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0089 }
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ all -> 0x0089 }
            r9.<init>()     // Catch:{ all -> 0x0089 }
            java.lang.String r10 = "Application package "
            r9.append(r10)     // Catch:{ all -> 0x0089 }
            java.lang.String r10 = r2.packageName     // Catch:{ all -> 0x0089 }
            r9.append(r10)     // Catch:{ all -> 0x0089 }
            java.lang.String r10 = " already installed.  Skipping duplicate."
            r9.append(r10)     // Catch:{ all -> 0x0089 }
            java.lang.String r9 = r9.toString()     // Catch:{ all -> 0x0089 }
            r5.<init>(r0, r9)     // Catch:{ all -> 0x0089 }
            throw r5     // Catch:{ all -> 0x0089 }
        L_0x00bb:
            android.content.pm.ApplicationInfo r0 = r2.applicationInfo     // Catch:{ all -> 0x051d }
            boolean r0 = r0.isStaticSharedLibrary()     // Catch:{ all -> 0x051d }
            if (r0 == 0) goto L_0x0244
            r0 = r3 & 4
            if (r0 != 0) goto L_0x00da
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r1.mPackages     // Catch:{ all -> 0x0089 }
            java.lang.String r9 = r2.manifestPackageName     // Catch:{ all -> 0x0089 }
            boolean r0 = r0.containsKey(r9)     // Catch:{ all -> 0x0089 }
            if (r0 != 0) goto L_0x00d2
            goto L_0x00da
        L_0x00d2:
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0089 }
            java.lang.String r5 = "Duplicate static shared lib provider package"
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0089 }
            throw r0     // Catch:{ all -> 0x0089 }
        L_0x00da:
            android.content.pm.ApplicationInfo r0 = r2.applicationInfo     // Catch:{ all -> 0x051d }
            int r0 = r0.targetSdkVersion     // Catch:{ all -> 0x051d }
            r9 = 26
            if (r0 < r9) goto L_0x023a
            r0 = r3 & 16384(0x4000, float:2.2959E-41)
            if (r0 != 0) goto L_0x0230
            java.util.ArrayList r0 = r2.mOriginalPackages     // Catch:{ all -> 0x051d }
            boolean r0 = com.android.internal.util.ArrayUtils.isEmpty(r0)     // Catch:{ all -> 0x051d }
            if (r0 == 0) goto L_0x0226
            java.util.ArrayList r0 = r2.childPackages     // Catch:{ all -> 0x051d }
            boolean r0 = com.android.internal.util.ArrayUtils.isEmpty(r0)     // Catch:{ all -> 0x051d }
            if (r0 == 0) goto L_0x021c
            java.util.ArrayList r0 = r2.libraryNames     // Catch:{ all -> 0x051d }
            boolean r0 = com.android.internal.util.ArrayUtils.isEmpty(r0)     // Catch:{ all -> 0x051d }
            if (r0 == 0) goto L_0x0212
            java.lang.String r0 = r2.mSharedUserId     // Catch:{ all -> 0x051d }
            if (r0 != 0) goto L_0x0208
            java.util.ArrayList r0 = r2.activities     // Catch:{ all -> 0x051d }
            boolean r0 = r0.isEmpty()     // Catch:{ all -> 0x051d }
            if (r0 == 0) goto L_0x01fe
            java.util.ArrayList r0 = r2.services     // Catch:{ all -> 0x051d }
            boolean r0 = r0.isEmpty()     // Catch:{ all -> 0x051d }
            if (r0 == 0) goto L_0x01f4
            java.util.ArrayList r0 = r2.providers     // Catch:{ all -> 0x051d }
            boolean r0 = r0.isEmpty()     // Catch:{ all -> 0x051d }
            if (r0 == 0) goto L_0x01ea
            java.util.ArrayList r0 = r2.receivers     // Catch:{ all -> 0x051d }
            boolean r0 = r0.isEmpty()     // Catch:{ all -> 0x051d }
            if (r0 == 0) goto L_0x01e0
            java.util.ArrayList r0 = r2.permissionGroups     // Catch:{ all -> 0x051d }
            boolean r0 = r0.isEmpty()     // Catch:{ all -> 0x051d }
            if (r0 == 0) goto L_0x01d6
            java.util.ArrayList r0 = r2.permissions     // Catch:{ all -> 0x051d }
            boolean r0 = r0.isEmpty()     // Catch:{ all -> 0x051d }
            if (r0 == 0) goto L_0x01cc
            java.util.ArrayList r0 = r2.protectedBroadcasts     // Catch:{ all -> 0x051d }
            if (r0 != 0) goto L_0x01c2
            java.lang.String r0 = r2.mOverlayTarget     // Catch:{ all -> 0x051d }
            if (r0 != 0) goto L_0x01b8
            r9 = -9223372036854775808
            r11 = 9223372036854775807(0x7fffffffffffffff, double:NaN)
            android.util.ArrayMap<java.lang.String, android.util.LongSparseArray<android.content.pm.SharedLibraryInfo>> r0 = r1.mSharedLibraries     // Catch:{ all -> 0x051d }
            java.lang.String r13 = r2.staticSharedLibName     // Catch:{ all -> 0x051d }
            java.lang.Object r0 = r0.get(r13)     // Catch:{ all -> 0x051d }
            android.util.LongSparseArray r0 = (android.util.LongSparseArray) r0     // Catch:{ all -> 0x051d }
            if (r0 == 0) goto L_0x019c
            int r13 = r0.size()     // Catch:{ all -> 0x051d }
            r14 = 0
        L_0x0152:
            if (r14 >= r13) goto L_0x0197
            java.lang.Object r15 = r0.valueAt(r14)     // Catch:{ all -> 0x051d }
            android.content.pm.SharedLibraryInfo r15 = (android.content.pm.SharedLibraryInfo) r15     // Catch:{ all -> 0x051d }
            android.content.pm.VersionedPackage r16 = r15.getDeclaringPackage()     // Catch:{ all -> 0x051d }
            long r16 = r16.getLongVersionCode()     // Catch:{ all -> 0x051d }
            long r18 = r15.getLongVersion()     // Catch:{ all -> 0x051d }
            r20 = r6
            long r5 = r2.staticSharedLibVersion     // Catch:{ all -> 0x0522 }
            int r5 = (r18 > r5 ? 1 : (r18 == r5 ? 0 : -1))
            r18 = 1
            if (r5 >= 0) goto L_0x0178
            long r5 = r16 + r18
            long r5 = java.lang.Math.max(r9, r5)     // Catch:{ all -> 0x0522 }
            r9 = r5
            goto L_0x018d
        L_0x0178:
            long r5 = r15.getLongVersion()     // Catch:{ all -> 0x0522 }
            r21 = r9
            long r9 = r2.staticSharedLibVersion     // Catch:{ all -> 0x0522 }
            int r5 = (r5 > r9 ? 1 : (r5 == r9 ? 0 : -1))
            if (r5 <= 0) goto L_0x0192
            long r5 = r16 - r18
            long r5 = java.lang.Math.min(r11, r5)     // Catch:{ all -> 0x0522 }
            r11 = r5
            r9 = r21
        L_0x018d:
            int r14 = r14 + 1
            r6 = r20
            goto L_0x0152
        L_0x0192:
            r11 = r16
            r9 = r16
            goto L_0x019e
        L_0x0197:
            r20 = r6
            r21 = r9
            goto L_0x019e
        L_0x019c:
            r20 = r6
        L_0x019e:
            long r5 = r24.getLongVersionCode()     // Catch:{ all -> 0x0522 }
            int r5 = (r5 > r9 ? 1 : (r5 == r9 ? 0 : -1))
            if (r5 < 0) goto L_0x01b0
            long r5 = r24.getLongVersionCode()     // Catch:{ all -> 0x0522 }
            int r5 = (r5 > r11 ? 1 : (r5 == r11 ? 0 : -1))
            if (r5 > 0) goto L_0x01b0
            goto L_0x0246
        L_0x01b0:
            com.android.server.pm.PackageManagerException r5 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.String r6 = "Static shared lib version codes must be ordered as lib versions"
            r5.<init>((java.lang.String) r6)     // Catch:{ all -> 0x0522 }
            throw r5     // Catch:{ all -> 0x0522 }
        L_0x01b8:
            r20 = r6
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = "Static shared libs cannot be overlay targets"
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x01c2:
            r20 = r6
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = "Static shared libs cannot declare protected broadcasts"
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x01cc:
            r20 = r6
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = "Static shared libs cannot declare permissions"
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x01d6:
            r20 = r6
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = "Static shared libs cannot declare permission groups"
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x01e0:
            r20 = r6
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = "Static shared libs cannot declare broadcast receivers"
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x01ea:
            r20 = r6
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = "Static shared libs cannot declare content providers"
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x01f4:
            r20 = r6
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = "Static shared libs cannot declare services"
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x01fe:
            r20 = r6
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = "Static shared libs cannot declare activities"
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x0208:
            r20 = r6
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = "Packages declaring static-shared libs cannot declare shared users"
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x0212:
            r20 = r6
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = "Packages declaring static-shared libs cannot declare dynamic libs"
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x021c:
            r20 = r6
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = "Packages declaring static-shared libs cannot have child packages"
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x0226:
            r20 = r6
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = "Packages declaring static-shared libs cannot be renamed"
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x0230:
            r20 = r6
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = "Packages declaring static-shared libs cannot be instant apps"
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x023a:
            r20 = r6
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = "Packages declaring static-shared libs must target O SDK or higher"
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x0244:
            r20 = r6
        L_0x0246:
            java.util.ArrayList r0 = r2.childPackages     // Catch:{ all -> 0x0522 }
            if (r0 == 0) goto L_0x02a9
            java.util.ArrayList r0 = r2.childPackages     // Catch:{ all -> 0x0522 }
            boolean r0 = r0.isEmpty()     // Catch:{ all -> 0x0522 }
            if (r0 != 0) goto L_0x02a9
            r0 = 262144(0x40000, float:3.67342E-40)
            r0 = r0 & r3
            if (r0 == 0) goto L_0x0290
            java.util.ArrayList r0 = r2.childPackages     // Catch:{ all -> 0x0522 }
            int r0 = r0.size()     // Catch:{ all -> 0x0522 }
            r5 = 0
        L_0x025e:
            if (r5 >= r0) goto L_0x02a9
            java.util.ArrayList r6 = r2.childPackages     // Catch:{ all -> 0x0522 }
            java.lang.Object r6 = r6.get(r5)     // Catch:{ all -> 0x0522 }
            android.content.pm.PackageParser$Package r6 = (android.content.pm.PackageParser.Package) r6     // Catch:{ all -> 0x0522 }
            com.android.server.pm.Settings r9 = r1.mSettings     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = r2.packageName     // Catch:{ all -> 0x0522 }
            java.lang.String r11 = r6.packageName     // Catch:{ all -> 0x0522 }
            boolean r9 = r9.hasOtherDisabledSystemPkgWithChildLPr(r10, r11)     // Catch:{ all -> 0x0522 }
            if (r9 != 0) goto L_0x0277
            int r5 = r5 + 1
            goto L_0x025e
        L_0x0277:
            com.android.server.pm.PackageManagerException r9 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ all -> 0x0522 }
            r10.<init>()     // Catch:{ all -> 0x0522 }
            java.lang.String r11 = "Can't override child of another disabled app. Ignoring package "
            r10.append(r11)     // Catch:{ all -> 0x0522 }
            java.lang.String r11 = r2.packageName     // Catch:{ all -> 0x0522 }
            r10.append(r11)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = r10.toString()     // Catch:{ all -> 0x0522 }
            r9.<init>((java.lang.String) r10)     // Catch:{ all -> 0x0522 }
            throw r9     // Catch:{ all -> 0x0522 }
        L_0x0290:
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ all -> 0x0522 }
            r5.<init>()     // Catch:{ all -> 0x0522 }
            java.lang.String r6 = "Only privileged apps can add child packages. Ignoring package "
            r5.append(r6)     // Catch:{ all -> 0x0522 }
            java.lang.String r6 = r2.packageName     // Catch:{ all -> 0x0522 }
            r5.append(r6)     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = r5.toString()     // Catch:{ all -> 0x0522 }
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x02a9:
            r0 = r3 & 128(0x80, float:1.794E-43)
            if (r0 == 0) goto L_0x0358
            android.util.ArrayMap<java.lang.String, java.io.File> r0 = r1.mExpectingBetter     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = r2.packageName     // Catch:{ all -> 0x0522 }
            boolean r0 = r0.containsKey(r5)     // Catch:{ all -> 0x0522 }
            if (r0 == 0) goto L_0x02d0
            r0 = 5
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ all -> 0x0522 }
            r5.<init>()     // Catch:{ all -> 0x0522 }
            java.lang.String r6 = "Relax SCAN_REQUIRE_KNOWN requirement for package "
            r5.append(r6)     // Catch:{ all -> 0x0522 }
            java.lang.String r6 = r2.packageName     // Catch:{ all -> 0x0522 }
            r5.append(r6)     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = r5.toString()     // Catch:{ all -> 0x0522 }
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r0, r5)     // Catch:{ all -> 0x0522 }
            goto L_0x0358
        L_0x02d0:
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = r2.packageName     // Catch:{ all -> 0x0522 }
            com.android.server.pm.PackageSetting r0 = r0.getPackageLPr(r5)     // Catch:{ all -> 0x0522 }
            if (r0 == 0) goto L_0x032f
            android.content.pm.ApplicationInfo r5 = r2.applicationInfo     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = r5.getCodePath()     // Catch:{ all -> 0x0522 }
            java.lang.String r6 = r0.codePathString     // Catch:{ all -> 0x0522 }
            boolean r5 = r5.equals(r6)     // Catch:{ all -> 0x0522 }
            if (r5 == 0) goto L_0x02f7
            android.content.pm.ApplicationInfo r5 = r2.applicationInfo     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = r5.getResourcePath()     // Catch:{ all -> 0x0522 }
            java.lang.String r6 = r0.resourcePathString     // Catch:{ all -> 0x0522 }
            boolean r5 = r5.equals(r6)     // Catch:{ all -> 0x0522 }
            if (r5 == 0) goto L_0x02f7
            goto L_0x0358
        L_0x02f7:
            com.android.server.pm.PackageManagerException r5 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            r6 = -23
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ all -> 0x0522 }
            r9.<init>()     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = "Application package "
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = r2.packageName     // Catch:{ all -> 0x0522 }
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = " found at "
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            android.content.pm.ApplicationInfo r10 = r2.applicationInfo     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = r10.getCodePath()     // Catch:{ all -> 0x0522 }
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = " but expected at "
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = r0.codePathString     // Catch:{ all -> 0x0522 }
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = "; ignoring."
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r9 = r9.toString()     // Catch:{ all -> 0x0522 }
            r5.<init>(r6, r9)     // Catch:{ all -> 0x0522 }
            throw r5     // Catch:{ all -> 0x0522 }
        L_0x032f:
            java.lang.String r5 = r2.packageName     // Catch:{ all -> 0x0522 }
            boolean r5 = com.android.server.pm.PackageManagerServiceInjector.isPreinstallApp(r5)     // Catch:{ all -> 0x0522 }
            if (r5 == 0) goto L_0x0338
            goto L_0x0358
        L_0x0338:
            com.android.server.pm.PackageManagerException r5 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            r6 = -19
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ all -> 0x0522 }
            r9.<init>()     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = "Application package "
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = r2.packageName     // Catch:{ all -> 0x0522 }
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = " not found; ignoring."
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r9 = r9.toString()     // Catch:{ all -> 0x0522 }
            r5.<init>(r6, r9)     // Catch:{ all -> 0x0522 }
            throw r5     // Catch:{ all -> 0x0522 }
        L_0x0358:
            r0 = r3 & 4
            if (r0 == 0) goto L_0x0361
            com.android.server.pm.ComponentResolver r0 = r1.mComponentResolver     // Catch:{ all -> 0x0522 }
            r0.assertProvidersNotDefined(r2)     // Catch:{ all -> 0x0522 }
        L_0x0361:
            boolean r0 = r24.isPrivileged()     // Catch:{ all -> 0x0522 }
            if (r0 != 0) goto L_0x03ce
            java.lang.String r0 = r2.mSharedUserId     // Catch:{ all -> 0x0522 }
            if (r0 == 0) goto L_0x03ce
            r5 = 0
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ PackageManagerException -> 0x0377 }
            java.lang.String r6 = r2.mSharedUserId     // Catch:{ PackageManagerException -> 0x0377 }
            r9 = 0
            com.android.server.pm.SharedUserSetting r0 = r0.getSharedUserLPw(r6, r9, r9, r9)     // Catch:{ PackageManagerException -> 0x0377 }
            r5 = r0
            goto L_0x0378
        L_0x0377:
            r0 = move-exception
        L_0x0378:
            if (r5 == 0) goto L_0x03ce
            boolean r0 = r5.isPrivileged()     // Catch:{ all -> 0x0522 }
            if (r0 == 0) goto L_0x03ce
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0522 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r0 = r0.mPackages     // Catch:{ all -> 0x0522 }
            java.lang.String r6 = "android"
            java.lang.Object r0 = r0.get(r6)     // Catch:{ all -> 0x0522 }
            com.android.server.pm.PackageSetting r0 = (com.android.server.pm.PackageSetting) r0     // Catch:{ all -> 0x0522 }
            com.android.server.pm.PackageSignatures r6 = r0.signatures     // Catch:{ all -> 0x0522 }
            android.content.pm.PackageParser$SigningDetails r6 = r6.mSigningDetails     // Catch:{ all -> 0x0522 }
            android.content.pm.PackageParser$SigningDetails r9 = android.content.pm.PackageParser.SigningDetails.UNKNOWN     // Catch:{ all -> 0x0522 }
            if (r6 == r9) goto L_0x03ce
            com.android.server.pm.PackageSignatures r6 = r0.signatures     // Catch:{ all -> 0x0522 }
            android.content.pm.PackageParser$SigningDetails r6 = r6.mSigningDetails     // Catch:{ all -> 0x0522 }
            android.content.pm.Signature[] r6 = r6.signatures     // Catch:{ all -> 0x0522 }
            android.content.pm.PackageParser$SigningDetails r9 = r2.mSigningDetails     // Catch:{ all -> 0x0522 }
            android.content.pm.Signature[] r9 = r9.signatures     // Catch:{ all -> 0x0522 }
            int r6 = com.android.server.pm.PackageManagerServiceUtils.compareSignatures(r6, r9)     // Catch:{ all -> 0x0522 }
            if (r6 != 0) goto L_0x03a6
            goto L_0x03ce
        L_0x03a6:
            com.android.server.pm.PackageManagerException r6 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ all -> 0x0522 }
            r9.<init>()     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = "Apps that share a user with a privileged app must themselves be marked as privileged. "
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = r2.packageName     // Catch:{ all -> 0x0522 }
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = " shares privileged user "
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = r2.mSharedUserId     // Catch:{ all -> 0x0522 }
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = "."
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r9 = r9.toString()     // Catch:{ all -> 0x0522 }
            r6.<init>((java.lang.String) r9)     // Catch:{ all -> 0x0522 }
            throw r6     // Catch:{ all -> 0x0522 }
        L_0x03ce:
            java.lang.String r0 = r2.mOverlayTarget     // Catch:{ all -> 0x0522 }
            if (r0 == 0) goto L_0x051b
            r0 = 131072(0x20000, float:1.83671E-40)
            r0 = r0 & r3
            if (r0 == 0) goto L_0x0463
            r0 = r25 & 16
            if (r0 != 0) goto L_0x051b
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = r2.packageName     // Catch:{ all -> 0x0522 }
            com.android.server.pm.PackageSetting r0 = r0.getPackageLPr(r5)     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = "previous package state not present"
            java.lang.Object r0 = assertNotNull(r0, r5)     // Catch:{ all -> 0x0522 }
            com.android.server.pm.PackageSetting r0 = (com.android.server.pm.PackageSetting) r0     // Catch:{ all -> 0x0522 }
            r5 = r0
            android.content.pm.PackageParser$Package r0 = r5.pkg     // Catch:{ all -> 0x0522 }
            r6 = r0
            if (r6 != 0) goto L_0x041a
            android.content.pm.PackageParser r0 = new android.content.pm.PackageParser     // Catch:{ PackageParserException -> 0x0401 }
            r0.<init>()     // Catch:{ PackageParserException -> 0x0401 }
            java.io.File r9 = r5.codePath     // Catch:{ PackageParserException -> 0x0401 }
            r10 = r25 | 16
            android.content.pm.PackageParser$Package r9 = r0.parsePackage(r9, r10)     // Catch:{ PackageParserException -> 0x0401 }
            r6 = r9
            goto L_0x041a
        L_0x0401:
            r0 = move-exception
            java.lang.String r9 = "PackageManager"
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ all -> 0x0522 }
            r10.<init>()     // Catch:{ all -> 0x0522 }
            java.lang.String r11 = "failed to parse "
            r10.append(r11)     // Catch:{ all -> 0x0522 }
            java.io.File r11 = r5.codePath     // Catch:{ all -> 0x0522 }
            r10.append(r11)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = r10.toString()     // Catch:{ all -> 0x0522 }
            android.util.Slog.w(r9, r10, r0)     // Catch:{ all -> 0x0522 }
        L_0x041a:
            if (r6 == 0) goto L_0x043f
            boolean r0 = r6.mOverlayIsStatic     // Catch:{ all -> 0x0522 }
            if (r0 != 0) goto L_0x0421
            goto L_0x043f
        L_0x0421:
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ all -> 0x0522 }
            r9.<init>()     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = "Overlay "
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = r2.packageName     // Catch:{ all -> 0x0522 }
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = " is static and cannot be upgraded."
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r9 = r9.toString()     // Catch:{ all -> 0x0522 }
            r0.<init>((java.lang.String) r9)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x043f:
            boolean r0 = r2.mOverlayIsStatic     // Catch:{ all -> 0x0522 }
            if (r0 != 0) goto L_0x0445
            goto L_0x051b
        L_0x0445:
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ all -> 0x0522 }
            r9.<init>()     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = "Overlay "
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = r2.packageName     // Catch:{ all -> 0x0522 }
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r10 = " cannot be upgraded into a static overlay."
            r9.append(r10)     // Catch:{ all -> 0x0522 }
            java.lang.String r9 = r9.toString()     // Catch:{ all -> 0x0522 }
            r0.<init>((java.lang.String) r9)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x0463:
            boolean r0 = r2.mOverlayIsStatic     // Catch:{ all -> 0x0522 }
            if (r0 != 0) goto L_0x04fd
            android.content.pm.ApplicationInfo r0 = r2.applicationInfo     // Catch:{ all -> 0x0522 }
            int r0 = r0.targetSdkVersion     // Catch:{ all -> 0x0522 }
            r5 = 29
            if (r0 >= r5) goto L_0x04ae
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = "android"
            com.android.server.pm.PackageSetting r0 = r0.getPackageLPr(r5)     // Catch:{ all -> 0x0522 }
            com.android.server.pm.PackageSignatures r5 = r0.signatures     // Catch:{ all -> 0x0522 }
            android.content.pm.PackageParser$SigningDetails r5 = r5.mSigningDetails     // Catch:{ all -> 0x0522 }
            android.content.pm.PackageParser$SigningDetails r6 = android.content.pm.PackageParser.SigningDetails.UNKNOWN     // Catch:{ all -> 0x0522 }
            if (r5 == r6) goto L_0x04ae
            com.android.server.pm.PackageSignatures r5 = r0.signatures     // Catch:{ all -> 0x0522 }
            android.content.pm.PackageParser$SigningDetails r5 = r5.mSigningDetails     // Catch:{ all -> 0x0522 }
            android.content.pm.Signature[] r5 = r5.signatures     // Catch:{ all -> 0x0522 }
            android.content.pm.PackageParser$SigningDetails r6 = r2.mSigningDetails     // Catch:{ all -> 0x0522 }
            android.content.pm.Signature[] r6 = r6.signatures     // Catch:{ all -> 0x0522 }
            int r5 = com.android.server.pm.PackageManagerServiceUtils.compareSignatures(r5, r6)     // Catch:{ all -> 0x0522 }
            if (r5 != 0) goto L_0x0490
            goto L_0x04ae
        L_0x0490:
            com.android.server.pm.PackageManagerException r5 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ all -> 0x0522 }
            r6.<init>()     // Catch:{ all -> 0x0522 }
            java.lang.String r9 = "Overlay "
            r6.append(r9)     // Catch:{ all -> 0x0522 }
            java.lang.String r9 = r2.packageName     // Catch:{ all -> 0x0522 }
            r6.append(r9)     // Catch:{ all -> 0x0522 }
            java.lang.String r9 = " must target Q or later, or be signed with the platform certificate"
            r6.append(r9)     // Catch:{ all -> 0x0522 }
            java.lang.String r6 = r6.toString()     // Catch:{ all -> 0x0522 }
            r5.<init>((java.lang.String) r6)     // Catch:{ all -> 0x0522 }
            throw r5     // Catch:{ all -> 0x0522 }
        L_0x04ae:
            java.lang.String r0 = r2.mOverlayTargetName     // Catch:{ all -> 0x0522 }
            if (r0 != 0) goto L_0x051b
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = r2.mOverlayTarget     // Catch:{ all -> 0x0522 }
            com.android.server.pm.PackageSetting r0 = r0.getPackageLPr(r5)     // Catch:{ all -> 0x0522 }
            if (r0 == 0) goto L_0x051b
            com.android.server.pm.PackageSignatures r5 = r0.signatures     // Catch:{ all -> 0x0522 }
            android.content.pm.PackageParser$SigningDetails r5 = r5.mSigningDetails     // Catch:{ all -> 0x0522 }
            android.content.pm.PackageParser$SigningDetails r6 = android.content.pm.PackageParser.SigningDetails.UNKNOWN     // Catch:{ all -> 0x0522 }
            if (r5 == r6) goto L_0x051b
            com.android.server.pm.PackageSignatures r5 = r0.signatures     // Catch:{ all -> 0x0522 }
            android.content.pm.PackageParser$SigningDetails r5 = r5.mSigningDetails     // Catch:{ all -> 0x0522 }
            android.content.pm.Signature[] r5 = r5.signatures     // Catch:{ all -> 0x0522 }
            android.content.pm.PackageParser$SigningDetails r6 = r2.mSigningDetails     // Catch:{ all -> 0x0522 }
            android.content.pm.Signature[] r6 = r6.signatures     // Catch:{ all -> 0x0522 }
            int r5 = com.android.server.pm.PackageManagerServiceUtils.compareSignatures(r5, r6)     // Catch:{ all -> 0x0522 }
            if (r5 != 0) goto L_0x04d5
            goto L_0x051b
        L_0x04d5:
            com.android.server.pm.PackageManagerException r5 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ all -> 0x0522 }
            r6.<init>()     // Catch:{ all -> 0x0522 }
            java.lang.String r9 = "Overlay "
            r6.append(r9)     // Catch:{ all -> 0x0522 }
            java.lang.String r9 = r2.packageName     // Catch:{ all -> 0x0522 }
            r6.append(r9)     // Catch:{ all -> 0x0522 }
            java.lang.String r9 = " and target "
            r6.append(r9)     // Catch:{ all -> 0x0522 }
            java.lang.String r9 = r2.mOverlayTarget     // Catch:{ all -> 0x0522 }
            r6.append(r9)     // Catch:{ all -> 0x0522 }
            java.lang.String r9 = " signed with different certificates, and the overlay lacks <overlay android:targetName>"
            r6.append(r9)     // Catch:{ all -> 0x0522 }
            java.lang.String r6 = r6.toString()     // Catch:{ all -> 0x0522 }
            r5.<init>((java.lang.String) r6)     // Catch:{ all -> 0x0522 }
            throw r5     // Catch:{ all -> 0x0522 }
        L_0x04fd:
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x0522 }
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ all -> 0x0522 }
            r5.<init>()     // Catch:{ all -> 0x0522 }
            java.lang.String r6 = "Overlay "
            r5.append(r6)     // Catch:{ all -> 0x0522 }
            java.lang.String r6 = r2.packageName     // Catch:{ all -> 0x0522 }
            r5.append(r6)     // Catch:{ all -> 0x0522 }
            java.lang.String r6 = " is static but not pre-installed."
            r5.append(r6)     // Catch:{ all -> 0x0522 }
            java.lang.String r5 = r5.toString()     // Catch:{ all -> 0x0522 }
            r0.<init>((java.lang.String) r5)     // Catch:{ all -> 0x0522 }
            throw r0     // Catch:{ all -> 0x0522 }
        L_0x051b:
            monitor-exit(r8)     // Catch:{ all -> 0x0522 }
            return
        L_0x051d:
            r0 = move-exception
            r20 = r6
        L_0x0520:
            monitor-exit(r8)     // Catch:{ all -> 0x0522 }
            throw r0
        L_0x0522:
            r0 = move-exception
            goto L_0x0520
        L_0x0524:
            r20 = r6
            com.android.server.pm.PackageManagerException r5 = new com.android.server.pm.PackageManagerException
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            java.lang.String r7 = r2.packageName
            r6.append(r7)
            java.lang.String r7 = " is an APEX package and can't be installed as an APK."
            r6.append(r7)
            java.lang.String r6 = r6.toString()
            r5.<init>(r0, r6)
            throw r5
        L_0x053f:
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException
            r4 = -2
            java.lang.String r5 = "Code and resource paths haven't been set correctly"
            r0.<init>(r4, r5)
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.assertPackageIsValid(android.content.pm.PackageParser$Package, int, int):void");
    }

    @GuardedBy({"mPackages"})
    private boolean addBuiltInSharedLibraryLocked(String path, String name) {
        if (nonStaticSharedLibExistsLocked(name)) {
            return false;
        }
        commitSharedLibraryInfoLocked(new SharedLibraryInfo(path, (String) null, (List) null, name, -1, 0, new VersionedPackage(PLATFORM_PACKAGE_NAME, 0), (List) null, (List) null));
        return true;
    }

    @GuardedBy({"mPackages"})
    private boolean nonStaticSharedLibExistsLocked(String name) {
        return sharedLibExists(name, -1, this.mSharedLibraries);
    }

    private static boolean sharedLibExists(String name, long version, Map<String, LongSparseArray<SharedLibraryInfo>> librarySource) {
        LongSparseArray<SharedLibraryInfo> versionedLib = librarySource.get(name);
        if (versionedLib == null || versionedLib.indexOfKey(version) < 0) {
            return false;
        }
        return true;
    }

    @GuardedBy({"mPackages"})
    private void commitSharedLibraryInfoLocked(SharedLibraryInfo libraryInfo) {
        String name = libraryInfo.getName();
        LongSparseArray<SharedLibraryInfo> versionedLib = this.mSharedLibraries.get(name);
        if (versionedLib == null) {
            versionedLib = new LongSparseArray<>();
            this.mSharedLibraries.put(name, versionedLib);
        }
        String declaringPackageName = libraryInfo.getDeclaringPackage().getPackageName();
        if (libraryInfo.getType() == 2) {
            this.mStaticLibsByDeclaringPackage.put(declaringPackageName, versionedLib);
        }
        versionedLib.put(libraryInfo.getLongVersion(), libraryInfo);
    }

    private boolean removeSharedLibraryLPw(String name, long version) {
        int libIdx;
        LongSparseArray<SharedLibraryInfo> versionedLib = this.mSharedLibraries.get(name);
        if (versionedLib == null || (libIdx = versionedLib.indexOfKey(version)) < 0) {
            return false;
        }
        SharedLibraryInfo libraryInfo = versionedLib.valueAt(libIdx);
        versionedLib.remove(version);
        if (versionedLib.size() > 0) {
            return true;
        }
        this.mSharedLibraries.remove(name);
        if (libraryInfo.getType() != 2) {
            return true;
        }
        this.mStaticLibsByDeclaringPackage.remove(libraryInfo.getDeclaringPackage().getPackageName());
        return true;
    }

    /* Debug info: failed to restart local var, previous not found, register: 17 */
    /*  JADX ERROR: IndexOutOfBoundsException in pass: RegionMakerVisitor
        java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
        	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
        	at java.util.ArrayList.get(ArrayList.java:433)
        	at jadx.core.dex.nodes.InsnNode.getArg(InsnNode.java:101)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:611)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:561)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processIf(RegionMaker.java:693)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:123)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:598)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:49)
        */
    private void commitPackageSettings(android.content.pm.PackageParser.Package r18, android.content.pm.PackageParser.Package r19, com.android.server.pm.PackageSetting r20, int r21, boolean r22, com.android.server.pm.PackageManagerService.ReconciledPackage r23) {
        /*
            r17 = this;
            r1 = r17
            r2 = r18
            r3 = r19
            r4 = r21
            r5 = r22
            r6 = r23
            java.lang.String r7 = r2.packageName
            android.content.ComponentName r0 = r1.mCustomResolverComponentName
            if (r0 == 0) goto L_0x0021
            java.lang.String r0 = r0.getPackageName()
            java.lang.String r8 = r2.packageName
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x0021
            r17.setUpCustomResolverActivity(r18)
        L_0x0021:
            java.lang.String r0 = r2.packageName
            java.lang.String r8 = "android"
            boolean r0 = r0.equals(r8)
            r8 = 32
            if (r0 == 0) goto L_0x00b2
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r9 = r1.mPackages
            monitor-enter(r9)
            r0 = r4 & 1024(0x400, float:1.435E-42)
            if (r0 != 0) goto L_0x00ad
            r1.mPlatformPackage = r2     // Catch:{ all -> 0x00af }
            int r0 = r1.mSdkVersion     // Catch:{ all -> 0x00af }
            r2.mVersionCode = r0     // Catch:{ all -> 0x00af }
            r0 = 0
            r2.mVersionCodeMajor = r0     // Catch:{ all -> 0x00af }
            android.content.pm.ApplicationInfo r10 = r2.applicationInfo     // Catch:{ all -> 0x00af }
            r1.mAndroidApplication = r10     // Catch:{ all -> 0x00af }
            boolean r10 = r1.mResolverReplaced     // Catch:{ all -> 0x00af }
            if (r10 != 0) goto L_0x00ad
            android.content.pm.ActivityInfo r10 = r1.mResolveActivity     // Catch:{ all -> 0x00af }
            android.content.pm.ApplicationInfo r11 = r1.mAndroidApplication     // Catch:{ all -> 0x00af }
            r10.applicationInfo = r11     // Catch:{ all -> 0x00af }
            android.content.pm.ActivityInfo r10 = r1.mResolveActivity     // Catch:{ all -> 0x00af }
            java.lang.Class<com.android.internal.app.ResolverActivity> r11 = com.android.internal.app.ResolverActivity.class
            java.lang.String r11 = r11.getName()     // Catch:{ all -> 0x00af }
            r10.name = r11     // Catch:{ all -> 0x00af }
            android.content.pm.ActivityInfo r10 = r1.mResolveActivity     // Catch:{ all -> 0x00af }
            android.content.pm.ApplicationInfo r11 = r1.mAndroidApplication     // Catch:{ all -> 0x00af }
            java.lang.String r11 = r11.packageName     // Catch:{ all -> 0x00af }
            r10.packageName = r11     // Catch:{ all -> 0x00af }
            android.content.pm.ActivityInfo r10 = r1.mResolveActivity     // Catch:{ all -> 0x00af }
            java.lang.String r11 = "system:ui"
            r10.processName = r11     // Catch:{ all -> 0x00af }
            android.content.pm.ActivityInfo r10 = r1.mResolveActivity     // Catch:{ all -> 0x00af }
            r10.launchMode = r0     // Catch:{ all -> 0x00af }
            android.content.pm.ActivityInfo r10 = r1.mResolveActivity     // Catch:{ all -> 0x00af }
            r11 = 3
            r10.documentLaunchMode = r11     // Catch:{ all -> 0x00af }
            android.content.pm.ActivityInfo r10 = r1.mResolveActivity     // Catch:{ all -> 0x00af }
            r10.flags = r8     // Catch:{ all -> 0x00af }
            android.content.pm.ActivityInfo r10 = r1.mResolveActivity     // Catch:{ all -> 0x00af }
            r11 = 16974374(0x1030226, float:2.4062441E-38)
            r10.theme = r11     // Catch:{ all -> 0x00af }
            android.content.pm.ActivityInfo r10 = r1.mResolveActivity     // Catch:{ all -> 0x00af }
            r11 = 1
            r10.exported = r11     // Catch:{ all -> 0x00af }
            android.content.pm.ActivityInfo r10 = r1.mResolveActivity     // Catch:{ all -> 0x00af }
            r10.enabled = r11     // Catch:{ all -> 0x00af }
            android.content.pm.ActivityInfo r10 = r1.mResolveActivity     // Catch:{ all -> 0x00af }
            r11 = 2
            r10.resizeMode = r11     // Catch:{ all -> 0x00af }
            android.content.pm.ActivityInfo r10 = r1.mResolveActivity     // Catch:{ all -> 0x00af }
            r11 = 3504(0xdb0, float:4.91E-42)
            r10.configChanges = r11     // Catch:{ all -> 0x00af }
            android.content.pm.ResolveInfo r10 = r1.mResolveInfo     // Catch:{ all -> 0x00af }
            android.content.pm.ActivityInfo r11 = r1.mResolveActivity     // Catch:{ all -> 0x00af }
            r10.activityInfo = r11     // Catch:{ all -> 0x00af }
            android.content.pm.ResolveInfo r10 = r1.mResolveInfo     // Catch:{ all -> 0x00af }
            r10.priority = r0     // Catch:{ all -> 0x00af }
            android.content.pm.ResolveInfo r10 = r1.mResolveInfo     // Catch:{ all -> 0x00af }
            r10.preferredOrder = r0     // Catch:{ all -> 0x00af }
            android.content.pm.ResolveInfo r10 = r1.mResolveInfo     // Catch:{ all -> 0x00af }
            r10.match = r0     // Catch:{ all -> 0x00af }
            android.content.ComponentName r0 = new android.content.ComponentName     // Catch:{ all -> 0x00af }
            android.content.pm.ApplicationInfo r10 = r1.mAndroidApplication     // Catch:{ all -> 0x00af }
            java.lang.String r10 = r10.packageName     // Catch:{ all -> 0x00af }
            android.content.pm.ActivityInfo r11 = r1.mResolveActivity     // Catch:{ all -> 0x00af }
            java.lang.String r11 = r11.name     // Catch:{ all -> 0x00af }
            r0.<init>(r10, r11)     // Catch:{ all -> 0x00af }
            r1.mResolveComponentName = r0     // Catch:{ all -> 0x00af }
        L_0x00ad:
            monitor-exit(r9)     // Catch:{ all -> 0x00af }
            goto L_0x00b2
        L_0x00af:
            r0 = move-exception
            monitor-exit(r9)     // Catch:{ all -> 0x00af }
            throw r0
        L_0x00b2:
            r9 = 0
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r10 = r1.mPackages
            monitor-enter(r10)
            java.util.List<android.content.pm.SharedLibraryInfo> r0 = r6.allowedSharedLibraryInfos     // Catch:{ all -> 0x029d }
            boolean r0 = com.android.internal.util.ArrayUtils.isEmpty(r0)     // Catch:{ all -> 0x029d }
            if (r0 != 0) goto L_0x00f3
            java.util.List<android.content.pm.SharedLibraryInfo> r0 = r6.allowedSharedLibraryInfos     // Catch:{ all -> 0x029d }
            java.util.Iterator r0 = r0.iterator()     // Catch:{ all -> 0x029d }
        L_0x00c4:
            boolean r11 = r0.hasNext()     // Catch:{ all -> 0x029d }
            if (r11 == 0) goto L_0x00d4
            java.lang.Object r11 = r0.next()     // Catch:{ all -> 0x029d }
            android.content.pm.SharedLibraryInfo r11 = (android.content.pm.SharedLibraryInfo) r11     // Catch:{ all -> 0x029d }
            r1.commitSharedLibraryInfoLocked(r11)     // Catch:{ all -> 0x029d }
            goto L_0x00c4
        L_0x00d4:
            java.util.Map r0 = r23.getCombinedPackages()     // Catch:{ all -> 0x029d }
            r11 = r0
            r0 = 0
            r1.updateSharedLibrariesLocked(r2, r0, r11)     // Catch:{ PackageManagerException -> 0x00df }
            goto L_0x00ea
        L_0x00df:
            r0 = move-exception
            r12 = r0
            r0 = r12
            java.lang.String r12 = "PackageManager"
            java.lang.String r13 = "updateSharedLibrariesLPr failed: "
            android.util.Slog.e(r12, r13, r0)     // Catch:{ all -> 0x029d }
        L_0x00ea:
            r0 = r4 & 16
            if (r0 != 0) goto L_0x00f3
            java.util.ArrayList r0 = r1.updateAllSharedLibrariesLocked(r2, r11)     // Catch:{ all -> 0x029d }
            r9 = r0
        L_0x00f3:
            monitor-exit(r10)     // Catch:{ all -> 0x029d }
            r0 = r4 & 16
            if (r0 == 0) goto L_0x00f9
            goto L_0x0106
        L_0x00f9:
            r0 = r4 & 2048(0x800, float:2.87E-42)
            if (r0 == 0) goto L_0x00fe
            goto L_0x0106
        L_0x00fe:
            r0 = r4 & 4096(0x1000, float:5.74E-42)
            if (r0 == 0) goto L_0x0103
            goto L_0x0106
        L_0x0103:
            r1.checkPackageFrozen(r7)
        L_0x0106:
            if (r9 == 0) goto L_0x0126
            r0 = 0
        L_0x0109:
            int r10 = r9.size()
            if (r0 >= r10) goto L_0x0126
            java.lang.Object r10 = r9.get(r0)
            android.content.pm.PackageParser$Package r10 = (android.content.pm.PackageParser.Package) r10
            android.content.pm.ApplicationInfo r11 = r10.applicationInfo
            java.lang.String r11 = r11.packageName
            android.content.pm.ApplicationInfo r12 = r10.applicationInfo
            int r12 = r12.uid
            java.lang.String r13 = "update lib"
            r1.killApplication(r11, r12, r13)
            int r0 = r0 + 1
            goto L_0x0109
        L_0x0126:
            r10 = 262144(0x40000, double:1.295163E-318)
            java.lang.String r0 = "updateSettings"
            android.os.Trace.traceBegin(r10, r0)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r12 = r1.mPackages
            monitor-enter(r12)
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0298 }
            r13 = r20
            r0.insertPackageSettingLPw(r13, r2)     // Catch:{ all -> 0x0296 }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r1.mPackages     // Catch:{ all -> 0x0296 }
            android.content.pm.ApplicationInfo r14 = r2.applicationInfo     // Catch:{ all -> 0x0296 }
            java.lang.String r14 = r14.packageName     // Catch:{ all -> 0x0296 }
            r0.put(r14, r2)     // Catch:{ all -> 0x0296 }
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0296 }
            com.android.server.pm.KeySetManagerService r0 = r0.mKeySetManagerService     // Catch:{ all -> 0x0296 }
            r14 = r0
            r14.addScannedPackageLPw(r2)     // Catch:{ all -> 0x0296 }
            com.android.server.pm.ComponentResolver r0 = r1.mComponentResolver     // Catch:{ all -> 0x0296 }
            r0.addAllComponents(r2, r5)     // Catch:{ all -> 0x0296 }
            r0 = r4 & 16384(0x4000, float:2.2959E-41)
            if (r0 == 0) goto L_0x0171
            java.lang.String r0 = "PackageManager"
            java.lang.StringBuilder r15 = new java.lang.StringBuilder     // Catch:{ all -> 0x0296 }
            r15.<init>()     // Catch:{ all -> 0x0296 }
            java.lang.String r10 = "Permission groups from package "
            r15.append(r10)     // Catch:{ all -> 0x0296 }
            java.lang.String r10 = r2.packageName     // Catch:{ all -> 0x0296 }
            r15.append(r10)     // Catch:{ all -> 0x0296 }
            java.lang.String r10 = " ignored: instant apps cannot define new permission groups."
            r15.append(r10)     // Catch:{ all -> 0x0296 }
            java.lang.String r10 = r15.toString()     // Catch:{ all -> 0x0296 }
            android.util.Slog.w(r0, r10)     // Catch:{ all -> 0x0296 }
            goto L_0x0176
        L_0x0171:
            com.android.server.pm.permission.PermissionManagerServiceInternal r0 = r1.mPermissionManager     // Catch:{ all -> 0x0296 }
            r0.addAllPermissionGroups(r2, r5)     // Catch:{ all -> 0x0296 }
        L_0x0176:
            r0 = r4 & 16384(0x4000, float:2.2959E-41)
            if (r0 == 0) goto L_0x0198
            java.lang.String r0 = "PackageManager"
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ all -> 0x0296 }
            r10.<init>()     // Catch:{ all -> 0x0296 }
            java.lang.String r11 = "Permissions from package "
            r10.append(r11)     // Catch:{ all -> 0x0296 }
            java.lang.String r11 = r2.packageName     // Catch:{ all -> 0x0296 }
            r10.append(r11)     // Catch:{ all -> 0x0296 }
            java.lang.String r11 = " ignored: instant apps cannot define new permissions."
            r10.append(r11)     // Catch:{ all -> 0x0296 }
            java.lang.String r10 = r10.toString()     // Catch:{ all -> 0x0296 }
            android.util.Slog.w(r0, r10)     // Catch:{ all -> 0x0296 }
            goto L_0x019d
        L_0x0198:
            com.android.server.pm.permission.PermissionManagerServiceInternal r0 = r1.mPermissionManager     // Catch:{ all -> 0x0296 }
            r0.addAllPermissions(r2, r5)     // Catch:{ all -> 0x0296 }
        L_0x019d:
            java.util.ArrayList r0 = r2.instrumentation     // Catch:{ all -> 0x0296 }
            int r0 = r0.size()     // Catch:{ all -> 0x0296 }
            r10 = 0
            r11 = 0
        L_0x01a5:
            if (r11 >= r0) goto L_0x024c
            java.util.ArrayList r15 = r2.instrumentation     // Catch:{ all -> 0x0296 }
            java.lang.Object r15 = r15.get(r11)     // Catch:{ all -> 0x0296 }
            android.content.pm.PackageParser$Instrumentation r15 = (android.content.pm.PackageParser.Instrumentation) r15     // Catch:{ all -> 0x0296 }
            android.content.pm.InstrumentationInfo r8 = r15.info     // Catch:{ all -> 0x0296 }
            r16 = r0
            android.content.pm.ApplicationInfo r0 = r2.applicationInfo     // Catch:{ all -> 0x0296 }
            java.lang.String r0 = r0.packageName     // Catch:{ all -> 0x0296 }
            r8.packageName = r0     // Catch:{ all -> 0x0296 }
            android.content.pm.InstrumentationInfo r0 = r15.info     // Catch:{ all -> 0x0296 }
            android.content.pm.ApplicationInfo r8 = r2.applicationInfo     // Catch:{ all -> 0x0296 }
            java.lang.String r8 = r8.sourceDir     // Catch:{ all -> 0x0296 }
            r0.sourceDir = r8     // Catch:{ all -> 0x0296 }
            android.content.pm.InstrumentationInfo r0 = r15.info     // Catch:{ all -> 0x0296 }
            android.content.pm.ApplicationInfo r8 = r2.applicationInfo     // Catch:{ all -> 0x0296 }
            java.lang.String r8 = r8.publicSourceDir     // Catch:{ all -> 0x0296 }
            r0.publicSourceDir = r8     // Catch:{ all -> 0x0296 }
            android.content.pm.InstrumentationInfo r0 = r15.info     // Catch:{ all -> 0x0296 }
            java.lang.String[] r8 = r2.splitNames     // Catch:{ all -> 0x0296 }
            r0.splitNames = r8     // Catch:{ all -> 0x0296 }
            android.content.pm.InstrumentationInfo r0 = r15.info     // Catch:{ all -> 0x0296 }
            android.content.pm.ApplicationInfo r8 = r2.applicationInfo     // Catch:{ all -> 0x0296 }
            java.lang.String[] r8 = r8.splitSourceDirs     // Catch:{ all -> 0x0296 }
            r0.splitSourceDirs = r8     // Catch:{ all -> 0x0296 }
            android.content.pm.InstrumentationInfo r0 = r15.info     // Catch:{ all -> 0x0296 }
            android.content.pm.ApplicationInfo r8 = r2.applicationInfo     // Catch:{ all -> 0x0296 }
            java.lang.String[] r8 = r8.splitPublicSourceDirs     // Catch:{ all -> 0x0296 }
            r0.splitPublicSourceDirs = r8     // Catch:{ all -> 0x0296 }
            android.content.pm.InstrumentationInfo r0 = r15.info     // Catch:{ all -> 0x0296 }
            android.content.pm.ApplicationInfo r8 = r2.applicationInfo     // Catch:{ all -> 0x0296 }
            android.util.SparseArray r8 = r8.splitDependencies     // Catch:{ all -> 0x0296 }
            r0.splitDependencies = r8     // Catch:{ all -> 0x0296 }
            android.content.pm.InstrumentationInfo r0 = r15.info     // Catch:{ all -> 0x0296 }
            android.content.pm.ApplicationInfo r8 = r2.applicationInfo     // Catch:{ all -> 0x0296 }
            java.lang.String r8 = r8.dataDir     // Catch:{ all -> 0x0296 }
            r0.dataDir = r8     // Catch:{ all -> 0x0296 }
            android.content.pm.InstrumentationInfo r0 = r15.info     // Catch:{ all -> 0x0296 }
            android.content.pm.ApplicationInfo r8 = r2.applicationInfo     // Catch:{ all -> 0x0296 }
            java.lang.String r8 = r8.deviceProtectedDataDir     // Catch:{ all -> 0x0296 }
            r0.deviceProtectedDataDir = r8     // Catch:{ all -> 0x0296 }
            android.content.pm.InstrumentationInfo r0 = r15.info     // Catch:{ all -> 0x0296 }
            android.content.pm.ApplicationInfo r8 = r2.applicationInfo     // Catch:{ all -> 0x0296 }
            java.lang.String r8 = r8.credentialProtectedDataDir     // Catch:{ all -> 0x0296 }
            r0.credentialProtectedDataDir = r8     // Catch:{ all -> 0x0296 }
            android.content.pm.InstrumentationInfo r0 = r15.info     // Catch:{ all -> 0x0296 }
            android.content.pm.ApplicationInfo r8 = r2.applicationInfo     // Catch:{ all -> 0x0296 }
            java.lang.String r8 = r8.primaryCpuAbi     // Catch:{ all -> 0x0296 }
            r0.primaryCpuAbi = r8     // Catch:{ all -> 0x0296 }
            android.content.pm.InstrumentationInfo r0 = r15.info     // Catch:{ all -> 0x0296 }
            android.content.pm.ApplicationInfo r8 = r2.applicationInfo     // Catch:{ all -> 0x0296 }
            java.lang.String r8 = r8.secondaryCpuAbi     // Catch:{ all -> 0x0296 }
            r0.secondaryCpuAbi = r8     // Catch:{ all -> 0x0296 }
            android.content.pm.InstrumentationInfo r0 = r15.info     // Catch:{ all -> 0x0296 }
            android.content.pm.ApplicationInfo r8 = r2.applicationInfo     // Catch:{ all -> 0x0296 }
            java.lang.String r8 = r8.nativeLibraryDir     // Catch:{ all -> 0x0296 }
            r0.nativeLibraryDir = r8     // Catch:{ all -> 0x0296 }
            android.content.pm.InstrumentationInfo r0 = r15.info     // Catch:{ all -> 0x0296 }
            android.content.pm.ApplicationInfo r8 = r2.applicationInfo     // Catch:{ all -> 0x0296 }
            java.lang.String r8 = r8.secondaryNativeLibraryDir     // Catch:{ all -> 0x0296 }
            r0.secondaryNativeLibraryDir = r8     // Catch:{ all -> 0x0296 }
            android.util.ArrayMap<android.content.ComponentName, android.content.pm.PackageParser$Instrumentation> r0 = r1.mInstrumentation     // Catch:{ all -> 0x0296 }
            android.content.ComponentName r8 = r15.getComponentName()     // Catch:{ all -> 0x0296 }
            r0.put(r8, r15)     // Catch:{ all -> 0x0296 }
            if (r5 == 0) goto L_0x0244
            if (r10 != 0) goto L_0x0237
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ all -> 0x0296 }
            r8 = 256(0x100, float:3.59E-43)
            r0.<init>(r8)     // Catch:{ all -> 0x0296 }
            r10 = r0
            r8 = 32
            goto L_0x023c
        L_0x0237:
            r8 = 32
            r10.append(r8)     // Catch:{ all -> 0x0296 }
        L_0x023c:
            android.content.pm.InstrumentationInfo r0 = r15.info     // Catch:{ all -> 0x0296 }
            java.lang.String r0 = r0.name     // Catch:{ all -> 0x0296 }
            r10.append(r0)     // Catch:{ all -> 0x0296 }
            goto L_0x0246
        L_0x0244:
            r8 = 32
        L_0x0246:
            int r11 = r11 + 1
            r0 = r16
            goto L_0x01a5
        L_0x024c:
            r16 = r0
            java.util.ArrayList r0 = r2.protectedBroadcasts     // Catch:{ all -> 0x0296 }
            if (r0 == 0) goto L_0x0279
            java.util.ArrayList r0 = r2.protectedBroadcasts     // Catch:{ all -> 0x0296 }
            int r0 = r0.size()     // Catch:{ all -> 0x0296 }
            r8 = r0
            android.util.ArraySet<java.lang.String> r15 = r1.mProtectedBroadcasts     // Catch:{ all -> 0x0296 }
            monitor-enter(r15)     // Catch:{ all -> 0x0296 }
            r0 = 0
            r11 = r0
        L_0x025e:
            if (r11 >= r8) goto L_0x0272
            android.util.ArraySet<java.lang.String> r0 = r1.mProtectedBroadcasts     // Catch:{ all -> 0x0276 }
            java.util.ArrayList r4 = r2.protectedBroadcasts     // Catch:{ all -> 0x0276 }
            java.lang.Object r4 = r4.get(r11)     // Catch:{ all -> 0x0276 }
            java.lang.String r4 = (java.lang.String) r4     // Catch:{ all -> 0x0276 }
            r0.add(r4)     // Catch:{ all -> 0x0276 }
            int r11 = r11 + 1
            r4 = r21
            goto L_0x025e
        L_0x0272:
            monitor-exit(r15)     // Catch:{ all -> 0x0276 }
            r16 = r8
            goto L_0x0279
        L_0x0276:
            r0 = move-exception
            monitor-exit(r15)     // Catch:{ all -> 0x0276 }
            throw r0     // Catch:{ all -> 0x0296 }
        L_0x0279:
            if (r3 == 0) goto L_0x028e
            java.util.ArrayList r0 = new java.util.ArrayList     // Catch:{ all -> 0x0296 }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r4 = r1.mPackages     // Catch:{ all -> 0x0296 }
            java.util.Set r4 = r4.keySet()     // Catch:{ all -> 0x0296 }
            r0.<init>(r4)     // Catch:{ all -> 0x0296 }
            com.android.server.pm.-$$Lambda$PackageManagerService$flUQp0qTsxUQY0aupDT6UsHb48I r4 = new com.android.server.pm.-$$Lambda$PackageManagerService$flUQp0qTsxUQY0aupDT6UsHb48I     // Catch:{ all -> 0x0296 }
            r4.<init>(r1, r2, r3, r0)     // Catch:{ all -> 0x0296 }
            android.os.AsyncTask.execute(r4)     // Catch:{ all -> 0x0296 }
        L_0x028e:
            monitor-exit(r12)     // Catch:{ all -> 0x0296 }
            r10 = 262144(0x40000, double:1.295163E-318)
            android.os.Trace.traceEnd(r10)
            return
        L_0x0296:
            r0 = move-exception
            goto L_0x029b
        L_0x0298:
            r0 = move-exception
            r13 = r20
        L_0x029b:
            monitor-exit(r12)     // Catch:{ all -> 0x0296 }
            throw r0
        L_0x029d:
            r0 = move-exception
            r13 = r20
        L_0x02a0:
            monitor-exit(r10)     // Catch:{ all -> 0x02a2 }
            throw r0
        L_0x02a2:
            r0 = move-exception
            goto L_0x02a0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.commitPackageSettings(android.content.pm.PackageParser$Package, android.content.pm.PackageParser$Package, com.android.server.pm.PackageSetting, int, boolean, com.android.server.pm.PackageManagerService$ReconciledPackage):void");
    }

    public /* synthetic */ void lambda$commitPackageSettings$6$PackageManagerService(PackageParser.Package pkg, PackageParser.Package oldPkg, ArrayList allPackageNames) {
        this.mPermissionManager.revokeRuntimePermissionsIfGroupChanged(pkg, oldPkg, allPackageNames, this.mPermissionCallback);
    }

    private static void derivePackageAbi(PackageParser.Package pkg, String cpuAbiOverride, boolean extractLibs) throws PackageManagerException {
        boolean extractLibs2;
        int copyRet;
        PackageParser.Package packageR = pkg;
        String str = cpuAbiOverride;
        setNativeLibraryPaths(packageR, sAppLib32InstallDir);
        if (!isSystemApp(pkg) || pkg.isUpdatedSystemApp()) {
            extractLibs2 = extractLibs;
        } else {
            extractLibs2 = false;
        }
        String nativeLibraryRootStr = packageR.applicationInfo.nativeLibraryRootDir;
        boolean useIsaSpecificSubdirs = packageR.applicationInfo.nativeLibraryRootRequiresIsa;
        NativeLibraryHelper.Handle handle = null;
        try {
            handle = NativeLibraryHelper.Handle.create(pkg);
            File nativeLibraryRoot = new File(nativeLibraryRootStr);
            packageR.applicationInfo.primaryCpuAbi = null;
            packageR.applicationInfo.secondaryCpuAbi = null;
            if (isMultiArch(packageR.applicationInfo)) {
                if (packageR.cpuAbiOverride != null && !"-".equals(packageR.cpuAbiOverride)) {
                    Slog.w(TAG, "Ignoring abiOverride for multi arch application.");
                }
                int abi32 = -114;
                int abi64 = -114;
                if (Build.SUPPORTED_32_BIT_ABIS.length > 0) {
                    if (extractLibs2) {
                        Trace.traceBegin(262144, "copyNativeBinaries");
                        abi32 = NativeLibraryHelper.copyNativeBinariesForSupportedAbi(handle, nativeLibraryRoot, Build.SUPPORTED_32_BIT_ABIS, useIsaSpecificSubdirs);
                    } else {
                        Trace.traceBegin(262144, "findSupportedAbi");
                        abi32 = NativeLibraryHelper.findSupportedAbi(handle, Build.SUPPORTED_32_BIT_ABIS);
                    }
                    Trace.traceEnd(262144);
                }
                if (abi32 >= 0) {
                    if (pkg.isLibrary()) {
                        if (extractLibs2) {
                            throw new PackageManagerException(RequestStatus.SYS_ETIMEDOUT, "Shared library native lib extraction not supported");
                        }
                    }
                }
                maybeThrowExceptionForMultiArchCopy("Error unpackaging 32 bit native libs for multiarch app.", abi32);
                if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
                    if (extractLibs2) {
                        Trace.traceBegin(262144, "copyNativeBinaries");
                        abi64 = NativeLibraryHelper.copyNativeBinariesForSupportedAbi(handle, nativeLibraryRoot, Build.SUPPORTED_64_BIT_ABIS, useIsaSpecificSubdirs);
                    } else {
                        Trace.traceBegin(262144, "findSupportedAbi");
                        abi64 = NativeLibraryHelper.findSupportedAbi(handle, Build.SUPPORTED_64_BIT_ABIS);
                    }
                    Trace.traceEnd(262144);
                }
                maybeThrowExceptionForMultiArchCopy("Error unpackaging 64 bit native libs for multiarch app.", abi64);
                if (abi64 >= 0) {
                    if (extractLibs2) {
                        if (pkg.isLibrary()) {
                            throw new PackageManagerException(RequestStatus.SYS_ETIMEDOUT, "Shared library native lib extraction not supported");
                        }
                    }
                    packageR.applicationInfo.primaryCpuAbi = Build.SUPPORTED_64_BIT_ABIS[abi64];
                }
                if (abi32 >= 0) {
                    String abi = Build.SUPPORTED_32_BIT_ABIS[abi32];
                    if (abi64 < 0) {
                        packageR.applicationInfo.primaryCpuAbi = abi;
                    } else if (packageR.use32bitAbi) {
                        packageR.applicationInfo.secondaryCpuAbi = packageR.applicationInfo.primaryCpuAbi;
                        packageR.applicationInfo.primaryCpuAbi = abi;
                    } else {
                        packageR.applicationInfo.secondaryCpuAbi = abi;
                    }
                }
            } else {
                String[] abiList = str != null ? new String[]{str} : Build.SUPPORTED_ABIS;
                boolean needsRenderScriptOverride = false;
                if (Build.SUPPORTED_64_BIT_ABIS.length > 0 && str == null && NativeLibraryHelper.hasRenderscriptBitcode(handle)) {
                    abiList = Build.SUPPORTED_32_BIT_ABIS;
                    needsRenderScriptOverride = true;
                }
                if (extractLibs2) {
                    Trace.traceBegin(262144, "copyNativeBinaries");
                    copyRet = NativeLibraryHelper.copyNativeBinariesForSupportedAbi(handle, nativeLibraryRoot, abiList, useIsaSpecificSubdirs);
                } else {
                    Trace.traceBegin(262144, "findSupportedAbi");
                    copyRet = NativeLibraryHelper.findSupportedAbi(handle, abiList);
                }
                Trace.traceEnd(262144);
                if (copyRet < 0) {
                    if (copyRet != -114) {
                        throw new PackageManagerException(RequestStatus.SYS_ETIMEDOUT, "Error unpackaging native libs for app, errorCode=" + copyRet);
                    }
                }
                if (copyRet >= 0) {
                    if (!pkg.isLibrary()) {
                        packageR.applicationInfo.primaryCpuAbi = abiList[copyRet];
                    } else {
                        throw new PackageManagerException(RequestStatus.SYS_ETIMEDOUT, "Shared library with native libs must be multiarch");
                    }
                } else if (copyRet == -114 && str != null) {
                    packageR.applicationInfo.primaryCpuAbi = str;
                } else if (needsRenderScriptOverride) {
                    packageR.applicationInfo.primaryCpuAbi = abiList[0];
                }
            }
        } catch (IOException ioe) {
            Slog.e(TAG, "Unable to get canonical file " + ioe.toString());
        } catch (Throwable th) {
            IoUtils.closeQuietly(handle);
            throw th;
        }
        IoUtils.closeQuietly(handle);
        setNativeLibraryPaths(packageR, sAppLib32InstallDir);
    }

    private static List<String> adjustCpuAbisForSharedUserLPw(Set<PackageSetting> packagesForUser, PackageParser.Package scannedPackage) {
        List<String> result;
        List<String> result2;
        List<String> changedAbiCodePath = null;
        if (scannedPackage == null) {
            Map<String, Set<PackageSetting>> map = new HashMap<>();
            for (PackageSetting ps : packagesForUser) {
                if (!(ps == null || ps.pkg == null || ps.pkg.applicationInfo == null)) {
                    String processName = ps.pkg.applicationInfo.processName;
                    Set<PackageSetting> packagesForProcess = map.get(processName);
                    if (packagesForProcess == null) {
                        packagesForProcess = new HashSet<>();
                        map.put(processName, packagesForProcess);
                    }
                    packagesForProcess.add(ps);
                }
            }
            for (String processName2 : map.keySet()) {
                Set<PackageSetting> packagesForProcess2 = map.get(processName2);
                if (packagesForProcess2.size() > 1 && (result2 = adjustCpuAbisForSharedProcessLPw(packagesForProcess2, (PackageParser.Package) null)) != null) {
                    if (changedAbiCodePath == null) {
                        changedAbiCodePath = new ArrayList<>();
                    }
                    changedAbiCodePath.addAll(result2);
                }
            }
        } else {
            String processName3 = scannedPackage.applicationInfo.processName;
            Set<PackageSetting> packagesForProcess3 = new HashSet<>();
            for (PackageSetting ps2 : packagesForUser) {
                if (!(ps2 == null || ps2.pkg == null || ps2.pkg.applicationInfo == null || !processName3.equals(ps2.pkg.applicationInfo.processName) || scannedPackage.packageName.equals(ps2.name))) {
                    packagesForProcess3.add(ps2);
                }
            }
            if (packagesForProcess3.size() > 0 && (result = adjustCpuAbisForSharedProcessLPw(packagesForProcess3, scannedPackage)) != null) {
                if (0 == 0) {
                    changedAbiCodePath = new ArrayList<>();
                }
                changedAbiCodePath.addAll(result);
            }
        }
        return changedAbiCodePath;
    }

    private static List<String> adjustCpuAbisForSharedProcessLPw(Set<PackageSetting> packagesForUser, PackageParser.Package scannedPackage) {
        String adjustedAbi;
        List<String> changedAbiCodePath = null;
        String requiredInstructionSet = null;
        if (!(scannedPackage == null || scannedPackage.applicationInfo.primaryCpuAbi == null)) {
            requiredInstructionSet = VMRuntime.getInstructionSet(scannedPackage.applicationInfo.primaryCpuAbi);
        }
        PackageSetting requirer = null;
        for (PackageSetting ps : packagesForUser) {
            if ((scannedPackage == null || !scannedPackage.packageName.equals(ps.name)) && ps.primaryCpuAbiString != null) {
                String instructionSet = VMRuntime.getInstructionSet(ps.primaryCpuAbiString);
                if (requiredInstructionSet != null && !instructionSet.equals(requiredInstructionSet)) {
                    StringBuilder sb = new StringBuilder();
                    sb.append("Instruction set mismatch, ");
                    sb.append(requirer == null ? "[caller]" : requirer);
                    sb.append(" requires ");
                    sb.append(requiredInstructionSet);
                    sb.append(" whereas ");
                    sb.append(ps);
                    sb.append(" requires ");
                    sb.append(instructionSet);
                    Slog.w(TAG, sb.toString());
                }
                if (requiredInstructionSet == null) {
                    requiredInstructionSet = instructionSet;
                    requirer = ps;
                }
            }
        }
        if (requiredInstructionSet != null) {
            if (requirer != null) {
                adjustedAbi = requirer.primaryCpuAbiString;
                if (scannedPackage != null) {
                    scannedPackage.applicationInfo.primaryCpuAbi = adjustedAbi;
                }
            } else {
                adjustedAbi = scannedPackage.applicationInfo.primaryCpuAbi;
            }
            for (PackageSetting ps2 : packagesForUser) {
                if ((scannedPackage == null || !scannedPackage.packageName.equals(ps2.name)) && ps2.primaryCpuAbiString == null) {
                    ps2.primaryCpuAbiString = adjustedAbi;
                    if (!(ps2.pkg == null || ps2.pkg.applicationInfo == null || TextUtils.equals(adjustedAbi, ps2.pkg.applicationInfo.primaryCpuAbi))) {
                        ps2.pkg.applicationInfo.primaryCpuAbi = adjustedAbi;
                        if (changedAbiCodePath == null) {
                            changedAbiCodePath = new ArrayList<>();
                        }
                        changedAbiCodePath.add(ps2.codePathString);
                    }
                }
            }
        }
        return changedAbiCodePath;
    }

    private void setUpCustomResolverActivity(PackageParser.Package pkg) {
        synchronized (this.mPackages) {
            this.mResolverReplaced = true;
            this.mResolveActivity.applicationInfo = pkg.applicationInfo;
            this.mResolveActivity.name = this.mCustomResolverComponentName.getClassName();
            this.mResolveActivity.packageName = pkg.applicationInfo.packageName;
            this.mResolveActivity.processName = pkg.applicationInfo.packageName;
            this.mResolveActivity.launchMode = 0;
            this.mResolveActivity.flags = 288;
            this.mResolveActivity.theme = 0;
            this.mResolveActivity.exported = true;
            this.mResolveActivity.enabled = true;
            this.mResolveInfo.activityInfo = this.mResolveActivity;
            this.mResolveInfo.priority = 0;
            this.mResolveInfo.preferredOrder = 0;
            this.mResolveInfo.match = 0;
            this.mResolveComponentName = this.mCustomResolverComponentName;
            Slog.i(TAG, "Replacing default ResolverActivity with custom activity: " + this.mResolveComponentName);
        }
    }

    private void setUpInstantAppInstallerActivityLP(ActivityInfo installerActivity) {
        if (installerActivity == null) {
            if (DEBUG_INSTANT) {
                Slog.d(TAG, "Clear ephemeral installer activity");
            }
            this.mInstantAppInstallerActivity = null;
            return;
        }
        if (DEBUG_INSTANT) {
            Slog.d(TAG, "Set ephemeral installer activity: " + installerActivity.getComponentName());
        }
        this.mInstantAppInstallerActivity = installerActivity;
        this.mInstantAppInstallerActivity.flags |= 288;
        ActivityInfo activityInfo = this.mInstantAppInstallerActivity;
        activityInfo.exported = true;
        activityInfo.enabled = true;
        ResolveInfo resolveInfo = this.mInstantAppInstallerInfo;
        resolveInfo.activityInfo = activityInfo;
        resolveInfo.priority = 1;
        resolveInfo.preferredOrder = 1;
        resolveInfo.isDefault = true;
        resolveInfo.match = 5799936;
    }

    private static String calculateBundledApkRoot(String codePathString) {
        File codeRoot;
        File codePath = new File(codePathString);
        if (FileUtils.contains(Environment.getRootDirectory(), codePath)) {
            codeRoot = Environment.getRootDirectory();
        } else if (FileUtils.contains(Environment.getOemDirectory(), codePath)) {
            codeRoot = Environment.getOemDirectory();
        } else if (FileUtils.contains(Environment.getVendorDirectory(), codePath)) {
            codeRoot = Environment.getVendorDirectory();
        } else if (FileUtils.contains(Environment.getOdmDirectory(), codePath)) {
            codeRoot = Environment.getOdmDirectory();
        } else if (FileUtils.contains(Environment.getProductDirectory(), codePath)) {
            codeRoot = Environment.getProductDirectory();
        } else if (FileUtils.contains(Environment.getProductServicesDirectory(), codePath)) {
            codeRoot = Environment.getProductServicesDirectory();
        } else if (FileUtils.contains(Environment.getOdmDirectory(), codePath)) {
            codeRoot = Environment.getOdmDirectory();
        } else {
            try {
                File f = codePath.getCanonicalFile();
                File parent = f.getParentFile();
                while (true) {
                    File parentFile = parent.getParentFile();
                    File tmp = parentFile;
                    if (parentFile == null) {
                        break;
                    }
                    f = parent;
                    parent = tmp;
                }
                File codeRoot2 = f;
                Slog.w(TAG, "Unrecognized code path " + codePath + " - using " + codeRoot2);
                codeRoot = codeRoot2;
            } catch (IOException e) {
                Slog.w(TAG, "Can't canonicalize code path " + codePath);
                return Environment.getRootDirectory().getPath();
            }
        }
        return codeRoot.getPath();
    }

    private static void setNativeLibraryPaths(PackageParser.Package pkg, File appLib32InstallDir) {
        PackageParser.Package packageR = pkg;
        ApplicationInfo info = packageR.applicationInfo;
        String codePath = packageR.codePath;
        File codeFile = new File(codePath);
        boolean bundledApp = info.isSystemApp() && !info.isUpdatedSystemApp();
        info.nativeLibraryRootDir = null;
        info.nativeLibraryRootRequiresIsa = false;
        info.nativeLibraryDir = null;
        info.secondaryNativeLibraryDir = null;
        String secondaryLibDir = "lib";
        if (PackageParser.isApkFile(codeFile)) {
            if (bundledApp) {
                String apkRoot = calculateBundledApkRoot(info.sourceDir);
                boolean is64Bit = VMRuntime.is64BitInstructionSet(InstructionSets.getPrimaryInstructionSet(info));
                String apkName = deriveCodePathName(codePath);
                info.nativeLibraryRootDir = Environment.buildPath(new File(apkRoot), new String[]{is64Bit ? "lib64" : secondaryLibDir, apkName}).getAbsolutePath();
                if (info.secondaryCpuAbi != null) {
                    if (!is64Bit) {
                        secondaryLibDir = "lib64";
                    }
                    info.secondaryNativeLibraryDir = Environment.buildPath(new File(apkRoot), new String[]{secondaryLibDir, apkName}).getAbsolutePath();
                }
                File file = appLib32InstallDir;
            } else {
                info.nativeLibraryRootDir = new File(appLib32InstallDir, deriveCodePathName(codePath)).getAbsolutePath();
            }
            info.nativeLibraryRootRequiresIsa = false;
            info.nativeLibraryDir = info.nativeLibraryRootDir;
            return;
        }
        File file2 = appLib32InstallDir;
        info.nativeLibraryRootDir = new File(codeFile, secondaryLibDir).getAbsolutePath();
        info.nativeLibraryRootRequiresIsa = true;
        info.nativeLibraryDir = new File(info.nativeLibraryRootDir, InstructionSets.getPrimaryInstructionSet(info)).getAbsolutePath();
        if (info.secondaryCpuAbi != null) {
            info.secondaryNativeLibraryDir = new File(info.nativeLibraryRootDir, VMRuntime.getInstructionSet(info.secondaryCpuAbi)).getAbsolutePath();
        }
    }

    private static void setBundledAppAbisAndRoots(PackageParser.Package pkg, PackageSetting pkgSetting) {
        setBundledAppAbi(pkg, calculateBundledApkRoot(pkg.applicationInfo.sourceDir), deriveCodePathName(pkg.applicationInfo.getCodePath()));
        if (pkgSetting != null) {
            pkgSetting.primaryCpuAbiString = pkg.applicationInfo.primaryCpuAbi;
            pkgSetting.secondaryCpuAbiString = pkg.applicationInfo.secondaryCpuAbi;
        }
    }

    private static void setBundledAppAbi(PackageParser.Package pkg, String apkRoot, String apkName) {
        boolean has64BitLibs;
        boolean has64BitLibs2;
        File codeFile = new File(pkg.codePath);
        if (PackageParser.isApkFile(codeFile)) {
            boolean has64BitLibs3 = new File(apkRoot, new File("lib64", apkName).getPath()).exists();
            has64BitLibs = has64BitLibs3;
            has64BitLibs2 = new File(apkRoot, new File("lib", apkName).getPath()).exists();
        } else {
            File rootDir = new File(codeFile, "lib");
            if (ArrayUtils.isEmpty(Build.SUPPORTED_64_BIT_ABIS) || TextUtils.isEmpty(Build.SUPPORTED_64_BIT_ABIS[0])) {
                has64BitLibs = false;
            } else {
                has64BitLibs = new File(rootDir, VMRuntime.getInstructionSet(Build.SUPPORTED_64_BIT_ABIS[0])).exists();
            }
            if (ArrayUtils.isEmpty(Build.SUPPORTED_32_BIT_ABIS) || TextUtils.isEmpty(Build.SUPPORTED_32_BIT_ABIS[0])) {
                has64BitLibs2 = false;
            } else {
                has64BitLibs2 = new File(rootDir, VMRuntime.getInstructionSet(Build.SUPPORTED_32_BIT_ABIS[0])).exists();
            }
        }
        if (has64BitLibs && !has64BitLibs2) {
            pkg.applicationInfo.primaryCpuAbi = Build.SUPPORTED_64_BIT_ABIS[0];
            pkg.applicationInfo.secondaryCpuAbi = null;
        } else if (has64BitLibs2 && !has64BitLibs) {
            pkg.applicationInfo.primaryCpuAbi = Build.SUPPORTED_32_BIT_ABIS[0];
            pkg.applicationInfo.secondaryCpuAbi = null;
        } else if (!has64BitLibs2 || !has64BitLibs) {
            pkg.applicationInfo.primaryCpuAbi = null;
            pkg.applicationInfo.secondaryCpuAbi = null;
        } else {
            if ((pkg.applicationInfo.flags & Integer.MIN_VALUE) == 0) {
                Slog.e(TAG, "Package " + pkg + " has multiple bundled libs, but is not multiarch.");
            }
            if (VMRuntime.is64BitInstructionSet(InstructionSets.getPreferredInstructionSet())) {
                pkg.applicationInfo.primaryCpuAbi = Build.SUPPORTED_64_BIT_ABIS[0];
                pkg.applicationInfo.secondaryCpuAbi = Build.SUPPORTED_32_BIT_ABIS[0];
                return;
            }
            pkg.applicationInfo.primaryCpuAbi = Build.SUPPORTED_32_BIT_ABIS[0];
            pkg.applicationInfo.secondaryCpuAbi = Build.SUPPORTED_64_BIT_ABIS[0];
        }
    }

    private void killApplication(String pkgName, int appId, String reason) {
        killApplication(pkgName, appId, -1, reason);
    }

    /* access modifiers changed from: private */
    public void killApplication(String pkgName, int appId, int userId, String reason) {
        long token = Binder.clearCallingIdentity();
        try {
            IActivityManager am = ActivityManager.getService();
            if (am != null) {
                try {
                    am.killApplication(pkgName, appId, userId, reason);
                } catch (RemoteException e) {
                }
            }
        } finally {
            Binder.restoreCallingIdentity(token);
        }
    }

    private void removePackageLI(PackageParser.Package pkg, boolean chatty) {
        PackageSetting ps = (PackageSetting) pkg.mExtras;
        if (ps != null) {
            removePackageLI(ps.name, chatty);
        }
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            PackageSetting ps2 = (PackageSetting) ((PackageParser.Package) pkg.childPackages.get(i)).mExtras;
            if (ps2 != null) {
                removePackageLI(ps2.name, chatty);
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void removePackageLI(String packageName, boolean chatty) {
        synchronized (this.mPackages) {
            PackageParser.Package removedPackage = this.mPackages.remove(packageName);
            if (removedPackage != null) {
                cleanPackageDataStructuresLILPw(removedPackage, chatty);
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void removeInstalledPackageLI(PackageParser.Package pkg, boolean chatty) {
        synchronized (this.mPackages) {
            this.mPackages.remove(pkg.applicationInfo.packageName);
            cleanPackageDataStructuresLILPw(pkg, chatty);
            int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
            for (int i = 0; i < childCount; i++) {
                PackageParser.Package childPkg = (PackageParser.Package) pkg.childPackages.get(i);
                this.mPackages.remove(childPkg.applicationInfo.packageName);
                cleanPackageDataStructuresLILPw(childPkg, chatty);
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void cleanPackageDataStructuresLILPw(PackageParser.Package pkg, boolean chatty) {
        this.mComponentResolver.removeAllComponents(pkg, chatty);
        this.mPermissionManager.removeAllPermissions(pkg, chatty);
        int instrumentationSize = pkg.instrumentation.size();
        for (int i = 0; i < instrumentationSize; i++) {
            this.mInstrumentation.remove(((PackageParser.Instrumentation) pkg.instrumentation.get(i)).getComponentName());
        }
        if (!((pkg.applicationInfo.flags & 1) == 0 || pkg.libraryNames == null)) {
            int libraryNamesSize = pkg.libraryNames.size();
            for (int i2 = 0; i2 < libraryNamesSize; i2++) {
                removeSharedLibraryLPw((String) pkg.libraryNames.get(i2), 0);
            }
        }
        if (pkg.staticSharedLibName != null) {
            removeSharedLibraryLPw(pkg.staticSharedLibName, pkg.staticSharedLibVersion);
        }
    }

    public void sendPackageBroadcast(String action, String pkg, Bundle extras, int flags, String targetPkg, IIntentReceiver finishedReceiver, int[] userIds, int[] instantUserIds) {
        this.mHandler.post(new Runnable(userIds, action, pkg, extras, flags, targetPkg, finishedReceiver, instantUserIds) {
            private final /* synthetic */ int[] f$1;
            private final /* synthetic */ String f$2;
            private final /* synthetic */ String f$3;
            private final /* synthetic */ Bundle f$4;
            private final /* synthetic */ int f$5;
            private final /* synthetic */ String f$6;
            private final /* synthetic */ IIntentReceiver f$7;
            private final /* synthetic */ int[] f$8;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
                this.f$8 = r9;
            }

            public final void run() {
                PackageManagerService.this.lambda$sendPackageBroadcast$7$PackageManagerService(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8);
            }
        });
    }

    public /* synthetic */ void lambda$sendPackageBroadcast$7$PackageManagerService(int[] userIds, String action, String pkg, Bundle extras, int flags, String targetPkg, IIntentReceiver finishedReceiver, int[] instantUserIds) {
        int[] resolvedUserIds;
        int[] iArr = instantUserIds;
        try {
            IActivityManager am = ActivityManager.getService();
            if (am != null) {
                if (userIds == null) {
                    resolvedUserIds = am.getRunningUserIds();
                } else {
                    resolvedUserIds = userIds;
                }
                doSendBroadcast(am, action, pkg, extras, flags, targetPkg, finishedReceiver, resolvedUserIds, false);
                if (iArr != null && iArr != EMPTY_INT_ARRAY) {
                    doSendBroadcast(am, action, pkg, extras, flags, targetPkg, finishedReceiver, instantUserIds, true);
                }
            }
        } catch (RemoteException e) {
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:10:0x0022, code lost:
        if (r0 < 0) goto L_0x002c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:11:0x0024, code lost:
        r1[r0].onPackageAdded(r4, r5);
        r0 = r0 - 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x002c, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x001f, code lost:
        r0 = r1.length - 1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void notifyPackageAdded(java.lang.String r4, int r5) {
        /*
            r3 = this;
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r3.mPackages
            monitor-enter(r0)
            android.util.ArraySet<android.content.pm.PackageManagerInternal$PackageListObserver> r1 = r3.mPackageListObservers     // Catch:{ all -> 0x002d }
            int r1 = r1.size()     // Catch:{ all -> 0x002d }
            if (r1 != 0) goto L_0x000d
            monitor-exit(r0)     // Catch:{ all -> 0x002d }
            return
        L_0x000d:
            android.util.ArraySet<android.content.pm.PackageManagerInternal$PackageListObserver> r1 = r3.mPackageListObservers     // Catch:{ all -> 0x002d }
            int r1 = r1.size()     // Catch:{ all -> 0x002d }
            android.content.pm.PackageManagerInternal$PackageListObserver[] r1 = new android.content.pm.PackageManagerInternal.PackageListObserver[r1]     // Catch:{ all -> 0x002d }
            android.util.ArraySet<android.content.pm.PackageManagerInternal$PackageListObserver> r2 = r3.mPackageListObservers     // Catch:{ all -> 0x002d }
            java.lang.Object[] r2 = r2.toArray(r1)     // Catch:{ all -> 0x002d }
            android.content.pm.PackageManagerInternal$PackageListObserver[] r2 = (android.content.pm.PackageManagerInternal.PackageListObserver[]) r2     // Catch:{ all -> 0x002d }
            r1 = r2
            monitor-exit(r0)     // Catch:{ all -> 0x002d }
            int r0 = r1.length
            int r0 = r0 + -1
        L_0x0022:
            if (r0 < 0) goto L_0x002c
            r2 = r1[r0]
            r2.onPackageAdded(r4, r5)
            int r0 = r0 + -1
            goto L_0x0022
        L_0x002c:
            return
        L_0x002d:
            r1 = move-exception
            monitor-exit(r0)     // Catch:{ all -> 0x002d }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.notifyPackageAdded(java.lang.String, int):void");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:10:0x0022, code lost:
        if (r0 < 0) goto L_0x002c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:11:0x0024, code lost:
        r1[r0].onPackageChanged(r4, r5);
        r0 = r0 - 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x002c, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x001f, code lost:
        r0 = r1.length - 1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void notifyPackageChanged(java.lang.String r4, int r5) {
        /*
            r3 = this;
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r3.mPackages
            monitor-enter(r0)
            android.util.ArraySet<android.content.pm.PackageManagerInternal$PackageListObserver> r1 = r3.mPackageListObservers     // Catch:{ all -> 0x002d }
            int r1 = r1.size()     // Catch:{ all -> 0x002d }
            if (r1 != 0) goto L_0x000d
            monitor-exit(r0)     // Catch:{ all -> 0x002d }
            return
        L_0x000d:
            android.util.ArraySet<android.content.pm.PackageManagerInternal$PackageListObserver> r1 = r3.mPackageListObservers     // Catch:{ all -> 0x002d }
            int r1 = r1.size()     // Catch:{ all -> 0x002d }
            android.content.pm.PackageManagerInternal$PackageListObserver[] r1 = new android.content.pm.PackageManagerInternal.PackageListObserver[r1]     // Catch:{ all -> 0x002d }
            android.util.ArraySet<android.content.pm.PackageManagerInternal$PackageListObserver> r2 = r3.mPackageListObservers     // Catch:{ all -> 0x002d }
            java.lang.Object[] r2 = r2.toArray(r1)     // Catch:{ all -> 0x002d }
            android.content.pm.PackageManagerInternal$PackageListObserver[] r2 = (android.content.pm.PackageManagerInternal.PackageListObserver[]) r2     // Catch:{ all -> 0x002d }
            r1 = r2
            monitor-exit(r0)     // Catch:{ all -> 0x002d }
            int r0 = r1.length
            int r0 = r0 + -1
        L_0x0022:
            if (r0 < 0) goto L_0x002c
            r2 = r1[r0]
            r2.onPackageChanged(r4, r5)
            int r0 = r0 + -1
            goto L_0x0022
        L_0x002c:
            return
        L_0x002d:
            r1 = move-exception
            monitor-exit(r0)     // Catch:{ all -> 0x002d }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.notifyPackageChanged(java.lang.String, int):void");
    }

    static /* synthetic */ int lambda$static$8(ProviderInfo p1, ProviderInfo p2) {
        int v1 = p1.initOrder;
        int v2 = p2.initOrder;
        if (v1 > v2) {
            return -1;
        }
        return v1 < v2 ? 1 : 0;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:10:0x0022, code lost:
        if (r0 < 0) goto L_0x002c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:11:0x0024, code lost:
        r1[r0].onPackageRemoved(r4, r5);
        r0 = r0 - 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x002c, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x001f, code lost:
        r0 = r1.length - 1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void notifyPackageRemoved(java.lang.String r4, int r5) {
        /*
            r3 = this;
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r3.mPackages
            monitor-enter(r0)
            android.util.ArraySet<android.content.pm.PackageManagerInternal$PackageListObserver> r1 = r3.mPackageListObservers     // Catch:{ all -> 0x002d }
            int r1 = r1.size()     // Catch:{ all -> 0x002d }
            if (r1 != 0) goto L_0x000d
            monitor-exit(r0)     // Catch:{ all -> 0x002d }
            return
        L_0x000d:
            android.util.ArraySet<android.content.pm.PackageManagerInternal$PackageListObserver> r1 = r3.mPackageListObservers     // Catch:{ all -> 0x002d }
            int r1 = r1.size()     // Catch:{ all -> 0x002d }
            android.content.pm.PackageManagerInternal$PackageListObserver[] r1 = new android.content.pm.PackageManagerInternal.PackageListObserver[r1]     // Catch:{ all -> 0x002d }
            android.util.ArraySet<android.content.pm.PackageManagerInternal$PackageListObserver> r2 = r3.mPackageListObservers     // Catch:{ all -> 0x002d }
            java.lang.Object[] r2 = r2.toArray(r1)     // Catch:{ all -> 0x002d }
            android.content.pm.PackageManagerInternal$PackageListObserver[] r2 = (android.content.pm.PackageManagerInternal.PackageListObserver[]) r2     // Catch:{ all -> 0x002d }
            r1 = r2
            monitor-exit(r0)     // Catch:{ all -> 0x002d }
            int r0 = r1.length
            int r0 = r0 + -1
        L_0x0022:
            if (r0 < 0) goto L_0x002c
            r2 = r1[r0]
            r2.onPackageRemoved(r4, r5)
            int r0 = r0 + -1
            goto L_0x0022
        L_0x002c:
            return
        L_0x002d:
            r1 = move-exception
            monitor-exit(r0)     // Catch:{ all -> 0x002d }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.notifyPackageRemoved(java.lang.String, int):void");
    }

    private void doSendBroadcast(IActivityManager am, String action, String pkg, Bundle extras, int flags, String targetPkg, IIntentReceiver finishedReceiver, int[] userIds, boolean isInstantApp) throws RemoteException {
        String str = pkg;
        Bundle bundle = extras;
        String str2 = targetPkg;
        for (int id : userIds) {
            Intent intent = new Intent(action, str != null ? Uri.fromParts("package", str, (String) null) : null);
            String[] requiredPermissions = isInstantApp ? INSTANT_APP_BROADCAST_PERMISSION : null;
            if (bundle != null) {
                intent.putExtras(bundle);
            }
            if (str2 != null) {
                intent.setPackage(str2);
            }
            int uid = intent.getIntExtra("android.intent.extra.UID", -1);
            if (uid <= 0 || UserHandle.getUserId(uid) == id) {
                int i = uid;
            } else {
                int uid2 = UserHandle.getUid(id, UserHandle.getAppId(uid));
                intent.putExtra("android.intent.extra.UID", uid2);
                int i2 = uid2;
            }
            intent.putExtra("android.intent.extra.user_handle", id);
            intent.addFlags(flags | BroadcastQueueInjector.FLAG_IMMUTABLE);
            Intent intent2 = intent;
            am.broadcastIntent((IApplicationThread) null, intent, (String) null, finishedReceiver, 0, (String) null, (Bundle) null, requiredPermissions, -1, (Bundle) null, finishedReceiver != null, false, id);
        }
    }

    private boolean isExternalMediaAvailable() {
        return this.mMediaMounted || Environment.isExternalStorageEmulated();
    }

    /* access modifiers changed from: private */
    public int fixUpInstallReason(String installerPackageName, int installerUid, int installReason) {
        if (checkUidPermission("android.permission.INSTALL_PACKAGES", installerUid) == 0) {
            return installReason;
        }
        String ownerPackage = this.mProtectedPackages.getDeviceOwnerOrProfileOwnerPackage(UserHandle.getUserId(installerUid));
        if (ownerPackage != null && ownerPackage.equals(installerPackageName)) {
            return 1;
        }
        if (installReason == 1) {
            return 0;
        }
        return installReason;
    }

    /* access modifiers changed from: package-private */
    public void installStage(ActiveInstallSession activeInstallSession) {
        if (DEBUG_INSTANT && (activeInstallSession.getSessionParams().installFlags & 2048) != 0) {
            Slog.d(TAG, "Ephemeral install of " + activeInstallSession.getPackageName());
        }
        Message msg = this.mHandler.obtainMessage(5);
        InstallParams params = new InstallParams(activeInstallSession);
        params.setTraceMethod("installStage").setTraceCookie(System.identityHashCode(params));
        msg.obj = params;
        if (PackageManagerServiceInjector.checkAndRunPreInstallation(this.mHandler, msg, activeInstallSession.getInstallerUid(), activeInstallSession.getPackageName())) {
            Slog.d(TAG, "need preinstall app");
            return;
        }
        params.statistic = activeInstallSession.getInstallationStatistic();
        Trace.asyncTraceBegin(262144, "installStage", System.identityHashCode(msg.obj));
        Trace.asyncTraceBegin(262144, "queueInstall", System.identityHashCode(msg.obj));
        this.mHandler.sendMessage(msg);
    }

    /* access modifiers changed from: package-private */
    public void installStage(List<ActiveInstallSession> children) throws PackageManagerException {
        Message msg = this.mHandler.obtainMessage(5);
        MultiPackageInstallParams params = new MultiPackageInstallParams(UserHandle.ALL, children);
        params.setTraceMethod("installStageMultiPackage").setTraceCookie(System.identityHashCode(params));
        msg.obj = params;
        Trace.asyncTraceBegin(262144, "installStageMultiPackage", System.identityHashCode(msg.obj));
        Trace.asyncTraceBegin(262144, "queueInstall", System.identityHashCode(msg.obj));
        this.mHandler.sendMessage(msg);
    }

    private void sendPackageAddedForUser(String packageName, PackageSetting pkgSetting, int userId) {
        boolean isSystem = isSystemApp(pkgSetting) || isUpdatedSystemApp(pkgSetting);
        boolean isInstantApp = pkgSetting.getInstantApp(userId);
        sendPackageAddedForNewUsers(packageName, isSystem, false, pkgSetting.appId, isInstantApp ? EMPTY_INT_ARRAY : new int[]{userId}, isInstantApp ? new int[]{userId} : EMPTY_INT_ARRAY);
        PackageInstaller.SessionInfo info = new PackageInstaller.SessionInfo();
        info.installReason = pkgSetting.getInstallReason(userId);
        info.appPackageName = packageName;
        sendSessionCommitBroadcast(info, userId);
    }

    public void sendPackageAddedForNewUsers(String packageName, boolean sendBootCompleted, boolean includeStopped, int appId, int[] userIds, int[] instantUserIds) {
        sendPackageAddedForNewUsers(packageName, sendBootCompleted, includeStopped, appId, userIds, instantUserIds, false);
    }

    public void sendPackageAddedForNewUsers(String packageName, boolean sendBootCompleted, boolean includeStopped, int appId, int[] userIds, int[] instantUserIds, boolean grantRuntime) {
        int[] iArr = userIds;
        if (!ArrayUtils.isEmpty(userIds) || !ArrayUtils.isEmpty(instantUserIds)) {
            Bundle extras = new Bundle(1);
            extras.putInt("android.intent.extra.UID", UserHandle.getUid(ArrayUtils.isEmpty(userIds) ? instantUserIds[0] : iArr[0], appId));
            if (grantRuntime) {
                extras.putBoolean("grant_runtime_permissions", true);
            }
            sendPackageBroadcast("android.intent.action.PACKAGE_ADDED", packageName, extras, 0, (String) null, (IIntentReceiver) null, userIds, instantUserIds);
            if (!sendBootCompleted || ArrayUtils.isEmpty(userIds)) {
                String str = packageName;
                boolean z = includeStopped;
                return;
            }
            String str2 = packageName;
            this.mHandler.post(new Runnable(iArr, packageName, includeStopped) {
                private final /* synthetic */ int[] f$1;
                private final /* synthetic */ String f$2;
                private final /* synthetic */ boolean f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    PackageManagerService.this.lambda$sendPackageAddedForNewUsers$9$PackageManagerService(this.f$1, this.f$2, this.f$3);
                }
            });
        }
    }

    public /* synthetic */ void lambda$sendPackageAddedForNewUsers$9$PackageManagerService(int[] userIds, String packageName, boolean includeStopped) {
        for (int userId : userIds) {
            sendBootCompletedBroadcastToSystemApp(packageName, includeStopped, userId);
        }
    }

    private void sendBootCompletedBroadcastToSystemApp(String packageName, boolean includeStopped, int userId) {
        String str = packageName;
        int i = userId;
        if (this.mUserManagerInternal.isUserRunning(i)) {
            IActivityManager am = ActivityManager.getService();
            try {
                Intent lockedBcIntent = new Intent("android.intent.action.LOCKED_BOOT_COMPLETED").setPackage(str);
                if (includeStopped) {
                    lockedBcIntent.addFlags(32);
                }
                String[] requiredPermissions = {"android.permission.RECEIVE_BOOT_COMPLETED"};
                try {
                    am.broadcastIntent((IApplicationThread) null, lockedBcIntent, (String) null, (IIntentReceiver) null, 0, (String) null, (Bundle) null, requiredPermissions, -1, (Bundle) null, false, false, userId);
                    try {
                        if (this.mUserManagerInternal.isUserUnlockingOrUnlocked(userId)) {
                            Intent bcIntent = new Intent("android.intent.action.BOOT_COMPLETED").setPackage(str);
                            if (includeStopped) {
                                bcIntent.addFlags(32);
                            }
                            am.broadcastIntent((IApplicationThread) null, bcIntent, (String) null, (IIntentReceiver) null, 0, (String) null, (Bundle) null, requiredPermissions, -1, (Bundle) null, false, false, userId);
                        }
                    } catch (RemoteException e) {
                        e = e;
                        throw e.rethrowFromSystemServer();
                    }
                } catch (RemoteException e2) {
                    e = e2;
                    int i2 = userId;
                    throw e.rethrowFromSystemServer();
                }
            } catch (RemoteException e3) {
                e = e3;
                int i3 = i;
                throw e.rethrowFromSystemServer();
            }
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 12 */
    /* JADX WARNING: Code restructure failed: missing block: B:58:0x00fa, code lost:
        if (r4 == false) goto L_0x0104;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:60:?, code lost:
        sendPackageAddedForUser(r13, r7, r15);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:61:0x00ff, code lost:
        android.os.Binder.restoreCallingIdentity(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:62:0x0103, code lost:
        return true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:63:0x0104, code lost:
        if (r5 == false) goto L_0x011a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:65:?, code lost:
        killApplication(r13, android.os.UserHandle.getUid(r15, r7.appId), "hiding pkg");
        sendApplicationHiddenForUser(r13, r7, r15);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:66:0x0115, code lost:
        android.os.Binder.restoreCallingIdentity(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:67:0x0119, code lost:
        return true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:68:0x011a, code lost:
        android.os.Binder.restoreCallingIdentity(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:69:0x011e, code lost:
        return false;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean setApplicationHiddenSettingAsUser(java.lang.String r13, boolean r14, int r15) {
        /*
            r12 = this;
            android.content.Context r0 = r12.mContext
            java.lang.String r1 = "android.permission.MANAGE_USERS"
            r2 = 0
            r0.enforceCallingOrSelfPermission(r1, r2)
            int r0 = android.os.Binder.getCallingUid()
            com.android.server.pm.permission.PermissionManagerServiceInternal r3 = r12.mPermissionManager
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "setApplicationHiddenSetting for user "
            r1.append(r2)
            r1.append(r15)
            java.lang.String r8 = r1.toString()
            r6 = 1
            r7 = 1
            r4 = r0
            r5 = r15
            r3.enforceCrossUserPermission(r4, r5, r6, r7, r8)
            r1 = 0
            if (r14 == 0) goto L_0x004c
            boolean r2 = r12.isPackageDeviceAdmin(r13, r15)
            if (r2 == 0) goto L_0x004c
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r3 = "Not hiding package "
            r2.append(r3)
            r2.append(r13)
            java.lang.String r3 = ": has active device admin"
            r2.append(r3)
            java.lang.String r2 = r2.toString()
            java.lang.String r3 = "PackageManager"
            android.util.Slog.w(r3, r2)
            return r1
        L_0x004c:
            long r2 = android.os.Binder.clearCallingIdentity()
            r4 = 0
            r5 = 0
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r6 = r12.mPackages     // Catch:{ all -> 0x0122 }
            monitor-enter(r6)     // Catch:{ all -> 0x0122 }
            com.android.server.pm.Settings r7 = r12.mSettings     // Catch:{ all -> 0x011f }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r7 = r7.mPackages     // Catch:{ all -> 0x011f }
            java.lang.Object r7 = r7.get(r13)     // Catch:{ all -> 0x011f }
            com.android.server.pm.PackageSetting r7 = (com.android.server.pm.PackageSetting) r7     // Catch:{ all -> 0x011f }
            if (r7 != 0) goto L_0x0066
            monitor-exit(r6)     // Catch:{ all -> 0x011f }
            android.os.Binder.restoreCallingIdentity(r2)
            return r1
        L_0x0066:
            boolean r8 = r12.filterAppAccessLPr(r7, r0, r15)     // Catch:{ all -> 0x011f }
            if (r8 == 0) goto L_0x0071
            monitor-exit(r6)     // Catch:{ all -> 0x011f }
            android.os.Binder.restoreCallingIdentity(r2)
            return r1
        L_0x0071:
            java.lang.String r8 = "android"
            boolean r8 = r8.equals(r13)     // Catch:{ all -> 0x011f }
            if (r8 == 0) goto L_0x0085
            java.lang.String r8 = "PackageManager"
            java.lang.String r9 = "Cannot hide package: android"
            android.util.Slog.w(r8, r9)     // Catch:{ all -> 0x011f }
            monitor-exit(r6)     // Catch:{ all -> 0x011f }
            android.os.Binder.restoreCallingIdentity(r2)
            return r1
        L_0x0085:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r8 = r12.mPackages     // Catch:{ all -> 0x011f }
            java.lang.Object r8 = r8.get(r13)     // Catch:{ all -> 0x011f }
            android.content.pm.PackageParser$Package r8 = (android.content.pm.PackageParser.Package) r8     // Catch:{ all -> 0x011f }
            if (r8 == 0) goto L_0x00b8
            java.lang.String r9 = r8.staticSharedLibName     // Catch:{ all -> 0x011f }
            if (r9 == 0) goto L_0x00b8
            java.lang.String r9 = "PackageManager"
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ all -> 0x011f }
            r10.<init>()     // Catch:{ all -> 0x011f }
            java.lang.String r11 = "Cannot hide package: "
            r10.append(r11)     // Catch:{ all -> 0x011f }
            r10.append(r13)     // Catch:{ all -> 0x011f }
            java.lang.String r11 = " providing static shared library: "
            r10.append(r11)     // Catch:{ all -> 0x011f }
            java.lang.String r11 = r8.staticSharedLibName     // Catch:{ all -> 0x011f }
            r10.append(r11)     // Catch:{ all -> 0x011f }
            java.lang.String r10 = r10.toString()     // Catch:{ all -> 0x011f }
            android.util.Slog.w(r9, r10)     // Catch:{ all -> 0x011f }
            monitor-exit(r6)     // Catch:{ all -> 0x011f }
            android.os.Binder.restoreCallingIdentity(r2)
            return r1
        L_0x00b8:
            if (r14 == 0) goto L_0x00e5
            int r9 = r7.appId     // Catch:{ all -> 0x011f }
            boolean r9 = android.os.UserHandle.isSameApp(r0, r9)     // Catch:{ all -> 0x011f }
            if (r9 != 0) goto L_0x00e5
            com.android.server.pm.ProtectedPackages r9 = r12.mProtectedPackages     // Catch:{ all -> 0x011f }
            boolean r9 = r9.isPackageStateProtected(r15, r13)     // Catch:{ all -> 0x011f }
            if (r9 == 0) goto L_0x00e5
            java.lang.String r9 = "PackageManager"
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ all -> 0x011f }
            r10.<init>()     // Catch:{ all -> 0x011f }
            java.lang.String r11 = "Not hiding protected package: "
            r10.append(r11)     // Catch:{ all -> 0x011f }
            r10.append(r13)     // Catch:{ all -> 0x011f }
            java.lang.String r10 = r10.toString()     // Catch:{ all -> 0x011f }
            android.util.Slog.w(r9, r10)     // Catch:{ all -> 0x011f }
            monitor-exit(r6)     // Catch:{ all -> 0x011f }
            android.os.Binder.restoreCallingIdentity(r2)
            return r1
        L_0x00e5:
            boolean r9 = r7.getHidden(r15)     // Catch:{ all -> 0x011f }
            if (r9 == r14) goto L_0x00f8
            r7.setHidden(r14, r15)     // Catch:{ all -> 0x011f }
            com.android.server.pm.Settings r9 = r12.mSettings     // Catch:{ all -> 0x011f }
            r9.writePackageRestrictionsLPr(r15)     // Catch:{ all -> 0x011f }
            if (r14 == 0) goto L_0x00f7
            r5 = 1
            goto L_0x00f8
        L_0x00f7:
            r4 = 1
        L_0x00f8:
            monitor-exit(r6)     // Catch:{ all -> 0x011f }
            r6 = 1
            if (r4 == 0) goto L_0x0104
            r12.sendPackageAddedForUser(r13, r7, r15)     // Catch:{ all -> 0x0122 }
            android.os.Binder.restoreCallingIdentity(r2)
            return r6
        L_0x0104:
            if (r5 == 0) goto L_0x011a
            int r1 = r7.appId     // Catch:{ all -> 0x0122 }
            int r1 = android.os.UserHandle.getUid(r15, r1)     // Catch:{ all -> 0x0122 }
            java.lang.String r8 = "hiding pkg"
            r12.killApplication(r13, r1, r8)     // Catch:{ all -> 0x0122 }
            r12.sendApplicationHiddenForUser(r13, r7, r15)     // Catch:{ all -> 0x0122 }
            android.os.Binder.restoreCallingIdentity(r2)
            return r6
        L_0x011a:
            android.os.Binder.restoreCallingIdentity(r2)
            return r1
        L_0x011f:
            r1 = move-exception
            monitor-exit(r6)     // Catch:{ all -> 0x011f }
            throw r1     // Catch:{ all -> 0x0122 }
        L_0x0122:
            r1 = move-exception
            android.os.Binder.restoreCallingIdentity(r2)
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.setApplicationHiddenSettingAsUser(java.lang.String, boolean, int):boolean");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:23:0x0040, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:25:0x0042, code lost:
        return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void setSystemAppHiddenUntilInstalled(java.lang.String r6, boolean r7) {
        /*
            r5 = this;
            java.lang.String r0 = "setSystemAppHiddenUntilInstalled"
            enforceSystemOrPhoneCaller(r0)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r5.mPackages
            monitor-enter(r0)
            com.android.server.pm.Settings r1 = r5.mSettings     // Catch:{ all -> 0x0043 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r1 = r1.mPackages     // Catch:{ all -> 0x0043 }
            java.lang.Object r1 = r1.get(r6)     // Catch:{ all -> 0x0043 }
            com.android.server.pm.PackageSetting r1 = (com.android.server.pm.PackageSetting) r1     // Catch:{ all -> 0x0043 }
            if (r1 == 0) goto L_0x0041
            boolean r2 = r1.isSystem()     // Catch:{ all -> 0x0043 }
            if (r2 != 0) goto L_0x001c
            goto L_0x0041
        L_0x001c:
            android.content.pm.PackageParser$Package r2 = r1.pkg     // Catch:{ all -> 0x0043 }
            if (r2 == 0) goto L_0x0028
            android.content.pm.ApplicationInfo r3 = r2.applicationInfo     // Catch:{ all -> 0x0043 }
            if (r3 == 0) goto L_0x0028
            android.content.pm.ApplicationInfo r3 = r2.applicationInfo     // Catch:{ all -> 0x0043 }
            r3.hiddenUntilInstalled = r7     // Catch:{ all -> 0x0043 }
        L_0x0028:
            com.android.server.pm.Settings r3 = r5.mSettings     // Catch:{ all -> 0x0043 }
            com.android.server.pm.PackageSetting r3 = r3.getDisabledSystemPkgLPr((java.lang.String) r6)     // Catch:{ all -> 0x0043 }
            if (r3 != 0) goto L_0x0032
            monitor-exit(r0)     // Catch:{ all -> 0x0043 }
            return
        L_0x0032:
            android.content.pm.PackageParser$Package r4 = r3.pkg     // Catch:{ all -> 0x0043 }
            r2 = r4
            if (r2 == 0) goto L_0x003f
            android.content.pm.ApplicationInfo r4 = r2.applicationInfo     // Catch:{ all -> 0x0043 }
            if (r4 == 0) goto L_0x003f
            android.content.pm.ApplicationInfo r4 = r2.applicationInfo     // Catch:{ all -> 0x0043 }
            r4.hiddenUntilInstalled = r7     // Catch:{ all -> 0x0043 }
        L_0x003f:
            monitor-exit(r0)     // Catch:{ all -> 0x0043 }
            return
        L_0x0041:
            monitor-exit(r0)     // Catch:{ all -> 0x0043 }
            return
        L_0x0043:
            r1 = move-exception
            monitor-exit(r0)     // Catch:{ all -> 0x0043 }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.setSystemAppHiddenUntilInstalled(java.lang.String, boolean):void");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:13:0x0026, code lost:
        r0 = android.os.Binder.clearCallingIdentity();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:14:0x002b, code lost:
        if (r11 == false) goto L_0x003c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:17:?, code lost:
        installExistingPackageAsUser(r10, r12, 4194304, 3, (java.util.List<java.lang.String>) null);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:19:0x003b, code lost:
        return true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:21:?, code lost:
        deletePackageVersioned(new android.content.pm.VersionedPackage(r10, -1), new android.content.pm.PackageManager.LegacyPackageDeleteObserver((android.content.pm.IPackageDeleteObserver) null).getBinder(), r12, 4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:0x0050, code lost:
        android.os.Binder.restoreCallingIdentity(r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x0054, code lost:
        return true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x0055, code lost:
        r2 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:25:0x0056, code lost:
        android.os.Binder.restoreCallingIdentity(r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x0059, code lost:
        throw r2;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean setSystemAppInstallState(java.lang.String r10, boolean r11, int r12) {
        /*
            r9 = this;
            java.lang.String r0 = "setSystemAppInstallState"
            enforceSystemOrPhoneCaller(r0)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r9.mPackages
            monitor-enter(r0)
            com.android.server.pm.Settings r1 = r9.mSettings     // Catch:{ all -> 0x005c }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r1 = r1.mPackages     // Catch:{ all -> 0x005c }
            java.lang.Object r1 = r1.get(r10)     // Catch:{ all -> 0x005c }
            com.android.server.pm.PackageSetting r1 = (com.android.server.pm.PackageSetting) r1     // Catch:{ all -> 0x005c }
            r2 = 0
            if (r1 == 0) goto L_0x005a
            boolean r3 = r1.isSystem()     // Catch:{ all -> 0x005c }
            if (r3 != 0) goto L_0x001d
            goto L_0x005a
        L_0x001d:
            boolean r3 = r1.getInstalled(r12)     // Catch:{ all -> 0x005c }
            if (r3 != r11) goto L_0x0025
            monitor-exit(r0)     // Catch:{ all -> 0x005c }
            return r2
        L_0x0025:
            monitor-exit(r0)     // Catch:{ all -> 0x005c }
            long r0 = android.os.Binder.clearCallingIdentity()
            r2 = 1
            if (r11 == 0) goto L_0x003c
            r6 = 4194304(0x400000, float:5.877472E-39)
            r7 = 3
            r8 = 0
            r3 = r9
            r4 = r10
            r5 = r12
            r3.installExistingPackageAsUser(r4, r5, r6, r7, r8)     // Catch:{ all -> 0x0055 }
            android.os.Binder.restoreCallingIdentity(r0)
            return r2
        L_0x003c:
            android.content.pm.VersionedPackage r3 = new android.content.pm.VersionedPackage     // Catch:{ all -> 0x0055 }
            r4 = -1
            r3.<init>(r10, r4)     // Catch:{ all -> 0x0055 }
            android.content.pm.PackageManager$LegacyPackageDeleteObserver r4 = new android.content.pm.PackageManager$LegacyPackageDeleteObserver     // Catch:{ all -> 0x0055 }
            r5 = 0
            r4.<init>(r5)     // Catch:{ all -> 0x0055 }
            android.content.pm.IPackageDeleteObserver2 r4 = r4.getBinder()     // Catch:{ all -> 0x0055 }
            r5 = 4
            r9.deletePackageVersioned(r3, r4, r12, r5)     // Catch:{ all -> 0x0055 }
            android.os.Binder.restoreCallingIdentity(r0)
            return r2
        L_0x0055:
            r2 = move-exception
            android.os.Binder.restoreCallingIdentity(r0)
            throw r2
        L_0x005a:
            monitor-exit(r0)     // Catch:{ all -> 0x005c }
            return r2
        L_0x005c:
            r1 = move-exception
            monitor-exit(r0)     // Catch:{ all -> 0x005c }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.setSystemAppInstallState(java.lang.String, boolean, int):boolean");
    }

    private void sendApplicationHiddenForUser(String packageName, PackageSetting pkgSetting, int userId) {
        PackageRemovedInfo info = new PackageRemovedInfo(this);
        info.removedPackage = packageName;
        info.installerPackageName = pkgSetting.installerPackageName;
        info.removedUsers = new int[]{userId};
        info.broadcastUsers = new int[]{userId};
        info.uid = UserHandle.getUid(userId, pkgSetting.appId);
        info.sendPackageRemovedBroadcasts(true);
    }

    private void sendDistractingPackagesChanged(String[] pkgList, int[] uidList, int userId, int distractionFlags) {
        Bundle extras = new Bundle(3);
        extras.putStringArray("android.intent.extra.changed_package_list", pkgList);
        extras.putIntArray("android.intent.extra.changed_uid_list", uidList);
        extras.putInt("android.intent.extra.distraction_restrictions", distractionFlags);
        sendPackageBroadcast("android.intent.action.DISTRACTING_PACKAGES_CHANGED", (String) null, extras, 1073741824, (String) null, (IIntentReceiver) null, new int[]{userId}, (int[]) null);
    }

    private void sendPackagesSuspendedForUser(String[] pkgList, int[] uidList, int userId, boolean suspended, PersistableBundle launcherExtras) {
        String str;
        Bundle extras = new Bundle(3);
        String[] strArr = pkgList;
        extras.putStringArray("android.intent.extra.changed_package_list", pkgList);
        int[] iArr = uidList;
        extras.putIntArray("android.intent.extra.changed_uid_list", uidList);
        if (launcherExtras != null) {
            extras.putBundle("android.intent.extra.LAUNCHER_EXTRAS", new Bundle(launcherExtras.deepCopy()));
        }
        if (suspended) {
            str = "android.intent.action.PACKAGES_SUSPENDED";
        } else {
            str = "android.intent.action.PACKAGES_UNSUSPENDED";
        }
        sendPackageBroadcast(str, (String) null, extras, 1073741824, (String) null, (IIntentReceiver) null, new int[]{userId}, (int[]) null);
    }

    /* Debug info: failed to restart local var, previous not found, register: 9 */
    public boolean getApplicationHiddenSettingAsUser(String packageName, int userId) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.MANAGE_USERS", (String) null);
        int callingUid = Binder.getCallingUid();
        PermissionManagerServiceInternal permissionManagerServiceInternal = this.mPermissionManager;
        permissionManagerServiceInternal.enforceCrossUserPermission(callingUid, userId, true, false, "getApplicationHidden for user " + userId);
        long callingId = Binder.clearCallingIdentity();
        try {
            synchronized (this.mPackages) {
                PackageSetting ps = this.mSettings.mPackages.get(packageName);
                if (ps == null) {
                    Binder.restoreCallingIdentity(callingId);
                    return true;
                } else if (filterAppAccessLPr(ps, callingUid, userId)) {
                    Binder.restoreCallingIdentity(callingId);
                    return true;
                } else {
                    boolean hidden = ps.getHidden(userId);
                    Binder.restoreCallingIdentity(callingId);
                    return hidden;
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(callingId);
            throw th;
        }
    }

    public int installExistingPackageAsUser(String packageName, int userId, int installFlags, int installReason, List<String> whiteListedPermissions) {
        return installExistingPackageAsUser(packageName, userId, installFlags, installReason, whiteListedPermissions, (IntentSender) null);
    }

    /* Debug info: failed to restart local var, previous not found, register: 21 */
    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:100:0x0175, code lost:
        android.os.Binder.restoreCallingIdentity(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:101:0x017a, code lost:
        return 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:110:0x0184, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:55:0x0105, code lost:
        if (r5 == false) goto L_0x0171;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:57:0x010a, code lost:
        if ((4194304 & r10) == 0) goto L_0x0116;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:60:0x010e, code lost:
        if (r15.pkg == null) goto L_0x0116;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:62:0x0114, code lost:
        r7 = r15.pkg.requestedPermissions;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:63:0x0116, code lost:
        r7 = r26;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:66:?, code lost:
        setWhitelistedRestrictedPermissions(r2, r7, 2, r9);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:67:0x011e, code lost:
        if (r15.pkg == null) goto L_0x012d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:68:0x0120, code lost:
        r14 = r1.mInstallLock;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:69:0x0122, code lost:
        monitor-enter(r14);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:71:?, code lost:
        prepareAppDataAfterInstallLIF(r15.pkg);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:72:0x0128, code lost:
        monitor-exit(r14);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:78:0x012d, code lost:
        sendPackageAddedForUser(r2, r15, r9);
        r14 = r1.mPackages;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:79:0x0132, code lost:
        monitor-enter(r14);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:82:?, code lost:
        updateSequenceNumberLP(r15, new int[]{r9});
     */
    /* JADX WARNING: Code restructure failed: missing block: B:83:0x013c, code lost:
        monitor-exit(r14);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:86:?, code lost:
        r0 = createPackageInstalledInfo(1);
        r0.pkg = r15.pkg;
        r0.newUsers = new int[]{r9};
     */
    /* JADX WARNING: Code restructure failed: missing block: B:87:0x0150, code lost:
        if (r11 != null) goto L_0x0156;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:88:0x0152, code lost:
        r16 = r5;
        r14 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:89:0x0156, code lost:
        r16 = r5;
        r14 = new com.android.server.pm.PackageManagerService.PostInstallData((com.android.server.pm.PackageManagerService.InstallArgs) null, r0, new com.android.server.pm.$$Lambda$PackageManagerService$TfnapVkUze7EtdWImq0cww0iVcc(r1, r0, r11));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:90:0x0163, code lost:
        restoreAndPostInstall(r9, r0, r14);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:91:0x0168, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:92:0x0169, code lost:
        r16 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:?, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:97:0x016d, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:98:0x016f, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:99:0x0171, code lost:
        r16 = r5;
        r7 = r26;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public int installExistingPackageAsUser(java.lang.String r22, int r23, int r24, int r25, java.util.List<java.lang.String> r26, android.content.IntentSender r27) {
        /*
            r21 = this;
            r1 = r21
            r2 = r22
            r9 = r23
            r10 = r24
            r11 = r27
            int r12 = android.os.Binder.getCallingUid()
            android.content.Context r0 = r1.mContext
            java.lang.String r3 = "android.permission.INSTALL_PACKAGES"
            int r0 = r0.checkCallingOrSelfPermission(r3)
            if (r0 == 0) goto L_0x0049
            android.content.Context r0 = r1.mContext
            java.lang.String r3 = "com.android.permission.INSTALL_EXISTING_PACKAGES"
            int r0 = r0.checkCallingOrSelfPermission(r3)
            if (r0 != 0) goto L_0x0023
            goto L_0x0049
        L_0x0023:
            java.lang.SecurityException r0 = new java.lang.SecurityException
            java.lang.StringBuilder r3 = new java.lang.StringBuilder
            r3.<init>()
            java.lang.String r4 = "Neither user "
            r3.append(r4)
            r3.append(r12)
            java.lang.String r4 = " nor current process has "
            r3.append(r4)
            java.lang.String r4 = "android.permission.INSTALL_PACKAGES"
            r3.append(r4)
            java.lang.String r4 = "."
            r3.append(r4)
            java.lang.String r3 = r3.toString()
            r0.<init>(r3)
            throw r0
        L_0x0049:
            com.android.server.pm.permission.PermissionManagerServiceInternal r3 = r1.mPermissionManager
            r6 = 1
            r7 = 1
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r4 = "installExistingPackage for user "
            r0.append(r4)
            r0.append(r9)
            java.lang.String r8 = r0.toString()
            r4 = r12
            r5 = r23
            r3.enforceCrossUserPermission(r4, r5, r6, r7, r8)
            java.lang.String r0 = "no_install_apps"
            boolean r0 = r1.isUserRestricted(r9, r0)
            if (r0 == 0) goto L_0x0071
            r0 = -111(0xffffffffffffff91, float:NaN)
            return r0
        L_0x0071:
            long r3 = android.os.Binder.clearCallingIdentity()
            r5 = 0
            r0 = r10 & 2048(0x800, float:2.87E-42)
            if (r0 == 0) goto L_0x007c
            r0 = 1
            goto L_0x007d
        L_0x007c:
            r0 = 0
        L_0x007d:
            r8 = r0
            r0 = r10 & 16384(0x4000, float:2.2959E-41)
            if (r0 == 0) goto L_0x0084
            r0 = 1
            goto L_0x0085
        L_0x0084:
            r0 = 0
        L_0x0085:
            r13 = r0
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r14 = r1.mPackages     // Catch:{ all -> 0x0188 }
            monitor-enter(r14)     // Catch:{ all -> 0x0188 }
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x017f }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r0 = r0.mPackages     // Catch:{ all -> 0x017f }
            java.lang.Object r0 = r0.get(r2)     // Catch:{ all -> 0x017f }
            com.android.server.pm.PackageSetting r0 = (com.android.server.pm.PackageSetting) r0     // Catch:{ all -> 0x017f }
            r15 = r0
            r0 = -3
            if (r15 != 0) goto L_0x009c
            monitor-exit(r14)     // Catch:{ all -> 0x017f }
            android.os.Binder.restoreCallingIdentity(r3)
            return r0
        L_0x009c:
            int r6 = android.os.UserHandle.getUserId(r12)     // Catch:{ all -> 0x017f }
            boolean r6 = r1.canViewInstantApps(r12, r6)     // Catch:{ all -> 0x017f }
            if (r6 != 0) goto L_0x00d5
            r6 = 0
            com.android.server.pm.UserManagerService r17 = sUserManager     // Catch:{ all -> 0x017f }
            int[] r0 = r17.getUserIds()     // Catch:{ all -> 0x017f }
            int r7 = r0.length     // Catch:{ all -> 0x017f }
            r18 = r6
            r6 = 0
        L_0x00b1:
            if (r6 >= r7) goto L_0x00cd
            r19 = r0[r6]     // Catch:{ all -> 0x017f }
            r20 = r19
            r19 = r0
            r0 = r20
            boolean r20 = r15.getInstantApp(r0)     // Catch:{ all -> 0x017f }
            r17 = 1
            r20 = r20 ^ 1
            r18 = r20
            if (r18 == 0) goto L_0x00c8
            goto L_0x00cd
        L_0x00c8:
            int r6 = r6 + 1
            r0 = r19
            goto L_0x00b1
        L_0x00cd:
            if (r18 != 0) goto L_0x00d5
            monitor-exit(r14)     // Catch:{ all -> 0x017f }
            android.os.Binder.restoreCallingIdentity(r3)
            r0 = -3
            return r0
        L_0x00d5:
            boolean r0 = r15.getInstalled(r9)     // Catch:{ all -> 0x017f }
            if (r0 != 0) goto L_0x00f5
            r0 = 1
            r15.setInstalled(r0, r9)     // Catch:{ all -> 0x017f }
            r0 = 0
            r15.setHidden(r0, r9)     // Catch:{ all -> 0x017f }
            r6 = r25
            r15.setInstallReason(r6, r9)     // Catch:{ all -> 0x0186 }
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0186 }
            r0.writePackageRestrictionsLPr(r9)     // Catch:{ all -> 0x0186 }
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0186 }
            r0.writeKernelMappingLPr(r15)     // Catch:{ all -> 0x0186 }
            r0 = 1
            r5 = r0
            goto L_0x0101
        L_0x00f5:
            r6 = r25
            if (r13 == 0) goto L_0x0101
            boolean r0 = r15.getInstantApp(r9)     // Catch:{ all -> 0x0186 }
            if (r0 == 0) goto L_0x0101
            r0 = 1
            r5 = r0
        L_0x0101:
            setInstantAppForUser(r15, r9, r8, r13)     // Catch:{ all -> 0x017b }
            monitor-exit(r14)     // Catch:{ all -> 0x017b }
            if (r5 == 0) goto L_0x0171
            r0 = 4194304(0x400000, float:5.877472E-39)
            r0 = r0 & r10
            if (r0 == 0) goto L_0x0116
            android.content.pm.PackageParser$Package r0 = r15.pkg     // Catch:{ all -> 0x0184 }
            if (r0 == 0) goto L_0x0116
            android.content.pm.PackageParser$Package r0 = r15.pkg     // Catch:{ all -> 0x0184 }
            java.util.ArrayList r0 = r0.requestedPermissions     // Catch:{ all -> 0x0184 }
            r7 = r0
            goto L_0x0118
        L_0x0116:
            r7 = r26
        L_0x0118:
            r0 = 2
            r1.setWhitelistedRestrictedPermissions(r2, r7, r0, r9)     // Catch:{ all -> 0x016f }
            android.content.pm.PackageParser$Package r0 = r15.pkg     // Catch:{ all -> 0x016f }
            if (r0 == 0) goto L_0x012d
            java.lang.Object r14 = r1.mInstallLock     // Catch:{ all -> 0x016f }
            monitor-enter(r14)     // Catch:{ all -> 0x016f }
            android.content.pm.PackageParser$Package r0 = r15.pkg     // Catch:{ all -> 0x012a }
            r1.prepareAppDataAfterInstallLIF(r0)     // Catch:{ all -> 0x012a }
            monitor-exit(r14)     // Catch:{ all -> 0x012a }
            goto L_0x012d
        L_0x012a:
            r0 = move-exception
            monitor-exit(r14)     // Catch:{ all -> 0x012a }
            throw r0     // Catch:{ all -> 0x016f }
        L_0x012d:
            r1.sendPackageAddedForUser(r2, r15, r9)     // Catch:{ all -> 0x016f }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r14 = r1.mPackages     // Catch:{ all -> 0x016f }
            monitor-enter(r14)     // Catch:{ all -> 0x016f }
            r0 = 1
            int[] r2 = new int[r0]     // Catch:{ all -> 0x0168 }
            r0 = 0
            r2[r0] = r9     // Catch:{ all -> 0x0168 }
            r1.updateSequenceNumberLP(r15, r2)     // Catch:{ all -> 0x0168 }
            monitor-exit(r14)     // Catch:{ all -> 0x0168 }
            r0 = 1
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r2 = r1.createPackageInstalledInfo(r0)     // Catch:{ all -> 0x016f }
            r0 = r2
            android.content.pm.PackageParser$Package r2 = r15.pkg     // Catch:{ all -> 0x016f }
            r0.pkg = r2     // Catch:{ all -> 0x016f }
            r2 = 1
            int[] r14 = new int[r2]     // Catch:{ all -> 0x016f }
            r2 = 0
            r14[r2] = r9     // Catch:{ all -> 0x016f }
            r0.newUsers = r14     // Catch:{ all -> 0x016f }
            if (r11 != 0) goto L_0x0156
            r16 = r5
            r14 = 0
            goto L_0x0163
        L_0x0156:
            com.android.server.pm.PackageManagerService$PostInstallData r14 = new com.android.server.pm.PackageManagerService$PostInstallData     // Catch:{ all -> 0x016f }
            com.android.server.pm.-$$Lambda$PackageManagerService$TfnapVkUze7EtdWImq0cww0iVcc r2 = new com.android.server.pm.-$$Lambda$PackageManagerService$TfnapVkUze7EtdWImq0cww0iVcc     // Catch:{ all -> 0x016f }
            r2.<init>(r0, r11)     // Catch:{ all -> 0x016f }
            r16 = r5
            r5 = 0
            r14.<init>(r5, r0, r2)     // Catch:{ all -> 0x016f }
        L_0x0163:
            r2 = r14
            r1.restoreAndPostInstall(r9, r0, r2)     // Catch:{ all -> 0x016f }
            goto L_0x0175
        L_0x0168:
            r0 = move-exception
            r16 = r5
        L_0x016b:
            monitor-exit(r14)     // Catch:{ all -> 0x016d }
            throw r0     // Catch:{ all -> 0x016f }
        L_0x016d:
            r0 = move-exception
            goto L_0x016b
        L_0x016f:
            r0 = move-exception
            goto L_0x018d
        L_0x0171:
            r16 = r5
            r7 = r26
        L_0x0175:
            android.os.Binder.restoreCallingIdentity(r3)
            r0 = 1
            return r0
        L_0x017b:
            r0 = move-exception
            r16 = r5
            goto L_0x0182
        L_0x017f:
            r0 = move-exception
            r6 = r25
        L_0x0182:
            monitor-exit(r14)     // Catch:{ all -> 0x0186 }
            throw r0     // Catch:{ all -> 0x0184 }
        L_0x0184:
            r0 = move-exception
            goto L_0x018b
        L_0x0186:
            r0 = move-exception
            goto L_0x0182
        L_0x0188:
            r0 = move-exception
            r6 = r25
        L_0x018b:
            r7 = r26
        L_0x018d:
            android.os.Binder.restoreCallingIdentity(r3)
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.installExistingPackageAsUser(java.lang.String, int, int, int, java.util.List, android.content.IntentSender):int");
    }

    public /* synthetic */ void lambda$installExistingPackageAsUser$10$PackageManagerService(PackageInstalledInfo res, IntentSender intentSender) {
        onRestoreComplete(res.returnCode, this.mContext, intentSender);
    }

    static void onRestoreComplete(int returnCode, Context context, IntentSender target) {
        Intent fillIn = new Intent();
        fillIn.putExtra("android.content.pm.extra.STATUS", PackageManager.installStatusToPublicStatus(returnCode));
        try {
            target.sendIntent(context, 0, fillIn, (IntentSender.OnFinished) null, (Handler) null);
        } catch (IntentSender.SendIntentException e) {
        }
    }

    static void setInstantAppForUser(PackageSetting pkgSetting, int userId, boolean instantApp, boolean fullApp) {
        if (!instantApp && !fullApp) {
            return;
        }
        if (userId == -1) {
            for (int currentUserId : sUserManager.getUserIds()) {
                if (instantApp && !pkgSetting.getInstantApp(currentUserId)) {
                    pkgSetting.setInstantApp(true, currentUserId);
                } else if (fullApp && pkgSetting.getInstantApp(currentUserId)) {
                    pkgSetting.setInstantApp(false, currentUserId);
                }
            }
        } else if (instantApp && !pkgSetting.getInstantApp(userId)) {
            pkgSetting.setInstantApp(true, userId);
        } else if (fullApp && pkgSetting.getInstantApp(userId)) {
            pkgSetting.setInstantApp(false, userId);
        }
    }

    /* access modifiers changed from: package-private */
    public boolean isUserRestricted(int userId, String restrictionKey) {
        if (!sUserManager.getUserRestrictions(userId).getBoolean(restrictionKey, false)) {
            return false;
        }
        Log.w(TAG, "User is restricted: " + restrictionKey);
        return true;
    }

    public String[] setDistractingPackageRestrictionsAsUser(String[] packageNames, int restrictionFlags, int userId) {
        boolean[] canRestrict;
        this.mContext.enforceCallingOrSelfPermission("android.permission.SUSPEND_APPS", "setDistractingPackageRestrictionsAsUser");
        int callingUid = Binder.getCallingUid();
        if (callingUid == 0 || callingUid == 1000 || UserHandle.getUserId(callingUid) == userId) {
            Preconditions.checkNotNull(packageNames, "packageNames cannot be null");
            List<String> changedPackagesList = new ArrayList<>(packageNames.length);
            IntArray changedUids = new IntArray(packageNames.length);
            List<String> unactionedPackages = new ArrayList<>(packageNames.length);
            if (restrictionFlags != 0) {
                canRestrict = canSuspendPackageForUserInternal(packageNames, userId);
            } else {
                canRestrict = null;
            }
            for (int i = 0; i < packageNames.length; i++) {
                String packageName = packageNames[i];
                synchronized (this.mPackages) {
                    PackageSetting pkgSetting = this.mSettings.mPackages.get(packageName);
                    if (pkgSetting != null) {
                        if (!filterAppAccessLPr(pkgSetting, callingUid, userId)) {
                            if (canRestrict == null || canRestrict[i]) {
                                synchronized (this.mPackages) {
                                    if (restrictionFlags != pkgSetting.getDistractionFlags(userId)) {
                                        pkgSetting.setDistractionFlags(restrictionFlags, userId);
                                        changedPackagesList.add(packageName);
                                        changedUids.add(UserHandle.getUid(userId, pkgSetting.appId));
                                    }
                                }
                            } else {
                                unactionedPackages.add(packageName);
                            }
                        }
                    }
                    Slog.w(TAG, "Could not find package setting for package: " + packageName + ". Skipping...");
                    unactionedPackages.add(packageName);
                }
            }
            if (changedPackagesList.isEmpty() == 0) {
                sendDistractingPackagesChanged((String[]) changedPackagesList.toArray(new String[changedPackagesList.size()]), changedUids.toArray(), userId, restrictionFlags);
                synchronized (this.mPackages) {
                    scheduleWritePackageRestrictionsLocked(userId);
                }
            }
            return (String[]) unactionedPackages.toArray(new String[0]);
        }
        throw new SecurityException("Calling uid " + callingUid + " cannot call for user " + userId);
    }

    private void enforceCanSetPackagesSuspendedAsUser(String callingPackage, int callingUid, int userId, String callingMethod) {
        if (callingUid != 0 && callingUid != 1000) {
            String ownerPackage = this.mProtectedPackages.getDeviceOwnerOrProfileOwnerPackage(userId);
            boolean allowedShell = false;
            if (ownerPackage == null) {
                this.mContext.enforceCallingOrSelfPermission("android.permission.SUSPEND_APPS", callingMethod);
                int packageUid = getPackageUid(callingPackage, 0, userId);
                boolean allowedPackageUid = packageUid == callingUid;
                if (callingUid == SHELL_UID && UserHandle.isSameApp(packageUid, callingUid)) {
                    allowedShell = true;
                }
                if (!allowedShell && !allowedPackageUid) {
                    throw new SecurityException("Calling package " + callingPackage + " in user " + userId + " does not belong to calling uid " + callingUid);
                }
            } else if (getPackageUid(ownerPackage, 0, userId) != callingUid) {
                throw new UnsupportedOperationException("Cannot suspend/unsuspend packages. User " + userId + " has an active DO or PO");
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:26:0x009c, code lost:
        if (r16 == null) goto L_0x00ab;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:0x00a0, code lost:
        if (r16[r14] != false) goto L_0x00ab;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:0x00a2, code lost:
        r15.add(r13);
        r18 = r3;
        r19 = r14;
        r8 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:30:0x00ab, code lost:
        r11 = r7.mPackages;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x00ad, code lost:
        monitor-enter(r11);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:32:0x00ae, code lost:
        r17 = r11;
        r18 = r3;
        r3 = r12;
        r5 = r13;
        r19 = r14;
        r8 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:34:?, code lost:
        r12.setSuspended(r22, r26, r25, r23, r24, r27);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x00c7, code lost:
        monitor-exit(r17);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:36:0x00c8, code lost:
        r2.add(r5);
        r1.add(android.os.UserHandle.getUid(r4, r3.appId));
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[] r21, boolean r22, android.os.PersistableBundle r23, android.os.PersistableBundle r24, android.content.pm.SuspendDialogInfo r25, java.lang.String r26, int r27) {
        /*
            r20 = this;
            r7 = r20
            r8 = r21
            r6 = r22
            r5 = r26
            r4 = r27
            int r3 = android.os.Binder.getCallingUid()
            java.lang.String r0 = "setPackagesSuspendedAsUser"
            r7.enforceCanSetPackagesSuspendedAsUser(r5, r3, r4, r0)
            boolean r0 = com.android.internal.util.ArrayUtils.isEmpty(r21)
            if (r0 == 0) goto L_0x001b
            return r8
        L_0x001b:
            java.util.ArrayList r0 = new java.util.ArrayList
            int r1 = r8.length
            r0.<init>(r1)
            r2 = r0
            android.util.IntArray r0 = new android.util.IntArray
            int r1 = r8.length
            r0.<init>(r1)
            r1 = r0
            java.util.ArrayList r0 = new java.util.ArrayList
            int r9 = r8.length
            r0.<init>(r9)
            r15 = r0
            if (r6 == 0) goto L_0x0037
            boolean[] r0 = r7.canSuspendPackageForUserInternal(r8, r4)
            goto L_0x0038
        L_0x0037:
            r0 = 0
        L_0x0038:
            r16 = r0
            r0 = 0
            r14 = r0
        L_0x003c:
            int r0 = r8.length
            if (r14 >= r0) goto L_0x0114
            r13 = r8[r14]
            boolean r0 = r5.equals(r13)
            if (r0 == 0) goto L_0x007d
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r9 = "Calling package: "
            r0.append(r9)
            r0.append(r5)
            java.lang.String r9 = " trying to "
            r0.append(r9)
            if (r6 == 0) goto L_0x005e
            java.lang.String r9 = ""
            goto L_0x0061
        L_0x005e:
            java.lang.String r9 = "un"
        L_0x0061:
            r0.append(r9)
            java.lang.String r9 = "suspend itself. Ignoring"
            r0.append(r9)
            java.lang.String r0 = r0.toString()
            java.lang.String r9 = "PackageManager"
            android.util.Slog.w(r9, r0)
            r15.add(r13)
            r18 = r3
            r19 = r14
            r8 = r15
            goto L_0x00fe
        L_0x007d:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r9 = r7.mPackages
            monitor-enter(r9)
            com.android.server.pm.Settings r0 = r7.mSettings     // Catch:{ all -> 0x0109 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r0 = r0.mPackages     // Catch:{ all -> 0x0109 }
            java.lang.Object r0 = r0.get(r13)     // Catch:{ all -> 0x0109 }
            com.android.server.pm.PackageSetting r0 = (com.android.server.pm.PackageSetting) r0     // Catch:{ all -> 0x0109 }
            r12 = r0
            if (r12 == 0) goto L_0x00d8
            boolean r0 = r7.filterAppAccessLPr(r12, r3, r4)     // Catch:{ all -> 0x0109 }
            if (r0 == 0) goto L_0x009b
            r18 = r3
            r3 = r12
            r5 = r13
            r19 = r14
            r8 = r15
            goto L_0x00df
        L_0x009b:
            monitor-exit(r9)     // Catch:{ all -> 0x0109 }
            if (r16 == 0) goto L_0x00ab
            boolean r0 = r16[r14]
            if (r0 != 0) goto L_0x00ab
            r15.add(r13)
            r18 = r3
            r19 = r14
            r8 = r15
            goto L_0x00fe
        L_0x00ab:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r11 = r7.mPackages
            monitor-enter(r11)
            r9 = r12
            r10 = r22
            r17 = r11
            r11 = r26
            r18 = r3
            r3 = r12
            r12 = r25
            r5 = r13
            r13 = r23
            r19 = r14
            r14 = r24
            r8 = r15
            r15 = r27
            r9.setSuspended(r10, r11, r12, r13, r14, r15)     // Catch:{ all -> 0x00d5 }
            monitor-exit(r17)     // Catch:{ all -> 0x00d5 }
            r2.add(r5)
            int r0 = r3.appId
            int r0 = android.os.UserHandle.getUid(r4, r0)
            r1.add(r0)
            goto L_0x00fe
        L_0x00d5:
            r0 = move-exception
            monitor-exit(r17)     // Catch:{ all -> 0x00d5 }
            throw r0
        L_0x00d8:
            r18 = r3
            r3 = r12
            r5 = r13
            r19 = r14
            r8 = r15
        L_0x00df:
            java.lang.String r0 = "PackageManager"
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ all -> 0x0112 }
            r10.<init>()     // Catch:{ all -> 0x0112 }
            java.lang.String r11 = "Could not find package setting for package: "
            r10.append(r11)     // Catch:{ all -> 0x0112 }
            r10.append(r5)     // Catch:{ all -> 0x0112 }
            java.lang.String r11 = ". Skipping suspending/un-suspending."
            r10.append(r11)     // Catch:{ all -> 0x0112 }
            java.lang.String r10 = r10.toString()     // Catch:{ all -> 0x0112 }
            android.util.Slog.w(r0, r10)     // Catch:{ all -> 0x0112 }
            r8.add(r5)     // Catch:{ all -> 0x0112 }
            monitor-exit(r9)     // Catch:{ all -> 0x0112 }
        L_0x00fe:
            int r14 = r19 + 1
            r5 = r26
            r15 = r8
            r3 = r18
            r8 = r21
            goto L_0x003c
        L_0x0109:
            r0 = move-exception
            r18 = r3
            r5 = r13
            r19 = r14
            r8 = r15
        L_0x0110:
            monitor-exit(r9)     // Catch:{ all -> 0x0112 }
            throw r0
        L_0x0112:
            r0 = move-exception
            goto L_0x0110
        L_0x0114:
            r18 = r3
            r19 = r14
            r8 = r15
            boolean r0 = r2.isEmpty()
            if (r0 != 0) goto L_0x0154
            int r0 = r2.size()
            java.lang.String[] r0 = new java.lang.String[r0]
            java.lang.Object[] r0 = r2.toArray(r0)
            r9 = r0
            java.lang.String[] r9 = (java.lang.String[]) r9
            int[] r3 = r1.toArray()
            r10 = r1
            r1 = r20
            r11 = r2
            r2 = r9
            r12 = r18
            r13 = r4
            r4 = r27
            r5 = r22
            r14 = r6
            r6 = r24
            r1.sendPackagesSuspendedForUser(r2, r3, r4, r5, r6)
            r1 = r23
            r7.sendMyPackageSuspendedOrUnsuspended(r9, r14, r1, r13)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r7.mPackages
            monitor-enter(r2)
            r7.scheduleWritePackageRestrictionsLocked((int) r13)     // Catch:{ all -> 0x0151 }
            monitor-exit(r2)     // Catch:{ all -> 0x0151 }
            goto L_0x015c
        L_0x0151:
            r0 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x0151 }
            throw r0
        L_0x0154:
            r10 = r1
            r11 = r2
            r13 = r4
            r14 = r6
            r12 = r18
            r1 = r23
        L_0x015c:
            int r0 = r8.size()
            java.lang.String[] r0 = new java.lang.String[r0]
            java.lang.Object[] r0 = r8.toArray(r0)
            java.lang.String[] r0 = (java.lang.String[]) r0
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.setPackagesSuspendedAsUser(java.lang.String[], boolean, android.os.PersistableBundle, android.os.PersistableBundle, android.content.pm.SuspendDialogInfo, java.lang.String, int):java.lang.String[]");
    }

    /* Debug info: failed to restart local var, previous not found, register: 6 */
    public PersistableBundle getSuspendedPackageAppExtras(String packageName, int userId) {
        int callingUid = Binder.getCallingUid();
        if (getPackageUid(packageName, 0, userId) == callingUid) {
            synchronized (this.mPackages) {
                PackageSetting ps = this.mSettings.mPackages.get(packageName);
                if (ps == null || filterAppAccessLPr(ps, callingUid, userId)) {
                    throw new IllegalArgumentException("Unknown target package: " + packageName);
                }
                PackageUserState packageUserState = ps.readUserState(userId);
                if (!packageUserState.suspended) {
                    return null;
                }
                PersistableBundle persistableBundle = packageUserState.suspendedAppExtras;
                return persistableBundle;
            }
        }
        throw new SecurityException("Calling package " + packageName + " does not belong to calling uid " + callingUid);
    }

    private void sendMyPackageSuspendedOrUnsuspended(String[] affectedPackages, boolean suspended, PersistableBundle appExtras, int userId) {
        String action;
        Bundle intentExtras = new Bundle();
        if (suspended) {
            if (appExtras != null) {
                intentExtras.putBundle("android.intent.extra.SUSPENDED_PACKAGE_EXTRAS", new Bundle(appExtras.deepCopy()));
            }
            action = "android.intent.action.MY_PACKAGE_SUSPENDED";
        } else {
            action = "android.intent.action.MY_PACKAGE_UNSUSPENDED";
        }
        this.mHandler.post(new Runnable(suspended, userId, affectedPackages, action, intentExtras) {
            private final /* synthetic */ boolean f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ String[] f$3;
            private final /* synthetic */ String f$4;
            private final /* synthetic */ Bundle f$5;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
            }

            public final void run() {
                PackageManagerService.this.lambda$sendMyPackageSuspendedOrUnsuspended$11$PackageManagerService(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
            }
        });
    }

    public /* synthetic */ void lambda$sendMyPackageSuspendedOrUnsuspended$11$PackageManagerService(boolean suspended, int userId, String[] affectedPackages, String action, Bundle intentExtras) {
        String[] strArr = affectedPackages;
        try {
            IActivityManager am = ActivityManager.getService();
            if (am == null) {
                StringBuilder sb = new StringBuilder();
                sb.append("IActivityManager null. Cannot send MY_PACKAGE_ ");
                sb.append(suspended ? "" : "UN");
                sb.append("SUSPENDED broadcasts");
                Slog.wtf(TAG, sb.toString());
                return;
            }
            int[] targetUserIds = {userId};
            for (String packageName : strArr) {
                doSendBroadcast(am, action, (String) null, intentExtras, DumpState.DUMP_SERVICE_PERMISSIONS, packageName, (IIntentReceiver) null, targetUserIds, false);
            }
        } catch (RemoteException e) {
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 7 */
    public boolean isPackageSuspendedForUser(String packageName, int userId) {
        boolean suspended;
        int callingUid = Binder.getCallingUid();
        PermissionManagerServiceInternal permissionManagerServiceInternal = this.mPermissionManager;
        permissionManagerServiceInternal.enforceCrossUserPermission(callingUid, userId, true, false, "isPackageSuspendedForUser for user " + userId);
        synchronized (this.mPackages) {
            PackageSetting ps = this.mSettings.mPackages.get(packageName);
            if (ps == null || filterAppAccessLPr(ps, callingUid, userId)) {
                throw new IllegalArgumentException("Unknown target package: " + packageName);
            }
            suspended = ps.getSuspended(userId);
        }
        return suspended;
    }

    /* access modifiers changed from: package-private */
    public void unsuspendForSuspendingPackage(String packageName, int affectedUser) {
        for (int userId : affectedUser == -1 ? sUserManager.getUserIds() : new int[]{affectedUser}) {
            Objects.requireNonNull(packageName);
            unsuspendForSuspendingPackages(new Predicate(packageName) {
                private final /* synthetic */ String f$0;

                {
                    this.f$0 = r1;
                }

                public final boolean test(Object obj) {
                    return this.f$0.equals((String) obj);
                }
            }, userId);
        }
    }

    /* access modifiers changed from: package-private */
    public void unsuspendForNonSystemSuspendingPackages(ArraySet<Integer> userIds) {
        int sz = userIds.size();
        for (int i = 0; i < sz; i++) {
            unsuspendForSuspendingPackages($$Lambda$PackageManagerService$5hSpumAE5maEOgUlkeKZ3EJQUOU.INSTANCE, userIds.valueAt(i).intValue());
        }
    }

    static /* synthetic */ boolean lambda$unsuspendForNonSystemSuspendingPackages$12(String suspendingPackage) {
        return !PLATFORM_PACKAGE_NAME.equals(suspendingPackage);
    }

    private void unsuspendForSuspendingPackages(Predicate<String> packagePredicate, int userId) {
        List<String> affectedPackages = new ArrayList<>();
        IntArray affectedUids = new IntArray();
        synchronized (this.mPackages) {
            for (PackageSetting ps : this.mSettings.mPackages.values()) {
                PackageUserState pus = ps.readUserState(userId);
                if (pus.suspended && packagePredicate.test(pus.suspendingPackage)) {
                    ps.setSuspended(false, (String) null, (SuspendDialogInfo) null, (PersistableBundle) null, (PersistableBundle) null, userId);
                    affectedPackages.add(ps.name);
                    affectedUids.add(UserHandle.getUid(userId, ps.getAppId()));
                }
            }
        }
        if (!affectedPackages.isEmpty()) {
            String[] packageArray = (String[]) affectedPackages.toArray(new String[affectedPackages.size()]);
            sendMyPackageSuspendedOrUnsuspended(packageArray, false, (PersistableBundle) null, userId);
            sendPackagesSuspendedForUser(packageArray, affectedUids.toArray(), userId, false, (PersistableBundle) null);
            this.mSettings.writePackageRestrictionsLPr(userId);
        }
    }

    public String[] getUnsuspendablePackagesForUser(String[] packageNames, int userId) {
        Preconditions.checkNotNull("packageNames cannot be null", packageNames);
        this.mContext.enforceCallingOrSelfPermission("android.permission.SUSPEND_APPS", "getUnsuspendablePackagesForUser");
        int callingUid = Binder.getCallingUid();
        if (UserHandle.getUserId(callingUid) == userId) {
            ArraySet<String> unactionablePackages = new ArraySet<>();
            boolean[] canSuspend = canSuspendPackageForUserInternal(packageNames, userId);
            for (int i = 0; i < packageNames.length; i++) {
                if (!canSuspend[i]) {
                    unactionablePackages.add(packageNames[i]);
                }
            }
            return (String[]) unactionablePackages.toArray(new String[unactionablePackages.size()]);
        }
        throw new SecurityException("Calling uid " + callingUid + " cannot query getUnsuspendablePackagesForUser for user " + userId);
    }

    /* Debug info: failed to restart local var, previous not found, register: 13 */
    private boolean[] canSuspendPackageForUserInternal(String[] packageNames, int userId) {
        boolean[] canSuspend = new boolean[packageNames.length];
        long callingId = Binder.clearCallingIdentity();
        try {
            String activeLauncherPackageName = getActiveLauncherPackageName(userId);
            String dialerPackageName = getDefaultDialerPackageName(userId);
            for (int i = 0; i < packageNames.length; i++) {
                canSuspend[i] = false;
                String packageName = packageNames[i];
                if (isPackageDeviceAdmin(packageName, userId)) {
                    Slog.w(TAG, "Cannot suspend package \"" + packageName + "\": has an active device admin");
                } else if (packageName.equals(activeLauncherPackageName)) {
                    Slog.w(TAG, "Cannot suspend package \"" + packageName + "\": contains the active launcher");
                } else if (packageName.equals(this.mRequiredInstallerPackage)) {
                    Slog.w(TAG, "Cannot suspend package \"" + packageName + "\": required for package installation");
                } else if (packageName.equals(this.mRequiredUninstallerPackage)) {
                    Slog.w(TAG, "Cannot suspend package \"" + packageName + "\": required for package uninstallation");
                } else if (packageName.equals(this.mRequiredVerifierPackage)) {
                    Slog.w(TAG, "Cannot suspend package \"" + packageName + "\": required for package verification");
                } else if (packageName.equals(dialerPackageName)) {
                    Slog.w(TAG, "Cannot suspend package \"" + packageName + "\": is the default dialer");
                } else if (packageName.equals(this.mRequiredPermissionControllerPackage)) {
                    Slog.w(TAG, "Cannot suspend package \"" + packageName + "\": required for permissions management");
                } else {
                    synchronized (this.mPackages) {
                        if (this.mProtectedPackages.isPackageStateProtected(userId, packageName)) {
                            Slog.w(TAG, "Cannot suspend package \"" + packageName + "\": protected package");
                        } else {
                            PackageParser.Package pkg = this.mPackages.get(packageName);
                            if (pkg != null && pkg.applicationInfo.isStaticSharedLibrary()) {
                                Slog.w(TAG, "Cannot suspend package: " + packageName + " providing static shared library: " + pkg.staticSharedLibName);
                            } else if (PLATFORM_PACKAGE_NAME.equals(packageName)) {
                                Slog.w(TAG, "Cannot suspend the platform package: " + packageName);
                            } else {
                                canSuspend[i] = true;
                            }
                        }
                    }
                }
            }
            Binder.restoreCallingIdentity(callingId);
            return canSuspend;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(callingId);
            throw th;
        }
    }

    private String getActiveLauncherPackageName(int userId) {
        Intent intent = new Intent("android.intent.action.MAIN");
        intent.addCategory("android.intent.category.HOME");
        ResolveInfo resolveInfo = resolveIntent(intent, intent.resolveTypeIfNeeded(this.mContext.getContentResolver()), 65536, userId);
        if (resolveInfo == null) {
            return null;
        }
        return resolveInfo.activityInfo.packageName;
    }

    private String getDefaultDialerPackageName(int userId) {
        PackageManagerInternal.DefaultDialerProvider provider;
        synchronized (this.mPackages) {
            provider = this.mDefaultDialerProvider;
        }
        if (provider != null) {
            return provider.getDefaultDialer(userId);
        }
        Slog.e(TAG, "mDefaultDialerProvider is null");
        return null;
    }

    public void verifyPendingInstall(int id, int verificationCode) throws RemoteException {
        this.mContext.enforceCallingOrSelfPermission("android.permission.PACKAGE_VERIFICATION_AGENT", "Only package verification agents can verify applications");
        Message msg = this.mHandler.obtainMessage(15);
        PackageVerificationResponse response = new PackageVerificationResponse(verificationCode, Binder.getCallingUid());
        msg.arg1 = id;
        msg.obj = response;
        this.mHandler.sendMessage(msg);
    }

    public void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.PACKAGE_VERIFICATION_AGENT", "Only package verification agents can extend verification timeouts");
        PackageVerificationState state = this.mPendingVerification.get(id);
        PackageVerificationResponse response = new PackageVerificationResponse(verificationCodeAtTimeout, Binder.getCallingUid());
        if (millisecondsToDelay > 3600000) {
            millisecondsToDelay = 3600000;
        }
        if (millisecondsToDelay < 0) {
            millisecondsToDelay = 0;
        }
        if (!(verificationCodeAtTimeout == 1 || verificationCodeAtTimeout == -1)) {
        }
        if (state != null && !state.timeoutExtended()) {
            state.extendTimeout();
            Message msg = this.mHandler.obtainMessage(15);
            msg.arg1 = id;
            msg.obj = response;
            this.mHandler.sendMessageDelayed(msg, millisecondsToDelay);
        }
    }

    /* access modifiers changed from: private */
    public void broadcastPackageVerified(int verificationId, Uri packageUri, int verificationCode, UserHandle user) {
        Intent intent = new Intent("android.intent.action.PACKAGE_VERIFIED");
        intent.setDataAndType(packageUri, PACKAGE_MIME_TYPE);
        intent.addFlags(1);
        intent.putExtra("android.content.pm.extra.VERIFICATION_ID", verificationId);
        intent.putExtra("android.content.pm.extra.VERIFICATION_RESULT", verificationCode);
        this.mContext.sendBroadcastAsUser(intent, user, "android.permission.PACKAGE_VERIFICATION_AGENT");
    }

    /* access modifiers changed from: private */
    public ComponentName matchComponentForVerifier(String packageName, List<ResolveInfo> receivers) {
        ActivityInfo targetReceiver = null;
        int NR = receivers.size();
        int i = 0;
        while (true) {
            if (i >= NR) {
                break;
            }
            ResolveInfo info = receivers.get(i);
            if (info.activityInfo != null && packageName.equals(info.activityInfo.packageName)) {
                targetReceiver = info.activityInfo;
                break;
            }
            i++;
        }
        if (targetReceiver == null) {
            return null;
        }
        return new ComponentName(targetReceiver.packageName, targetReceiver.name);
    }

    /* access modifiers changed from: private */
    public List<ComponentName> matchVerifiers(PackageInfoLite pkgInfo, List<ResolveInfo> receivers, PackageVerificationState verificationState) {
        int verifierUid;
        if (pkgInfo.verifiers.length == 0) {
            return null;
        }
        List<ComponentName> sufficientVerifiers = new ArrayList<>(N + 1);
        for (VerifierInfo verifierInfo : pkgInfo.verifiers) {
            ComponentName comp = matchComponentForVerifier(verifierInfo.packageName, receivers);
            if (!(comp == null || (verifierUid = getUidForVerifier(verifierInfo)) == -1)) {
                sufficientVerifiers.add(comp);
                verificationState.addSufficientVerifier(verifierUid);
            }
        }
        return sufficientVerifiers;
    }

    private int getUidForVerifier(VerifierInfo verifierInfo) {
        synchronized (this.mPackages) {
            PackageParser.Package pkg = this.mPackages.get(verifierInfo.packageName);
            if (pkg == null) {
                return -1;
            }
            if (pkg.mSigningDetails.signatures.length != 1) {
                Slog.i(TAG, "Verifier package " + verifierInfo.packageName + " has more than one signature; ignoring");
                return -1;
            }
            try {
                if (!Arrays.equals(verifierInfo.publicKey.getEncoded(), pkg.mSigningDetails.signatures[0].getPublicKey().getEncoded())) {
                    Slog.i(TAG, "Verifier package " + verifierInfo.packageName + " does not have the expected public key; ignoring");
                    return -1;
                }
                int i = pkg.applicationInfo.uid;
                return i;
            } catch (CertificateException e) {
                return -1;
            }
        }
    }

    /* access modifiers changed from: private */
    public void setEnableRollbackCode(int token, int enableRollbackCode) {
        Message msg = this.mHandler.obtainMessage(21);
        msg.arg1 = token;
        msg.arg2 = enableRollbackCode;
        this.mHandler.sendMessage(msg);
    }

    public void finishPackageInstall(int token, boolean didLaunch) {
        enforceSystemOrRoot("Only the system is allowed to finish installs");
        Trace.asyncTraceEnd(262144, "restore", token);
        this.mHandler.sendMessage(this.mHandler.obtainMessage(9, token, didLaunch));
    }

    /* access modifiers changed from: private */
    public long getVerificationTimeout() {
        return Settings.Global.getLong(this.mContext.getContentResolver(), "verifier_timeout", JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
    }

    /* access modifiers changed from: private */
    public int getDefaultVerificationResponse(UserHandle user) {
        if (sUserManager.hasUserRestriction("ensure_verify_apps", user.getIdentifier())) {
            return -1;
        }
        return Settings.Global.getInt(this.mContext.getContentResolver(), "verifier_default_response", 1);
    }

    /* access modifiers changed from: private */
    public boolean isVerificationEnabled(int userId, int installFlags, int installerUid) {
        ActivityInfo activityInfo;
        if ((524288 & installFlags) != 0) {
            return false;
        }
        boolean ensureVerifyAppsEnabled = isUserRestricted(userId, "ensure_verify_apps");
        if ((installFlags & 32) != 0) {
            if (ActivityManager.isRunningInTestHarness()) {
                return false;
            }
            if (ensureVerifyAppsEnabled) {
                return true;
            }
            if (Settings.Global.getInt(this.mContext.getContentResolver(), "verifier_verify_adb_installs", 1) == 0) {
                return false;
            }
        } else if (!((installFlags & 2048) == 0 || (activityInfo = this.mInstantAppInstallerActivity) == null || !activityInfo.packageName.equals(this.mRequiredVerifierPackage))) {
            try {
                ((AppOpsManager) this.mContext.getSystemService(AppOpsManager.class)).checkPackage(installerUid, this.mRequiredVerifierPackage);
                return false;
            } catch (SecurityException e) {
            }
        }
        if (ensureVerifyAppsEnabled) {
            return true;
        }
        return PackageManagerServiceInjector.isVerificationEnabled(this.mContext, userId, installFlags, installerUid);
    }

    public void verifyIntentFilter(int id, int verificationCode, List<String> failedDomains) throws RemoteException {
        this.mContext.enforceCallingOrSelfPermission("android.permission.INTENT_FILTER_VERIFICATION_AGENT", "Only intentfilter verification agents can verify applications");
        Message msg = this.mHandler.obtainMessage(18);
        IntentFilterVerificationResponse response = new IntentFilterVerificationResponse(Binder.getCallingUid(), verificationCode, failedDomains);
        msg.arg1 = id;
        msg.obj = response;
        this.mHandler.sendMessage(msg);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:18:0x004d, code lost:
        return 0;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public int getIntentVerificationStatus(java.lang.String r6, int r7) {
        /*
            r5 = this;
            int r0 = android.os.Binder.getCallingUid()
            int r1 = android.os.UserHandle.getUserId(r0)
            if (r1 == r7) goto L_0x0022
            android.content.Context r1 = r5.mContext
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r3 = "getIntentVerificationStatus"
            r2.append(r3)
            r2.append(r7)
            java.lang.String r2 = r2.toString()
            java.lang.String r3 = "android.permission.INTERACT_ACROSS_USERS_FULL"
            r1.enforceCallingOrSelfPermission(r3, r2)
        L_0x0022:
            java.lang.String r1 = r5.getInstantAppPackageName(r0)
            r2 = 0
            if (r1 == 0) goto L_0x002a
            return r2
        L_0x002a:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r5.mPackages
            monitor-enter(r1)
            com.android.server.pm.Settings r3 = r5.mSettings     // Catch:{ all -> 0x004e }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r3 = r3.mPackages     // Catch:{ all -> 0x004e }
            java.lang.Object r3 = r3.get(r6)     // Catch:{ all -> 0x004e }
            com.android.server.pm.PackageSetting r3 = (com.android.server.pm.PackageSetting) r3     // Catch:{ all -> 0x004e }
            if (r3 == 0) goto L_0x004c
            int r4 = android.os.UserHandle.getUserId(r0)     // Catch:{ all -> 0x004e }
            boolean r4 = r5.filterAppAccessLPr(r3, r0, r4)     // Catch:{ all -> 0x004e }
            if (r4 == 0) goto L_0x0044
            goto L_0x004c
        L_0x0044:
            com.android.server.pm.Settings r2 = r5.mSettings     // Catch:{ all -> 0x004e }
            int r2 = r2.getIntentFilterVerificationStatusLPr(r6, r7)     // Catch:{ all -> 0x004e }
            monitor-exit(r1)     // Catch:{ all -> 0x004e }
            return r2
        L_0x004c:
            monitor-exit(r1)     // Catch:{ all -> 0x004e }
            return r2
        L_0x004e:
            r2 = move-exception
            monitor-exit(r1)     // Catch:{ all -> 0x004e }
            throw r2
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.getIntentVerificationStatus(java.lang.String, int):int");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:10:0x002f, code lost:
        if (r0 == false) goto L_0x0034;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:11:0x0031, code lost:
        scheduleWritePackageRestrictionsLocked(r8);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x0034, code lost:
        return r0;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean updateIntentVerificationStatus(java.lang.String r6, int r7, int r8) {
        /*
            r5 = this;
            android.content.Context r0 = r5.mContext
            java.lang.String r1 = "android.permission.SET_PREFERRED_APPLICATIONS"
            r2 = 0
            r0.enforceCallingOrSelfPermission(r1, r2)
            r0 = 0
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r5.mPackages
            monitor-enter(r1)
            com.android.server.pm.Settings r2 = r5.mSettings     // Catch:{ all -> 0x0035 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r2 = r2.mPackages     // Catch:{ all -> 0x0035 }
            java.lang.Object r2 = r2.get(r6)     // Catch:{ all -> 0x0035 }
            com.android.server.pm.PackageSetting r2 = (com.android.server.pm.PackageSetting) r2     // Catch:{ all -> 0x0035 }
            int r3 = android.os.Binder.getCallingUid()     // Catch:{ all -> 0x0035 }
            int r4 = android.os.UserHandle.getCallingUserId()     // Catch:{ all -> 0x0035 }
            boolean r3 = r5.filterAppAccessLPr(r2, r3, r4)     // Catch:{ all -> 0x0035 }
            if (r3 == 0) goto L_0x0027
            r3 = 0
            monitor-exit(r1)     // Catch:{ all -> 0x0035 }
            return r3
        L_0x0027:
            com.android.server.pm.Settings r3 = r5.mSettings     // Catch:{ all -> 0x0035 }
            boolean r3 = r3.updateIntentFilterVerificationStatusLPw(r6, r7, r8)     // Catch:{ all -> 0x0035 }
            r0 = r3
            monitor-exit(r1)     // Catch:{ all -> 0x0035 }
            if (r0 == 0) goto L_0x0034
            r5.scheduleWritePackageRestrictionsLocked((int) r8)
        L_0x0034:
            return r0
        L_0x0035:
            r2 = move-exception
            monitor-exit(r1)     // Catch:{ all -> 0x0035 }
            throw r2
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.updateIntentVerificationStatus(java.lang.String, int, int):boolean");
    }

    public ParceledListSlice<IntentFilterVerificationInfo> getIntentFilterVerifications(String packageName) {
        int callingUid = Binder.getCallingUid();
        if (getInstantAppPackageName(callingUid) != null) {
            return ParceledListSlice.emptyList();
        }
        synchronized (this.mPackages) {
            if (filterAppAccessLPr(this.mSettings.mPackages.get(packageName), callingUid, UserHandle.getUserId(callingUid))) {
                ParceledListSlice<IntentFilterVerificationInfo> emptyList = ParceledListSlice.emptyList();
                return emptyList;
            }
            ParceledListSlice<IntentFilterVerificationInfo> parceledListSlice = new ParceledListSlice<>(this.mSettings.getIntentFilterVerificationsLPr(packageName));
            return parceledListSlice;
        }
    }

    public ParceledListSlice<IntentFilter> getAllIntentFilters(String packageName) {
        if (TextUtils.isEmpty(packageName)) {
            return ParceledListSlice.emptyList();
        }
        int callingUid = Binder.getCallingUid();
        int callingUserId = UserHandle.getUserId(callingUid);
        synchronized (this.mPackages) {
            PackageParser.Package pkg = this.mPackages.get(packageName);
            if (pkg != null) {
                if (pkg.activities != null) {
                    if (pkg.mExtras == null) {
                        ParceledListSlice<IntentFilter> emptyList = ParceledListSlice.emptyList();
                        return emptyList;
                    } else if (filterAppAccessLPr((PackageSetting) pkg.mExtras, callingUid, callingUserId)) {
                        ParceledListSlice<IntentFilter> emptyList2 = ParceledListSlice.emptyList();
                        return emptyList2;
                    } else {
                        int count = pkg.activities.size();
                        ArrayList<IntentFilter> result = new ArrayList<>();
                        for (int n = 0; n < count; n++) {
                            PackageParser.Activity activity = (PackageParser.Activity) pkg.activities.get(n);
                            if (activity.intents != null && activity.intents.size() > 0) {
                                result.addAll(activity.intents);
                            }
                        }
                        ParceledListSlice<IntentFilter> parceledListSlice = new ParceledListSlice<>(result);
                        return parceledListSlice;
                    }
                }
            }
            PackageSetting ps = ParceledListSlice.emptyList();
            return ps;
        }
    }

    public boolean setDefaultBrowserPackageName(String packageName, int userId) {
        PackageManagerInternal.DefaultBrowserProvider provider;
        this.mContext.enforceCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS", (String) null);
        if (UserHandle.getCallingUserId() != userId) {
            this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", (String) null);
        }
        if (userId == -1) {
            return false;
        }
        synchronized (this.mPackages) {
            provider = this.mDefaultBrowserProvider;
        }
        if (provider == null) {
            Slog.e(TAG, "mDefaultBrowserProvider is null");
            return false;
        } else if (!provider.setDefaultBrowser(packageName, userId)) {
            return false;
        } else {
            if (packageName == null) {
                return true;
            }
            synchronized (this.mPackages) {
                this.mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultBrowser(packageName, userId);
            }
            return true;
        }
    }

    private void setDefaultBrowserAsyncLPw(String packageName, int userId) {
        if (userId != -1) {
            PackageManagerInternal.DefaultBrowserProvider defaultBrowserProvider = this.mDefaultBrowserProvider;
            if (defaultBrowserProvider == null) {
                Slog.e(TAG, "mDefaultBrowserProvider is null");
                return;
            }
            defaultBrowserProvider.setDefaultBrowserAsync(packageName, userId);
            if (packageName != null) {
                synchronized (this.mPackages) {
                    this.mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultBrowser(packageName, userId);
                }
            }
        }
    }

    public String getDefaultBrowserPackageName(int userId) {
        PackageManagerInternal.DefaultBrowserProvider provider;
        if (UserHandle.getCallingUserId() != userId && !PackageManagerServiceInjector.isXSpaceCrossUser(userId)) {
            this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", (String) null);
        }
        if (getInstantAppPackageName(Binder.getCallingUid()) != null) {
            return null;
        }
        synchronized (this.mPackages) {
            provider = this.mDefaultBrowserProvider;
        }
        if (provider != null) {
            return provider.getDefaultBrowser(userId);
        }
        Slog.e(TAG, "mDefaultBrowserProvider is null");
        return null;
    }

    private int getUnknownSourcesSettings() {
        return Settings.Secure.getInt(this.mContext.getContentResolver(), "install_non_market_apps", -1);
    }

    /* Debug info: failed to restart local var, previous not found, register: 11 */
    public void setInstallerPackageName(String targetPackage, String installerPackageName) {
        PackageSetting installerPackageSetting;
        Signature[] callerSignature;
        PackageSetting setting;
        int callingUid = Binder.getCallingUid();
        if (getInstantAppPackageName(callingUid) == null) {
            synchronized (this.mPackages) {
                PackageSetting targetPackageSetting = this.mSettings.mPackages.get(targetPackage);
                if (targetPackageSetting == null || filterAppAccessLPr(targetPackageSetting, callingUid, UserHandle.getUserId(callingUid))) {
                    throw new IllegalArgumentException("Unknown target package: " + targetPackage);
                }
                if (installerPackageName != null) {
                    installerPackageSetting = this.mSettings.mPackages.get(installerPackageName);
                    if (installerPackageSetting == null) {
                        throw new IllegalArgumentException("Unknown installer package: " + installerPackageName);
                    }
                } else {
                    installerPackageSetting = null;
                }
                Object obj = this.mSettings.getSettingLPr(UserHandle.getAppId(callingUid));
                if (obj != null) {
                    if (obj instanceof SharedUserSetting) {
                        callerSignature = ((SharedUserSetting) obj).signatures.mSigningDetails.signatures;
                    } else if (obj instanceof PackageSetting) {
                        callerSignature = ((PackageSetting) obj).signatures.mSigningDetails.signatures;
                    } else {
                        throw new SecurityException("Bad object " + obj + " for uid " + callingUid);
                    }
                    if (installerPackageSetting != null) {
                        if (PackageManagerServiceUtils.compareSignatures(callerSignature, installerPackageSetting.signatures.mSigningDetails.signatures) != 0) {
                            throw new SecurityException("Caller does not have same cert as new installer package " + installerPackageName);
                        }
                    }
                    if (!(targetPackageSetting.installerPackageName == null || (setting = this.mSettings.mPackages.get(targetPackageSetting.installerPackageName)) == null)) {
                        if (PackageManagerServiceUtils.compareSignatures(callerSignature, setting.signatures.mSigningDetails.signatures) != 0) {
                            throw new SecurityException("Caller does not have same cert as old installer package " + targetPackageSetting.installerPackageName);
                        }
                    }
                    targetPackageSetting.installerPackageName = installerPackageName;
                    if (installerPackageName != null) {
                        this.mSettings.mInstallerPackages.add(installerPackageName);
                    }
                    scheduleWriteSettingsLocked();
                } else {
                    throw new SecurityException("Unknown calling UID: " + callingUid);
                }
            }
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 5 */
    public void setApplicationCategoryHint(String packageName, int categoryHint, String callerPackageName) {
        if (getInstantAppPackageName(Binder.getCallingUid()) == null) {
            ((AppOpsManager) this.mContext.getSystemService(AppOpsManager.class)).checkPackage(Binder.getCallingUid(), callerPackageName);
            synchronized (this.mPackages) {
                PackageSetting ps = this.mSettings.mPackages.get(packageName);
                if (ps == null) {
                    throw new IllegalArgumentException("Unknown target package " + packageName);
                } else if (filterAppAccessLPr(ps, Binder.getCallingUid(), UserHandle.getCallingUserId())) {
                    throw new IllegalArgumentException("Unknown target package " + packageName);
                } else if (!Objects.equals(callerPackageName, ps.installerPackageName)) {
                    throw new IllegalArgumentException("Calling package " + callerPackageName + " is not installer for " + packageName);
                } else if (ps.categoryHint != categoryHint) {
                    ps.categoryHint = categoryHint;
                    scheduleWriteSettingsLocked();
                }
            }
            return;
        }
        throw new SecurityException("Instant applications don't have access to this method");
    }

    /* access modifiers changed from: private */
    public void processPendingInstall(InstallArgs args, int currentStatus) {
        if (args.mMultiPackageInstallParams != null) {
            args.mMultiPackageInstallParams.tryProcessInstallRequest(args, currentStatus);
            return;
        }
        PackageInstalledInfo res = createPackageInstalledInfo(currentStatus);
        boolean z = true;
        if (res.returnCode != 1) {
            z = false;
        }
        processInstallRequestsAsync(z, Collections.singletonList(new InstallRequest(args, res)));
    }

    /* access modifiers changed from: private */
    public void processInstallRequestsAsync(boolean success, List<InstallRequest> installRequests) {
        this.mHandler.post(new Runnable(success, installRequests) {
            private final /* synthetic */ boolean f$1;
            private final /* synthetic */ List f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                PackageManagerService.this.lambda$processInstallRequestsAsync$13$PackageManagerService(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$processInstallRequestsAsync$13$PackageManagerService(boolean success, List installRequests) {
        if (success) {
            Iterator it = installRequests.iterator();
            while (it.hasNext()) {
                InstallRequest request = (InstallRequest) it.next();
                request.args.doPreInstall(request.installResult.returnCode);
            }
            synchronized (this.mInstallLock) {
                installPackagesTracedLI(installRequests);
            }
            Iterator it2 = installRequests.iterator();
            while (it2.hasNext()) {
                InstallRequest request2 = (InstallRequest) it2.next();
                request2.args.doPostInstall(request2.installResult.returnCode, request2.installResult.uid);
            }
        }
        Iterator it3 = installRequests.iterator();
        while (it3.hasNext()) {
            InstallRequest request3 = (InstallRequest) it3.next();
            restoreAndPostInstall(request3.args.user.getIdentifier(), request3.installResult, new PostInstallData(request3.args, request3.installResult, (Runnable) null));
        }
    }

    /* access modifiers changed from: private */
    public PackageInstalledInfo createPackageInstalledInfo(int currentStatus) {
        PackageInstalledInfo res = new PackageInstalledInfo();
        res.setReturnCode(currentStatus);
        res.uid = -1;
        res.pkg = null;
        res.removedInfo = null;
        return res;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:63:0x00ec, code lost:
        r24 = r11;
        r25 = r13;
        r27 = r5;
        r20 = r15;
        r4 = 262144;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:65:?, code lost:
        r18.snapshotAndRestoreUserData(r11, r12, r19, r21, r10, r9);
     */
    /* JADX WARNING: Removed duplicated region for block: B:80:0x0139  */
    /* JADX WARNING: Removed duplicated region for block: B:85:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void restoreAndPostInstall(int r27, com.android.server.pm.PackageManagerService.PackageInstalledInfo r28, com.android.server.pm.PackageManagerService.PostInstallData r29) {
        /*
            r26 = this;
            r1 = r26
            r2 = r28
            r3 = r29
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r0 = r2.removedInfo
            r5 = 1
            if (r0 == 0) goto L_0x0013
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r0 = r2.removedInfo
            java.lang.String r0 = r0.removedPackage
            if (r0 == 0) goto L_0x0013
            r0 = r5
            goto L_0x0014
        L_0x0013:
            r0 = 0
        L_0x0014:
            r6 = r0
            android.content.pm.PackageParser$Package r0 = r2.pkg
            if (r0 != 0) goto L_0x001b
            r0 = 0
            goto L_0x0021
        L_0x001b:
            android.content.pm.PackageParser$Package r0 = r2.pkg
            android.content.pm.ApplicationInfo r0 = r0.applicationInfo
            int r0 = r0.flags
        L_0x0021:
            r7 = r0
            if (r6 != 0) goto L_0x002c
            r0 = 32768(0x8000, float:4.5918E-41)
            r0 = r0 & r7
            if (r0 == 0) goto L_0x002c
            r0 = r5
            goto L_0x002d
        L_0x002c:
            r0 = 0
        L_0x002d:
            r8 = r0
            int r0 = r1.mNextInstallToken
            if (r0 >= 0) goto L_0x0034
            r1.mNextInstallToken = r5
        L_0x0034:
            int r0 = r1.mNextInstallToken
            int r9 = r0 + 1
            r1.mNextInstallToken = r9
            r9 = r0
            if (r3 == 0) goto L_0x0042
            android.util.SparseArray<com.android.server.pm.PackageManagerService$PostInstallData> r0 = r1.mRunningInstalls
            r0.put(r9, r3)
        L_0x0042:
            int r0 = r2.returnCode
            r14 = 262144(0x40000, double:1.295163E-318)
            if (r0 != r5) goto L_0x0091
            if (r8 == 0) goto L_0x0091
            java.lang.String r0 = "backup"
            android.os.IBinder r0 = android.os.ServiceManager.getService(r0)
            android.app.backup.IBackupManager r10 = android.app.backup.IBackupManager.Stub.asInterface(r0)
            if (r10 == 0) goto L_0x0085
            r0 = -1
            r11 = r27
            if (r11 != r0) goto L_0x005f
            r0 = 0
            r11 = r0
        L_0x005f:
            java.lang.String r0 = "restore"
            android.os.Trace.asyncTraceBegin(r14, r0, r9)
            boolean r0 = r10.isBackupServiceActive(r11)     // Catch:{ RemoteException -> 0x0082, Exception -> 0x0078 }
            if (r0 == 0) goto L_0x0075
            android.content.pm.PackageParser$Package r0 = r2.pkg     // Catch:{ RemoteException -> 0x0082, Exception -> 0x0078 }
            android.content.pm.ApplicationInfo r0 = r0.applicationInfo     // Catch:{ RemoteException -> 0x0082, Exception -> 0x0078 }
            java.lang.String r0 = r0.packageName     // Catch:{ RemoteException -> 0x0082, Exception -> 0x0078 }
            r10.restoreAtInstallForUser(r11, r0, r9)     // Catch:{ RemoteException -> 0x0082, Exception -> 0x0078 }
            goto L_0x0083
        L_0x0075:
            r0 = 0
            r8 = r0
            goto L_0x0083
        L_0x0078:
            r0 = move-exception
            java.lang.String r12 = "PackageManager"
            java.lang.String r13 = "Exception trying to enqueue restore"
            android.util.Slog.e(r12, r13, r0)
            r8 = 0
            goto L_0x0083
        L_0x0082:
            r0 = move-exception
        L_0x0083:
            r13 = r11
            goto L_0x0094
        L_0x0085:
            r11 = r27
            java.lang.String r0 = "PackageManager"
            java.lang.String r12 = "Backup Manager not found!"
            android.util.Slog.e(r0, r12)
            r8 = 0
            r13 = r11
            goto L_0x0094
        L_0x0091:
            r11 = r27
            r13 = r11
        L_0x0094:
            int r0 = r2.returnCode
            if (r0 != r5) goto L_0x0134
            if (r8 != 0) goto L_0x0134
            if (r6 == 0) goto L_0x0134
            java.lang.String r0 = "rollback"
            android.os.IBinder r0 = android.os.ServiceManager.getService(r0)
            android.content.rollback.IRollbackManager r18 = android.content.rollback.IRollbackManager.Stub.asInterface(r0)
            android.content.pm.PackageParser$Package r0 = r2.pkg
            android.content.pm.ApplicationInfo r0 = r0.applicationInfo
            java.lang.String r11 = r0.packageName
            android.content.pm.PackageParser$Package r0 = r2.pkg
            android.content.pm.ApplicationInfo r0 = r0.applicationInfo
            java.lang.String r10 = r0.seInfo
            com.android.server.pm.UserManagerService r0 = sUserManager
            int[] r12 = r0.getUserIds()
            r16 = -1
            r19 = -1
            com.android.server.pm.Settings r14 = r1.mSettings
            monitor-enter(r14)
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0127 }
            com.android.server.pm.PackageSetting r0 = r0.getPackageLPr(r11)     // Catch:{ all -> 0x0127 }
            r15 = r0
            if (r15 == 0) goto L_0x00e1
            int r0 = r15.appId     // Catch:{ all -> 0x00d7 }
            r16 = r0
            long r21 = r15.getCeDataInode(r13)     // Catch:{ all -> 0x00d7 }
            r19 = r21
            r19 = r16
            goto L_0x00e5
        L_0x00d7:
            r0 = move-exception
            r23 = r10
            r24 = r11
            r27 = r12
            r25 = r13
            goto L_0x0130
        L_0x00e1:
            r21 = r19
            r19 = r16
        L_0x00e5:
            int[] r0 = r15.queryInstalledUsers(r12, r5)     // Catch:{ all -> 0x0119 }
            r5 = r12
            r12 = r0
            monitor-exit(r14)     // Catch:{ all -> 0x010b }
            r23 = r10
            r10 = r18
            r24 = r11
            r25 = r13
            r13 = r19
            r27 = r5
            r20 = r15
            r4 = 262144(0x40000, double:1.295163E-318)
            r14 = r21
            r16 = r23
            r17 = r9
            r10.snapshotAndRestoreUserData(r11, r12, r13, r14, r16, r17)     // Catch:{ RemoteException -> 0x0108 }
            goto L_0x0109
        L_0x0108:
            r0 = move-exception
        L_0x0109:
            r8 = 1
            goto L_0x0137
        L_0x010b:
            r0 = move-exception
            r27 = r5
            r23 = r10
            r24 = r11
            r25 = r13
            r16 = r19
            r19 = r21
            goto L_0x0130
        L_0x0119:
            r0 = move-exception
            r23 = r10
            r24 = r11
            r27 = r12
            r25 = r13
            r16 = r19
            r19 = r21
            goto L_0x0130
        L_0x0127:
            r0 = move-exception
            r23 = r10
            r24 = r11
            r27 = r12
            r25 = r13
        L_0x0130:
            monitor-exit(r14)     // Catch:{ all -> 0x0132 }
            throw r0
        L_0x0132:
            r0 = move-exception
            goto L_0x0130
        L_0x0134:
            r25 = r13
            r4 = r14
        L_0x0137:
            if (r8 != 0) goto L_0x014d
            java.lang.String r0 = "postInstall"
            android.os.Trace.asyncTraceBegin(r4, r0, r9)
            com.android.server.pm.PackageManagerService$PackageHandler r0 = r1.mHandler
            r4 = 9
            r5 = 0
            android.os.Message r0 = r0.obtainMessage(r4, r9, r5)
            com.android.server.pm.PackageManagerService$PackageHandler r4 = r1.mHandler
            r4.sendMessage(r0)
        L_0x014d:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.restoreAndPostInstall(int, com.android.server.pm.PackageManagerService$PackageInstalledInfo, com.android.server.pm.PackageManagerService$PostInstallData):void");
    }

    /* access modifiers changed from: package-private */
    public void notifyFirstLaunch(String packageName, String installerPackage, int userId) {
        this.mHandler.post(new Runnable(packageName, userId, installerPackage) {
            private final /* synthetic */ String f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ String f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                PackageManagerService.this.lambda$notifyFirstLaunch$14$PackageManagerService(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$notifyFirstLaunch$14$PackageManagerService(String packageName, int userId, String installerPackage) {
        for (int i = 0; i < this.mRunningInstalls.size(); i++) {
            PostInstallData data = this.mRunningInstalls.valueAt(i);
            if (data.res.returnCode == 1 && packageName.equals(data.res.pkg.applicationInfo.packageName)) {
                int uIndex = 0;
                while (uIndex < data.res.newUsers.length) {
                    if (userId != data.res.newUsers[uIndex]) {
                        uIndex++;
                    } else {
                        return;
                    }
                }
                continue;
            }
        }
        boolean isInstantApp = isInstantApp(packageName, userId);
        sendFirstLaunchBroadcast(packageName, installerPackage, isInstantApp ? EMPTY_INT_ARRAY : new int[]{userId}, isInstantApp ? new int[]{userId} : EMPTY_INT_ARRAY);
    }

    private void sendFirstLaunchBroadcast(String pkgName, String installerPkg, int[] userIds, int[] instantUserIds) {
        sendPackageBroadcast("android.intent.action.PACKAGE_FIRST_LAUNCH", pkgName, (Bundle) null, 0, installerPkg, (IIntentReceiver) null, userIds, instantUserIds);
    }

    private abstract class HandlerParams {
        private final UserHandle mUser;
        int traceCookie;
        String traceMethod;

        /* access modifiers changed from: package-private */
        public abstract void handleReturnCode();

        /* access modifiers changed from: package-private */
        public abstract void handleStartCopy();

        HandlerParams(UserHandle user) {
            this.mUser = user;
        }

        /* access modifiers changed from: package-private */
        public UserHandle getUser() {
            return this.mUser;
        }

        /* access modifiers changed from: package-private */
        public UserHandle getRollbackUser() {
            if (this.mUser == UserHandle.ALL) {
                return UserHandle.SYSTEM;
            }
            return this.mUser;
        }

        /* access modifiers changed from: package-private */
        public HandlerParams setTraceMethod(String traceMethod2) {
            this.traceMethod = traceMethod2;
            return this;
        }

        /* access modifiers changed from: package-private */
        public HandlerParams setTraceCookie(int traceCookie2) {
            this.traceCookie = traceCookie2;
            return this;
        }

        /* access modifiers changed from: package-private */
        public final void startCopy() {
            handleStartCopy();
            handleReturnCode();
        }
    }

    static class OriginInfo {
        final boolean existing;
        final File file;
        final File resolvedFile;
        final String resolvedPath;
        final boolean staged;

        public String getLocation() {
            File file2 = this.file;
            return file2 != null ? file2.getAbsolutePath() : "";
        }

        static OriginInfo fromNothing() {
            return new OriginInfo((File) null, false, false);
        }

        static OriginInfo fromUntrustedFile(File file2) {
            return new OriginInfo(file2, false, false);
        }

        static OriginInfo fromExistingFile(File file2) {
            return new OriginInfo(file2, false, true);
        }

        static OriginInfo fromStagedFile(File file2) {
            return new OriginInfo(file2, true, false);
        }

        private OriginInfo(File file2, boolean staged2, boolean existing2) {
            this.file = file2;
            this.staged = staged2;
            this.existing = existing2;
            if (file2 != null) {
                this.resolvedPath = file2.getAbsolutePath();
                this.resolvedFile = file2;
                return;
            }
            this.resolvedPath = null;
            this.resolvedFile = null;
        }
    }

    static class MoveInfo {
        final int appId;
        final String dataAppName;
        final String fromUuid;
        final int moveId;
        final String packageName;
        final String seinfo;
        final int targetSdkVersion;
        final String toUuid;

        public MoveInfo(int moveId2, String fromUuid2, String toUuid2, String packageName2, String dataAppName2, int appId2, String seinfo2, int targetSdkVersion2) {
            this.moveId = moveId2;
            this.fromUuid = fromUuid2;
            this.toUuid = toUuid2;
            this.packageName = packageName2;
            this.dataAppName = dataAppName2;
            this.appId = appId2;
            this.seinfo = seinfo2;
            this.targetSdkVersion = targetSdkVersion2;
        }
    }

    static class VerificationInfo {
        public static final int NO_UID = -1;
        final int installerUid;
        final int originatingUid;
        final Uri originatingUri;
        final Uri referrer;

        VerificationInfo(Uri originatingUri2, Uri referrer2, int originatingUid2, int installerUid2) {
            this.originatingUri = originatingUri2;
            this.referrer = referrer2;
            this.originatingUid = originatingUid2;
            this.installerUid = installerUid2;
        }
    }

    class MultiPackageInstallParams extends HandlerParams {
        private final ArrayList<InstallParams> mChildParams;
        private final Map<InstallArgs, Integer> mCurrentState;
        private int mRet = 1;

        MultiPackageInstallParams(UserHandle user, List<ActiveInstallSession> activeInstallSessions) throws PackageManagerException {
            super(user);
            if (activeInstallSessions.size() != 0) {
                this.mChildParams = new ArrayList<>(activeInstallSessions.size());
                for (int i = 0; i < activeInstallSessions.size(); i++) {
                    InstallParams childParams = new InstallParams(activeInstallSessions.get(i));
                    childParams.mParentInstallParams = this;
                    this.mChildParams.add(childParams);
                }
                this.mCurrentState = new ArrayMap(this.mChildParams.size());
                return;
            }
            throw new PackageManagerException("No child sessions found!");
        }

        /* access modifiers changed from: package-private */
        public void handleStartCopy() {
            Iterator<InstallParams> it = this.mChildParams.iterator();
            while (it.hasNext()) {
                InstallParams params = it.next();
                params.handleStartCopy();
                if (params.mRet != 1) {
                    this.mRet = params.mRet;
                }
            }
        }

        /* access modifiers changed from: package-private */
        public void handleReturnCode() {
            Iterator<InstallParams> it = this.mChildParams.iterator();
            while (it.hasNext()) {
                InstallParams params = it.next();
                params.handleReturnCode();
                if (params.mRet != 1) {
                    this.mRet = params.mRet;
                }
            }
        }

        /* access modifiers changed from: package-private */
        public void tryProcessInstallRequest(InstallArgs args, int currentStatus) {
            boolean z;
            this.mCurrentState.put(args, Integer.valueOf(currentStatus));
            if (this.mCurrentState.size() == this.mChildParams.size()) {
                int completeStatus = 1;
                Iterator<Integer> it = this.mCurrentState.values().iterator();
                while (true) {
                    z = true;
                    if (!it.hasNext()) {
                        break;
                    }
                    Integer status = it.next();
                    if (status.intValue() != 0) {
                        if (status.intValue() != 1) {
                            completeStatus = status.intValue();
                            break;
                        }
                    } else {
                        return;
                    }
                }
                List<InstallRequest> installRequests = new ArrayList<>(this.mCurrentState.size());
                for (Map.Entry<InstallArgs, Integer> entry : this.mCurrentState.entrySet()) {
                    installRequests.add(new InstallRequest(entry.getKey(), PackageManagerService.this.createPackageInstalledInfo(completeStatus)));
                }
                PackageManagerService packageManagerService = PackageManagerService.this;
                if (completeStatus != 1) {
                    z = false;
                }
                packageManagerService.processInstallRequestsAsync(z, installRequests);
            }
        }
    }

    class InstallParams extends HandlerParams {
        final String[] grantedRuntimePermissions;
        int installFlags;
        final int installReason;
        final String installerPackageName;
        /* access modifiers changed from: private */
        public InstallArgs mArgs;
        private boolean mEnableRollbackCompleted;
        MultiPackageInstallParams mParentInstallParams;
        int mRet;
        private boolean mVerificationCompleted;
        final MoveInfo move;
        final IPackageInstallObserver2 observer;
        final OriginInfo origin;
        final String packageAbiOverride;
        final long requiredInstalledVersionCode;
        final PackageParser.SigningDetails signingDetails;
        InstallationStatistic statistic;
        final VerificationInfo verificationInfo;
        final String volumeUuid;
        final List<String> whitelistedRestrictedPermissions;

        /* access modifiers changed from: package-private */
        public InstallationStatistic getStatistic() {
            if (this.statistic == null) {
                this.statistic = new InstallationStatistic();
            }
            return this.statistic;
        }

        /* JADX WARNING: Illegal instructions before constructor call */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        InstallParams(com.android.server.pm.PackageManagerService r16, com.android.server.pm.PackageManagerService.OriginInfo r17, com.android.server.pm.PackageManagerService.MoveInfo r18, android.content.pm.IPackageInstallObserver2 r19, int r20, java.lang.String r21, java.lang.String r22, com.android.server.pm.PackageManagerService.VerificationInfo r23, android.os.UserHandle r24, java.lang.String r25, java.lang.String[] r26, java.util.List<java.lang.String> r27, android.content.pm.PackageParser.SigningDetails r28, int r29, long r30) {
            /*
                r15 = this;
                r0 = r15
                r1 = r16
                com.android.server.pm.PackageManagerService.this = r1
                r2 = r24
                r15.<init>(r2)
                r3 = r17
                r0.origin = r3
                r4 = r18
                r0.move = r4
                r5 = r19
                r0.observer = r5
                r6 = r20
                r0.installFlags = r6
                r7 = r21
                r0.installerPackageName = r7
                r8 = r22
                r0.volumeUuid = r8
                r9 = r23
                r0.verificationInfo = r9
                r10 = r25
                r0.packageAbiOverride = r10
                r11 = r26
                r0.grantedRuntimePermissions = r11
                r12 = r27
                r0.whitelistedRestrictedPermissions = r12
                r13 = r28
                r0.signingDetails = r13
                r14 = r29
                r0.installReason = r14
                r1 = r30
                r0.requiredInstalledVersionCode = r1
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.InstallParams.<init>(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$OriginInfo, com.android.server.pm.PackageManagerService$MoveInfo, android.content.pm.IPackageInstallObserver2, int, java.lang.String, java.lang.String, com.android.server.pm.PackageManagerService$VerificationInfo, android.os.UserHandle, java.lang.String, java.lang.String[], java.util.List, android.content.pm.PackageParser$SigningDetails, int, long):void");
        }

        InstallParams(ActiveInstallSession activeInstallSession) {
            super(activeInstallSession.getUser());
            if (PackageManagerService.DEBUG_INSTANT && (activeInstallSession.getSessionParams().installFlags & 2048) != 0) {
                Slog.d(PackageManagerService.TAG, "Ephemeral install of " + activeInstallSession.getPackageName());
            }
            this.verificationInfo = new VerificationInfo(activeInstallSession.getSessionParams().originatingUri, activeInstallSession.getSessionParams().referrerUri, activeInstallSession.getSessionParams().originatingUid, activeInstallSession.getInstallerUid());
            this.origin = OriginInfo.fromStagedFile(activeInstallSession.getStagedDir());
            this.move = null;
            this.installReason = PackageManagerService.this.fixUpInstallReason(activeInstallSession.getInstallerPackageName(), activeInstallSession.getInstallerUid(), activeInstallSession.getSessionParams().installReason);
            this.observer = activeInstallSession.getObserver();
            this.installFlags = activeInstallSession.getSessionParams().installFlags;
            this.installerPackageName = activeInstallSession.getInstallerPackageName();
            this.volumeUuid = activeInstallSession.getSessionParams().volumeUuid;
            this.packageAbiOverride = activeInstallSession.getSessionParams().abiOverride;
            this.grantedRuntimePermissions = activeInstallSession.getSessionParams().grantedRuntimePermissions;
            this.whitelistedRestrictedPermissions = activeInstallSession.getSessionParams().whitelistedRestrictedPermissions;
            this.signingDetails = activeInstallSession.getSigningDetails();
            this.requiredInstalledVersionCode = activeInstallSession.getSessionParams().requiredInstalledVersionCode;
        }

        public String toString() {
            return "InstallParams{" + Integer.toHexString(System.identityHashCode(this)) + " file=" + this.origin.file + "}";
        }

        /* JADX WARNING: Code restructure failed: missing block: B:54:0x00da, code lost:
            return r11.recommendedInstallLocation;
         */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        private int installLocationPolicy(android.content.pm.PackageInfoLite r11) {
            /*
                r10 = this;
                java.lang.String r0 = r11.packageName
                int r1 = r11.installLocation
                com.android.server.pm.PackageManagerService r2 = com.android.server.pm.PackageManagerService.this
                android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r2.mPackages
                monitor-enter(r2)
                com.android.server.pm.PackageManagerService r3 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x00db }
                android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r3.mPackages     // Catch:{ all -> 0x00db }
                java.lang.Object r3 = r3.get(r0)     // Catch:{ all -> 0x00db }
                android.content.pm.PackageParser$Package r3 = (android.content.pm.PackageParser.Package) r3     // Catch:{ all -> 0x00db }
                r4 = r3
                if (r4 != 0) goto L_0x0027
                com.android.server.pm.PackageManagerService r5 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x00db }
                com.android.server.pm.Settings r5 = r5.mSettings     // Catch:{ all -> 0x00db }
                android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r5 = r5.mPackages     // Catch:{ all -> 0x00db }
                java.lang.Object r5 = r5.get(r0)     // Catch:{ all -> 0x00db }
                com.android.server.pm.PackageSetting r5 = (com.android.server.pm.PackageSetting) r5     // Catch:{ all -> 0x00db }
                if (r5 == 0) goto L_0x0027
                android.content.pm.PackageParser$Package r6 = r5.pkg     // Catch:{ all -> 0x00db }
                r4 = r6
            L_0x0027:
                long r5 = r10.requiredInstalledVersionCode     // Catch:{ all -> 0x00db }
                r7 = -1
                int r5 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
                if (r5 == 0) goto L_0x0081
                r5 = -8
                if (r4 != 0) goto L_0x0051
                java.lang.String r6 = "PackageManager"
                java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x00db }
                r7.<init>()     // Catch:{ all -> 0x00db }
                java.lang.String r8 = "Required installed version code was "
                r7.append(r8)     // Catch:{ all -> 0x00db }
                long r8 = r10.requiredInstalledVersionCode     // Catch:{ all -> 0x00db }
                r7.append(r8)     // Catch:{ all -> 0x00db }
                java.lang.String r8 = " but package is not installed"
                r7.append(r8)     // Catch:{ all -> 0x00db }
                java.lang.String r7 = r7.toString()     // Catch:{ all -> 0x00db }
                android.util.Slog.w(r6, r7)     // Catch:{ all -> 0x00db }
                monitor-exit(r2)     // Catch:{ all -> 0x00db }
                return r5
            L_0x0051:
                long r6 = r4.getLongVersionCode()     // Catch:{ all -> 0x00db }
                long r8 = r10.requiredInstalledVersionCode     // Catch:{ all -> 0x00db }
                int r6 = (r6 > r8 ? 1 : (r6 == r8 ? 0 : -1))
                if (r6 == 0) goto L_0x0081
                java.lang.String r6 = "PackageManager"
                java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x00db }
                r7.<init>()     // Catch:{ all -> 0x00db }
                java.lang.String r8 = "Required installed version code was "
                r7.append(r8)     // Catch:{ all -> 0x00db }
                long r8 = r10.requiredInstalledVersionCode     // Catch:{ all -> 0x00db }
                r7.append(r8)     // Catch:{ all -> 0x00db }
                java.lang.String r8 = " but actual installed version is "
                r7.append(r8)     // Catch:{ all -> 0x00db }
                long r8 = r4.getLongVersionCode()     // Catch:{ all -> 0x00db }
                r7.append(r8)     // Catch:{ all -> 0x00db }
                java.lang.String r7 = r7.toString()     // Catch:{ all -> 0x00db }
                android.util.Slog.w(r6, r7)     // Catch:{ all -> 0x00db }
                monitor-exit(r2)     // Catch:{ all -> 0x00db }
                return r5
            L_0x0081:
                if (r4 == 0) goto L_0x00b1
                int r5 = r10.installFlags     // Catch:{ all -> 0x00db }
                android.content.pm.ApplicationInfo r6 = r4.applicationInfo     // Catch:{ all -> 0x00db }
                int r6 = r6.flags     // Catch:{ all -> 0x00db }
                boolean r5 = com.android.server.pm.PackageManagerServiceUtils.isDowngradePermitted(r5, r6)     // Catch:{ all -> 0x00db }
                if (r5 != 0) goto L_0x00b1
                com.android.server.pm.PackageManagerService.checkDowngrade(r4, r11)     // Catch:{ PackageManagerException -> 0x0093 }
                goto L_0x00b1
            L_0x0093:
                r5 = move-exception
                java.lang.String r6 = "PackageManager"
                java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x00db }
                r7.<init>()     // Catch:{ all -> 0x00db }
                java.lang.String r8 = "Downgrade detected: "
                r7.append(r8)     // Catch:{ all -> 0x00db }
                java.lang.String r8 = r5.getMessage()     // Catch:{ all -> 0x00db }
                r7.append(r8)     // Catch:{ all -> 0x00db }
                java.lang.String r7 = r7.toString()     // Catch:{ all -> 0x00db }
                android.util.Slog.w(r6, r7)     // Catch:{ all -> 0x00db }
                r6 = -7
                monitor-exit(r2)     // Catch:{ all -> 0x00db }
                return r6
            L_0x00b1:
                if (r3 == 0) goto L_0x00d7
                int r5 = r10.installFlags     // Catch:{ all -> 0x00db }
                r6 = 2
                r5 = r5 & r6
                if (r5 == 0) goto L_0x00d4
                android.content.pm.ApplicationInfo r5 = r3.applicationInfo     // Catch:{ all -> 0x00db }
                int r5 = r5.flags     // Catch:{ all -> 0x00db }
                r7 = 1
                r5 = r5 & r7
                if (r5 == 0) goto L_0x00c3
                monitor-exit(r2)     // Catch:{ all -> 0x00db }
                return r7
            L_0x00c3:
                if (r1 != r7) goto L_0x00c7
                monitor-exit(r2)     // Catch:{ all -> 0x00db }
                return r7
            L_0x00c7:
                if (r1 != r6) goto L_0x00ca
                goto L_0x00d7
            L_0x00ca:
                boolean r5 = com.android.server.pm.PackageManagerService.isExternal((android.content.pm.PackageParser.Package) r3)     // Catch:{ all -> 0x00db }
                if (r5 == 0) goto L_0x00d2
                monitor-exit(r2)     // Catch:{ all -> 0x00db }
                return r6
            L_0x00d2:
                monitor-exit(r2)     // Catch:{ all -> 0x00db }
                return r7
            L_0x00d4:
                r5 = -4
                monitor-exit(r2)     // Catch:{ all -> 0x00db }
                return r5
            L_0x00d7:
                monitor-exit(r2)     // Catch:{ all -> 0x00db }
                int r2 = r11.recommendedInstallLocation
                return r2
            L_0x00db:
                r3 = move-exception
                monitor-exit(r2)     // Catch:{ all -> 0x00db }
                throw r3
            */
            throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.InstallParams.installLocationPolicy(android.content.pm.PackageInfoLite):int");
        }

        /* JADX WARNING: Removed duplicated region for block: B:119:0x02bc  */
        /* JADX WARNING: Removed duplicated region for block: B:123:0x032c  */
        /* JADX WARNING: Removed duplicated region for block: B:130:0x0347  */
        /* JADX WARNING: Removed duplicated region for block: B:137:0x03bd  */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public void handleStartCopy() {
            /*
                r36 = this;
                r1 = r36
                r2 = 1
                com.android.server.pm.PackageManagerService$OriginInfo r0 = r1.origin
                boolean r0 = r0.staged
                if (r0 == 0) goto L_0x001e
                com.android.server.pm.PackageManagerService$OriginInfo r0 = r1.origin
                java.io.File r0 = r0.file
                if (r0 == 0) goto L_0x0016
                int r0 = r1.installFlags
                r0 = r0 | 16
                r1.installFlags = r0
                goto L_0x001e
            L_0x0016:
                java.lang.IllegalStateException r0 = new java.lang.IllegalStateException
                java.lang.String r3 = "Invalid stage location"
                r0.<init>(r3)
                throw r0
            L_0x001e:
                int r0 = r1.installFlags
                r0 = r0 & 16
                r4 = 1
                if (r0 == 0) goto L_0x0027
                r0 = r4
                goto L_0x0028
            L_0x0027:
                r0 = 0
            L_0x0028:
                r5 = r0
                int r0 = r1.installFlags
                r0 = r0 & 2048(0x800, float:2.87E-42)
                if (r0 == 0) goto L_0x0031
                r0 = r4
                goto L_0x0032
            L_0x0031:
                r0 = 0
            L_0x0032:
                r6 = r0
                r0 = 0
                com.android.server.pm.PackageManagerService r7 = com.android.server.pm.PackageManagerService.this
                android.content.Context r7 = r7.mContext
                com.android.server.pm.PackageManagerService$OriginInfo r8 = r1.origin
                java.lang.String r8 = r8.resolvedPath
                int r9 = r1.installFlags
                java.lang.String r10 = r1.packageAbiOverride
                android.content.pm.PackageInfoLite r7 = com.android.server.pm.PackageManagerServiceUtils.getMinimalPackageInfo(r7, r8, r9, r10)
                boolean r0 = com.android.server.pm.PackageManagerService.DEBUG_INSTANT
                if (r0 == 0) goto L_0x0063
                if (r6 == 0) goto L_0x0063
                java.lang.StringBuilder r0 = new java.lang.StringBuilder
                r0.<init>()
                java.lang.String r8 = "pkgLite for install: "
                r0.append(r8)
                r0.append(r7)
                java.lang.String r0 = r0.toString()
                java.lang.String r8 = "PackageManager"
                android.util.Slog.v(r8, r0)
            L_0x0063:
                com.android.server.pm.PackageManagerService$OriginInfo r0 = r1.origin
                boolean r0 = r0.staged
                r8 = -6
                r9 = 0
                r11 = -1
                if (r0 != 0) goto L_0x00c1
                int r0 = r7.recommendedInstallLocation
                if (r0 != r11) goto L_0x00c1
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                android.content.Context r0 = r0.mContext
                android.os.storage.StorageManager r12 = android.os.storage.StorageManager.from(r0)
                java.io.File r0 = android.os.Environment.getDataDirectory()
                long r13 = r12.getStorageLowBytes(r0)
                com.android.server.pm.PackageManagerService$OriginInfo r0 = r1.origin
                java.lang.String r0 = r0.resolvedPath
                java.lang.String r15 = r1.packageAbiOverride
                long r15 = com.android.server.pm.PackageManagerServiceUtils.calculateInstalledSize(r0, r15)
                int r0 = (r15 > r9 ? 1 : (r15 == r9 ? 0 : -1))
                if (r0 < 0) goto L_0x00bb
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this     // Catch:{ InstallerException -> 0x00b3 }
                com.android.server.pm.Installer r0 = r0.mInstaller     // Catch:{ InstallerException -> 0x00b3 }
                r18 = 0
                long r19 = r15 + r13
                r21 = 0
                r23 = 0
                r17 = r0
                r17.freeCache(r18, r19, r21, r23)     // Catch:{ InstallerException -> 0x00b3 }
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this     // Catch:{ InstallerException -> 0x00b3 }
                android.content.Context r0 = r0.mContext     // Catch:{ InstallerException -> 0x00b3 }
                com.android.server.pm.PackageManagerService$OriginInfo r9 = r1.origin     // Catch:{ InstallerException -> 0x00b3 }
                java.lang.String r9 = r9.resolvedPath     // Catch:{ InstallerException -> 0x00b3 }
                int r10 = r1.installFlags     // Catch:{ InstallerException -> 0x00b3 }
                java.lang.String r3 = r1.packageAbiOverride     // Catch:{ InstallerException -> 0x00b3 }
                android.content.pm.PackageInfoLite r0 = com.android.server.pm.PackageManagerServiceUtils.getMinimalPackageInfo(r0, r9, r10, r3)     // Catch:{ InstallerException -> 0x00b3 }
                r7 = r0
                goto L_0x00bb
            L_0x00b3:
                r0 = move-exception
                java.lang.String r3 = "PackageManager"
                java.lang.String r9 = "Failed to free cache"
                android.util.Slog.w(r3, r9, r0)
            L_0x00bb:
                int r0 = r7.recommendedInstallLocation
                if (r0 != r8) goto L_0x00c1
                r7.recommendedInstallLocation = r11
            L_0x00c1:
                if (r2 != r4) goto L_0x0122
                int r0 = r7.recommendedInstallLocation
                r3 = -3
                if (r0 != r3) goto L_0x00cb
                r2 = -19
                goto L_0x0122
            L_0x00cb:
                r3 = -4
                if (r0 != r3) goto L_0x00d0
                r2 = -1
                goto L_0x0122
            L_0x00d0:
                if (r0 != r11) goto L_0x00d4
                r2 = -4
                goto L_0x0122
            L_0x00d4:
                r3 = -2
                if (r0 != r3) goto L_0x00d9
                r2 = -2
                goto L_0x0122
            L_0x00d9:
                if (r0 != r8) goto L_0x00dd
                r2 = -3
                goto L_0x0122
            L_0x00dd:
                r3 = -5
                if (r0 != r3) goto L_0x00e3
                r2 = -20
                goto L_0x0122
            L_0x00e3:
                int r0 = r1.installLocationPolicy(r7)
                r3 = -7
                if (r0 != r3) goto L_0x00ed
                r2 = -25
                goto L_0x0122
            L_0x00ed:
                r3 = -8
                if (r0 != r3) goto L_0x00f3
                r2 = -121(0xffffffffffffff87, float:NaN)
                goto L_0x0122
            L_0x00f3:
                if (r5 != 0) goto L_0x0122
                r3 = 2
                if (r0 != r3) goto L_0x00ff
                int r3 = r1.installFlags
                r3 = r3 & -17
                r1.installFlags = r3
                goto L_0x0122
            L_0x00ff:
                r3 = 3
                if (r0 != r3) goto L_0x011c
                boolean r3 = com.android.server.pm.PackageManagerService.DEBUG_INSTANT
                if (r3 == 0) goto L_0x010f
                java.lang.String r3 = "PackageManager"
                java.lang.String r8 = "...setting INSTALL_EPHEMERAL install flag"
                android.util.Slog.v(r3, r8)
            L_0x010f:
                int r3 = r1.installFlags
                r3 = r3 | 2048(0x800, float:2.87E-42)
                r1.installFlags = r3
                int r3 = r1.installFlags
                r3 = r3 & -17
                r1.installFlags = r3
                goto L_0x0122
            L_0x011c:
                int r3 = r1.installFlags
                r3 = r3 | 16
                r1.installFlags = r3
            L_0x0122:
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                com.android.server.pm.PackageManagerService$InstallArgs r3 = r0.createInstallArgs(r1)
                r1.mVerificationCompleted = r4
                r1.mEnableRollbackCompleted = r4
                r1.mArgs = r3
                if (r2 != r4) goto L_0x045a
                android.os.UserHandle r0 = r36.getUser()
                android.os.UserHandle r8 = android.os.UserHandle.ALL
                if (r0 != r8) goto L_0x013c
                android.os.UserHandle r0 = android.os.UserHandle.SYSTEM
                r8 = r0
                goto L_0x013d
            L_0x013c:
                r8 = r0
            L_0x013d:
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                java.lang.String r0 = r0.mRequiredVerifierPackage
                r9 = 268435456(0x10000000, float:2.5243549E-29)
                if (r0 != 0) goto L_0x0147
                r0 = r11
                goto L_0x0153
            L_0x0147:
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                java.lang.String r10 = r0.mRequiredVerifierPackage
                int r12 = r8.getIdentifier()
                int r0 = r0.getPackageUid(r10, r9, r12)
            L_0x0153:
                r10 = r0
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                java.lang.String r0 = r0.mOptionalVerifierPackage
                if (r0 != 0) goto L_0x015c
                r0 = r11
                goto L_0x0168
            L_0x015c:
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                java.lang.String r12 = r0.mOptionalVerifierPackage
                int r13 = r8.getIdentifier()
                int r0 = r0.getPackageUid(r12, r9, r13)
            L_0x0168:
                r12 = r0
                com.android.server.pm.PackageManagerService$VerificationInfo r0 = r1.verificationInfo
                if (r0 != 0) goto L_0x016f
                r0 = r11
                goto L_0x0171
            L_0x016f:
                int r0 = r0.installerUid
            L_0x0171:
                r13 = r0
                com.android.server.pm.PackageManagerService$OriginInfo r0 = r1.origin
                boolean r0 = r0.existing
                if (r0 != 0) goto L_0x03aa
                if (r10 != r11) goto L_0x0189
                if (r12 == r11) goto L_0x017d
                goto L_0x0189
            L_0x017d:
                r28 = r2
                r31 = r3
                r32 = r5
                r33 = r6
                r34 = r10
                goto L_0x03b4
            L_0x0189:
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                int r11 = r8.getIdentifier()
                int r14 = r1.installFlags
                boolean r0 = r0.isVerificationEnabled(r11, r14, r13)
                if (r0 == 0) goto L_0x039f
                android.content.Intent r0 = new android.content.Intent
                java.lang.String r11 = "android.intent.action.PACKAGE_NEEDS_VERIFICATION"
                r0.<init>(r11)
                r0.addFlags(r9)
                java.io.File r9 = new java.io.File
                com.android.server.pm.PackageManagerService$OriginInfo r11 = r1.origin
                java.lang.String r11 = r11.resolvedPath
                r9.<init>(r11)
                android.net.Uri r9 = android.net.Uri.fromFile(r9)
                java.lang.String r11 = "application/vnd.android.package-archive"
                r0.setDataAndType(r9, r11)
                r0.addFlags(r4)
                com.android.server.pm.PackageManagerService r9 = com.android.server.pm.PackageManagerService.this
                r23 = 0
                int r24 = r8.getIdentifier()
                r25 = 0
                java.lang.String r22 = "application/vnd.android.package-archive"
                r20 = r9
                r21 = r0
                java.util.List r9 = r20.queryIntentReceiversInternal(r21, r22, r23, r24, r25)
                com.android.server.pm.PackageManagerService r11 = com.android.server.pm.PackageManagerService.this
                int r11 = com.android.server.pm.PackageManagerService.access$3208(r11)
                java.lang.String r14 = "android.content.pm.extra.VERIFICATION_ID"
                r0.putExtra(r14, r11)
                java.lang.String r14 = r1.installerPackageName
                java.lang.String r15 = "android.content.pm.extra.VERIFICATION_INSTALLER_PACKAGE"
                r0.putExtra(r15, r14)
                int r14 = r1.installFlags
                java.lang.String r15 = "android.content.pm.extra.VERIFICATION_INSTALL_FLAGS"
                r0.putExtra(r15, r14)
                java.lang.String r14 = r7.packageName
                java.lang.String r15 = "android.content.pm.extra.VERIFICATION_PACKAGE_NAME"
                r0.putExtra(r15, r14)
                int r14 = r7.versionCode
                java.lang.String r15 = "android.content.pm.extra.VERIFICATION_VERSION_CODE"
                r0.putExtra(r15, r14)
                long r14 = r7.getLongVersionCode()
                java.lang.String r4 = "android.content.pm.extra.VERIFICATION_LONG_VERSION_CODE"
                r0.putExtra(r4, r14)
                com.android.server.pm.PackageManagerService$VerificationInfo r4 = r1.verificationInfo
                if (r4 == 0) goto L_0x0239
                android.net.Uri r4 = r4.originatingUri
                if (r4 == 0) goto L_0x020c
                com.android.server.pm.PackageManagerService$VerificationInfo r4 = r1.verificationInfo
                android.net.Uri r4 = r4.originatingUri
                java.lang.String r14 = "android.intent.extra.ORIGINATING_URI"
                r0.putExtra(r14, r4)
            L_0x020c:
                com.android.server.pm.PackageManagerService$VerificationInfo r4 = r1.verificationInfo
                android.net.Uri r4 = r4.referrer
                if (r4 == 0) goto L_0x021b
                com.android.server.pm.PackageManagerService$VerificationInfo r4 = r1.verificationInfo
                android.net.Uri r4 = r4.referrer
                java.lang.String r14 = "android.intent.extra.REFERRER"
                r0.putExtra(r14, r4)
            L_0x021b:
                com.android.server.pm.PackageManagerService$VerificationInfo r4 = r1.verificationInfo
                int r4 = r4.originatingUid
                if (r4 < 0) goto L_0x022a
                com.android.server.pm.PackageManagerService$VerificationInfo r4 = r1.verificationInfo
                int r4 = r4.originatingUid
                java.lang.String r14 = "android.intent.extra.ORIGINATING_UID"
                r0.putExtra(r14, r4)
            L_0x022a:
                com.android.server.pm.PackageManagerService$VerificationInfo r4 = r1.verificationInfo
                int r4 = r4.installerUid
                if (r4 < 0) goto L_0x0239
                com.android.server.pm.PackageManagerService$VerificationInfo r4 = r1.verificationInfo
                int r4 = r4.installerUid
                java.lang.String r14 = "android.content.pm.extra.VERIFICATION_INSTALLER_UID"
                r0.putExtra(r14, r4)
            L_0x0239:
                com.android.server.pm.PackageVerificationState r4 = new com.android.server.pm.PackageVerificationState
                r4.<init>(r10, r1)
                com.android.server.pm.PackageManagerService r14 = com.android.server.pm.PackageManagerService.this
                android.util.SparseArray<com.android.server.pm.PackageVerificationState> r14 = r14.mPendingVerification
                r14.append(r11, r4)
                com.android.server.pm.PackageManagerService r14 = com.android.server.pm.PackageManagerService.this
                java.util.List r14 = r14.matchVerifiers(r7, r9, r4)
                com.android.server.pm.PackageManagerService r15 = com.android.server.pm.PackageManagerService.this
                com.android.server.DeviceIdleController$LocalService r15 = r15.getDeviceIdleController()
                r28 = r2
                com.android.server.pm.PackageManagerService r2 = com.android.server.pm.PackageManagerService.this
                long r29 = r2.getVerificationTimeout()
                if (r14 == 0) goto L_0x02b0
                int r2 = r14.size()
                if (r2 != 0) goto L_0x0270
                r31 = r3
                java.lang.String r3 = "PackageManager"
                r32 = r5
                java.lang.String r5 = "Additional verifiers required, but none installed."
                android.util.Slog.i(r3, r5)
                r3 = -22
                r2 = r3
                goto L_0x02b6
            L_0x0270:
                r31 = r3
                r32 = r5
                r3 = 0
            L_0x0275:
                if (r3 >= r2) goto L_0x02ad
                java.lang.Object r5 = r14.get(r3)
                android.content.ComponentName r5 = (android.content.ComponentName) r5
                int r21 = android.os.Process.myUid()
                java.lang.String r22 = r5.getPackageName()
                int r25 = r8.getIdentifier()
                r26 = 0
                java.lang.String r27 = "package verifier"
                r20 = r15
                r23 = r29
                r20.addPowerSaveTempWhitelistApp(r21, r22, r23, r25, r26, r27)
                r20 = r2
                android.content.Intent r2 = new android.content.Intent
                r2.<init>(r0)
                r2.setComponent(r5)
                r21 = r5
                com.android.server.pm.PackageManagerService r5 = com.android.server.pm.PackageManagerService.this
                android.content.Context r5 = r5.mContext
                r5.sendBroadcastAsUser(r2, r8)
                int r3 = r3 + 1
                r2 = r20
                goto L_0x0275
            L_0x02ad:
                r20 = r2
                goto L_0x02b4
            L_0x02b0:
                r31 = r3
                r32 = r5
            L_0x02b4:
                r2 = r28
            L_0x02b6:
                com.android.server.pm.PackageManagerService r3 = com.android.server.pm.PackageManagerService.this
                java.lang.String r3 = r3.mOptionalVerifierPackage
                if (r3 == 0) goto L_0x032c
                com.android.server.pm.InstallationStatistic r3 = r36.getStatistic()
                r33 = r6
                long r5 = android.os.SystemClock.uptimeMillis()
                r3.timeBeginAospVerify = r5
                android.content.Intent r3 = new android.content.Intent
                r3.<init>(r0)
                java.lang.String r5 = "com.qualcomm.qti.intent.action.PACKAGE_NEEDS_OPTIONAL_VERIFICATION"
                r3.setAction(r5)
                com.android.server.pm.PackageManagerService r5 = com.android.server.pm.PackageManagerService.this
                r23 = 0
                int r24 = r8.getIdentifier()
                r25 = 0
                java.lang.String r22 = "application/vnd.android.package-archive"
                r20 = r5
                r21 = r3
                java.util.List r5 = r20.queryIntentReceiversInternal(r21, r22, r23, r24, r25)
                com.android.server.pm.PackageManagerService r6 = com.android.server.pm.PackageManagerService.this
                r34 = r10
                java.lang.String r10 = r6.mOptionalVerifierPackage
                android.content.ComponentName r6 = r6.matchComponentForVerifier(r10, r5)
                r3.setComponent(r6)
                r4.addOptionalVerifier(r12)
                com.android.server.pm.PackageManagerService r10 = com.android.server.pm.PackageManagerService.this
                java.lang.String r10 = r10.mRequiredVerifierPackage
                if (r10 == 0) goto L_0x0308
                com.android.server.pm.PackageManagerService r10 = com.android.server.pm.PackageManagerService.this
                android.content.Context r10 = r10.mContext
                r35 = r4
                java.lang.String r4 = "android.permission.PACKAGE_VERIFICATION_AGENT"
                r10.sendBroadcastAsUser(r3, r8, r4)
                goto L_0x0332
            L_0x0308:
                r35 = r4
                com.android.server.pm.PackageManagerService r4 = com.android.server.pm.PackageManagerService.this
                android.content.Context r4 = r4.mContext
                com.android.server.pm.PackageManagerService$InstallParams$1 r10 = new com.android.server.pm.PackageManagerService$InstallParams$1
                r10.<init>(r11)
                r25 = 0
                r26 = 0
                r27 = 0
                r28 = 0
                java.lang.String r23 = "android.permission.PACKAGE_VERIFICATION_AGENT"
                r20 = r4
                r21 = r3
                r22 = r8
                r24 = r10
                r20.sendOrderedBroadcastAsUser(r21, r22, r23, r24, r25, r26, r27, r28)
                r4 = 0
                r1.mVerificationCompleted = r4
                goto L_0x0332
            L_0x032c:
                r35 = r4
                r33 = r6
                r34 = r10
            L_0x0332:
                r3 = 1
                if (r2 != r3) goto L_0x03b6
                com.android.server.pm.PackageManagerService r3 = com.android.server.pm.PackageManagerService.this
                java.lang.String r3 = r3.mRequiredVerifierPackage
                if (r3 == 0) goto L_0x03b6
                com.android.server.pm.InstallationStatistic r3 = r36.getStatistic()
                long r3 = r3.timeBeginAospVerify
                r5 = 0
                int r3 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1))
                if (r3 != 0) goto L_0x0351
                com.android.server.pm.InstallationStatistic r3 = r36.getStatistic()
                long r4 = android.os.SystemClock.uptimeMillis()
                r3.timeBeginAospVerify = r4
            L_0x0351:
                com.android.server.pm.PackageManagerService r3 = com.android.server.pm.PackageManagerService.this
                java.lang.String r4 = r3.mRequiredVerifierPackage
                android.content.ComponentName r3 = r3.matchComponentForVerifier(r4, r9)
                java.lang.String r4 = "verification"
                r5 = 262144(0x40000, double:1.295163E-318)
                android.os.Trace.asyncTraceBegin(r5, r4, r11)
                r0.setComponent(r3)
                int r21 = android.os.Process.myUid()
                com.android.server.pm.PackageManagerService r4 = com.android.server.pm.PackageManagerService.this
                java.lang.String r4 = r4.mRequiredVerifierPackage
                int r25 = r8.getIdentifier()
                r26 = 0
                java.lang.String r27 = "package verifier"
                r20 = r15
                r22 = r4
                r23 = r29
                r20.addPowerSaveTempWhitelistApp(r21, r22, r23, r25, r26, r27)
                com.android.server.pm.PackageManagerService r4 = com.android.server.pm.PackageManagerService.this
                android.content.Context r4 = r4.mContext
                com.android.server.pm.PackageManagerService$InstallParams$2 r5 = new com.android.server.pm.PackageManagerService$InstallParams$2
                r5.<init>(r11)
                r25 = 0
                r27 = 0
                r28 = 0
                java.lang.String r23 = "android.permission.PACKAGE_VERIFICATION_AGENT"
                r20 = r4
                r21 = r0
                r22 = r8
                r24 = r5
                r20.sendOrderedBroadcastAsUser(r21, r22, r23, r24, r25, r26, r27, r28)
                r4 = 0
                r1.mVerificationCompleted = r4
                goto L_0x03b6
            L_0x039f:
                r28 = r2
                r31 = r3
                r32 = r5
                r33 = r6
                r34 = r10
                goto L_0x03b4
            L_0x03aa:
                r28 = r2
                r31 = r3
                r32 = r5
                r33 = r6
                r34 = r10
            L_0x03b4:
                r2 = r28
            L_0x03b6:
                int r0 = r1.installFlags
                r3 = 262144(0x40000, float:3.67342E-40)
                r0 = r0 & r3
                if (r0 == 0) goto L_0x0462
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                int r3 = com.android.server.pm.PackageManagerService.access$3508(r0)
                java.lang.String r0 = "enable_rollback"
                r4 = 262144(0x40000, double:1.295163E-318)
                android.os.Trace.asyncTraceBegin(r4, r0, r3)
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                android.util.SparseArray<com.android.server.pm.PackageManagerService$InstallParams> r0 = r0.mPendingEnableRollback
                r0.append(r3, r1)
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r4 = r0.mPackages
                monitor-enter(r4)
                com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x0457 }
                com.android.server.pm.Settings r0 = r0.mSettings     // Catch:{ all -> 0x0457 }
                java.lang.String r5 = r7.packageName     // Catch:{ all -> 0x0457 }
                com.android.server.pm.PackageSetting r0 = r0.getPackageLPr(r5)     // Catch:{ all -> 0x0457 }
                if (r0 == 0) goto L_0x03ef
                com.android.server.pm.UserManagerService r5 = com.android.server.pm.PackageManagerService.sUserManager     // Catch:{ all -> 0x0457 }
                int[] r5 = r5.getUserIds()     // Catch:{ all -> 0x0457 }
                r6 = 1
                int[] r5 = r0.queryInstalledUsers(r5, r6)     // Catch:{ all -> 0x0457 }
                goto L_0x03f3
            L_0x03ef:
                r5 = 0
                int[] r6 = new int[r5]     // Catch:{ all -> 0x0457 }
                r5 = r6
            L_0x03f3:
                monitor-exit(r4)     // Catch:{ all -> 0x0457 }
                android.content.Intent r0 = new android.content.Intent
                java.lang.String r4 = "android.intent.action.PACKAGE_ENABLE_ROLLBACK"
                r0.<init>(r4)
                java.lang.String r4 = "android.content.pm.extra.ENABLE_ROLLBACK_TOKEN"
                r0.putExtra(r4, r3)
                int r4 = r1.installFlags
                java.lang.String r6 = "android.content.pm.extra.ENABLE_ROLLBACK_INSTALL_FLAGS"
                r0.putExtra(r6, r4)
                java.lang.String r4 = "android.content.pm.extra.ENABLE_ROLLBACK_INSTALLED_USERS"
                r0.putExtra(r4, r5)
                android.os.UserHandle r4 = r36.getRollbackUser()
                int r4 = r4.getIdentifier()
                java.lang.String r6 = "android.content.pm.extra.ENABLE_ROLLBACK_USER"
                r0.putExtra(r6, r4)
                java.io.File r4 = new java.io.File
                com.android.server.pm.PackageManagerService$OriginInfo r6 = r1.origin
                java.lang.String r6 = r6.resolvedPath
                r4.<init>(r6)
                android.net.Uri r4 = android.net.Uri.fromFile(r4)
                java.lang.String r6 = "application/vnd.android.package-archive"
                r0.setDataAndType(r4, r6)
                r4 = 1
                r0.addFlags(r4)
                r4 = 67108864(0x4000000, float:1.5046328E-36)
                r0.addFlags(r4)
                com.android.server.pm.PackageManagerService r4 = com.android.server.pm.PackageManagerService.this
                android.content.Context r4 = r4.mContext
                android.os.UserHandle r22 = android.os.UserHandle.SYSTEM
                com.android.server.pm.PackageManagerService$InstallParams$3 r6 = new com.android.server.pm.PackageManagerService$InstallParams$3
                r6.<init>(r3)
                r25 = 0
                r26 = 0
                r27 = 0
                r28 = 0
                java.lang.String r23 = "android.permission.PACKAGE_ROLLBACK_AGENT"
                r20 = r4
                r21 = r0
                r24 = r6
                r20.sendOrderedBroadcastAsUser(r21, r22, r23, r24, r25, r26, r27, r28)
                r4 = 0
                r1.mEnableRollbackCompleted = r4
                goto L_0x0462
            L_0x0457:
                r0 = move-exception
                monitor-exit(r4)     // Catch:{ all -> 0x0457 }
                throw r0
            L_0x045a:
                r28 = r2
                r31 = r3
                r32 = r5
                r33 = r6
            L_0x0462:
                r1.mRet = r2
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.InstallParams.handleStartCopy():void");
        }

        /* access modifiers changed from: package-private */
        public void setReturnCode(int ret) {
            if (this.mRet == 1) {
                this.mRet = ret;
            }
        }

        /* access modifiers changed from: package-private */
        public void handleVerificationFinished() {
            this.mVerificationCompleted = true;
            handleReturnCode();
        }

        /* access modifiers changed from: package-private */
        public void handleRollbackEnabled() {
            this.mEnableRollbackCompleted = true;
            handleReturnCode();
        }

        /* access modifiers changed from: package-private */
        public void handleReturnCode() {
            if (this.mVerificationCompleted && this.mEnableRollbackCompleted) {
                if ((this.installFlags & 8388608) != 0) {
                    String packageName = "";
                    try {
                        new PackageParser();
                        packageName = PackageParser.parsePackageLite(this.origin.file, 0).packageName;
                    } catch (PackageParser.PackageParserException e) {
                        Slog.e(PackageManagerService.TAG, "Can't parse package at " + this.origin.file.getAbsolutePath(), e);
                    }
                    try {
                        this.observer.onPackageInstalled(packageName, this.mRet, "Dry run", new Bundle());
                    } catch (RemoteException e2) {
                        Slog.i(PackageManagerService.TAG, "Observer no longer exists.");
                    }
                } else {
                    if (this.mRet == 1) {
                        this.mRet = this.mArgs.copyApk();
                    }
                    PackageManagerService.this.processPendingInstall(this.mArgs, this.mRet);
                }
            }
        }
    }

    /* access modifiers changed from: private */
    public InstallArgs createInstallArgs(InstallParams params) {
        if (params.move != null) {
            return new MoveInstallArgs(this, params);
        }
        return new FileInstallArgs(this, params);
    }

    private InstallArgs createInstallArgsForExisting(String codePath, String resourcePath, String[] instructionSets) {
        return new FileInstallArgs(this, codePath, resourcePath, instructionSets);
    }

    static abstract class InstallArgs {
        final String abiOverride;
        final int installFlags;
        final String[] installGrantPermissions;
        final int installReason;
        final String installerPackageName;
        String[] instructionSets;
        final MultiPackageInstallParams mMultiPackageInstallParams;
        final MoveInfo move;
        final IPackageInstallObserver2 observer;
        final OriginInfo origin;
        final PackageParser.SigningDetails signingDetails;
        InstallationStatistic statistic;
        final int traceCookie;
        final String traceMethod;
        final UserHandle user;
        final String volumeUuid;
        final List<String> whitelistedRestrictedPermissions;

        /* access modifiers changed from: package-private */
        public abstract void cleanUpResourcesLI();

        /* access modifiers changed from: package-private */
        public abstract int copyApk();

        /* access modifiers changed from: package-private */
        public abstract boolean doPostDeleteLI(boolean z);

        /* access modifiers changed from: package-private */
        public abstract int doPostInstall(int i, int i2);

        /* access modifiers changed from: package-private */
        public abstract int doPreInstall(int i);

        /* access modifiers changed from: package-private */
        public abstract boolean doRename(int i, PackageParser.Package packageR);

        /* access modifiers changed from: package-private */
        public abstract String getCodePath();

        /* access modifiers changed from: package-private */
        public abstract String getResourcePath();

        /* access modifiers changed from: package-private */
        public InstallationStatistic getStatistic() {
            if (this.statistic == null) {
                this.statistic = new InstallationStatistic();
            }
            return this.statistic;
        }

        InstallArgs(OriginInfo origin2, MoveInfo move2, IPackageInstallObserver2 observer2, int installFlags2, String installerPackageName2, String volumeUuid2, UserHandle user2, String[] instructionSets2, String abiOverride2, String[] installGrantPermissions2, List<String> whitelistedRestrictedPermissions2, String traceMethod2, int traceCookie2, PackageParser.SigningDetails signingDetails2, int installReason2, MultiPackageInstallParams multiPackageInstallParams) {
            this.origin = origin2;
            this.move = move2;
            this.installFlags = installFlags2;
            this.observer = observer2;
            this.installerPackageName = installerPackageName2;
            this.volumeUuid = volumeUuid2;
            this.user = user2;
            this.instructionSets = instructionSets2;
            this.abiOverride = abiOverride2;
            this.installGrantPermissions = installGrantPermissions2;
            this.whitelistedRestrictedPermissions = whitelistedRestrictedPermissions2;
            this.traceMethod = traceMethod2;
            this.traceCookie = traceCookie2;
            this.signingDetails = signingDetails2;
            this.installReason = installReason2;
            this.mMultiPackageInstallParams = multiPackageInstallParams;
        }

        /* access modifiers changed from: package-private */
        public int doPreCopy() {
            return 1;
        }

        /* access modifiers changed from: package-private */
        public int doPostCopy(int uid) {
            return 1;
        }

        /* access modifiers changed from: protected */
        public boolean isEphemeral() {
            return (this.installFlags & 2048) != 0;
        }

        /* access modifiers changed from: package-private */
        public UserHandle getUser() {
            return this.user;
        }
    }

    /* access modifiers changed from: package-private */
    public void removeDexFiles(List<String> allCodePaths, String[] instructionSets) {
        if (allCodePaths.isEmpty()) {
            return;
        }
        if (instructionSets != null) {
            String[] dexCodeInstructionSets = InstructionSets.getDexCodeInstructionSets(instructionSets);
            for (String codePath : allCodePaths) {
                for (String dexCodeInstructionSet : dexCodeInstructionSets) {
                    try {
                        this.mInstaller.rmdex(codePath, dexCodeInstructionSet);
                    } catch (Installer.InstallerException e) {
                    }
                }
            }
            return;
        }
        throw new IllegalStateException("instructionSet == null");
    }

    class FileInstallArgs extends InstallArgs {
        private File codeFile;
        private File resourceFile;
        final /* synthetic */ PackageManagerService this$0;

        /* JADX WARNING: Illegal instructions before constructor call */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        FileInstallArgs(com.android.server.pm.PackageManagerService r19, com.android.server.pm.PackageManagerService.InstallParams r20) {
            /*
                r18 = this;
                r8 = r18
                r15 = r20
                r0 = r18
                r14 = r19
                r8.this$0 = r14
                com.android.server.pm.PackageManagerService$OriginInfo r1 = r15.origin
                com.android.server.pm.PackageManagerService$MoveInfo r2 = r15.move
                android.content.pm.IPackageInstallObserver2 r3 = r15.observer
                int r4 = r15.installFlags
                java.lang.String r5 = r15.installerPackageName
                java.lang.String r6 = r15.volumeUuid
                android.os.UserHandle r7 = r20.getUser()
                java.lang.String r9 = r15.packageAbiOverride
                java.lang.String[] r10 = r15.grantedRuntimePermissions
                java.util.List<java.lang.String> r11 = r15.whitelistedRestrictedPermissions
                java.lang.String r12 = r15.traceMethod
                int r13 = r15.traceCookie
                android.content.pm.PackageParser$SigningDetails r8 = r15.signingDetails
                r14 = r8
                int r8 = r15.installReason
                r17 = r0
                r0 = r15
                r15 = r8
                com.android.server.pm.PackageManagerService$MultiPackageInstallParams r8 = r0.mParentInstallParams
                r16 = r8
                r8 = 0
                r0 = r17
                r0.<init>(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16)
                com.android.server.pm.InstallationStatistic r0 = r20.getStatistic()
                r1 = r18
                r1.statistic = r0
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.FileInstallArgs.<init>(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$InstallParams):void");
        }

        /* JADX INFO: super call moved to the top of the method (can break code semantics) */
        FileInstallArgs(PackageManagerService this$02, String codePath, String resourcePath, String[] instructionSets) {
            super(OriginInfo.fromNothing(), (MoveInfo) null, (IPackageInstallObserver2) null, 0, (String) null, (String) null, (UserHandle) null, instructionSets, (String) null, (String[]) null, (List<String>) null, (String) null, 0, PackageParser.SigningDetails.UNKNOWN, 0, (MultiPackageInstallParams) null);
            String str = codePath;
            String str2 = resourcePath;
            this.this$0 = this$02;
            File file = null;
            String str3 = codePath;
            this.codeFile = str3 != null ? new File(str3) : null;
            String str4 = resourcePath;
            this.resourceFile = str4 != null ? new File(str4) : file;
        }

        /* access modifiers changed from: package-private */
        public int copyApk() {
            Trace.traceBegin(262144, "copyApk");
            try {
                return doCopyApk();
            } finally {
                Trace.traceEnd(262144);
            }
        }

        private int doCopyApk() {
            int ret;
            if (this.origin.staged) {
                this.codeFile = this.origin.file;
                this.resourceFile = this.origin.file;
                return 1;
            }
            long beginCopy = SystemClock.uptimeMillis();
            try {
                File tempDir = this.this$0.mInstallerService.allocateStageDirLegacy(this.volumeUuid, (this.installFlags & 2048) != 0);
                this.codeFile = tempDir;
                this.resourceFile = tempDir;
                int ret2 = PackageManagerServiceUtils.copyPackage(this.origin.file.getAbsolutePath(), this.codeFile);
                if (ret2 != 1) {
                    Slog.e(PackageManagerService.TAG, "Failed to copy package");
                    return ret2;
                }
                File libraryRoot = new File(this.codeFile, "lib");
                NativeLibraryHelper.Handle handle = null;
                try {
                    handle = NativeLibraryHelper.Handle.create(this.codeFile);
                    ret = NativeLibraryHelper.copyNativeBinariesWithOverride(handle, libraryRoot, this.abiOverride);
                    getStatistic().timeCopyApkConsumed = SystemClock.uptimeMillis() - beginCopy;
                } catch (IOException e) {
                    Slog.e(PackageManagerService.TAG, "Copying native libraries failed", e);
                    ret = RequestStatus.SYS_ETIMEDOUT;
                } catch (Throwable th) {
                    IoUtils.closeQuietly(handle);
                    throw th;
                }
                IoUtils.closeQuietly(handle);
                return ret;
            } catch (IOException e2) {
                Slog.w(PackageManagerService.TAG, "Failed to create copy file: " + e2);
                return -4;
            }
        }

        /* access modifiers changed from: package-private */
        public int doPreInstall(int status) {
            if (status != 1) {
                cleanUp();
            }
            return status;
        }

        /* access modifiers changed from: package-private */
        public boolean doRename(int status, PackageParser.Package pkg) {
            if (status != 1) {
                cleanUp();
                return false;
            }
            File targetDir = this.codeFile.getParentFile();
            File beforeCodeFile = this.codeFile;
            File afterCodeFile = this.this$0.getNextCodePath(targetDir, pkg.packageName);
            try {
                Os.rename(beforeCodeFile.getAbsolutePath(), afterCodeFile.getAbsolutePath());
                if (!SELinux.restoreconRecursive(afterCodeFile)) {
                    Slog.w(PackageManagerService.TAG, "Failed to restorecon");
                    return false;
                }
                this.codeFile = afterCodeFile;
                this.resourceFile = afterCodeFile;
                try {
                    pkg.setCodePath(afterCodeFile.getCanonicalPath());
                    pkg.setBaseCodePath(FileUtils.rewriteAfterRename(beforeCodeFile, afterCodeFile, pkg.baseCodePath));
                    pkg.setSplitCodePaths(FileUtils.rewriteAfterRename(beforeCodeFile, afterCodeFile, pkg.splitCodePaths));
                    pkg.setApplicationVolumeUuid(pkg.volumeUuid);
                    pkg.setApplicationInfoCodePath(pkg.codePath);
                    pkg.setApplicationInfoBaseCodePath(pkg.baseCodePath);
                    pkg.setApplicationInfoSplitCodePaths(pkg.splitCodePaths);
                    pkg.setApplicationInfoResourcePath(pkg.codePath);
                    pkg.setApplicationInfoBaseResourcePath(pkg.baseCodePath);
                    pkg.setApplicationInfoSplitResourcePaths(pkg.splitCodePaths);
                    return true;
                } catch (IOException e) {
                    Slog.e(PackageManagerService.TAG, "Failed to get path: " + afterCodeFile, e);
                    return false;
                }
            } catch (ErrnoException e2) {
                Slog.w(PackageManagerService.TAG, "Failed to rename", e2);
                return false;
            }
        }

        /* access modifiers changed from: package-private */
        public int doPostInstall(int status, int uid) {
            if (status != 1) {
                cleanUp();
            }
            return status;
        }

        /* access modifiers changed from: package-private */
        public String getCodePath() {
            File file = this.codeFile;
            if (file != null) {
                return file.getAbsolutePath();
            }
            return null;
        }

        /* access modifiers changed from: package-private */
        public String getResourcePath() {
            File file = this.resourceFile;
            if (file != null) {
                return file.getAbsolutePath();
            }
            return null;
        }

        private boolean cleanUp() {
            File file = this.codeFile;
            if (file == null || !file.exists()) {
                return false;
            }
            this.this$0.removeCodePathLI(this.codeFile);
            File file2 = this.resourceFile;
            if (file2 == null || FileUtils.contains(this.codeFile, file2)) {
                return true;
            }
            this.resourceFile.delete();
            return true;
        }

        /* access modifiers changed from: package-private */
        public void cleanUpResourcesLI() {
            List<String> allCodePaths = Collections.EMPTY_LIST;
            File file = this.codeFile;
            if (file != null && file.exists()) {
                try {
                    allCodePaths = PackageParser.parsePackageLite(this.codeFile, 0).getAllCodePaths();
                } catch (PackageParser.PackageParserException e) {
                }
            }
            cleanUp();
            this.this$0.removeDexFiles(allCodePaths, this.instructionSets);
        }

        /* access modifiers changed from: package-private */
        public boolean doPostDeleteLI(boolean delete) {
            cleanUpResourcesLI();
            return true;
        }
    }

    private static void maybeThrowExceptionForMultiArchCopy(String message, int copyRet) throws PackageManagerException {
        if (copyRet < 0 && copyRet != -114 && copyRet != -113) {
            throw new PackageManagerException(copyRet, message);
        }
    }

    class MoveInstallArgs extends InstallArgs {
        private File codeFile;
        private File resourceFile;
        final /* synthetic */ PackageManagerService this$0;

        /* JADX WARNING: Illegal instructions before constructor call */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        MoveInstallArgs(com.android.server.pm.PackageManagerService r19, com.android.server.pm.PackageManagerService.InstallParams r20) {
            /*
                r18 = this;
                r0 = r20
                r1 = r18
                r9 = r18
                r15 = r19
                r9.this$0 = r15
                com.android.server.pm.PackageManagerService$OriginInfo r2 = r0.origin
                com.android.server.pm.PackageManagerService$MoveInfo r3 = r0.move
                android.content.pm.IPackageInstallObserver2 r4 = r0.observer
                int r5 = r0.installFlags
                java.lang.String r6 = r0.installerPackageName
                java.lang.String r7 = r0.volumeUuid
                android.os.UserHandle r8 = r20.getUser()
                java.lang.String r10 = r0.packageAbiOverride
                java.lang.String[] r11 = r0.grantedRuntimePermissions
                java.util.List<java.lang.String> r12 = r0.whitelistedRestrictedPermissions
                java.lang.String r13 = r0.traceMethod
                int r14 = r0.traceCookie
                android.content.pm.PackageParser$SigningDetails r9 = r0.signingDetails
                r15 = r9
                int r9 = r0.installReason
                r16 = r9
                com.android.server.pm.PackageManagerService$MultiPackageInstallParams r9 = r0.mParentInstallParams
                r17 = r9
                r9 = 0
                r1.<init>(r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17)
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.MoveInstallArgs.<init>(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$InstallParams):void");
        }

        /* access modifiers changed from: package-private */
        public int copyApk() {
            synchronized (this.this$0.mInstaller) {
                try {
                    this.this$0.mInstaller.moveCompleteApp(this.move.fromUuid, this.move.toUuid, this.move.packageName, this.move.dataAppName, this.move.appId, this.move.seinfo, this.move.targetSdkVersion);
                } catch (Installer.InstallerException e) {
                    Slog.w(PackageManagerService.TAG, "Failed to move app", e);
                    return RequestStatus.SYS_ETIMEDOUT;
                }
            }
            this.codeFile = new File(Environment.getDataAppDirectory(this.move.toUuid), this.move.dataAppName);
            this.resourceFile = this.codeFile;
            return 1;
        }

        /* access modifiers changed from: package-private */
        public int doPreInstall(int status) {
            if (status != 1) {
                cleanUp(this.move.toUuid);
            }
            return status;
        }

        /* access modifiers changed from: package-private */
        public boolean doRename(int status, PackageParser.Package pkg) {
            if (status != 1) {
                cleanUp(this.move.toUuid);
                return false;
            }
            pkg.setApplicationVolumeUuid(pkg.volumeUuid);
            pkg.setApplicationInfoCodePath(pkg.codePath);
            pkg.setApplicationInfoBaseCodePath(pkg.baseCodePath);
            pkg.setApplicationInfoSplitCodePaths(pkg.splitCodePaths);
            pkg.setApplicationInfoResourcePath(pkg.codePath);
            pkg.setApplicationInfoBaseResourcePath(pkg.baseCodePath);
            pkg.setApplicationInfoSplitResourcePaths(pkg.splitCodePaths);
            return true;
        }

        /* access modifiers changed from: package-private */
        public int doPostInstall(int status, int uid) {
            if (status == 1) {
                cleanUp(this.move.fromUuid);
            } else {
                cleanUp(this.move.toUuid);
            }
            return status;
        }

        /* access modifiers changed from: package-private */
        public String getCodePath() {
            File file = this.codeFile;
            if (file != null) {
                return file.getAbsolutePath();
            }
            return null;
        }

        /* access modifiers changed from: package-private */
        public String getResourcePath() {
            File file = this.resourceFile;
            if (file != null) {
                return file.getAbsolutePath();
            }
            return null;
        }

        private boolean cleanUp(String volumeUuid) {
            File codeFile2 = new File(Environment.getDataAppDirectory(volumeUuid), this.move.dataAppName);
            Slog.d(PackageManagerService.TAG, "Cleaning up " + this.move.packageName + " on " + volumeUuid);
            int[] userIds = PackageManagerService.sUserManager.getUserIds();
            synchronized (this.this$0.mInstallLock) {
                for (int userId : userIds) {
                    try {
                        this.this$0.mInstaller.destroyAppData(volumeUuid, this.move.packageName, userId, 3, 0);
                    } catch (Installer.InstallerException e) {
                        Slog.w(PackageManagerService.TAG, String.valueOf(e));
                    }
                }
                this.this$0.removeCodePathLI(codeFile2);
            }
            return true;
        }

        /* access modifiers changed from: package-private */
        public void cleanUpResourcesLI() {
            throw new UnsupportedOperationException();
        }

        /* access modifiers changed from: package-private */
        public boolean doPostDeleteLI(boolean delete) {
            throw new UnsupportedOperationException();
        }
    }

    /* access modifiers changed from: private */
    public File getNextCodePath(File targetDir, String packageName) {
        File result;
        SecureRandom random = new SecureRandom();
        byte[] bytes = new byte[16];
        do {
            random.nextBytes(bytes);
            String suffix = Base64.encodeToString(bytes, 10);
            result = new File(targetDir, packageName + "-" + suffix);
        } while (result.exists());
        return result;
    }

    static String deriveCodePathName(String codePath) {
        if (codePath == null) {
            return null;
        }
        File codeFile = new File(codePath);
        String name = codeFile.getName();
        if (codeFile.isDirectory()) {
            return name;
        }
        if (name.endsWith(".apk") || name.endsWith(".tmp")) {
            return name.substring(0, name.lastIndexOf(46));
        }
        Slog.w(TAG, "Odd, " + codePath + " doesn't look like an APK");
        return null;
    }

    static class PackageInstalledInfo {
        ArrayMap<String, PackageInstalledInfo> addedChildPackages;
        String installerPackageName;
        boolean isReplace = false;
        String name;
        int[] newUsers;
        String origPackage;
        String origPermission;
        int[] origUsers;
        PackageParser.Package pkg;
        PackageRemovedInfo removedInfo;
        int returnCode;
        String returnMsg;
        int uid;

        PackageInstalledInfo() {
        }

        public void setError(int code, String msg) {
            setReturnCode(code);
            setReturnMessage(msg);
            Slog.w(PackageManagerService.TAG, msg);
        }

        public void setError(String msg, PackageParser.PackageParserException e) {
            setReturnCode(e.error);
            setReturnMessage(ExceptionUtils.getCompleteMessage(msg, e));
            ArrayMap<String, PackageInstalledInfo> arrayMap = this.addedChildPackages;
            int childCount = arrayMap != null ? arrayMap.size() : 0;
            for (int i = 0; i < childCount; i++) {
                this.addedChildPackages.valueAt(i).setError(msg, e);
            }
            Slog.w(PackageManagerService.TAG, msg, e);
        }

        public void setError(String msg, PackageManagerException e) {
            this.returnCode = e.error;
            setReturnMessage(ExceptionUtils.getCompleteMessage(msg, e));
            ArrayMap<String, PackageInstalledInfo> arrayMap = this.addedChildPackages;
            int childCount = arrayMap != null ? arrayMap.size() : 0;
            for (int i = 0; i < childCount; i++) {
                this.addedChildPackages.valueAt(i).setError(msg, e);
            }
            Slog.w(PackageManagerService.TAG, msg, e);
        }

        public void setReturnCode(int returnCode2) {
            this.returnCode = returnCode2;
            ArrayMap<String, PackageInstalledInfo> arrayMap = this.addedChildPackages;
            int childCount = arrayMap != null ? arrayMap.size() : 0;
            for (int i = 0; i < childCount; i++) {
                this.addedChildPackages.valueAt(i).returnCode = returnCode2;
            }
        }

        private void setReturnMessage(String returnMsg2) {
            this.returnMsg = returnMsg2;
            ArrayMap<String, PackageInstalledInfo> arrayMap = this.addedChildPackages;
            int childCount = arrayMap != null ? arrayMap.size() : 0;
            for (int i = 0; i < childCount; i++) {
                this.addedChildPackages.valueAt(i).returnMsg = returnMsg2;
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:10:0x0019, code lost:
        r2 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:11:0x001a, code lost:
        $closeResource(r1, r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x001d, code lost:
        throw r2;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private static void updateDigest(java.security.MessageDigest r3, java.io.File r4) throws java.io.IOException {
        /*
            java.security.DigestInputStream r0 = new java.security.DigestInputStream
            java.io.FileInputStream r1 = new java.io.FileInputStream
            r1.<init>(r4)
            r0.<init>(r1, r3)
        L_0x000a:
            int r1 = r0.read()     // Catch:{ all -> 0x0017 }
            r2 = -1
            if (r1 == r2) goto L_0x0012
            goto L_0x000a
        L_0x0012:
            r1 = 0
            $closeResource(r1, r0)
            return
        L_0x0017:
            r1 = move-exception
            throw r1     // Catch:{ all -> 0x0019 }
        L_0x0019:
            r2 = move-exception
            $closeResource(r1, r0)
            throw r2
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.updateDigest(java.security.MessageDigest, java.io.File):void");
    }

    private String getParentOrChildPackageChangedSharedUser(PackageParser.Package oldPkg, PackageParser.Package newPkg) {
        if (!Objects.equals(oldPkg.mSharedUserId, newPkg.mSharedUserId)) {
            return newPkg.packageName;
        }
        int newChildCount = 0;
        int oldChildCount = oldPkg.childPackages != null ? oldPkg.childPackages.size() : 0;
        if (newPkg.childPackages != null) {
            newChildCount = newPkg.childPackages.size();
        }
        for (int i = 0; i < newChildCount; i++) {
            PackageParser.Package newChildPkg = (PackageParser.Package) newPkg.childPackages.get(i);
            for (int j = 0; j < oldChildCount; j++) {
                PackageParser.Package oldChildPkg = (PackageParser.Package) oldPkg.childPackages.get(j);
                if (newChildPkg.packageName.equals(oldChildPkg.packageName) && !Objects.equals(newChildPkg.mSharedUserId, oldChildPkg.mSharedUserId)) {
                    return newChildPkg.packageName;
                }
            }
        }
        return null;
    }

    private void removeNativeBinariesLI(PackageSetting ps) {
        PackageSetting childPs;
        if (ps != null) {
            NativeLibraryHelper.removeNativeBinariesLI(ps.legacyNativeLibraryPathString);
            int childCount = ps.childPackageNames != null ? ps.childPackageNames.size() : 0;
            for (int i = 0; i < childCount; i++) {
                synchronized (this.mPackages) {
                    childPs = this.mSettings.getPackageLPr((String) ps.childPackageNames.get(i));
                }
                if (childPs != null) {
                    NativeLibraryHelper.removeNativeBinariesLI(childPs.legacyNativeLibraryPathString);
                }
            }
        }
    }

    @GuardedBy({"mPackages"})
    private void enableSystemPackageLPw(PackageParser.Package pkg) {
        this.mSettings.enableSystemPackageLPw(pkg.packageName);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            this.mSettings.enableSystemPackageLPw(((PackageParser.Package) pkg.childPackages.get(i)).packageName);
        }
    }

    @GuardedBy({"mPackages"})
    private boolean disableSystemPackageLPw(PackageParser.Package oldPkg, PackageParser.Package newPkg) {
        boolean disabled = this.mSettings.disableSystemPackageLPw(oldPkg.packageName, true);
        int childCount = oldPkg.childPackages != null ? oldPkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            PackageParser.Package childPkg = (PackageParser.Package) oldPkg.childPackages.get(i);
            disabled |= this.mSettings.disableSystemPackageLPw(childPkg.packageName, newPkg.hasChildPackage(childPkg.packageName));
        }
        return disabled;
    }

    @GuardedBy({"mPackages"})
    private void setInstallerPackageNameLPw(PackageParser.Package pkg, String installerPackageName) {
        this.mSettings.setInstallerPackageName(pkg.packageName, installerPackageName);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            this.mSettings.setInstallerPackageName(((PackageParser.Package) pkg.childPackages.get(i)).packageName, installerPackageName);
        }
    }

    private void updateSettingsLI(PackageParser.Package newPackage, String installerPackageName, int[] allUsers, PackageInstalledInfo res, UserHandle user, int installReason) {
        PackageParser.Package packageR = newPackage;
        PackageInstalledInfo packageInstalledInfo = res;
        updateSettingsInternalLI(newPackage, installerPackageName, allUsers, packageInstalledInfo.origUsers, res, user, installReason);
        int childCount = packageR.childPackages != null ? packageR.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            PackageParser.Package childPackage = (PackageParser.Package) packageR.childPackages.get(i);
            PackageInstalledInfo childRes = packageInstalledInfo.addedChildPackages.get(childPackage.packageName);
            updateSettingsInternalLI(childPackage, installerPackageName, allUsers, childRes.origUsers, childRes, user, installReason);
        }
    }

    private void updateSettingsInternalLI(PackageParser.Package pkg, String installerPackageName, int[] allUsers, int[] installedForUsers, PackageInstalledInfo res, UserHandle user, int installReason) {
        ArrayMap<String, PackageParser.Package> arrayMap;
        int origUserId;
        PackageParser.Package packageR = pkg;
        String str = installerPackageName;
        int[] iArr = allUsers;
        int[] iArr2 = installedForUsers;
        PackageInstalledInfo packageInstalledInfo = res;
        int i = installReason;
        Trace.traceBegin(262144, "updateSettings");
        String pkgName = packageR.packageName;
        if (pkgName != null) {
            acquireUxPerfLock(8, pkgName, 0);
        }
        ArrayMap<String, PackageParser.Package> arrayMap2 = this.mPackages;
        synchronized (arrayMap2) {
            try {
                arrayMap = arrayMap2;
                String pkgName2 = pkgName;
                try {
                    this.mPermissionManager.updatePermissions(packageR.packageName, pkg, true, this.mPackages.values(), this.mPermissionCallback);
                    PackageSetting ps = this.mSettings.mPackages.get(pkgName2);
                    int userId = user.getIdentifier();
                    if (ps != null) {
                        if (isSystemApp(pkg)) {
                            if (packageInstalledInfo.origUsers != null) {
                                for (int origUserId2 : packageInstalledInfo.origUsers) {
                                    if (userId != -1) {
                                        origUserId = origUserId2;
                                        if (userId != origUserId) {
                                        }
                                    } else {
                                        origUserId = origUserId2;
                                    }
                                    ps.setEnabled(0, origUserId, str);
                                }
                            }
                            if (!(iArr == null || iArr2 == null)) {
                                for (int currentUserId : iArr) {
                                    ps.setInstalled(ArrayUtils.contains(iArr2, currentUserId), currentUserId);
                                }
                            }
                        }
                        if (userId != -1) {
                            ps.setInstalled(true, userId);
                            ps.setEnabled(0, userId, str);
                        }
                        Set<Integer> previousUserIds = new ArraySet<>();
                        if (!(packageInstalledInfo.removedInfo == null || packageInstalledInfo.removedInfo.installReasons == null)) {
                            int installReasonCount = packageInstalledInfo.removedInfo.installReasons.size();
                            for (int i2 = 0; i2 < installReasonCount; i2++) {
                                int previousUserId = packageInstalledInfo.removedInfo.installReasons.keyAt(i2);
                                ps.setInstallReason(packageInstalledInfo.removedInfo.installReasons.valueAt(i2).intValue(), previousUserId);
                                previousUserIds.add(Integer.valueOf(previousUserId));
                            }
                        }
                        if (userId == -1) {
                            for (int currentUserId2 : sUserManager.getUserIds()) {
                                if (!previousUserIds.contains(Integer.valueOf(currentUserId2))) {
                                    ps.setInstallReason(i, currentUserId2);
                                }
                            }
                        } else if (!previousUserIds.contains(Integer.valueOf(userId))) {
                            ps.setInstallReason(i, userId);
                        }
                        this.mSettings.writeKernelMappingLPr(ps);
                    }
                    packageInstalledInfo.name = pkgName2;
                    packageInstalledInfo.uid = packageR.applicationInfo.uid;
                    packageInstalledInfo.pkg = packageR;
                    this.mSettings.setInstallerPackageName(pkgName2, str);
                    packageInstalledInfo.setReturnCode(1);
                    Trace.traceBegin(262144, "writeSettings");
                    this.mSettings.writeLPr();
                    Trace.traceEnd(262144);
                    Trace.traceEnd(262144);
                } catch (Throwable th) {
                    th = th;
                    throw th;
                }
            } catch (Throwable th2) {
                th = th2;
                arrayMap = arrayMap2;
                String str2 = pkgName;
                throw th;
            }
        }
    }

    private static class InstallRequest {
        public final InstallArgs args;
        public final PackageInstalledInfo installResult;

        private InstallRequest(InstallArgs args2, PackageInstalledInfo res) {
            this.args = args2;
            this.installResult = res;
        }
    }

    @GuardedBy({"mInstallLock", "mPackages"})
    private void installPackagesTracedLI(List<InstallRequest> requests) {
        BoostFramework boostFramework;
        try {
            Trace.traceBegin(262144, "installPackages");
            if (this.mPerfBoost == null) {
                this.mPerfBoost = new BoostFramework();
            }
            if (this.mPerfBoost != null && !this.mIsPerfLockAcquired) {
                this.mPerfBoost.perfHint(4232, (String) null, Integer.MAX_VALUE, -1);
                this.mIsPerfLockAcquired = true;
            }
            installPackagesLI(requests);
        } finally {
            if (this.mIsPerfLockAcquired && (boostFramework = this.mPerfBoost) != null) {
                boostFramework.perfLockRelease();
                this.mIsPerfLockAcquired = false;
            }
            Trace.traceEnd(262144);
        }
    }

    private static class CommitRequest {
        final int[] mAllUsers;
        final Map<String, ReconciledPackage> reconciledPackages;

        private CommitRequest(Map<String, ReconciledPackage> reconciledPackages2, int[] allUsers) {
            this.reconciledPackages = reconciledPackages2;
            this.mAllUsers = allUsers;
        }
    }

    private static class ReconcileRequest {
        public final Map<String, PackageParser.Package> allPackages;
        public final Map<String, InstallArgs> installArgs;
        public final Map<String, PackageInstalledInfo> installResults;
        public final Map<String, PackageSetting> lastStaticSharedLibSettings;
        public final Map<String, PrepareResult> preparedPackages;
        public final Map<String, ScanResult> scannedPackages;
        public final Map<String, LongSparseArray<SharedLibraryInfo>> sharedLibrarySource;
        public final Map<String, Settings.VersionInfo> versionInfos;

        private ReconcileRequest(Map<String, ScanResult> scannedPackages2, Map<String, InstallArgs> installArgs2, Map<String, PackageInstalledInfo> installResults2, Map<String, PrepareResult> preparedPackages2, Map<String, LongSparseArray<SharedLibraryInfo>> sharedLibrarySource2, Map<String, PackageParser.Package> allPackages2, Map<String, Settings.VersionInfo> versionInfos2, Map<String, PackageSetting> lastStaticSharedLibSettings2) {
            this.scannedPackages = scannedPackages2;
            this.installArgs = installArgs2;
            this.installResults = installResults2;
            this.preparedPackages = preparedPackages2;
            this.sharedLibrarySource = sharedLibrarySource2;
            this.allPackages = allPackages2;
            this.versionInfos = versionInfos2;
            this.lastStaticSharedLibSettings = lastStaticSharedLibSettings2;
        }

        private ReconcileRequest(Map<String, ScanResult> scannedPackages2, Map<String, LongSparseArray<SharedLibraryInfo>> sharedLibrarySource2, Map<String, PackageParser.Package> allPackages2, Map<String, Settings.VersionInfo> versionInfos2, Map<String, PackageSetting> lastStaticSharedLibSettings2) {
            this(scannedPackages2, Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), sharedLibrarySource2, allPackages2, versionInfos2, lastStaticSharedLibSettings2);
        }
    }

    private static class ReconcileFailure extends PackageManagerException {
        ReconcileFailure(String message) {
            super("Reconcile failed: " + message);
        }

        ReconcileFailure(int reason, String message) {
            super(reason, "Reconcile failed: " + message);
        }

        ReconcileFailure(PackageManagerException e) {
            this(e.error, e.getMessage());
        }
    }

    private static class ReconciledPackage {
        public final List<SharedLibraryInfo> allowedSharedLibraryInfos;
        public ArrayList<SharedLibraryInfo> collectedSharedLibraryInfos;
        public final DeletePackageAction deletePackageAction;
        public final InstallArgs installArgs;
        public final PackageInstalledInfo installResult;
        public final PackageSetting pkgSetting;
        public final PrepareResult prepareResult;
        public final boolean removeAppKeySetData;
        public final ReconcileRequest request;
        public final ScanResult scanResult;
        public final boolean sharedUserSignaturesChanged;
        public final PackageParser.SigningDetails signingDetails;

        private ReconciledPackage(ReconcileRequest request2, InstallArgs installArgs2, PackageSetting pkgSetting2, PackageInstalledInfo installResult2, PrepareResult prepareResult2, ScanResult scanResult2, DeletePackageAction deletePackageAction2, List<SharedLibraryInfo> allowedSharedLibraryInfos2, PackageParser.SigningDetails signingDetails2, boolean sharedUserSignaturesChanged2, boolean removeAppKeySetData2) {
            this.request = request2;
            this.installArgs = installArgs2;
            this.pkgSetting = pkgSetting2;
            this.installResult = installResult2;
            this.prepareResult = prepareResult2;
            this.scanResult = scanResult2;
            this.deletePackageAction = deletePackageAction2;
            this.allowedSharedLibraryInfos = allowedSharedLibraryInfos2;
            this.signingDetails = signingDetails2;
            this.sharedUserSignaturesChanged = sharedUserSignaturesChanged2;
            this.removeAppKeySetData = removeAppKeySetData2;
        }

        /* access modifiers changed from: private */
        public Map<String, PackageParser.Package> getCombinedPackages() {
            ArrayMap<String, PackageParser.Package> combinedPackages = new ArrayMap<>(this.request.allPackages.size() + this.request.scannedPackages.size());
            combinedPackages.putAll(this.request.allPackages);
            for (ScanResult scanResult2 : this.request.scannedPackages.values()) {
                combinedPackages.put(scanResult2.pkgSetting.name, scanResult2.request.pkg);
            }
            return combinedPackages;
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:131:0x032b A[SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:88:0x0245  */
    @com.android.internal.annotations.GuardedBy({"mPackages"})
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private static java.util.Map<java.lang.String, com.android.server.pm.PackageManagerService.ReconciledPackage> reconcilePackagesLocked(com.android.server.pm.PackageManagerService.ReconcileRequest r39, com.android.server.pm.KeySetManagerService r40) throws com.android.server.pm.PackageManagerService.ReconcileFailure {
        /*
            r14 = r39
            r15 = r40
            java.util.Map<java.lang.String, com.android.server.pm.PackageManagerService$ScanResult> r13 = r14.scannedPackages
            android.util.ArrayMap r0 = new android.util.ArrayMap
            int r1 = r13.size()
            r0.<init>(r1)
            r12 = r0
            android.util.ArrayMap r0 = new android.util.ArrayMap
            java.util.Map<java.lang.String, android.content.pm.PackageParser$Package> r1 = r14.allPackages
            int r1 = r1.size()
            int r2 = r13.size()
            int r1 = r1 + r2
            r0.<init>(r1)
            r11 = r0
            java.util.Map<java.lang.String, android.content.pm.PackageParser$Package> r0 = r14.allPackages
            r11.putAll(r0)
            android.util.ArrayMap r0 = new android.util.ArrayMap
            r0.<init>()
            r10 = r0
            java.util.Set r0 = r13.keySet()
            java.util.Iterator r16 = r0.iterator()
        L_0x0034:
            boolean r0 = r16.hasNext()
            if (r0 == 0) goto L_0x0333
            java.lang.Object r0 = r16.next()
            r9 = r0
            java.lang.String r9 = (java.lang.String) r9
            java.lang.Object r0 = r13.get(r9)
            r8 = r0
            com.android.server.pm.PackageManagerService$ScanResult r8 = (com.android.server.pm.PackageManagerService.ScanResult) r8
            com.android.server.pm.PackageSetting r0 = r8.pkgSetting
            java.lang.String r0 = r0.name
            com.android.server.pm.PackageManagerService$ScanRequest r1 = r8.request
            android.content.pm.PackageParser$Package r1 = r1.pkg
            r11.put(r0, r1)
            java.util.Map<java.lang.String, android.util.LongSparseArray<android.content.pm.SharedLibraryInfo>> r0 = r14.sharedLibrarySource
            java.util.List r17 = getAllowedSharedLibInfos(r8, r0)
            android.content.pm.SharedLibraryInfo r7 = r8.staticSharedLibraryInfo
            if (r17 == 0) goto L_0x0094
            java.util.Iterator r0 = r17.iterator()
        L_0x0061:
            boolean r1 = r0.hasNext()
            if (r1 == 0) goto L_0x0094
            java.lang.Object r1 = r0.next()
            android.content.pm.SharedLibraryInfo r1 = (android.content.pm.SharedLibraryInfo) r1
            boolean r2 = addSharedLibraryToPackageVersionMap(r10, r1)
            if (r2 == 0) goto L_0x0074
            goto L_0x0061
        L_0x0074:
            com.android.server.pm.PackageManagerService$ReconcileFailure r0 = new com.android.server.pm.PackageManagerService$ReconcileFailure
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r3 = "Static Shared Library "
            r2.append(r3)
            java.lang.String r3 = r7.getName()
            r2.append(r3)
            java.lang.String r3 = " is being installed twice in this set!"
            r2.append(r3)
            java.lang.String r2 = r2.toString()
            r0.<init>((java.lang.String) r2)
            throw r0
        L_0x0094:
            java.util.Map<java.lang.String, com.android.server.pm.PackageManagerService$InstallArgs> r0 = r14.installArgs
            java.lang.Object r0 = r0.get(r9)
            r18 = r0
            com.android.server.pm.PackageManagerService$InstallArgs r18 = (com.android.server.pm.PackageManagerService.InstallArgs) r18
            java.util.Map<java.lang.String, com.android.server.pm.PackageManagerService$PackageInstalledInfo> r0 = r14.installResults
            java.lang.Object r0 = r0.get(r9)
            r6 = r0
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r6 = (com.android.server.pm.PackageManagerService.PackageInstalledInfo) r6
            java.util.Map<java.lang.String, com.android.server.pm.PackageManagerService$PrepareResult> r0 = r14.preparedPackages
            java.lang.Object r0 = r0.get(r9)
            r5 = r0
            com.android.server.pm.PackageManagerService$PrepareResult r5 = (com.android.server.pm.PackageManagerService.PrepareResult) r5
            r0 = 1
            if (r18 == 0) goto L_0x00b5
            r2 = r0
            goto L_0x00b6
        L_0x00b5:
            r2 = 0
        L_0x00b6:
            r19 = r2
            if (r19 == 0) goto L_0x00db
            if (r6 == 0) goto L_0x00bf
            if (r5 == 0) goto L_0x00bf
            goto L_0x00db
        L_0x00bf:
            com.android.server.pm.PackageManagerService$ReconcileFailure r0 = new com.android.server.pm.PackageManagerService$ReconcileFailure
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "Reconcile arguments are not balanced for "
            r1.append(r2)
            r1.append(r9)
            java.lang.String r2 = "!"
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r0.<init>((java.lang.String) r1)
            throw r0
        L_0x00db:
            if (r19 == 0) goto L_0x0135
            boolean r2 = r5.replace
            if (r2 == 0) goto L_0x0135
            boolean r2 = r5.system
            if (r2 != 0) goto L_0x0135
            com.android.server.pm.PackageManagerService$ScanRequest r2 = r8.request
            int r2 = r2.scanFlags
            r2 = r2 & 2048(0x800, float:2.87E-42)
            if (r2 != 0) goto L_0x00ef
            r2 = r0
            goto L_0x00f0
        L_0x00ef:
            r2 = 0
        L_0x00f0:
            if (r2 == 0) goto L_0x00f5
            r3 = 0
            goto L_0x00f7
        L_0x00f5:
            r3 = 8
        L_0x00f7:
            r0 = r0 | r3
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r3 = r6.removedInfo
            com.android.server.pm.PackageSetting r4 = r5.originalPs
            com.android.server.pm.PackageSetting r1 = r5.disabledPs
            r27 = r2
            com.android.server.pm.PackageSetting[] r2 = r5.childPackageSettings
            r25 = 0
            r20 = r3
            r21 = r4
            r22 = r1
            r23 = r2
            r24 = r0
            com.android.server.pm.PackageManagerService$DeletePackageAction r1 = mayDeletePackageLocked(r20, r21, r22, r23, r24, r25)
            if (r1 == 0) goto L_0x0117
            r20 = r1
            goto L_0x0138
        L_0x0117:
            com.android.server.pm.PackageManagerService$ReconcileFailure r2 = new com.android.server.pm.PackageManagerService$ReconcileFailure
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            r4.<init>()
            java.lang.String r3 = "May not delete "
            r4.append(r3)
            r4.append(r9)
            java.lang.String r3 = " to replace"
            r4.append(r3)
            java.lang.String r3 = r4.toString()
            r4 = -10
            r2.<init>(r4, r3)
            throw r2
        L_0x0135:
            r0 = 0
            r20 = r0
        L_0x0138:
            com.android.server.pm.PackageManagerService$ScanRequest r0 = r8.request
            int r4 = r0.scanFlags
            com.android.server.pm.PackageManagerService$ScanRequest r0 = r8.request
            int r3 = r0.parseFlags
            com.android.server.pm.PackageManagerService$ScanRequest r0 = r8.request
            android.content.pm.PackageParser$Package r2 = r0.pkg
            com.android.server.pm.PackageManagerService$ScanRequest r0 = r8.request
            com.android.server.pm.PackageSetting r1 = r0.disabledPkgSetting
            java.util.Map<java.lang.String, com.android.server.pm.PackageSetting> r0 = r14.lastStaticSharedLibSettings
            java.lang.Object r0 = r0.get(r9)
            r21 = r0
            com.android.server.pm.PackageSetting r21 = (com.android.server.pm.PackageSetting) r21
            if (r5 == 0) goto L_0x0159
            if (r21 == 0) goto L_0x0159
            r0 = r21
            goto L_0x015b
        L_0x0159:
            com.android.server.pm.PackageSetting r0 = r8.pkgSetting
        L_0x015b:
            r22 = r0
            r23 = 0
            r24 = 0
            r25 = 0
            r27 = r13
            r13 = r22
            boolean r0 = r15.shouldCheckUpgradeKeySetLocked(r13, r4)
            r22 = r4
            java.lang.String r4 = " signature changed; retaining data."
            r29 = r5
            java.lang.String r5 = "System package "
            if (r0 == 0) goto L_0x01c3
            boolean r0 = r15.checkUpgradeKeySetLocked(r13, r2)
            if (r0 == 0) goto L_0x017c
            goto L_0x0198
        L_0x017c:
            r0 = r3 & 16
            if (r0 == 0) goto L_0x01a4
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r5)
            java.lang.String r5 = r2.packageName
            r0.append(r5)
            r0.append(r4)
            java.lang.String r0 = r0.toString()
            r4 = 5
            reportSettingsProblem(r4, r0)
        L_0x0198:
            android.content.pm.PackageParser$SigningDetails r0 = r2.mSigningDetails
            r25 = r0
            r34 = r1
            r33 = r7
            r31 = r10
            goto L_0x02df
        L_0x01a4:
            com.android.server.pm.PackageManagerService$ReconcileFailure r0 = new com.android.server.pm.PackageManagerService$ReconcileFailure
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r4 = "Package "
            r5.append(r4)
            java.lang.String r4 = r2.packageName
            r5.append(r4)
            java.lang.String r4 = " upgrade keys do not match the previously installed version"
            r5.append(r4)
            java.lang.String r4 = r5.toString()
            r5 = -7
            r0.<init>(r5, r4)
            throw r0
        L_0x01c3:
            java.util.Map<java.lang.String, com.android.server.pm.Settings$VersionInfo> r0 = r14.versionInfos     // Catch:{ PackageManagerException -> 0x023a, IllegalArgumentException -> 0x022b }
            java.lang.Object r0 = r0.get(r9)     // Catch:{ PackageManagerException -> 0x023a, IllegalArgumentException -> 0x022b }
            com.android.server.pm.Settings$VersionInfo r0 = (com.android.server.pm.Settings.VersionInfo) r0     // Catch:{ PackageManagerException -> 0x023a, IllegalArgumentException -> 0x022b }
            boolean r30 = isCompatSignatureUpdateNeeded((com.android.server.pm.Settings.VersionInfo) r0)     // Catch:{ PackageManagerException -> 0x023a, IllegalArgumentException -> 0x022b }
            r31 = r30
            boolean r30 = isRecoverSignatureUpdateNeeded((com.android.server.pm.Settings.VersionInfo) r0)     // Catch:{ PackageManagerException -> 0x023a, IllegalArgumentException -> 0x022b }
            r32 = r30
            r30 = r0
            android.content.pm.PackageParser$SigningDetails r0 = r2.mSigningDetails     // Catch:{ PackageManagerException -> 0x023a, IllegalArgumentException -> 0x022b }
            r33 = r7
            r7 = r31
            r31 = r10
            r10 = r32
            boolean r0 = com.android.server.pm.PackageManagerServiceUtils.verifySignatures(r13, r1, r0, r7, r10)     // Catch:{ PackageManagerException -> 0x0227, IllegalArgumentException -> 0x0223 }
            if (r0 == 0) goto L_0x01eb
            r23 = 1
        L_0x01eb:
            r32 = r0
            android.content.pm.PackageParser$SigningDetails r0 = r2.mSigningDetails     // Catch:{ PackageManagerException -> 0x0227, IllegalArgumentException -> 0x0223 }
            r25 = r0
            com.android.server.pm.SharedUserSetting r0 = r13.sharedUser     // Catch:{ PackageManagerException -> 0x0227, IllegalArgumentException -> 0x0223 }
            if (r0 == 0) goto L_0x021f
            android.content.pm.PackageParser$SigningDetails r0 = r2.mSigningDetails     // Catch:{ PackageManagerException -> 0x0227, IllegalArgumentException -> 0x0223 }
            r34 = r1
            com.android.server.pm.SharedUserSetting r1 = r13.sharedUser     // Catch:{ PackageManagerException -> 0x021d, IllegalArgumentException -> 0x021b }
            com.android.server.pm.PackageSignatures r1 = r1.signatures     // Catch:{ PackageManagerException -> 0x021d, IllegalArgumentException -> 0x021b }
            android.content.pm.PackageParser$SigningDetails r1 = r1.mSigningDetails     // Catch:{ PackageManagerException -> 0x021d, IllegalArgumentException -> 0x021b }
            boolean r0 = r0.hasAncestor(r1)     // Catch:{ PackageManagerException -> 0x021d, IllegalArgumentException -> 0x021b }
            if (r0 == 0) goto L_0x020d
            com.android.server.pm.SharedUserSetting r0 = r13.sharedUser     // Catch:{ PackageManagerException -> 0x021d, IllegalArgumentException -> 0x021b }
            com.android.server.pm.PackageSignatures r0 = r0.signatures     // Catch:{ PackageManagerException -> 0x021d, IllegalArgumentException -> 0x021b }
            android.content.pm.PackageParser$SigningDetails r1 = r2.mSigningDetails     // Catch:{ PackageManagerException -> 0x021d, IllegalArgumentException -> 0x021b }
            r0.mSigningDetails = r1     // Catch:{ PackageManagerException -> 0x021d, IllegalArgumentException -> 0x021b }
        L_0x020d:
            com.android.server.pm.SharedUserSetting r0 = r13.sharedUser     // Catch:{ PackageManagerException -> 0x021d, IllegalArgumentException -> 0x021b }
            java.lang.Boolean r0 = r0.signaturesChanged     // Catch:{ PackageManagerException -> 0x021d, IllegalArgumentException -> 0x021b }
            if (r0 != 0) goto L_0x02de
            com.android.server.pm.SharedUserSetting r0 = r13.sharedUser     // Catch:{ PackageManagerException -> 0x021d, IllegalArgumentException -> 0x021b }
            java.lang.Boolean r1 = java.lang.Boolean.FALSE     // Catch:{ PackageManagerException -> 0x021d, IllegalArgumentException -> 0x021b }
            r0.signaturesChanged = r1     // Catch:{ PackageManagerException -> 0x021d, IllegalArgumentException -> 0x021b }
            goto L_0x02de
        L_0x021b:
            r0 = move-exception
            goto L_0x0232
        L_0x021d:
            r0 = move-exception
            goto L_0x0241
        L_0x021f:
            r34 = r1
            goto L_0x02de
        L_0x0223:
            r0 = move-exception
            r34 = r1
            goto L_0x0232
        L_0x0227:
            r0 = move-exception
            r34 = r1
            goto L_0x0241
        L_0x022b:
            r0 = move-exception
            r34 = r1
            r33 = r7
            r31 = r10
        L_0x0232:
            java.lang.RuntimeException r1 = new java.lang.RuntimeException
            java.lang.String r4 = "Signing certificates comparison made on incomparable signing details but somehow passed verifySignatures!"
            r1.<init>(r4, r0)
            throw r1
        L_0x023a:
            r0 = move-exception
            r34 = r1
            r33 = r7
            r31 = r10
        L_0x0241:
            r1 = r3 & 16
            if (r1 == 0) goto L_0x032b
            android.content.pm.PackageParser$SigningDetails r1 = r2.mSigningDetails
            com.android.server.pm.SharedUserSetting r7 = r13.sharedUser
            if (r7 == 0) goto L_0x02c4
            com.android.server.pm.SharedUserSetting r7 = r13.sharedUser
            com.android.server.pm.PackageSignatures r7 = r7.signatures
            android.content.pm.PackageParser$SigningDetails r7 = r7.mSigningDetails
            android.content.pm.Signature[] r7 = r7.signatures
            com.android.server.pm.SharedUserSetting r10 = r13.sharedUser
            java.lang.Boolean r10 = r10.signaturesChanged
            if (r10 == 0) goto L_0x02b1
            android.content.pm.PackageParser$SigningDetails r10 = r2.mSigningDetails
            android.content.pm.Signature[] r10 = r10.signatures
            int r10 = com.android.server.pm.PackageManagerServiceUtils.compareSignatures(r7, r10)
            if (r10 == 0) goto L_0x02b1
            java.lang.String r4 = "ro.product.first_api_level"
            r5 = 0
            int r4 = android.os.SystemProperties.getInt(r4, r5)
            r5 = 29
            if (r4 > r5) goto L_0x028c
            com.android.server.pm.PackageManagerService$ReconcileFailure r4 = new com.android.server.pm.PackageManagerService$ReconcileFailure
            java.lang.StringBuilder r10 = new java.lang.StringBuilder
            r10.<init>()
            java.lang.String r5 = "Signature mismatch for shared user: "
            r10.append(r5)
            com.android.server.pm.PackageSetting r5 = r8.pkgSetting
            com.android.server.pm.SharedUserSetting r5 = r5.sharedUser
            r10.append(r5)
            java.lang.String r5 = r10.toString()
            r10 = -104(0xffffffffffffff98, float:NaN)
            r4.<init>(r10, r5)
            throw r4
        L_0x028c:
            java.lang.IllegalStateException r4 = new java.lang.IllegalStateException
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r10 = "Signature mismatch on system package "
            r5.append(r10)
            java.lang.String r10 = r2.packageName
            r5.append(r10)
            java.lang.String r10 = " for shared user "
            r5.append(r10)
            com.android.server.pm.PackageSetting r10 = r8.pkgSetting
            com.android.server.pm.SharedUserSetting r10 = r10.sharedUser
            r5.append(r10)
            java.lang.String r5 = r5.toString()
            r4.<init>(r5)
            throw r4
        L_0x02b1:
            r24 = 1
            com.android.server.pm.SharedUserSetting r10 = r13.sharedUser
            com.android.server.pm.PackageSignatures r10 = r10.signatures
            r25 = r1
            android.content.pm.PackageParser$SigningDetails r1 = r2.mSigningDetails
            r10.mSigningDetails = r1
            com.android.server.pm.SharedUserSetting r1 = r13.sharedUser
            java.lang.Boolean r10 = java.lang.Boolean.TRUE
            r1.signaturesChanged = r10
            goto L_0x02c6
        L_0x02c4:
            r25 = r1
        L_0x02c6:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r5)
            java.lang.String r5 = r2.packageName
            r1.append(r5)
            r1.append(r4)
            java.lang.String r1 = r1.toString()
            r4 = 5
            reportSettingsProblem(r4, r1)
        L_0x02de:
        L_0x02df:
            com.android.server.pm.PackageManagerService$ReconciledPackage r0 = new com.android.server.pm.PackageManagerService$ReconciledPackage
            com.android.server.pm.PackageSetting r4 = r8.pkgSetting
            java.util.Map<java.lang.String, com.android.server.pm.PackageManagerService$PrepareResult> r1 = r14.preparedPackages
            java.lang.Object r1 = r1.get(r9)
            r7 = r1
            com.android.server.pm.PackageManagerService$PrepareResult r7 = (com.android.server.pm.PackageManagerService.PrepareResult) r7
            r26 = 0
            r28 = r34
            r1 = r0
            r30 = r2
            r2 = r39
            r32 = r3
            r3 = r18
            r5 = r6
            r34 = r6
            r6 = r7
            r7 = r8
            r35 = r8
            r8 = r20
            r10 = r9
            r9 = r17
            r37 = r10
            r36 = r31
            r10 = r25
            r38 = r11
            r11 = r24
            r15 = r12
            r12 = r23
            r31 = r27
            r27 = r13
            r13 = r26
            r1.<init>(r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12)
            r1 = r37
            r15.put(r1, r0)
            r12 = r15
            r13 = r31
            r10 = r36
            r11 = r38
            r15 = r40
            goto L_0x0034
        L_0x032b:
            r30 = r2
            com.android.server.pm.PackageManagerService$ReconcileFailure r2 = new com.android.server.pm.PackageManagerService$ReconcileFailure
            r2.<init>((com.android.server.pm.PackageManagerException) r0)
            throw r2
        L_0x0333:
            r36 = r10
            r38 = r11
            r15 = r12
            r31 = r13
            java.util.Set r0 = r31.keySet()
            java.util.Iterator r0 = r0.iterator()
        L_0x0342:
            boolean r1 = r0.hasNext()
            if (r1 == 0) goto L_0x03a1
            java.lang.Object r1 = r0.next()
            java.lang.String r1 = (java.lang.String) r1
            r2 = r31
            java.lang.Object r3 = r2.get(r1)
            com.android.server.pm.PackageManagerService$ScanResult r3 = (com.android.server.pm.PackageManagerService.ScanResult) r3
            com.android.server.pm.PackageManagerService$ScanRequest r4 = r3.request
            int r4 = r4.scanFlags
            r4 = r4 & 16
            if (r4 != 0) goto L_0x039a
            com.android.server.pm.PackageManagerService$ScanRequest r4 = r3.request
            int r4 = r4.parseFlags
            r4 = r4 & 16
            if (r4 == 0) goto L_0x0369
            r31 = r2
            goto L_0x0342
        L_0x0369:
            java.lang.Object r4 = r15.get(r1)     // Catch:{ PackageManagerException -> 0x0389 }
            com.android.server.pm.PackageManagerService$ReconciledPackage r4 = (com.android.server.pm.PackageManagerService.ReconciledPackage) r4     // Catch:{ PackageManagerException -> 0x0389 }
            com.android.server.pm.PackageManagerService$ScanRequest r5 = r3.request     // Catch:{ PackageManagerException -> 0x0389 }
            android.content.pm.PackageParser$Package r5 = r5.pkg     // Catch:{ PackageManagerException -> 0x0389 }
            java.util.Map<java.lang.String, android.util.LongSparseArray<android.content.pm.SharedLibraryInfo>> r6 = r14.sharedLibrarySource     // Catch:{ PackageManagerException -> 0x0389 }
            r8 = r36
            r7 = r38
            java.util.ArrayList r5 = collectSharedLibraryInfos(r5, r7, r6, r8)     // Catch:{ PackageManagerException -> 0x0387 }
            r4.collectedSharedLibraryInfos = r5     // Catch:{ PackageManagerException -> 0x0387 }
            r31 = r2
            r38 = r7
            r36 = r8
            goto L_0x0342
        L_0x0387:
            r0 = move-exception
            goto L_0x038e
        L_0x0389:
            r0 = move-exception
            r8 = r36
            r7 = r38
        L_0x038e:
            com.android.server.pm.PackageManagerService$ReconcileFailure r4 = new com.android.server.pm.PackageManagerService$ReconcileFailure
            int r5 = r0.error
            java.lang.String r6 = r0.getMessage()
            r4.<init>(r5, r6)
            throw r4
        L_0x039a:
            r8 = r36
            r7 = r38
            r31 = r2
            goto L_0x0342
        L_0x03a1:
            return r15
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.reconcilePackagesLocked(com.android.server.pm.PackageManagerService$ReconcileRequest, com.android.server.pm.KeySetManagerService):java.util.Map");
    }

    private static List<SharedLibraryInfo> getAllowedSharedLibInfos(ScanResult scanResult, Map<String, LongSparseArray<SharedLibraryInfo>> existingSharedLibraries) {
        PackageSetting updatedSystemPs;
        PackageParser.Package pkg = scanResult.request.pkg;
        if (scanResult.staticSharedLibraryInfo == null && scanResult.dynamicSharedLibraryInfos == null) {
            return null;
        }
        if (scanResult.staticSharedLibraryInfo != null) {
            return Collections.singletonList(scanResult.staticSharedLibraryInfo);
        }
        boolean hasDynamicLibraries = true;
        if ((pkg.applicationInfo.flags & 1) == 0 || scanResult.dynamicSharedLibraryInfos == null) {
            hasDynamicLibraries = false;
        }
        if (!hasDynamicLibraries) {
            return null;
        }
        boolean isUpdatedSystemApp = pkg.isUpdatedSystemApp();
        if (!isUpdatedSystemApp) {
            updatedSystemPs = null;
        } else if (scanResult.request.disabledPkgSetting == null) {
            updatedSystemPs = scanResult.request.oldPkgSetting;
        } else {
            updatedSystemPs = scanResult.request.disabledPkgSetting;
        }
        if (!isUpdatedSystemApp || !(updatedSystemPs.pkg == null || updatedSystemPs.pkg.libraryNames == null)) {
            ArrayList<SharedLibraryInfo> infos = new ArrayList<>(scanResult.dynamicSharedLibraryInfos.size());
            for (SharedLibraryInfo info : scanResult.dynamicSharedLibraryInfos) {
                String name = info.getName();
                if (isUpdatedSystemApp && !updatedSystemPs.pkg.libraryNames.contains(name)) {
                    Slog.w(TAG, "Package " + pkg.packageName + " declares library " + name + " that is not declared on system image; skipping");
                } else if (sharedLibExists(name, -1, existingSharedLibraries)) {
                    Slog.w(TAG, "Package " + pkg.packageName + " declares library " + name + " that already exists; skipping");
                } else {
                    infos.add(info);
                }
            }
            return infos;
        }
        Slog.w(TAG, "Package " + pkg.packageName + " declares libraries that are not declared on the system image; skipping");
        return null;
    }

    private static boolean addSharedLibraryToPackageVersionMap(Map<String, LongSparseArray<SharedLibraryInfo>> target, SharedLibraryInfo library) {
        String name = library.getName();
        if (!target.containsKey(name)) {
            target.put(name, new LongSparseArray());
        } else if (library.getType() != 2 || target.get(name).indexOfKey(library.getLongVersion()) >= 0) {
            return false;
        }
        target.get(name).put(library.getLongVersion(), library);
        return true;
    }

    /* JADX WARNING: Removed duplicated region for block: B:100:0x029e  */
    /* JADX WARNING: Removed duplicated region for block: B:103:0x02a3  */
    /* JADX WARNING: Removed duplicated region for block: B:106:0x02ae  */
    /* JADX WARNING: Removed duplicated region for block: B:112:0x02df  */
    /* JADX WARNING: Removed duplicated region for block: B:118:0x02e7 A[SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:59:0x019c  */
    /* JADX WARNING: Removed duplicated region for block: B:65:0x01c0  */
    /* JADX WARNING: Removed duplicated region for block: B:68:0x01c6  */
    /* JADX WARNING: Removed duplicated region for block: B:73:0x01f0  */
    /* JADX WARNING: Removed duplicated region for block: B:93:0x0258  */
    /* JADX WARNING: Removed duplicated region for block: B:99:0x028c  */
    @com.android.internal.annotations.GuardedBy({"mPackages"})
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void commitPackagesLocked(com.android.server.pm.PackageManagerService.CommitRequest r29) {
        /*
            r28 = this;
            r8 = r28
            r9 = r29
            java.util.Map<java.lang.String, com.android.server.pm.PackageManagerService$ReconciledPackage> r0 = r9.reconciledPackages
            java.util.Collection r0 = r0.values()
            java.util.Iterator r10 = r0.iterator()
        L_0x000e:
            boolean r0 = r10.hasNext()
            if (r0 == 0) goto L_0x02eb
            java.lang.Object r0 = r10.next()
            r11 = r0
            com.android.server.pm.PackageManagerService$ReconciledPackage r11 = (com.android.server.pm.PackageManagerService.ReconciledPackage) r11
            com.android.server.pm.PackageManagerService$ScanResult r12 = r11.scanResult
            com.android.server.pm.PackageManagerService$ScanRequest r13 = r12.request
            android.content.pm.PackageParser$Package r14 = r13.pkg
            java.lang.String r15 = r14.packageName
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r7 = r11.installResult
            com.android.server.pm.PackageManagerService$PrepareResult r0 = r11.prepareResult
            boolean r0 = r0.replace
            r5 = 0
            r6 = 1
            if (r0 == 0) goto L_0x0263
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r8.mPackages
            java.lang.Object r0 = r0.get(r15)
            r3 = r0
            android.content.pm.PackageParser$Package r3 = (android.content.pm.PackageParser.Package) r3
            java.lang.Object r0 = r3.mExtras
            r4 = r0
            com.android.server.pm.PackageSetting r4 = (com.android.server.pm.PackageSetting) r4
            long r0 = r4.firstInstallTime
            long r16 = java.lang.System.currentTimeMillis()
            r18 = r0
            r1 = r28
            r2 = r14
            r21 = r4
            r20 = r10
            r10 = r3
            r3 = r18
            r18 = r12
            r12 = r6
            r5 = r16
            r1.setInstallAndUpdateTime(r2, r3, r5)
            com.android.server.pm.PackageManagerService$PrepareResult r0 = r11.prepareResult
            boolean r0 = r0.system
            r6 = 0
            if (r0 == 0) goto L_0x013d
            r8.removePackageLI((android.content.pm.PackageParser.Package) r10, (boolean) r12)
            boolean r0 = r8.disableSystemPackageLPw(r10, r14)
            if (r0 != 0) goto L_0x0080
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r0 = r7.removedInfo
            android.content.pm.ApplicationInfo r1 = r10.applicationInfo
            java.lang.String r1 = r1.getCodePath()
            android.content.pm.ApplicationInfo r2 = r10.applicationInfo
            java.lang.String r2 = r2.getResourcePath()
            android.content.pm.ApplicationInfo r3 = r10.applicationInfo
            java.lang.String[] r3 = com.android.server.pm.InstructionSets.getAppDexInstructionSets((android.content.pm.ApplicationInfo) r3)
            com.android.server.pm.PackageManagerService$InstallArgs r1 = r8.createInstallArgsForExisting(r1, r2, r3)
            r0.args = r1
            goto L_0x0084
        L_0x0080:
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r0 = r7.removedInfo
            r0.args = r6
        L_0x0084:
            java.util.ArrayList r0 = r10.childPackages
            if (r0 == 0) goto L_0x008f
            java.util.ArrayList r0 = r10.childPackages
            int r5 = r0.size()
            goto L_0x0090
        L_0x008f:
            r5 = 0
        L_0x0090:
            r0 = r5
            java.util.ArrayList r1 = r14.childPackages
            if (r1 == 0) goto L_0x009c
            java.util.ArrayList r1 = r14.childPackages
            int r5 = r1.size()
            goto L_0x009d
        L_0x009c:
            r5 = 0
        L_0x009d:
            r6 = r5
            r1 = 0
            r5 = r1
        L_0x00a0:
            if (r5 >= r0) goto L_0x0134
            java.util.ArrayList r1 = r10.childPackages
            java.lang.Object r1 = r1.get(r5)
            r4 = r1
            android.content.pm.PackageParser$Package r4 = (android.content.pm.PackageParser.Package) r4
            r1 = 1
            r2 = 0
        L_0x00ad:
            if (r2 >= r6) goto L_0x00cc
            java.util.ArrayList r3 = r14.childPackages
            java.lang.Object r3 = r3.get(r2)
            android.content.pm.PackageParser$Package r3 = (android.content.pm.PackageParser.Package) r3
            java.lang.String r12 = r4.packageName
            r17 = r0
            java.lang.String r0 = r3.packageName
            boolean r0 = r12.equals(r0)
            if (r0 == 0) goto L_0x00c6
            r1 = 0
            r0 = r1
            goto L_0x00cf
        L_0x00c6:
            int r2 = r2 + 1
            r0 = r17
            r12 = 1
            goto L_0x00ad
        L_0x00cc:
            r17 = r0
            r0 = r1
        L_0x00cf:
            if (r0 == 0) goto L_0x0125
            com.android.server.pm.Settings r1 = r8.mSettings
            java.lang.String r2 = r4.packageName
            com.android.server.pm.PackageSetting r12 = r1.getDisabledSystemPkgLPr((java.lang.String) r2)
            if (r12 == 0) goto L_0x011e
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r1 = r7.removedInfo
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageRemovedInfo> r1 = r1.removedChildPackages
            if (r1 == 0) goto L_0x011e
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r1 = r7.removedInfo
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageRemovedInfo> r1 = r1.removedChildPackages
            java.lang.String r2 = r4.packageName
            java.lang.Object r1 = r1.get(r2)
            r3 = r1
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r3 = (com.android.server.pm.PackageManagerService.PackageRemovedInfo) r3
            int[] r2 = r9.mAllUsers
            r22 = 0
            r23 = 0
            r1 = r28
            r24 = r2
            r2 = r12
            r25 = r3
            r3 = r24
            r24 = r4
            r4 = r25
            r26 = r5
            r5 = r22
            r22 = r6
            r6 = r23
            r1.removePackageDataLIF(r2, r3, r4, r5, r6)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r8.mPackages
            java.lang.String r2 = r12.name
            java.lang.Object r1 = r1.get(r2)
            if (r1 != 0) goto L_0x0118
            r1 = 1
            goto L_0x0119
        L_0x0118:
            r1 = 0
        L_0x0119:
            r2 = r25
            r2.removedForAllUsers = r1
            goto L_0x012b
        L_0x011e:
            r24 = r4
            r26 = r5
            r22 = r6
            goto L_0x012b
        L_0x0125:
            r24 = r4
            r26 = r5
            r22 = r6
        L_0x012b:
            int r5 = r26 + 1
            r0 = r17
            r6 = r22
            r12 = 1
            goto L_0x00a0
        L_0x0134:
            r17 = r0
            r26 = r5
            r22 = r6
            r12 = r7
            goto L_0x0268
        L_0x013d:
            com.android.server.pm.PackageManagerService$DeletePackageAction r2 = r11.deletePackageAction     // Catch:{ SystemDeleteException -> 0x0151 }
            r4 = 1
            int[] r5 = r9.mAllUsers     // Catch:{ SystemDeleteException -> 0x0151 }
            r0 = 1
            r1 = r28
            r3 = r15
            r12 = r6
            r6 = r0
            r27 = r7
            r7 = r14
            r1.executeDeletePackageLIF(r2, r3, r4, r5, r6, r7)     // Catch:{ SystemDeleteException -> 0x014f }
            goto L_0x0159
        L_0x014f:
            r0 = move-exception
            goto L_0x0155
        L_0x0151:
            r0 = move-exception
            r12 = r6
            r27 = r7
        L_0x0155:
            boolean r1 = android.os.Build.IS_ENG
            if (r1 != 0) goto L_0x025b
        L_0x0159:
            boolean r0 = r10.isForwardLocked()
            if (r0 != 0) goto L_0x0165
            boolean r0 = isExternal((android.content.pm.PackageParser.Package) r10)
            if (r0 == 0) goto L_0x0184
        L_0x0165:
            r1 = 1
            int[] r5 = new int[r1]
            android.content.pm.ApplicationInfo r0 = r10.applicationInfo
            int r0 = r0.uid
            r2 = 0
            r5[r2] = r0
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>(r1)
            android.content.pm.ApplicationInfo r1 = r10.applicationInfo
            java.lang.String r1 = r1.packageName
            r0.add(r1)
            r2 = 0
            r3 = 1
            r6 = 0
            r1 = r28
            r4 = r0
            r1.sendResourcesChangedBroadcast((boolean) r2, (boolean) r3, (java.util.ArrayList<java.lang.String>) r4, (int[]) r5, (android.content.IIntentReceiver) r6)
        L_0x0184:
            com.android.server.pm.Settings r0 = r8.mSettings
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r0 = r0.mPackages
            com.android.server.pm.PackageManagerService$PrepareResult r1 = r11.prepareResult
            android.content.pm.PackageParser$Package r1 = r1.existingPackage
            java.lang.String r1 = r1.packageName
            java.lang.Object r0 = r0.get(r1)
            com.android.server.pm.PackageSetting r0 = (com.android.server.pm.PackageSetting) r0
            com.android.server.pm.PackageManagerService$InstallArgs r1 = r11.installArgs
            int r1 = r1.installFlags
            r2 = 1
            r1 = r1 & r2
            if (r1 != 0) goto L_0x01c0
            java.util.Set r1 = r0.mOldCodePaths
            if (r1 != 0) goto L_0x01a7
            android.util.ArraySet r1 = new android.util.ArraySet
            r1.<init>()
            r0.mOldCodePaths = r1
        L_0x01a7:
            java.util.Set r1 = r0.mOldCodePaths
            r2 = 1
            java.lang.String[] r3 = new java.lang.String[r2]
            java.lang.String r2 = r10.baseCodePath
            r4 = 0
            r3[r4] = r2
            java.util.Collections.addAll(r1, r3)
            java.lang.String[] r1 = r10.splitCodePaths
            if (r1 == 0) goto L_0x01c2
            java.util.Set r1 = r0.mOldCodePaths
            java.lang.String[] r2 = r10.splitCodePaths
            java.util.Collections.addAll(r1, r2)
            goto L_0x01c2
        L_0x01c0:
            r0.mOldCodePaths = r12
        L_0x01c2:
            java.util.List r1 = r0.childPackageNames
            if (r1 == 0) goto L_0x01e9
            java.util.List r1 = r0.childPackageNames
            int r1 = r1.size()
            r2 = 1
            int r1 = r1 - r2
        L_0x01ce:
            if (r1 < 0) goto L_0x01e9
            java.util.List r2 = r0.childPackageNames
            java.lang.Object r2 = r2.get(r1)
            java.lang.String r2 = (java.lang.String) r2
            com.android.server.pm.Settings r3 = r8.mSettings
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r3 = r3.mPackages
            java.lang.Object r3 = r3.get(r2)
            com.android.server.pm.PackageSetting r3 = (com.android.server.pm.PackageSetting) r3
            java.util.Set r4 = r0.mOldCodePaths
            r3.mOldCodePaths = r4
            int r1 = r1 + -1
            goto L_0x01ce
        L_0x01e9:
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r1 = r11.installResult
            int r1 = r1.returnCode
            r2 = 1
            if (r1 != r2) goto L_0x0258
            com.android.server.pm.Settings r1 = r8.mSettings
            java.lang.String r2 = r14.packageName
            com.android.server.pm.PackageSetting r1 = r1.getPackageLPr(r2)
            if (r1 == 0) goto L_0x0255
            r12 = r27
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r2 = r12.removedInfo
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r8.mPackages
            java.lang.String r4 = r1.name
            java.lang.Object r3 = r3.get(r4)
            if (r3 != 0) goto L_0x020a
            r3 = 1
            goto L_0x020b
        L_0x020a:
            r3 = 0
        L_0x020b:
            r2.removedForAllUsers = r3
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r2 = r12.removedInfo
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageRemovedInfo> r2 = r2.removedChildPackages
            if (r2 == 0) goto L_0x0268
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r2 = r12.removedInfo
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageRemovedInfo> r2 = r2.removedChildPackages
            int r2 = r2.size()
            int r3 = r2 + -1
        L_0x021d:
            if (r3 < 0) goto L_0x0268
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r4 = r12.removedInfo
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageRemovedInfo> r4 = r4.removedChildPackages
            java.lang.Object r4 = r4.keyAt(r3)
            java.lang.String r4 = (java.lang.String) r4
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageInstalledInfo> r5 = r12.addedChildPackages
            boolean r5 = r5.containsKey(r4)
            if (r5 == 0) goto L_0x0239
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r5 = r12.removedInfo
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageRemovedInfo> r5 = r5.removedChildPackages
            r5.removeAt(r3)
            goto L_0x0252
        L_0x0239:
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r5 = r12.removedInfo
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageRemovedInfo> r5 = r5.removedChildPackages
            java.lang.Object r5 = r5.valueAt(r3)
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r5 = (com.android.server.pm.PackageManagerService.PackageRemovedInfo) r5
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r6 = r8.mPackages
            java.lang.String r7 = r5.removedPackage
            java.lang.Object r6 = r6.get(r7)
            if (r6 != 0) goto L_0x024f
            r6 = 1
            goto L_0x0250
        L_0x024f:
            r6 = 0
        L_0x0250:
            r5.removedForAllUsers = r6
        L_0x0252:
            int r3 = r3 + -1
            goto L_0x021d
        L_0x0255:
            r12 = r27
            goto L_0x0268
        L_0x0258:
            r12 = r27
            goto L_0x0268
        L_0x025b:
            java.lang.RuntimeException r1 = new java.lang.RuntimeException
            java.lang.String r2 = "Unexpected failure"
            r1.<init>(r2, r0)
            throw r1
        L_0x0263:
            r20 = r10
            r18 = r12
            r12 = r7
        L_0x0268:
            r8.commitReconciledScanResultLocked(r11)
            com.android.server.pm.PackageManagerService$InstallArgs r0 = r11.installArgs
            java.lang.String r3 = r0.installerPackageName
            int[] r4 = r9.mAllUsers
            com.android.server.pm.PackageManagerService$InstallArgs r0 = r11.installArgs
            android.os.UserHandle r6 = r0.user
            com.android.server.pm.PackageManagerService$InstallArgs r0 = r11.installArgs
            int r7 = r0.installReason
            r1 = r28
            r2 = r14
            r5 = r12
            r1.updateSettingsLI(r2, r3, r4, r5, r6, r7)
            com.android.server.pm.Settings r0 = r8.mSettings
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r0 = r0.mPackages
            java.lang.Object r0 = r0.get(r15)
            com.android.server.pm.PackageSetting r0 = (com.android.server.pm.PackageSetting) r0
            if (r0 == 0) goto L_0x029e
            com.android.server.pm.UserManagerService r1 = sUserManager
            int[] r1 = r1.getUserIds()
            r2 = 1
            int[] r1 = r0.queryInstalledUsers(r1, r2)
            r12.newUsers = r1
            r2 = 0
            r0.setUpdateAvailable(r2)
            goto L_0x029f
        L_0x029e:
            r2 = 0
        L_0x029f:
            java.util.ArrayList r1 = r14.childPackages
            if (r1 == 0) goto L_0x02aa
            java.util.ArrayList r1 = r14.childPackages
            int r5 = r1.size()
            r2 = r5
        L_0x02aa:
            r1 = r2
            r2 = 0
        L_0x02ac:
            if (r2 >= r1) goto L_0x02da
            java.util.ArrayList r3 = r14.childPackages
            java.lang.Object r3 = r3.get(r2)
            android.content.pm.PackageParser$Package r3 = (android.content.pm.PackageParser.Package) r3
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageInstalledInfo> r4 = r12.addedChildPackages
            java.lang.String r5 = r3.packageName
            java.lang.Object r4 = r4.get(r5)
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r4 = (com.android.server.pm.PackageManagerService.PackageInstalledInfo) r4
            com.android.server.pm.Settings r5 = r8.mSettings
            java.lang.String r6 = r3.packageName
            com.android.server.pm.PackageSetting r5 = r5.getPackageLPr(r6)
            if (r5 == 0) goto L_0x02d7
            com.android.server.pm.UserManagerService r6 = sUserManager
            int[] r6 = r6.getUserIds()
            r7 = 1
            int[] r6 = r5.queryInstalledUsers(r6, r7)
            r4.newUsers = r6
        L_0x02d7:
            int r2 = r2 + 1
            goto L_0x02ac
        L_0x02da:
            int r2 = r12.returnCode
            r3 = 1
            if (r2 != r3) goto L_0x02e7
            int[] r2 = r12.newUsers
            r8.updateSequenceNumberLP(r0, r2)
            r8.updateInstantAppInstallerLocked(r15)
        L_0x02e7:
            r10 = r20
            goto L_0x000e
        L_0x02eb:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.commitPackagesLocked(com.android.server.pm.PackageManagerService$CommitRequest):void");
    }

    /* Debug info: failed to restart local var, previous not found, register: 29 */
    /* JADX WARNING: Code restructure failed: missing block: B:197:0x0479, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:199:?, code lost:
        r14 = r7.values().iterator();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:201:0x0486, code lost:
        if (r14.hasNext() != false) goto L_0x0488;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:202:0x0488, code lost:
        r15 = r14.next();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:203:0x0490, code lost:
        if (r15.freezer != null) goto L_0x0492;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:204:0x0492, code lost:
        r15.freezer.close();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:206:0x0499, code lost:
        android.os.Trace.traceEnd(r11);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:207:0x049c, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:208:0x049d, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:240:?, code lost:
        android.os.Trace.traceEnd(r11);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:241:0x0537, code lost:
        throw r0;
     */
    /* JADX WARNING: Exception block dominator not found, dom blocks: [B:161:0x03d0, B:210:0x04aa] */
    /* JADX WARNING: Removed duplicated region for block: B:102:0x0288  */
    /* JADX WARNING: Removed duplicated region for block: B:254:0x055e  */
    /* JADX WARNING: Removed duplicated region for block: B:269:0x05b6  */
    /* JADX WARNING: Removed duplicated region for block: B:87:0x0231  */
    /* JADX WARNING: Unknown top exception splitter block from list: {B:84:0x0228=Splitter:B:84:0x0228, B:140:0x0358=Splitter:B:140:0x0358} */
    @com.android.internal.annotations.GuardedBy({"mInstallLock"})
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void installPackagesLI(java.util.List<com.android.server.pm.PackageManagerService.InstallRequest> r30) {
        /*
            r29 = this;
            r8 = r29
            android.util.ArrayMap r0 = new android.util.ArrayMap
            int r1 = r30.size()
            r0.<init>(r1)
            r15 = r0
            android.util.ArrayMap r0 = new android.util.ArrayMap
            int r1 = r30.size()
            r0.<init>(r1)
            r14 = r0
            android.util.ArrayMap r0 = new android.util.ArrayMap
            int r1 = r30.size()
            r0.<init>(r1)
            r13 = r0
            android.util.ArrayMap r0 = new android.util.ArrayMap
            int r1 = r30.size()
            r0.<init>(r1)
            r12 = r0
            android.util.ArrayMap r0 = new android.util.ArrayMap
            int r1 = r30.size()
            r0.<init>(r1)
            r11 = r0
            android.util.ArrayMap r0 = new android.util.ArrayMap
            int r1 = r30.size()
            r0.<init>(r1)
            r10 = r0
            android.util.ArrayMap r0 = new android.util.ArrayMap
            int r1 = r30.size()
            r0.<init>(r1)
            r9 = r0
            r19 = 0
            r7 = 1
            r3 = 262144(0x40000, double:1.295163E-318)
            java.lang.String r0 = "installPackagesLI"
            android.os.Trace.traceBegin(r3, r0)     // Catch:{ all -> 0x054f }
            java.util.Iterator r0 = r30.iterator()     // Catch:{ all -> 0x054f }
        L_0x0058:
            boolean r1 = r0.hasNext()     // Catch:{ all -> 0x054f }
            if (r1 == 0) goto L_0x0382
            java.lang.Object r1 = r0.next()     // Catch:{ all -> 0x036b }
            com.android.server.pm.PackageManagerService$InstallRequest r1 = (com.android.server.pm.PackageManagerService.InstallRequest) r1     // Catch:{ all -> 0x036b }
            r6 = r1
            java.lang.String r1 = "preparePackage"
            android.os.Trace.traceBegin(r3, r1)     // Catch:{ PrepareFailure -> 0x02c2, all -> 0x02b2 }
            com.android.server.pm.PackageManagerService$InstallArgs r1 = r6.args     // Catch:{ PrepareFailure -> 0x02c2, all -> 0x02b2 }
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r2 = r6.installResult     // Catch:{ PrepareFailure -> 0x02c2, all -> 0x02b2 }
            com.android.server.pm.PackageManagerService$PrepareResult r1 = r8.preparePackageLI(r1, r2)     // Catch:{ PrepareFailure -> 0x02c2, all -> 0x02b2 }
            r2 = r1
            android.os.Trace.traceEnd(r3)     // Catch:{ all -> 0x036b }
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r1 = r6.installResult     // Catch:{ all -> 0x036b }
            r1.setReturnCode(r7)     // Catch:{ all -> 0x036b }
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r1 = r6.installResult     // Catch:{ all -> 0x036b }
            com.android.server.pm.PackageManagerService$InstallArgs r3 = r6.args     // Catch:{ all -> 0x029c }
            java.lang.String r3 = r3.installerPackageName     // Catch:{ all -> 0x029c }
            r1.installerPackageName = r3     // Catch:{ all -> 0x029c }
            android.content.pm.PackageParser$Package r1 = r2.packageToScan     // Catch:{ all -> 0x029c }
            java.lang.String r1 = r1.packageName     // Catch:{ all -> 0x029c }
            r4 = r1
            r12.put(r4, r2)     // Catch:{ all -> 0x029c }
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r1 = r6.installResult     // Catch:{ all -> 0x029c }
            r13.put(r4, r1)     // Catch:{ all -> 0x029c }
            com.android.server.pm.PackageManagerService$InstallArgs r1 = r6.args     // Catch:{ all -> 0x029c }
            r14.put(r4, r1)     // Catch:{ all -> 0x029c }
            android.content.pm.PackageParser$Package r3 = r2.packageToScan     // Catch:{ PackageManagerException -> 0x0216 }
            int r1 = r2.parseFlags     // Catch:{ PackageManagerException -> 0x0216 }
            int r5 = r2.scanFlags     // Catch:{ PackageManagerException -> 0x0216 }
            long r20 = java.lang.System.currentTimeMillis()     // Catch:{ PackageManagerException -> 0x0216 }
            com.android.server.pm.PackageManagerService$InstallArgs r7 = r6.args     // Catch:{ PackageManagerException -> 0x0206, all -> 0x0201 }
            android.os.UserHandle r7 = r7.user     // Catch:{ PackageManagerException -> 0x0206, all -> 0x0201 }
            r23 = r1
            r1 = r29
            r24 = r2
            r2 = r3
            r25 = 262144(0x40000, double:1.295163E-318)
            r3 = r23
            r16 = r13
            r13 = r4
            r4 = r5
            r17 = r14
            r23 = 0
            r14 = r6
            r5 = r20
            r18 = r10
            r10 = 1
            java.util.List r1 = r1.scanPackageTracedLI((android.content.pm.PackageParser.Package) r2, (int) r3, (int) r4, (long) r5, (android.os.UserHandle) r7)     // Catch:{ PackageManagerException -> 0x01fb, all -> 0x01e9 }
            java.util.Iterator r2 = r1.iterator()     // Catch:{ PackageManagerException -> 0x01fb, all -> 0x01e9 }
        L_0x00c7:
            boolean r3 = r2.hasNext()     // Catch:{ PackageManagerException -> 0x01fb, all -> 0x01e9 }
            if (r3 == 0) goto L_0x01d7
            java.lang.Object r3 = r2.next()     // Catch:{ PackageManagerException -> 0x01fb, all -> 0x01e9 }
            com.android.server.pm.PackageManagerService$ScanResult r3 = (com.android.server.pm.PackageManagerService.ScanResult) r3     // Catch:{ PackageManagerException -> 0x01fb, all -> 0x01e9 }
            com.android.server.pm.PackageSetting r4 = r3.pkgSetting     // Catch:{ PackageManagerException -> 0x01fb, all -> 0x01e9 }
            android.content.pm.PackageParser$Package r4 = r4.pkg     // Catch:{ PackageManagerException -> 0x01fb, all -> 0x01e9 }
            java.lang.String r4 = r4.packageName     // Catch:{ PackageManagerException -> 0x01fb, all -> 0x01e9 }
            java.lang.Object r4 = r15.put(r4, r3)     // Catch:{ PackageManagerException -> 0x01fb, all -> 0x01e9 }
            if (r4 == 0) goto L_0x018e
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r0 = r14.installResult     // Catch:{ PackageManagerException -> 0x0187, all -> 0x0175 }
            r2 = -5
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ PackageManagerException -> 0x0187, all -> 0x0175 }
            r4.<init>()     // Catch:{ PackageManagerException -> 0x0187, all -> 0x0175 }
            java.lang.String r5 = "Duplicate package "
            r4.append(r5)     // Catch:{ PackageManagerException -> 0x0187, all -> 0x0175 }
            com.android.server.pm.PackageSetting r5 = r3.pkgSetting     // Catch:{ PackageManagerException -> 0x0187, all -> 0x0175 }
            android.content.pm.PackageParser$Package r5 = r5.pkg     // Catch:{ PackageManagerException -> 0x0187, all -> 0x0175 }
            java.lang.String r5 = r5.packageName     // Catch:{ PackageManagerException -> 0x0187, all -> 0x0175 }
            r4.append(r5)     // Catch:{ PackageManagerException -> 0x0187, all -> 0x0175 }
            java.lang.String r5 = " in multi-package install request."
            r4.append(r5)     // Catch:{ PackageManagerException -> 0x0187, all -> 0x0175 }
            java.lang.String r4 = r4.toString()     // Catch:{ PackageManagerException -> 0x0187, all -> 0x0175 }
            r0.setError((int) r2, (java.lang.String) r4)     // Catch:{ PackageManagerException -> 0x0187, all -> 0x0175 }
            if (r19 != 0) goto L_0x0153
            java.util.Collection r0 = r15.values()
            java.util.Iterator r0 = r0.iterator()
        L_0x010b:
            boolean r2 = r0.hasNext()
            if (r2 == 0) goto L_0x0131
            java.lang.Object r2 = r0.next()
            com.android.server.pm.PackageManagerService$ScanResult r2 = (com.android.server.pm.PackageManagerService.ScanResult) r2
            com.android.server.pm.PackageManagerService$ScanRequest r4 = r2.request
            android.content.pm.PackageParser$Package r4 = r4.pkg
            java.lang.String r4 = r4.packageName
            java.lang.Boolean r5 = java.lang.Boolean.valueOf(r23)
            java.lang.Object r4 = r9.getOrDefault(r4, r5)
            java.lang.Boolean r4 = (java.lang.Boolean) r4
            boolean r4 = r4.booleanValue()
            if (r4 == 0) goto L_0x0130
            r8.cleanUpAppIdCreation(r2)
        L_0x0130:
            goto L_0x010b
        L_0x0131:
            java.util.Iterator r0 = r30.iterator()
        L_0x0135:
            boolean r2 = r0.hasNext()
            if (r2 == 0) goto L_0x0153
            java.lang.Object r2 = r0.next()
            com.android.server.pm.PackageManagerService$InstallRequest r2 = (com.android.server.pm.PackageManagerService.InstallRequest) r2
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r4 = r2.installResult
            int r4 = r4.returnCode
            if (r4 != r10) goto L_0x014e
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r4 = r2.installResult
            r5 = r23
            r4.returnCode = r5
            goto L_0x0150
        L_0x014e:
            r5 = r23
        L_0x0150:
            r23 = r5
            goto L_0x0135
        L_0x0153:
            java.util.Collection r0 = r12.values()
            java.util.Iterator r0 = r0.iterator()
        L_0x015b:
            boolean r2 = r0.hasNext()
            if (r2 == 0) goto L_0x0171
            java.lang.Object r2 = r0.next()
            com.android.server.pm.PackageManagerService$PrepareResult r2 = (com.android.server.pm.PackageManagerService.PrepareResult) r2
            com.android.server.pm.PackageManagerService$PackageFreezer r4 = r2.freezer
            if (r4 == 0) goto L_0x0170
            com.android.server.pm.PackageManagerService$PackageFreezer r4 = r2.freezer
            r4.close()
        L_0x0170:
            goto L_0x015b
        L_0x0171:
            android.os.Trace.traceEnd(r25)
            return
        L_0x0175:
            r0 = move-exception
            r5 = r23
            r2 = r9
            r6 = r11
            r7 = r12
            r22 = r15
            r20 = r16
            r21 = r17
            r3 = r18
            r11 = r25
            goto L_0x055c
        L_0x0187:
            r0 = move-exception
            r5 = r23
            r7 = r18
            goto L_0x0228
        L_0x018e:
            r5 = r23
            boolean r4 = r8.optimisticallyRegisterAppId(r3)     // Catch:{ PackageManagerException -> 0x01d3, all -> 0x01d1 }
            java.lang.Boolean r4 = java.lang.Boolean.valueOf(r4)     // Catch:{ PackageManagerException -> 0x01d3, all -> 0x01d1 }
            r9.put(r13, r4)     // Catch:{ PackageManagerException -> 0x01d3, all -> 0x01d1 }
            com.android.server.pm.PackageSetting r4 = r3.pkgSetting     // Catch:{ PackageManagerException -> 0x01d3, all -> 0x01d1 }
            android.content.pm.PackageParser$Package r4 = r4.pkg     // Catch:{ PackageManagerException -> 0x01d3, all -> 0x01d1 }
            java.lang.String r4 = r4.packageName     // Catch:{ PackageManagerException -> 0x01d3, all -> 0x01d1 }
            com.android.server.pm.PackageSetting r6 = r3.pkgSetting     // Catch:{ PackageManagerException -> 0x01d3, all -> 0x01d1 }
            android.content.pm.PackageParser$Package r6 = r6.pkg     // Catch:{ PackageManagerException -> 0x01d3, all -> 0x01d1 }
            com.android.server.pm.Settings$VersionInfo r6 = r8.getSettingsVersionForPackage(r6)     // Catch:{ PackageManagerException -> 0x01d3, all -> 0x01d1 }
            r11.put(r4, r6)     // Catch:{ PackageManagerException -> 0x01d3, all -> 0x01d1 }
            android.content.pm.SharedLibraryInfo r4 = r3.staticSharedLibraryInfo     // Catch:{ PackageManagerException -> 0x01d3, all -> 0x01d1 }
            if (r4 == 0) goto L_0x01c9
            com.android.server.pm.PackageSetting r4 = r8.getSharedLibLatestVersionSetting(r3)     // Catch:{ PackageManagerException -> 0x01d3, all -> 0x01d1 }
            if (r4 == 0) goto L_0x01c6
            com.android.server.pm.PackageSetting r6 = r3.pkgSetting     // Catch:{ PackageManagerException -> 0x01d3, all -> 0x01d1 }
            android.content.pm.PackageParser$Package r6 = r6.pkg     // Catch:{ PackageManagerException -> 0x01d3, all -> 0x01d1 }
            java.lang.String r6 = r6.packageName     // Catch:{ PackageManagerException -> 0x01d3, all -> 0x01d1 }
            r7 = r18
            r7.put(r6, r4)     // Catch:{ PackageManagerException -> 0x01c3 }
            goto L_0x01cb
        L_0x01c3:
            r0 = move-exception
            goto L_0x0228
        L_0x01c6:
            r7 = r18
            goto L_0x01cb
        L_0x01c9:
            r7 = r18
        L_0x01cb:
            r23 = r5
            r18 = r7
            goto L_0x00c7
        L_0x01d1:
            r0 = move-exception
            goto L_0x01ec
        L_0x01d3:
            r0 = move-exception
            r7 = r18
            goto L_0x0200
        L_0x01d7:
            r7 = r18
            r5 = r23
            r13 = r16
            r14 = r17
            r3 = r25
            r27 = r10
            r10 = r7
            r7 = r27
            goto L_0x0058
        L_0x01e9:
            r0 = move-exception
            r5 = r23
        L_0x01ec:
            r2 = r9
            r6 = r11
            r7 = r12
            r22 = r15
            r20 = r16
            r21 = r17
            r3 = r18
            r11 = r25
            goto L_0x055c
        L_0x01fb:
            r0 = move-exception
            r7 = r18
            r5 = r23
        L_0x0200:
            goto L_0x0228
        L_0x0201:
            r0 = move-exception
            r7 = r10
            r5 = 0
            goto L_0x02a3
        L_0x0206:
            r0 = move-exception
            r24 = r2
            r7 = r10
            r16 = r13
            r17 = r14
            r5 = 0
            r10 = 1
            r25 = 262144(0x40000, double:1.295163E-318)
            r13 = r4
            r14 = r6
            goto L_0x0228
        L_0x0216:
            r0 = move-exception
            r24 = r2
            r16 = r13
            r17 = r14
            r5 = 0
            r25 = 262144(0x40000, double:1.295163E-318)
            r13 = r4
            r14 = r6
            r27 = r10
            r10 = r7
            r7 = r27
        L_0x0228:
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r1 = r14.installResult     // Catch:{ all -> 0x035c }
            java.lang.String r2 = "Scanning Failed."
            r1.setError((java.lang.String) r2, (com.android.server.pm.PackageManagerException) r0)     // Catch:{ all -> 0x035c }
            if (r19 != 0) goto L_0x027a
            java.util.Collection r1 = r15.values()
            java.util.Iterator r1 = r1.iterator()
        L_0x0239:
            boolean r2 = r1.hasNext()
            if (r2 == 0) goto L_0x025f
            java.lang.Object r2 = r1.next()
            com.android.server.pm.PackageManagerService$ScanResult r2 = (com.android.server.pm.PackageManagerService.ScanResult) r2
            com.android.server.pm.PackageManagerService$ScanRequest r3 = r2.request
            android.content.pm.PackageParser$Package r3 = r3.pkg
            java.lang.String r3 = r3.packageName
            java.lang.Boolean r4 = java.lang.Boolean.valueOf(r5)
            java.lang.Object r3 = r9.getOrDefault(r3, r4)
            java.lang.Boolean r3 = (java.lang.Boolean) r3
            boolean r3 = r3.booleanValue()
            if (r3 == 0) goto L_0x025e
            r8.cleanUpAppIdCreation(r2)
        L_0x025e:
            goto L_0x0239
        L_0x025f:
            java.util.Iterator r1 = r30.iterator()
        L_0x0263:
            boolean r2 = r1.hasNext()
            if (r2 == 0) goto L_0x027a
            java.lang.Object r2 = r1.next()
            com.android.server.pm.PackageManagerService$InstallRequest r2 = (com.android.server.pm.PackageManagerService.InstallRequest) r2
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r3 = r2.installResult
            int r3 = r3.returnCode
            if (r3 != r10) goto L_0x0279
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r3 = r2.installResult
            r3.returnCode = r5
        L_0x0279:
            goto L_0x0263
        L_0x027a:
            java.util.Collection r1 = r12.values()
            java.util.Iterator r1 = r1.iterator()
        L_0x0282:
            boolean r2 = r1.hasNext()
            if (r2 == 0) goto L_0x0298
            java.lang.Object r2 = r1.next()
            com.android.server.pm.PackageManagerService$PrepareResult r2 = (com.android.server.pm.PackageManagerService.PrepareResult) r2
            com.android.server.pm.PackageManagerService$PackageFreezer r3 = r2.freezer
            if (r3 == 0) goto L_0x0297
            com.android.server.pm.PackageManagerService$PackageFreezer r3 = r2.freezer
            r3.close()
        L_0x0297:
            goto L_0x0282
        L_0x0298:
            android.os.Trace.traceEnd(r25)
            return
        L_0x029c:
            r0 = move-exception
            r5 = 0
            r27 = r10
            r10 = r7
            r7 = r27
        L_0x02a3:
            r3 = r7
            r2 = r9
            r6 = r11
            r7 = r12
            r20 = r13
            r21 = r14
            r22 = r15
            r11 = 262144(0x40000, double:1.295163E-318)
            goto L_0x0380
        L_0x02b2:
            r0 = move-exception
            r25 = r3
            r16 = r13
            r17 = r14
            r5 = 0
            r14 = r6
            r27 = r10
            r10 = r7
            r7 = r27
            goto L_0x0358
        L_0x02c2:
            r0 = move-exception
            r25 = r3
            r16 = r13
            r17 = r14
            r5 = 0
            r14 = r6
            r27 = r10
            r10 = r7
            r7 = r27
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r1 = r14.installResult     // Catch:{ all -> 0x0357 }
            int r2 = r0.error     // Catch:{ all -> 0x0357 }
            java.lang.String r3 = r0.getMessage()     // Catch:{ all -> 0x0357 }
            r1.setError((int) r2, (java.lang.String) r3)     // Catch:{ all -> 0x0357 }
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r1 = r14.installResult     // Catch:{ all -> 0x0357 }
            java.lang.String r2 = r0.conflictingPackage     // Catch:{ all -> 0x0357 }
            r1.origPackage = r2     // Catch:{ all -> 0x0357 }
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r1 = r14.installResult     // Catch:{ all -> 0x0357 }
            java.lang.String r2 = r0.conflictingPermission     // Catch:{ all -> 0x0357 }
            r1.origPermission = r2     // Catch:{ all -> 0x0357 }
            android.os.Trace.traceEnd(r25)     // Catch:{ all -> 0x035c }
            if (r19 != 0) goto L_0x0335
            java.util.Collection r1 = r15.values()
            java.util.Iterator r1 = r1.iterator()
        L_0x02f4:
            boolean r2 = r1.hasNext()
            if (r2 == 0) goto L_0x031a
            java.lang.Object r2 = r1.next()
            com.android.server.pm.PackageManagerService$ScanResult r2 = (com.android.server.pm.PackageManagerService.ScanResult) r2
            com.android.server.pm.PackageManagerService$ScanRequest r3 = r2.request
            android.content.pm.PackageParser$Package r3 = r3.pkg
            java.lang.String r3 = r3.packageName
            java.lang.Boolean r4 = java.lang.Boolean.valueOf(r5)
            java.lang.Object r3 = r9.getOrDefault(r3, r4)
            java.lang.Boolean r3 = (java.lang.Boolean) r3
            boolean r3 = r3.booleanValue()
            if (r3 == 0) goto L_0x0319
            r8.cleanUpAppIdCreation(r2)
        L_0x0319:
            goto L_0x02f4
        L_0x031a:
            java.util.Iterator r1 = r30.iterator()
        L_0x031e:
            boolean r2 = r1.hasNext()
            if (r2 == 0) goto L_0x0335
            java.lang.Object r2 = r1.next()
            com.android.server.pm.PackageManagerService$InstallRequest r2 = (com.android.server.pm.PackageManagerService.InstallRequest) r2
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r3 = r2.installResult
            int r3 = r3.returnCode
            if (r3 != r10) goto L_0x0334
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r3 = r2.installResult
            r3.returnCode = r5
        L_0x0334:
            goto L_0x031e
        L_0x0335:
            java.util.Collection r1 = r12.values()
            java.util.Iterator r1 = r1.iterator()
        L_0x033d:
            boolean r2 = r1.hasNext()
            if (r2 == 0) goto L_0x0353
            java.lang.Object r2 = r1.next()
            com.android.server.pm.PackageManagerService$PrepareResult r2 = (com.android.server.pm.PackageManagerService.PrepareResult) r2
            com.android.server.pm.PackageManagerService$PackageFreezer r3 = r2.freezer
            if (r3 == 0) goto L_0x0352
            com.android.server.pm.PackageManagerService$PackageFreezer r3 = r2.freezer
            r3.close()
        L_0x0352:
            goto L_0x033d
        L_0x0353:
            android.os.Trace.traceEnd(r25)
            return
        L_0x0357:
            r0 = move-exception
        L_0x0358:
            android.os.Trace.traceEnd(r25)     // Catch:{ all -> 0x035c }
            throw r0     // Catch:{ all -> 0x035c }
        L_0x035c:
            r0 = move-exception
            r3 = r7
            r2 = r9
            r6 = r11
            r7 = r12
            r22 = r15
            r20 = r16
            r21 = r17
            r11 = r25
            goto L_0x055c
        L_0x036b:
            r0 = move-exception
            r5 = 0
            r27 = r10
            r10 = r7
            r7 = r27
            r2 = r9
            r6 = r11
            r20 = r13
            r21 = r14
            r22 = r15
            r27 = r3
            r3 = r7
            r7 = r12
            r11 = r27
        L_0x0380:
            goto L_0x055c
        L_0x0382:
            r25 = r3
            r16 = r13
            r17 = r14
            r5 = 0
            r27 = r10
            r10 = r7
            r7 = r27
            com.android.server.pm.PackageManagerService$ReconcileRequest r0 = new com.android.server.pm.PackageManagerService$ReconcileRequest     // Catch:{ all -> 0x0541 }
            android.util.ArrayMap<java.lang.String, android.util.LongSparseArray<android.content.pm.SharedLibraryInfo>> r14 = r8.mSharedLibraries     // Catch:{ all -> 0x0541 }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r8.mPackages     // Catch:{ all -> 0x0541 }
            java.util.Map r1 = java.util.Collections.unmodifiableMap(r1)     // Catch:{ all -> 0x0541 }
            r18 = 0
            r2 = r9
            r9 = r0
            r3 = r7
            r4 = r10
            r10 = r15
            r6 = r11
            r11 = r17
            r7 = r12
            r12 = r16
            r20 = r16
            r13 = r7
            r21 = r17
            r22 = r15
            r15 = r1
            r16 = r6
            r17 = r3
            r9.<init>(r10, r11, r12, r13, r14, r15, r16, r17)     // Catch:{ all -> 0x053d }
            r1 = r0
            r9 = 0
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r10 = r8.mPackages     // Catch:{ all -> 0x053d }
            monitor-enter(r10)     // Catch:{ all -> 0x053d }
            java.lang.String r0 = "reconcilePackages"
            r11 = r25
            android.os.Trace.traceBegin(r11, r0)     // Catch:{ ReconcileFailure -> 0x04a0 }
            com.android.server.pm.Settings r0 = r8.mSettings     // Catch:{ ReconcileFailure -> 0x04a0 }
            com.android.server.pm.KeySetManagerService r0 = r0.mKeySetManagerService     // Catch:{ ReconcileFailure -> 0x04a0 }
            java.util.Map r0 = reconcilePackagesLocked(r1, r0)     // Catch:{ ReconcileFailure -> 0x04a0 }
            r13 = r0
            android.os.Trace.traceEnd(r11)     // Catch:{ all -> 0x0538 }
            java.lang.String r0 = "commitPackages"
            android.os.Trace.traceBegin(r11, r0)     // Catch:{ all -> 0x0479 }
            com.android.server.pm.PackageManagerService$CommitRequest r0 = new com.android.server.pm.PackageManagerService$CommitRequest     // Catch:{ all -> 0x0479 }
            com.android.server.pm.UserManagerService r14 = sUserManager     // Catch:{ all -> 0x0479 }
            int[] r14 = r14.getUserIds()     // Catch:{ all -> 0x0479 }
            r15 = 0
            r0.<init>(r13, r14)     // Catch:{ all -> 0x0479 }
            r9 = r0
            r8.commitPackagesLocked(r9)     // Catch:{ all -> 0x0479 }
            r19 = 1
            java.util.Collection r0 = r7.values()     // Catch:{ all -> 0x0538 }
            java.util.Iterator r0 = r0.iterator()     // Catch:{ all -> 0x0538 }
        L_0x03ed:
            boolean r14 = r0.hasNext()     // Catch:{ all -> 0x0538 }
            if (r14 == 0) goto L_0x0403
            java.lang.Object r14 = r0.next()     // Catch:{ all -> 0x0538 }
            com.android.server.pm.PackageManagerService$PrepareResult r14 = (com.android.server.pm.PackageManagerService.PrepareResult) r14     // Catch:{ all -> 0x0538 }
            com.android.server.pm.PackageManagerService$PackageFreezer r15 = r14.freezer     // Catch:{ all -> 0x0538 }
            if (r15 == 0) goto L_0x0402
            com.android.server.pm.PackageManagerService$PackageFreezer r15 = r14.freezer     // Catch:{ all -> 0x0538 }
            r15.close()     // Catch:{ all -> 0x0538 }
        L_0x0402:
            goto L_0x03ed
        L_0x0403:
            android.os.Trace.traceEnd(r11)     // Catch:{ all -> 0x0538 }
            monitor-exit(r10)     // Catch:{ all -> 0x0538 }
            r8.executePostCommitSteps(r9)     // Catch:{ all -> 0x053b }
            if (r19 != 0) goto L_0x0456
            java.util.Collection r0 = r22.values()
            java.util.Iterator r0 = r0.iterator()
        L_0x0415:
            boolean r1 = r0.hasNext()
            if (r1 == 0) goto L_0x043b
            java.lang.Object r1 = r0.next()
            com.android.server.pm.PackageManagerService$ScanResult r1 = (com.android.server.pm.PackageManagerService.ScanResult) r1
            com.android.server.pm.PackageManagerService$ScanRequest r9 = r1.request
            android.content.pm.PackageParser$Package r9 = r9.pkg
            java.lang.String r9 = r9.packageName
            java.lang.Boolean r10 = java.lang.Boolean.valueOf(r5)
            java.lang.Object r9 = r2.getOrDefault(r9, r10)
            java.lang.Boolean r9 = (java.lang.Boolean) r9
            boolean r9 = r9.booleanValue()
            if (r9 == 0) goto L_0x043a
            r8.cleanUpAppIdCreation(r1)
        L_0x043a:
            goto L_0x0415
        L_0x043b:
            java.util.Iterator r0 = r30.iterator()
        L_0x043f:
            boolean r1 = r0.hasNext()
            if (r1 == 0) goto L_0x0456
            java.lang.Object r1 = r0.next()
            com.android.server.pm.PackageManagerService$InstallRequest r1 = (com.android.server.pm.PackageManagerService.InstallRequest) r1
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r9 = r1.installResult
            int r9 = r9.returnCode
            if (r9 != r4) goto L_0x0455
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r9 = r1.installResult
            r9.returnCode = r5
        L_0x0455:
            goto L_0x043f
        L_0x0456:
            java.util.Collection r0 = r7.values()
            java.util.Iterator r0 = r0.iterator()
        L_0x045e:
            boolean r1 = r0.hasNext()
            if (r1 == 0) goto L_0x0474
            java.lang.Object r1 = r0.next()
            com.android.server.pm.PackageManagerService$PrepareResult r1 = (com.android.server.pm.PackageManagerService.PrepareResult) r1
            com.android.server.pm.PackageManagerService$PackageFreezer r4 = r1.freezer
            if (r4 == 0) goto L_0x0473
            com.android.server.pm.PackageManagerService$PackageFreezer r4 = r1.freezer
            r4.close()
        L_0x0473:
            goto L_0x045e
        L_0x0474:
            android.os.Trace.traceEnd(r11)
            return
        L_0x0479:
            r0 = move-exception
            java.util.Collection r14 = r7.values()     // Catch:{ all -> 0x0538 }
            java.util.Iterator r14 = r14.iterator()     // Catch:{ all -> 0x0538 }
        L_0x0482:
            boolean r15 = r14.hasNext()     // Catch:{ all -> 0x0538 }
            if (r15 == 0) goto L_0x0499
            java.lang.Object r15 = r14.next()     // Catch:{ all -> 0x0538 }
            com.android.server.pm.PackageManagerService$PrepareResult r15 = (com.android.server.pm.PackageManagerService.PrepareResult) r15     // Catch:{ all -> 0x0538 }
            com.android.server.pm.PackageManagerService$PackageFreezer r4 = r15.freezer     // Catch:{ all -> 0x0538 }
            if (r4 == 0) goto L_0x0497
            com.android.server.pm.PackageManagerService$PackageFreezer r4 = r15.freezer     // Catch:{ all -> 0x0538 }
            r4.close()     // Catch:{ all -> 0x0538 }
        L_0x0497:
            r4 = 1
            goto L_0x0482
        L_0x0499:
            android.os.Trace.traceEnd(r11)     // Catch:{ all -> 0x0538 }
            throw r0     // Catch:{ all -> 0x0538 }
        L_0x049d:
            r0 = move-exception
            goto L_0x0534
        L_0x04a0:
            r0 = move-exception
            goto L_0x04aa
        L_0x04a2:
            r0 = move-exception
            r11 = r25
            goto L_0x0534
        L_0x04a7:
            r0 = move-exception
            r11 = r25
        L_0x04aa:
            java.util.Iterator r4 = r30.iterator()     // Catch:{ all -> 0x049d }
        L_0x04ae:
            boolean r13 = r4.hasNext()     // Catch:{ all -> 0x049d }
            if (r13 == 0) goto L_0x04c2
            java.lang.Object r13 = r4.next()     // Catch:{ all -> 0x049d }
            com.android.server.pm.PackageManagerService$InstallRequest r13 = (com.android.server.pm.PackageManagerService.InstallRequest) r13     // Catch:{ all -> 0x049d }
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r14 = r13.installResult     // Catch:{ all -> 0x049d }
            java.lang.String r15 = "Reconciliation failed..."
            r14.setError((java.lang.String) r15, (com.android.server.pm.PackageManagerException) r0)     // Catch:{ all -> 0x049d }
            goto L_0x04ae
        L_0x04c2:
            android.os.Trace.traceEnd(r11)     // Catch:{ all -> 0x0538 }
            monitor-exit(r10)     // Catch:{ all -> 0x0538 }
            if (r19 != 0) goto L_0x0512
            java.util.Collection r4 = r22.values()
            java.util.Iterator r4 = r4.iterator()
        L_0x04d0:
            boolean r10 = r4.hasNext()
            if (r10 == 0) goto L_0x04f6
            java.lang.Object r10 = r4.next()
            com.android.server.pm.PackageManagerService$ScanResult r10 = (com.android.server.pm.PackageManagerService.ScanResult) r10
            com.android.server.pm.PackageManagerService$ScanRequest r13 = r10.request
            android.content.pm.PackageParser$Package r13 = r13.pkg
            java.lang.String r13 = r13.packageName
            java.lang.Boolean r14 = java.lang.Boolean.valueOf(r5)
            java.lang.Object r13 = r2.getOrDefault(r13, r14)
            java.lang.Boolean r13 = (java.lang.Boolean) r13
            boolean r13 = r13.booleanValue()
            if (r13 == 0) goto L_0x04f5
            r8.cleanUpAppIdCreation(r10)
        L_0x04f5:
            goto L_0x04d0
        L_0x04f6:
            java.util.Iterator r4 = r30.iterator()
        L_0x04fa:
            boolean r10 = r4.hasNext()
            if (r10 == 0) goto L_0x0512
            java.lang.Object r10 = r4.next()
            com.android.server.pm.PackageManagerService$InstallRequest r10 = (com.android.server.pm.PackageManagerService.InstallRequest) r10
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r13 = r10.installResult
            int r13 = r13.returnCode
            r14 = 1
            if (r13 != r14) goto L_0x0511
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r13 = r10.installResult
            r13.returnCode = r5
        L_0x0511:
            goto L_0x04fa
        L_0x0512:
            java.util.Collection r4 = r7.values()
            java.util.Iterator r4 = r4.iterator()
        L_0x051a:
            boolean r5 = r4.hasNext()
            if (r5 == 0) goto L_0x0530
            java.lang.Object r5 = r4.next()
            com.android.server.pm.PackageManagerService$PrepareResult r5 = (com.android.server.pm.PackageManagerService.PrepareResult) r5
            com.android.server.pm.PackageManagerService$PackageFreezer r10 = r5.freezer
            if (r10 == 0) goto L_0x052f
            com.android.server.pm.PackageManagerService$PackageFreezer r10 = r5.freezer
            r10.close()
        L_0x052f:
            goto L_0x051a
        L_0x0530:
            android.os.Trace.traceEnd(r11)
            return
        L_0x0534:
            android.os.Trace.traceEnd(r11)     // Catch:{ all -> 0x0538 }
            throw r0     // Catch:{ all -> 0x0538 }
        L_0x0538:
            r0 = move-exception
            monitor-exit(r10)     // Catch:{ all -> 0x0538 }
            throw r0     // Catch:{ all -> 0x053b }
        L_0x053b:
            r0 = move-exception
            goto L_0x055c
        L_0x053d:
            r0 = move-exception
            r11 = r25
            goto L_0x055c
        L_0x0541:
            r0 = move-exception
            r3 = r7
            r2 = r9
            r6 = r11
            r7 = r12
            r22 = r15
            r20 = r16
            r21 = r17
            r11 = r25
            goto L_0x055c
        L_0x054f:
            r0 = move-exception
            r2 = r9
            r6 = r11
            r7 = r12
            r20 = r13
            r21 = r14
            r22 = r15
            r5 = 0
            r11 = r3
            r3 = r10
        L_0x055c:
            if (r19 != 0) goto L_0x05a8
            java.util.Collection r1 = r22.values()
            java.util.Iterator r1 = r1.iterator()
        L_0x0566:
            boolean r4 = r1.hasNext()
            if (r4 == 0) goto L_0x058c
            java.lang.Object r4 = r1.next()
            com.android.server.pm.PackageManagerService$ScanResult r4 = (com.android.server.pm.PackageManagerService.ScanResult) r4
            com.android.server.pm.PackageManagerService$ScanRequest r9 = r4.request
            android.content.pm.PackageParser$Package r9 = r9.pkg
            java.lang.String r9 = r9.packageName
            java.lang.Boolean r10 = java.lang.Boolean.valueOf(r5)
            java.lang.Object r9 = r2.getOrDefault(r9, r10)
            java.lang.Boolean r9 = (java.lang.Boolean) r9
            boolean r9 = r9.booleanValue()
            if (r9 == 0) goto L_0x058b
            r8.cleanUpAppIdCreation(r4)
        L_0x058b:
            goto L_0x0566
        L_0x058c:
            java.util.Iterator r1 = r30.iterator()
        L_0x0590:
            boolean r4 = r1.hasNext()
            if (r4 == 0) goto L_0x05a8
            java.lang.Object r4 = r1.next()
            com.android.server.pm.PackageManagerService$InstallRequest r4 = (com.android.server.pm.PackageManagerService.InstallRequest) r4
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r9 = r4.installResult
            int r9 = r9.returnCode
            r10 = 1
            if (r9 != r10) goto L_0x05a7
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r9 = r4.installResult
            r9.returnCode = r5
        L_0x05a7:
            goto L_0x0590
        L_0x05a8:
            java.util.Collection r1 = r7.values()
            java.util.Iterator r1 = r1.iterator()
        L_0x05b0:
            boolean r4 = r1.hasNext()
            if (r4 == 0) goto L_0x05c6
            java.lang.Object r4 = r1.next()
            com.android.server.pm.PackageManagerService$PrepareResult r4 = (com.android.server.pm.PackageManagerService.PrepareResult) r4
            com.android.server.pm.PackageManagerService$PackageFreezer r5 = r4.freezer
            if (r5 == 0) goto L_0x05c5
            com.android.server.pm.PackageManagerService$PackageFreezer r5 = r4.freezer
            r5.close()
        L_0x05c5:
            goto L_0x05b0
        L_0x05c6:
            android.os.Trace.traceEnd(r11)
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.installPackagesLI(java.util.List):void");
    }

    private void executePostCommitSteps(CommitRequest commitRequest) {
        for (ReconciledPackage reconciledPkg : commitRequest.reconciledPackages.values()) {
            boolean performDexopt = true;
            boolean instantApp = (reconciledPkg.scanResult.request.scanFlags & 16384) != 0;
            PackageParser.Package pkg = reconciledPkg.pkgSetting.pkg;
            String packageName = pkg.packageName;
            prepareAppDataAfterInstallLIF(pkg);
            if (reconciledPkg.prepareResult.clearCodeCache) {
                clearAppDataLIF(pkg, -1, 39);
            }
            if (reconciledPkg.prepareResult.replace) {
                this.mDexManager.notifyPackageUpdated(pkg.packageName, pkg.baseCodePath, pkg.splitCodePaths);
            }
            this.mArtManagerService.prepareAppProfiles(pkg, resolveUserIds(reconciledPkg.installArgs.user.getIdentifier()), true);
            if ((instantApp && Settings.Global.getInt(this.mContext.getContentResolver(), "instant_app_dexopt_enabled", 0) == 0) || (pkg.applicationInfo.flags & 2) != 0) {
                performDexopt = false;
            }
            if (performDexopt) {
                if (SystemProperties.getBoolean(PRECOMPILE_LAYOUTS, false)) {
                    Trace.traceBegin(262144, "compileLayouts");
                    this.mViewCompiler.compileLayouts(pkg);
                    Trace.traceEnd(262144);
                }
                long beginDexopt = SystemClock.uptimeMillis();
                Trace.traceBegin(262144, "dexopt");
                this.mPackageDexOptimizer.performDexOpt(pkg, (String[]) null, getOrCreateCompilerPackageStats(pkg), this.mDexManager.getPackageUseInfoOrDefault(packageName), new DexoptOptions(packageName, 2, (int) UsbTerminalTypes.TERMINAL_BIDIR_SKRPHONE_SUPRESS));
                Trace.traceEnd(262144);
                reconciledPkg.installArgs.getStatistic().timeDexopt = SystemClock.uptimeMillis() - beginDexopt;
            }
            BackgroundDexOptService.notifyPackageChanged(packageName);
        }
    }

    private static class PrepareResult {
        public final PackageSetting[] childPackageSettings;
        public final boolean clearCodeCache;
        public final PackageSetting disabledPs;
        public final PackageParser.Package existingPackage;
        public final PackageFreezer freezer;
        public final int installReason;
        public final String installerPackageName;
        public final PackageSetting originalPs;
        public final PackageParser.Package packageToScan;
        public final int parseFlags;
        public final String renamedPackage;
        public final boolean replace;
        public final int scanFlags;
        public final boolean system;
        public final UserHandle user;
        public final String volumeUuid;

        private PrepareResult(int installReason2, String volumeUuid2, String installerPackageName2, UserHandle user2, boolean replace2, int scanFlags2, int parseFlags2, PackageParser.Package existingPackage2, PackageParser.Package packageToScan2, boolean clearCodeCache2, boolean system2, String renamedPackage2, PackageFreezer freezer2, PackageSetting originalPs2, PackageSetting disabledPs2, PackageSetting[] childPackageSettings2) {
            this.installReason = installReason2;
            this.volumeUuid = volumeUuid2;
            this.installerPackageName = installerPackageName2;
            this.user = user2;
            this.replace = replace2;
            this.scanFlags = scanFlags2;
            this.parseFlags = parseFlags2;
            this.existingPackage = existingPackage2;
            this.packageToScan = packageToScan2;
            this.clearCodeCache = clearCodeCache2;
            this.system = system2;
            this.renamedPackage = renamedPackage2;
            this.freezer = freezer2;
            this.originalPs = originalPs2;
            this.disabledPs = disabledPs2;
            this.childPackageSettings = childPackageSettings2;
        }
    }

    private static class PrepareFailure extends PackageManagerException {
        public String conflictingPackage;
        public String conflictingPermission;

        PrepareFailure(int error) {
            super(error, "Failed to prepare for install.");
        }

        PrepareFailure(int error, String detailMessage) {
            super(error, detailMessage);
        }

        /* JADX WARNING: Illegal instructions before constructor call */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        PrepareFailure(java.lang.String r3, java.lang.Exception r4) {
            /*
                r2 = this;
                boolean r0 = r4 instanceof android.content.pm.PackageParser.PackageParserException
                if (r0 == 0) goto L_0x000a
                r0 = r4
                android.content.pm.PackageParser$PackageParserException r0 = (android.content.pm.PackageParser.PackageParserException) r0
                int r0 = r0.error
                goto L_0x000f
            L_0x000a:
                r0 = r4
                com.android.server.pm.PackageManagerException r0 = (com.android.server.pm.PackageManagerException) r0
                int r0 = r0.error
            L_0x000f:
                java.lang.String r1 = android.util.ExceptionUtils.getCompleteMessage(r3, r4)
                r2.<init>(r0, r1)
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.PrepareFailure.<init>(java.lang.String, java.lang.Exception):void");
        }

        /* access modifiers changed from: package-private */
        public PrepareFailure conflictsWithExistingPermission(String conflictingPermission2, String conflictingPackage2) {
            this.conflictingPermission = conflictingPermission2;
            this.conflictingPackage = conflictingPackage2;
            return this;
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 47 */
    /* JADX INFO: finally extract failed */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v6, resolved type: java.lang.String} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v8, resolved type: com.android.server.pm.PackageManagerService$PackageFreezer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v9, resolved type: com.android.server.pm.PackageManagerService$PackageFreezer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v10, resolved type: com.android.server.pm.PackageManagerService$PackageFreezer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v11, resolved type: com.android.server.pm.PackageManagerService$PackageFreezer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v12, resolved type: com.android.server.pm.PackageManagerService$PackageFreezer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v13, resolved type: java.lang.String} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v14, resolved type: com.android.server.pm.PackageManagerService$PackageFreezer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v15, resolved type: com.android.server.pm.PackageManagerService$PackageFreezer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v18, resolved type: com.android.server.pm.PackageManagerService$PackageFreezer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v21, resolved type: java.lang.String} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v22, resolved type: com.android.server.pm.PackageManagerService$PackageFreezer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v23, resolved type: com.android.server.pm.PackageManagerService$PackageFreezer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v26, resolved type: com.android.server.pm.PackageManagerService$PackageFreezer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v27, resolved type: com.android.server.pm.PackageManagerService$PackageFreezer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v28, resolved type: java.lang.String} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v29, resolved type: java.lang.String} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v31, resolved type: java.lang.String[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v32, resolved type: com.android.server.pm.PackageManagerService$PackageFreezer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v33, resolved type: com.android.server.pm.PackageManagerService$PackageFreezer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v34, resolved type: com.android.server.pm.PackageManagerService$PackageFreezer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v39, resolved type: java.lang.String} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v40, resolved type: java.lang.String} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v41, resolved type: java.lang.String} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v42, resolved type: java.lang.String} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v47, resolved type: java.lang.String} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v48, resolved type: com.android.server.pm.PackageManagerService$PackageFreezer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v55, resolved type: java.lang.String} */
    /* JADX WARNING: type inference failed for: r16v21, types: [boolean] */
    /* JADX WARNING: Code restructure failed: missing block: B:323:0x0710, code lost:
        if (r30 == false) goto L_0x072b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:324:0x0712, code lost:
        if (r12 != false) goto L_0x0721;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:325:0x0714, code lost:
        if (r23 != false) goto L_0x0717;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:327:0x0720, code lost:
        throw new com.android.server.pm.PackageManagerService.PrepareFailure(-116, "Cannot update a system app with an instant app");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:329:0x072a, code lost:
        throw new com.android.server.pm.PackageManagerService.PrepareFailure(-19, "Cannot install updates to system apps on sdcard");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:331:0x072f, code lost:
        if (r2.move == null) goto L_0x0774;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:332:0x0731, code lost:
        r3 = (r8 | 1) | 256;
        r5 = r1.mPackages;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:333:0x0738, code lost:
        monitor-enter(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:335:?, code lost:
        r6 = r1.mSettings.mPackages.get(r13);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:336:0x0743, code lost:
        if (r6 != null) goto L_0x075c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:338:0x0756, code lost:
        r14 = r49;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:340:?, code lost:
        r14.setError((int) android.hardware.biometrics.fingerprint.V2_1.RequestStatus.SYS_ETIMEDOUT, "Missing settings for moved package " + r13);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:341:0x075c, code lost:
        r14 = r49;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:342:0x075e, code lost:
        r15.applicationInfo.primaryCpuAbi = r6.primaryCpuAbiString;
        r15.applicationInfo.secondaryCpuAbi = r6.secondaryCpuAbiString;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:343:0x076a, code lost:
        monitor-exit(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:345:0x076c, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:346:0x076d, code lost:
        r14 = r49;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:347:0x076f, code lost:
        r4 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:348:0x0770, code lost:
        monitor-exit(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:349:0x0771, code lost:
        throw r4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:350:0x0772, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:351:0x0774, code lost:
        r14 = r49;
        r5 = r8 | 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:354:0x077f, code lost:
        if (android.text.TextUtils.isEmpty(r15.cpuAbiOverride) == false) goto L_0x0792;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:356:?, code lost:
        r3 = r2.abiOverride;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:357:0x0784, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:358:0x0785, code lost:
        r2 = r0;
        r42 = r12;
        r43 = r13;
        r44 = r15;
        r41 = r28;
        r28 = r33;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:360:?, code lost:
        r3 = r15.cpuAbiOverride;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:362:0x0798, code lost:
        if (r15.isLibrary() != false) goto L_0x079c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:363:0x079a, code lost:
        r6 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:364:0x079c, code lost:
        r6 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:365:0x079d, code lost:
        derivePackageAbi(r15, r3, r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:366:0x07a0, code lost:
        r3 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:368:0x07a7, code lost:
        if (r2.doRename(r14.returnCode, r15) == false) goto L_0x0e2a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:370:?, code lost:
        setUpFsVerityIfPossible(r15);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:371:0x07ad, code lost:
        if (r23 != false) goto L_0x07bb;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:372:0x07af, code lost:
        r7 = r35;
        startIntentFilterVerifications(r2.user.getIdentifier(), r7, r15);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:373:0x07bb, code lost:
        r7 = r35;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:374:0x07bd, code lost:
        r11 = r33;
        r4 = freezePackageForInstall(r13, r11, com.android.server.am.ProcessRecordInjector.POLICY_INSTALL_PACKAGE);
        r9 = r32;
        r19 = r3;
        r33 = r28;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:375:0x07d0, code lost:
        if (r7 == false) goto L_0x0ced;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:379:0x07d9, code lost:
        if (r15.applicationInfo.isStaticSharedLibrary() == false) goto L_0x0834;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:382:0x07dd, code lost:
        r34 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:384:?, code lost:
        r5 = r1.mPackages.get(r15.packageName);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:385:0x07e7, code lost:
        if (r5 == null) goto L_0x0805;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:387:0x07f3, code lost:
        if (r5.getLongVersionCode() != r15.getLongVersionCode()) goto L_0x07f8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:388:0x07f5, code lost:
        r36 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:389:0x07f8, code lost:
        r35 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:390:0x0804, code lost:
        throw new com.android.server.pm.PackageManagerService.PrepareFailure(-5, "Packages declaring static-shared libs cannot be updated");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:391:0x0805, code lost:
        r35 = r5;
        r36 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:392:0x080a, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:393:0x080b, code lost:
        r2 = r0;
        r46 = r3;
        r31 = r4;
        r35 = r7;
        r42 = r12;
        r43 = r13;
        r44 = r15;
        r41 = r28;
        r28 = r11;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:394:0x081e, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:395:0x081f, code lost:
        r34 = true;
        r2 = r0;
        r46 = r3;
        r31 = r4;
        r35 = r7;
        r42 = r12;
        r43 = r13;
        r44 = r15;
        r41 = r28;
        r28 = r11;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:396:0x0834, code lost:
        r34 = true;
        r36 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:398:0x083a, code lost:
        if ((r3 & 16384) == 0) goto L_0x083e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:399:0x083c, code lost:
        r5 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:400:0x083e, code lost:
        r5 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:402:?, code lost:
        r6 = r15.packageName;
        r10 = r1.mPackages;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:403:0x0843, code lost:
        monitor-enter(r10);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:404:0x0844, code lost:
        r35 = r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:406:?, code lost:
        r7 = r1.mPackages.get(r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:407:0x084e, code lost:
        r37 = r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:409:?, code lost:
        r8 = r1.mSettings.mPackages.get(r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:410:0x085c, code lost:
        r39 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:412:?, code lost:
        r40 = r1.mSettings.getDisabledSystemPkgLPr(r8);
        r9 = r1.mSettings.mKeySetManagerService;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:413:0x086e, code lost:
        if (r9.shouldCheckUpgradeKeySetLocked(r8, r3) == false) goto L_0x08be;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:415:?, code lost:
        r16 = r9.checkUpgradeKeySetLocked(r8, r15);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:416:0x0874, code lost:
        if (r16 == 0) goto L_0x087e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:417:0x0876, code lost:
        r41 = r9;
        r42 = r11;
        r43 = r12;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:418:0x087e, code lost:
        r41 = r9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:419:0x0882, code lost:
        r42 = r11;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:421:?, code lost:
        r11 = new java.lang.StringBuilder();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:422:0x0889, code lost:
        r43 = r12;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:424:?, code lost:
        r11.append("New package not signed by keys specified by upgrade-keysets: ");
        r11.append(r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:425:0x089b, code lost:
        throw new com.android.server.pm.PackageManagerService.PrepareFailure(-7, r11.toString());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:426:0x089c, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:427:0x089d, code lost:
        r43 = r12;
        r2 = r0;
        r46 = r3;
        r31 = r4;
        r20 = r5;
        r44 = r6;
        r16 = r13;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:428:0x08ac, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:429:0x08ad, code lost:
        r42 = r11;
        r43 = r12;
        r2 = r0;
        r46 = r3;
        r31 = r4;
        r20 = r5;
        r44 = r6;
        r16 = r13;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:430:0x08be, code lost:
        r41 = r9;
        r42 = r11;
        r43 = r12;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:433:0x08cd, code lost:
        if (r15.mSigningDetails.checkCapability(r7.mSigningDetails, 1) != false) goto L_0x0902;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:436:0x08d9, code lost:
        if (r7.mSigningDetails.checkCapability(r15.mSigningDetails, 8) == false) goto L_0x08dc;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:439:0x08f3, code lost:
        throw new com.android.server.pm.PackageManagerService.PrepareFailure(-7, "New package has a different signature: " + r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:440:0x08f4, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:441:0x08f5, code lost:
        r2 = r0;
        r46 = r3;
        r31 = r4;
        r20 = r5;
        r44 = r6;
        r16 = r13;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:444:0x0904, code lost:
        if (r7.restrictUpdateHash == null) goto L_0x09ab;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:447:0x090a, code lost:
        if (r7.isSystem() == false) goto L_0x09ab;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:449:0x090e, code lost:
        r16 = r16;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:450:?, code lost:
        r9 = java.security.MessageDigest.getInstance("SHA-512");
        updateDigest(r9, new java.io.File(r15.baseCodePath));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:451:0x0922, code lost:
        if (com.android.internal.util.ArrayUtils.isEmpty(r15.splitCodePaths) != false) goto L_0x0945;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:452:0x0924, code lost:
        r11 = r15.splitCodePaths;
        r12 = r11.length;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:453:0x0927, code lost:
        r16 = r13;
        r13 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:454:0x092a, code lost:
        if (r13 >= r12) goto L_0x0947;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:455:0x092c, code lost:
        r16 = r16;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:456:?, code lost:
        r31 = r11;
        updateDigest(r9, new java.io.File(r11[r13]));
        r13 = r13 + 1;
        r11 = r31;
        r12 = r12;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:457:0x0945, code lost:
        r16 = r13;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:460:0x094d, code lost:
        r16 = r16;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:462:0x0953, code lost:
        if (java.util.Arrays.equals(r7.restrictUpdateHash, r9.digest()) == false) goto L_0x095a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:463:0x0955, code lost:
        r15.restrictUpdateHash = r7.restrictUpdateHash;
        r31 = r31;
        r16 = r16;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:465:0x0971, code lost:
        throw new com.android.server.pm.PackageManagerService.PrepareFailure(-2, "New package fails restrict-update check: " + r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:466:0x0972, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:467:0x0973, code lost:
        r9 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:468:0x0975, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:469:0x0976, code lost:
        r16 = r13;
        r9 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:471:0x0990, code lost:
        throw new com.android.server.pm.PackageManagerService.PrepareFailure(-2, "Could not compute hash: " + r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:472:0x0991, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:473:0x0992, code lost:
        r2 = r0;
        r46 = r3;
        r31 = r4;
        r20 = r5;
        r44 = r6;
        r16 = r16;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:474:0x099d, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:475:0x099e, code lost:
        r16 = r13;
        r2 = r0;
        r46 = r3;
        r31 = r4;
        r20 = r5;
        r44 = r6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:476:0x09ab, code lost:
        r16 = r13;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:477:0x09ae, code lost:
        r31 = r31;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:478:?, code lost:
        r9 = getParentOrChildPackageChangedSharedUser(r7, r15);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:479:0x09b2, code lost:
        if (r9 != null) goto L_0x0c34;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:480:0x09b4, code lost:
        r11 = sUserManager.getUserIds();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:481:0x09bf, code lost:
        r12 = r8.queryInstalledUsers(r11, true);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:482:0x09c0, code lost:
        if (r5 == false) goto L_0x0a69;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:485:0x09c4, code lost:
        if (r2.user == null) goto L_0x0a1c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:487:0x09cc, code lost:
        r20 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:488:0x09cf, code lost:
        if (r2.user.getIdentifier() != -1) goto L_0x09d4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:489:0x09d1, code lost:
        r31 = r4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:490:0x09d4, code lost:
        r31 = r31;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:492:0x09de, code lost:
        if (r8.getInstantApp(r2.user.getIdentifier()) == false) goto L_0x09e4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:493:0x09e0, code lost:
        r31 = r4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:494:0x09e4, code lost:
        r13 = new java.lang.StringBuilder();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:495:0x09eb, code lost:
        r31 = r4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:497:?, code lost:
        r13.append("Can't replace full app with instant app: ");
        r13.append(r6);
        r13.append(" for user: ");
        r13.append(r2.user.getIdentifier());
        android.util.Slog.w(TAG, r13.toString());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:498:0x0a11, code lost:
        throw new com.android.server.pm.PackageManagerService.PrepareFailure(-116);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:499:0x0a12, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:500:0x0a13, code lost:
        r31 = r4;
        r2 = r0;
        r46 = r3;
        r44 = r6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:501:0x0a1c, code lost:
        r31 = r4;
        r20 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:502:0x0a20, code lost:
        r4 = r11.length;
        r5 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:503:0x0a22, code lost:
        if (r5 >= r4) goto L_0x0a6d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:504:0x0a24, code lost:
        r13 = r11[r5];
     */
    /* JADX WARNING: Code restructure failed: missing block: B:505:0x0a2a, code lost:
        if (r8.getInstantApp(r13) == false) goto L_0x0a2f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:506:0x0a2c, code lost:
        r5 = r5 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:507:0x0a2f, code lost:
        android.util.Slog.w(TAG, "Can't replace full app with instant app: " + r6 + " for user: " + r13);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:508:0x0a54, code lost:
        throw new com.android.server.pm.PackageManagerService.PrepareFailure(-116);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:509:0x0a55, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:510:0x0a56, code lost:
        r2 = r0;
        r46 = r3;
        r44 = r6;
        r31 = r31;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:511:0x0a5d, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:512:0x0a5e, code lost:
        r31 = r4;
        r20 = r5;
        r2 = r0;
        r46 = r3;
        r44 = r6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:513:0x0a69, code lost:
        r31 = r4;
        r20 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:515:?, code lost:
        monitor-exit(r10);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:517:?, code lost:
        r14.removedInfo = new com.android.server.pm.PackageManagerService.PackageRemovedInfo(r1);
        r14.removedInfo.uid = r7.applicationInfo.uid;
        r14.removedInfo.removedPackage = r7.packageName;
        r14.removedInfo.installerPackageName = r8.installerPackageName;
        r2 = r14.removedInfo;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:518:0x0a8d, code lost:
        if (r15.staticSharedLibName == null) goto L_0x0a91;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:519:0x0a8f, code lost:
        r4 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:520:0x0a91, code lost:
        r4 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:521:0x0a92, code lost:
        r2.isStaticSharedLib = r4;
        r14.removedInfo.isUpdate = true;
        r14.removedInfo.origUsers = r12;
        r14.removedInfo.installReasons = new android.util.SparseArray<>(r12.length);
        r4 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:523:0x0aaa, code lost:
        if (r4 >= r12.length) goto L_0x0ad0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:525:?, code lost:
        r2 = r12[r4];
        r14.removedInfo.installReasons.put(r2, java.lang.Integer.valueOf(r8.getInstallReason(r2)));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:526:0x0abd, code lost:
        r4 = r4 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:527:0x0ac0, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:528:0x0ac1, code lost:
        r2 = r0;
        r46 = r3;
        r44 = r15;
        r41 = r28;
        r28 = r42;
        r42 = r43;
        r43 = r16;
        r31 = r31;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:530:?, code lost:
        r2 = r1.mSettings.getChildSettingsLPr(r8);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:531:0x0ad6, code lost:
        if (r2 == null) goto L_0x0b85;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:533:?, code lost:
        r4 = r2.length;
        r5 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:534:0x0ada, code lost:
        if (r5 >= r4) goto L_0x0b7e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:535:0x0adc, code lost:
        r9 = r2[r5];
        r13 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:536:0x0adf, code lost:
        if (r9 != null) goto L_0x0ae6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:537:0x0ae1, code lost:
        r10 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:538:0x0ae6, code lost:
        r10 = r9.pkg;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:539:0x0ae8, code lost:
        r21 = r2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:540:0x0aec, code lost:
        if (r14.addedChildPackages == null) goto L_0x0b26;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:541:0x0aee, code lost:
        r22 = r4;
        r2 = r14.addedChildPackages.get(r10.packageName);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:542:0x0afa, code lost:
        if (r2 == null) goto L_0x0b23;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:543:0x0afc, code lost:
        r44 = r6;
        r2.removedInfo.uid = r10.applicationInfo.uid;
        r2.removedInfo.removedPackage = r10.packageName;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:544:0x0b0c, code lost:
        if (r9 == null) goto L_0x0b14;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:545:0x0b0e, code lost:
        r2.removedInfo.installerPackageName = r9.installerPackageName;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:546:0x0b14, code lost:
        r2.removedInfo.isUpdate = true;
        r2.removedInfo.installReasons = r14.removedInfo.installReasons;
        r13 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:547:0x0b23, code lost:
        r44 = r6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:548:0x0b26, code lost:
        r22 = r4;
        r44 = r6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:549:0x0b2a, code lost:
        if (r13 != false) goto L_0x0b70;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:550:0x0b2c, code lost:
        r2 = new com.android.server.pm.PackageManagerService.PackageRemovedInfo(r1);
        r2.removedPackage = r10.packageName;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:551:0x0b35, code lost:
        if (r9 == null) goto L_0x0b3b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:552:0x0b37, code lost:
        r2.installerPackageName = r9.installerPackageName;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:553:0x0b3b, code lost:
        r2.isUpdate = false;
        r2.dataRemoved = true;
        r6 = r1.mPackages;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:554:0x0b43, code lost:
        monitor-enter(r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:555:0x0b44, code lost:
        if (r9 == null) goto L_0x0b50;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:556:0x0b46, code lost:
        r45 = r8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:558:?, code lost:
        r2.origUsers = r9.queryInstalledUsers(r11, true);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:559:0x0b50, code lost:
        r45 = r8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:560:0x0b52, code lost:
        monitor-exit(r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:563:0x0b57, code lost:
        if (r14.removedInfo.removedChildPackages != null) goto L_0x0b62;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:564:0x0b59, code lost:
        r14.removedInfo.removedChildPackages = new android.util.ArrayMap<>();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:565:0x0b62, code lost:
        r14.removedInfo.removedChildPackages.put(r10.packageName, r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:566:0x0b6c, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:571:?, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:572:0x0b70, code lost:
        r45 = r8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:573:0x0b72, code lost:
        r5 = r5 + 1;
        r2 = r21;
        r4 = r22;
        r6 = r44;
        r8 = r45;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:574:0x0b7e, code lost:
        r21 = r2;
        r44 = r6;
        r45 = r8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:575:0x0b85, code lost:
        r21 = r2;
        r44 = r6;
        r45 = r8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:577:?, code lost:
        r2 = isSystemApp(r7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:578:0x0b8f, code lost:
        if (r2 == false) goto L_0x0bed;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:579:0x0b91, code lost:
        r4 = isPrivilegedApp(r7);
        r5 = isOemApp(r7);
        r6 = isVendorApp(r7);
        r8 = isProductApp(r7);
        r9 = isOdmApp(r7);
        r10 = r28;
        r13 = 131072 | r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:580:0x0baa, code lost:
        if (r4 == false) goto L_0x0baf;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:581:0x0bac, code lost:
        r22 = 262144;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:582:0x0baf, code lost:
        r22 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:583:0x0bb1, code lost:
        r13 = r13 | r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:584:0x0bb3, code lost:
        if (r5 == false) goto L_0x0bb8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:585:0x0bb5, code lost:
        r22 = 524288;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:586:0x0bb8, code lost:
        r22 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:587:0x0bba, code lost:
        r13 = r13 | r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:588:0x0bbc, code lost:
        if (r6 == false) goto L_0x0bc1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:589:0x0bbe, code lost:
        r22 = 1048576;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:590:0x0bc1, code lost:
        r22 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:591:0x0bc3, code lost:
        r13 = r13 | r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:592:0x0bc5, code lost:
        if (r8 == false) goto L_0x0bca;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:593:0x0bc7, code lost:
        r22 = 2097152;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:594:0x0bca, code lost:
        r22 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:595:0x0bcc, code lost:
        r13 = r13 | r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:596:0x0bce, code lost:
        if (r9 == false) goto L_0x0bd3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:597:0x0bd0, code lost:
        r18 = 8388608;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:598:0x0bd3, code lost:
        r18 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:599:0x0bd5, code lost:
        r13 = r13 | r18;
        r18 = r2;
        r14.setReturnCode(1);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:600:0x0bdd, code lost:
        r46 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:601:0x0be3, code lost:
        r31 = r31;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:602:?, code lost:
        r15.setApplicationInfoFlags(128, 128);
        r31 = r31;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:603:0x0be6, code lost:
        r33 = r10;
        r19 = r13;
        r2 = r35;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:604:0x0bed, code lost:
        r18 = r2;
        r46 = r3;
        r2 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:606:?, code lost:
        r3 = r7.packageName;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:607:0x0bf9, code lost:
        if (r15.mExtras == null) goto L_0x0c02;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:608:0x0bfb, code lost:
        r8 = ((com.android.server.pm.PackageSetting) r15.mExtras).lastUpdateTime;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:609:0x0c02, code lost:
        r38 = r18;
        r3 = r19;
        r35 = r21;
        r4 = r40;
        r31 = r31;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:610:0x0c0c, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:611:0x0c0d, code lost:
        r44 = r15;
        r41 = r28;
        r28 = r42;
        r42 = r43;
        r2 = r0;
        r43 = r16;
        r31 = r31;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:612:0x0c1c, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:613:0x0c1d, code lost:
        r46 = r3;
        r2 = r0;
        r44 = r15;
        r41 = r28;
        r28 = r42;
        r42 = r43;
        r43 = r16;
        r31 = r31;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:614:0x0c2c, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:615:0x0c2d, code lost:
        r46 = r3;
        r44 = r6;
        r2 = r0;
        r31 = r31;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:616:0x0c34, code lost:
        r46 = r3;
        r31 = r4;
        r20 = r5;
        r44 = r6;
        r45 = r8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:619:0x0c5f, code lost:
        throw new com.android.server.pm.PackageManagerService.PrepareFailure(-8, "Package " + r9 + " tried to change user " + r7.mSharedUserId);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:620:0x0c60, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:621:0x0c61, code lost:
        r46 = r3;
        r31 = r4;
        r20 = r5;
        r44 = r6;
        r2 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:622:0x0c6b, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:623:0x0c6c, code lost:
        r46 = r3;
        r31 = r4;
        r20 = r5;
        r44 = r6;
        r16 = r13;
        r2 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:624:0x0c78, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:625:0x0c79, code lost:
        r46 = r3;
        r31 = r4;
        r20 = r5;
        r44 = r6;
        r42 = r11;
        r43 = r12;
        r16 = r13;
        r2 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:626:0x0c89, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:627:0x0c8a, code lost:
        r46 = r3;
        r31 = r4;
        r20 = r5;
        r44 = r6;
        r42 = r11;
        r43 = r12;
        r16 = r13;
        r2 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:628:0x0c9c, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:629:0x0c9d, code lost:
        r46 = r3;
        r31 = r4;
        r20 = r5;
        r44 = r6;
        r42 = r11;
        r43 = r12;
        r16 = r13;
        r2 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:630:0x0cb0, code lost:
        monitor-exit(r10);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:631:0x0cb1, code lost:
        r31 = r31;
        r31 = r31;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:632:?, code lost:
        throw r2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:633:0x0cb2, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:634:0x0cb3, code lost:
        r2 = r0;
        r44 = r15;
        r41 = r28;
        r28 = r42;
        r42 = r43;
        r43 = r16;
        r31 = r31;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:635:0x0cc0, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:636:0x0cc1, code lost:
        r2 = r0;
        r31 = r31;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:637:0x0cc3, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:638:0x0cc4, code lost:
        r46 = r3;
        r31 = r4;
        r35 = r7;
        r2 = r0;
        r42 = r12;
        r43 = r13;
        r44 = r15;
        r41 = r28;
        r28 = r11;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:639:0x0cd7, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:640:0x0cd8, code lost:
        r46 = r3;
        r31 = r4;
        r34 = true;
        r35 = r7;
        r2 = r0;
        r42 = r12;
        r43 = r13;
        r44 = r15;
        r41 = r28;
        r28 = r11;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:641:0x0ced, code lost:
        r46 = r3;
        r31 = r4;
        r34 = true;
        r35 = r7;
        r38 = false;
        r42 = r11;
        r43 = r12;
        r16 = r13;
        r4 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:643:?, code lost:
        r6 = r15.packageName;
        r8 = r1.mPackages;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:644:0x0d08, code lost:
        monitor-enter(r8);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:646:?, code lost:
        r10 = r1.mSettings.getRenamedPackageLPr(r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:647:0x0d0f, code lost:
        if (r10 != null) goto L_0x0dac;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:650:0x0d17, code lost:
        if (r1.mPackages.containsKey(r6) != false) goto L_0x0d76;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:651:0x0d19, code lost:
        monitor-exit(r8);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:652:0x0d1a, code lost:
        r45 = null;
        r35 = null;
        r37 = null;
        r2 = false;
        r39 = r9;
        r36 = r10;
        r3 = r19;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:653:0x0d27, code lost:
        r34 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:655:?, code lost:
        r13 = r48;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:656:0x0d31, code lost:
        r5 = r5;
        r41 = r28;
        r28 = r42;
        r42 = r43;
        r43 = r16;
        r44 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:658:?, code lost:
        r5 = new com.android.server.pm.PackageManagerService.PrepareResult(r13.installReason, r39, r27, r13.user, r2, r3, r33, r37, r15, r2, r38, r36, r31, r45, r4, r35, (com.android.server.pm.PackageManagerService.AnonymousClass1) null);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:659:0x0d5a, code lost:
        if (0 == 0) goto L_0x0d5f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:660:0x0d5c, code lost:
        r31.close();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:661:0x0d5f, code lost:
        return r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:662:0x0d60, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:663:0x0d61, code lost:
        r35 = r2;
        r2 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:664:0x0d66, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:665:0x0d67, code lost:
        r44 = r15;
        r41 = r28;
        r28 = r42;
        r42 = r43;
        r43 = r16;
        r35 = r2;
        r2 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:666:0x0d76, code lost:
        r44 = r15;
        r41 = r28;
        r28 = r42;
        r42 = r43;
        r43 = r16;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:669:0x0d9c, code lost:
        throw new com.android.server.pm.PackageManagerService.PrepareFailure(-1, "Attempt to re-install " + r6 + " without first uninstalling.");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:670:0x0d9d, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:671:0x0d9e, code lost:
        r44 = r15;
        r41 = r28;
        r28 = r42;
        r42 = r43;
        r43 = r16;
        r36 = r10;
        r10 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:672:0x0dac, code lost:
        r44 = r15;
        r41 = r28;
        r28 = r42;
        r42 = r43;
        r43 = r16;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:673:0x0dd5, code lost:
        throw new com.android.server.pm.PackageManagerService.PrepareFailure(-1, "Attempt to re-install " + r6 + " without first uninstalling package running as " + r10);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:674:0x0dd6, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:675:0x0dd7, code lost:
        r36 = r10;
        r10 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:676:0x0ddb, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:677:0x0ddc, code lost:
        r44 = r15;
        r41 = r28;
        r28 = r42;
        r42 = r43;
        r43 = r16;
        r10 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:679:?, code lost:
        monitor-exit(r8);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:681:?, code lost:
        throw r10;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:682:0x0de9, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:683:0x0dea, code lost:
        r2 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:684:0x0dee, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:685:0x0def, code lost:
        r10 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:686:0x0df1, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:687:0x0df2, code lost:
        r44 = r15;
        r41 = r28;
        r28 = r42;
        r42 = r43;
        r43 = r16;
        r2 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:688:0x0dff, code lost:
        if (r34 != false) goto L_0x0e01;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:689:0x0e01, code lost:
        r31.close();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:690:0x0e04, code lost:
        throw r2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:691:0x0e05, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:692:0x0e06, code lost:
        r46 = r3;
        r42 = r12;
        r43 = r13;
        r44 = r15;
        r41 = r28;
        r28 = r33;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:693:0x0e29, code lost:
        throw new com.android.server.pm.PackageManagerService.PrepareFailure((int) android.hardware.biometrics.fingerprint.V2_1.RequestStatus.SYS_ETIMEDOUT, "Failed to set up verity: " + r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:694:0x0e2a, code lost:
        r46 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:695:0x0e34, code lost:
        throw new com.android.server.pm.PackageManagerService.PrepareFailure(-4, "Failed rename");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:696:0x0e35, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:697:0x0e36, code lost:
        r42 = r12;
        r43 = r13;
        r44 = r15;
        r41 = r28;
        r28 = r33;
        r2 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:698:0x0e41, code lost:
        android.util.Slog.e(TAG, "Error deriving application ABI", r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:699:0x0e4f, code lost:
        throw new com.android.server.pm.PackageManagerService.PrepareFailure((int) android.hardware.biometrics.fingerprint.V2_1.RequestStatus.SYS_ETIMEDOUT, "Error deriving application ABI");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:739:0x0947, code lost:
        r16 = r16;
        r31 = r31;
     */
    /* JADX WARNING: Failed to insert additional move for type inference */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:161:0x0306 A[Catch:{ all -> 0x0425 }] */
    /* JADX WARNING: Removed duplicated region for block: B:191:0x03df A[Catch:{ all -> 0x035e, all -> 0x0411 }] */
    /* JADX WARNING: Removed duplicated region for block: B:220:0x0497 A[SYNTHETIC, Splitter:B:220:0x0497] */
    /* JADX WARNING: Removed duplicated region for block: B:238:0x04f7  */
    /* JADX WARNING: Removed duplicated region for block: B:265:0x0535 A[Catch:{ PackageManagerException -> 0x055c, all -> 0x054b, all -> 0x06fa }] */
    /* JADX WARNING: Removed duplicated region for block: B:266:0x0537 A[Catch:{ PackageManagerException -> 0x055c, all -> 0x054b, all -> 0x06fa }] */
    /* JADX WARNING: Removed duplicated region for block: B:689:0x0e01  */
    /* JADX WARNING: Unknown variable types count: 1 */
    @com.android.internal.annotations.GuardedBy({"mInstallLock"})
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private com.android.server.pm.PackageManagerService.PrepareResult preparePackageLI(com.android.server.pm.PackageManagerService.InstallArgs r48, com.android.server.pm.PackageManagerService.PackageInstalledInfo r49) throws com.android.server.pm.PackageManagerService.PrepareFailure {
        /*
            r47 = this;
            r1 = r47
            r2 = r48
            r3 = r49
            int r4 = r2.installFlags
            java.lang.String r15 = r2.installerPackageName
            java.lang.String r14 = r2.volumeUuid
            java.io.File r5 = new java.io.File
            java.lang.String r6 = r48.getCodePath()
            r5.<init>(r6)
            r13 = r5
            java.lang.String r5 = r2.volumeUuid
            if (r5 == 0) goto L_0x001c
            r5 = 1
            goto L_0x001d
        L_0x001c:
            r5 = 0
        L_0x001d:
            r12 = r5
            r5 = r4 & 2048(0x800, float:2.87E-42)
            if (r5 == 0) goto L_0x0024
            r5 = 1
            goto L_0x0025
        L_0x0024:
            r5 = 0
        L_0x0025:
            r23 = r5
            r5 = r4 & 16384(0x4000, float:2.2959E-41)
            if (r5 == 0) goto L_0x002d
            r5 = 1
            goto L_0x002e
        L_0x002d:
            r5 = 0
        L_0x002e:
            r24 = r5
            r5 = 65536(0x10000, float:9.18355E-41)
            r8 = r4 & r5
            if (r8 == 0) goto L_0x0038
            r8 = 1
            goto L_0x0039
        L_0x0038:
            r8 = 0
        L_0x0039:
            r25 = r8
            r8 = 6
            com.android.server.pm.PackageManagerService$MoveInfo r9 = r2.move
            if (r9 == 0) goto L_0x0042
            r8 = r8 | 512(0x200, float:7.175E-43)
        L_0x0042:
            r9 = r4 & 4096(0x1000, float:5.74E-42)
            if (r9 == 0) goto L_0x0048
            r8 = r8 | 2048(0x800, float:2.87E-42)
        L_0x0048:
            if (r23 == 0) goto L_0x004c
            r8 = r8 | 16384(0x4000, float:2.2959E-41)
        L_0x004c:
            if (r24 == 0) goto L_0x0052
            r9 = 32768(0x8000, float:4.5918E-41)
            r8 = r8 | r9
        L_0x0052:
            if (r25 == 0) goto L_0x0055
            r8 = r8 | r5
        L_0x0055:
            r5 = -116(0xffffffffffffff8c, float:NaN)
            if (r23 == 0) goto L_0x0078
            if (r12 != 0) goto L_0x005c
            goto L_0x0078
        L_0x005c:
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            java.lang.String r7 = "Incompatible ephemeral install; external="
            r6.append(r7)
            r6.append(r12)
            java.lang.String r6 = r6.toString()
            java.lang.String r7 = "PackageManager"
            android.util.Slog.i(r7, r6)
            com.android.server.pm.PackageManagerService$PrepareFailure r6 = new com.android.server.pm.PackageManagerService$PrepareFailure
            r6.<init>(r5)
            throw r6
        L_0x0078:
            int r9 = r1.mDefParseFlags
            r10 = -2147483648(0xffffffff80000000, float:-0.0)
            r9 = r9 | r10
            r9 = r9 | 64
            if (r12 == 0) goto L_0x0084
            r11 = 8
            goto L_0x0085
        L_0x0084:
            r11 = 0
        L_0x0085:
            r11 = r11 | r9
            android.content.pm.PackageParser r9 = new android.content.pm.PackageParser
            r9.<init>()
            java.lang.String[] r10 = r1.mSeparateProcesses
            r9.setSeparateProcesses(r10)
            android.util.DisplayMetrics r10 = r1.mMetrics
            r9.setDisplayMetrics(r10)
            android.content.pm.PackageParser$Callback r10 = r1.mPackageParserCallback
            r9.setCallback(r10)
            r6 = 262144(0x40000, double:1.295163E-318)
            java.lang.String r10 = "parsePackage"
            android.os.Trace.traceBegin(r6, r10)
            android.content.pm.PackageParser$Package r10 = r9.parsePackage(r13, r11)     // Catch:{ PackageParserException -> 0x0ebc, all -> 0x0eab }
            android.content.pm.dex.DexMetadataHelper.validatePackageDexMetadata(r10)     // Catch:{ PackageParserException -> 0x0ebc, all -> 0x0eab }
            android.os.Trace.traceEnd(r6)
            if (r23 == 0) goto L_0x0107
            android.content.pm.ApplicationInfo r6 = r10.applicationInfo
            int r6 = r6.targetSdkVersion
            r7 = 26
            if (r6 < r7) goto L_0x00e2
            java.lang.String r6 = r10.mSharedUserId
            if (r6 != 0) goto L_0x00bd
            goto L_0x0107
        L_0x00bd:
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            java.lang.String r7 = "Instant app package "
            r6.append(r7)
            java.lang.String r7 = r10.packageName
            r6.append(r7)
            java.lang.String r7 = " may not declare sharedUserId."
            r6.append(r7)
            java.lang.String r6 = r6.toString()
            java.lang.String r7 = "PackageManager"
            android.util.Slog.w(r7, r6)
            com.android.server.pm.PackageManagerService$PrepareFailure r6 = new com.android.server.pm.PackageManagerService$PrepareFailure
            java.lang.String r7 = "Instant app package may not declare a sharedUserId"
            r6.<init>((int) r5, (java.lang.String) r7)
            throw r6
        L_0x00e2:
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            java.lang.String r7 = "Instant app package "
            r6.append(r7)
            java.lang.String r7 = r10.packageName
            r6.append(r7)
            java.lang.String r7 = " does not target at least O"
            r6.append(r7)
            java.lang.String r6 = r6.toString()
            java.lang.String r7 = "PackageManager"
            android.util.Slog.w(r7, r6)
            com.android.server.pm.PackageManagerService$PrepareFailure r6 = new com.android.server.pm.PackageManagerService$PrepareFailure
            java.lang.String r7 = "Instant app package must target at least O"
            r6.<init>((int) r5, (java.lang.String) r7)
            throw r6
        L_0x0107:
            android.content.pm.ApplicationInfo r6 = r10.applicationInfo
            boolean r6 = r6.isStaticSharedLibrary()
            r7 = -19
            if (r6 == 0) goto L_0x0126
            renameStaticSharedLibraryPackage(r10)
            if (r12 != 0) goto L_0x0117
            goto L_0x0126
        L_0x0117:
            java.lang.String r5 = "PackageManager"
            java.lang.String r6 = "Static shared libs can only be installed on internal storage."
            android.util.Slog.i(r5, r6)
            com.android.server.pm.PackageManagerService$PrepareFailure r5 = new com.android.server.pm.PackageManagerService$PrepareFailure
            java.lang.String r6 = "Packages declaring static-shared libs cannot be updated"
            r5.<init>((int) r7, (java.lang.String) r6)
            throw r5
        L_0x0126:
            java.util.ArrayList r6 = r10.childPackages
            if (r6 == 0) goto L_0x01dc
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r6 = r1.mPackages
            monitor-enter(r6)
            java.util.ArrayList r7 = r10.childPackages     // Catch:{ all -> 0x01cd }
            int r7 = r7.size()     // Catch:{ all -> 0x01cd }
            r20 = 0
            r5 = r20
        L_0x0137:
            if (r5 >= r7) goto L_0x01c1
            r20 = r7
            java.util.ArrayList r7 = r10.childPackages     // Catch:{ all -> 0x01cd }
            java.lang.Object r7 = r7.get(r5)     // Catch:{ all -> 0x01cd }
            android.content.pm.PackageParser$Package r7 = (android.content.pm.PackageParser.Package) r7     // Catch:{ all -> 0x01cd }
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r22 = new com.android.server.pm.PackageManagerService$PackageInstalledInfo     // Catch:{ all -> 0x01cd }
            r22.<init>()     // Catch:{ all -> 0x01cd }
            r26 = r22
            r22 = r9
            r9 = r26
            r26 = r13
            r13 = 1
            r9.setReturnCode(r13)     // Catch:{ all -> 0x01ba }
            r9.pkg = r7     // Catch:{ all -> 0x01ba }
            java.lang.String r13 = r7.packageName     // Catch:{ all -> 0x01ba }
            r9.name = r13     // Catch:{ all -> 0x01ba }
            com.android.server.pm.Settings r13 = r1.mSettings     // Catch:{ all -> 0x01ba }
            r27 = r15
            java.lang.String r15 = r7.packageName     // Catch:{ all -> 0x01b5 }
            com.android.server.pm.PackageSetting r13 = r13.getPackageLPr(r15)     // Catch:{ all -> 0x01b5 }
            if (r13 == 0) goto L_0x0176
            com.android.server.pm.UserManagerService r15 = sUserManager     // Catch:{ all -> 0x01b5 }
            int[] r15 = r15.getUserIds()     // Catch:{ all -> 0x01b5 }
            r28 = r11
            r11 = 1
            int[] r15 = r13.queryInstalledUsers(r15, r11)     // Catch:{ all -> 0x01d9 }
            r9.origUsers = r15     // Catch:{ all -> 0x01d9 }
            goto L_0x0178
        L_0x0176:
            r28 = r11
        L_0x0178:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r11 = r1.mPackages     // Catch:{ all -> 0x01d9 }
            java.lang.String r15 = r7.packageName     // Catch:{ all -> 0x01d9 }
            boolean r11 = r11.containsKey(r15)     // Catch:{ all -> 0x01d9 }
            if (r11 == 0) goto L_0x0195
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r11 = new com.android.server.pm.PackageManagerService$PackageRemovedInfo     // Catch:{ all -> 0x01d9 }
            r11.<init>(r1)     // Catch:{ all -> 0x01d9 }
            r9.removedInfo = r11     // Catch:{ all -> 0x01d9 }
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r11 = r9.removedInfo     // Catch:{ all -> 0x01d9 }
            java.lang.String r15 = r7.packageName     // Catch:{ all -> 0x01d9 }
            r11.removedPackage = r15     // Catch:{ all -> 0x01d9 }
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r11 = r9.removedInfo     // Catch:{ all -> 0x01d9 }
            java.lang.String r15 = r13.installerPackageName     // Catch:{ all -> 0x01d9 }
            r11.installerPackageName = r15     // Catch:{ all -> 0x01d9 }
        L_0x0195:
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageInstalledInfo> r11 = r3.addedChildPackages     // Catch:{ all -> 0x01d9 }
            if (r11 != 0) goto L_0x01a0
            android.util.ArrayMap r11 = new android.util.ArrayMap     // Catch:{ all -> 0x01d9 }
            r11.<init>()     // Catch:{ all -> 0x01d9 }
            r3.addedChildPackages = r11     // Catch:{ all -> 0x01d9 }
        L_0x01a0:
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageInstalledInfo> r11 = r3.addedChildPackages     // Catch:{ all -> 0x01d9 }
            java.lang.String r15 = r7.packageName     // Catch:{ all -> 0x01d9 }
            r11.put(r15, r9)     // Catch:{ all -> 0x01d9 }
            int r5 = r5 + 1
            r7 = r20
            r9 = r22
            r13 = r26
            r15 = r27
            r11 = r28
            goto L_0x0137
        L_0x01b5:
            r0 = move-exception
            r28 = r11
            r5 = r0
            goto L_0x01d7
        L_0x01ba:
            r0 = move-exception
            r28 = r11
            r27 = r15
            r5 = r0
            goto L_0x01d7
        L_0x01c1:
            r20 = r7
            r22 = r9
            r28 = r11
            r26 = r13
            r27 = r15
            monitor-exit(r6)     // Catch:{ all -> 0x01d9 }
            goto L_0x01e4
        L_0x01cd:
            r0 = move-exception
            r22 = r9
            r28 = r11
            r26 = r13
            r27 = r15
            r5 = r0
        L_0x01d7:
            monitor-exit(r6)     // Catch:{ all -> 0x01d9 }
            throw r5
        L_0x01d9:
            r0 = move-exception
            r5 = r0
            goto L_0x01d7
        L_0x01dc:
            r22 = r9
            r28 = r11
            r26 = r13
            r27 = r15
        L_0x01e4:
            java.lang.String r5 = r10.cpuAbiOverride
            boolean r5 = android.text.TextUtils.isEmpty(r5)
            if (r5 == 0) goto L_0x01f0
            java.lang.String r5 = r2.abiOverride
            r10.cpuAbiOverride = r5
        L_0x01f0:
            java.lang.String r5 = r10.packageName
            r3.name = r5
            android.content.pm.ApplicationInfo r6 = r10.applicationInfo
            int r6 = r6.flags
            r6 = r6 & 256(0x100, float:3.59E-43)
            if (r6 == 0) goto L_0x020c
            r6 = r4 & 4
            if (r6 == 0) goto L_0x0201
            goto L_0x020c
        L_0x0201:
            com.android.server.pm.PackageManagerService$PrepareFailure r6 = new com.android.server.pm.PackageManagerService$PrepareFailure
            r7 = -15
            java.lang.String r9 = "installPackageLI"
            r6.<init>((int) r7, (java.lang.String) r9)
            throw r6
        L_0x020c:
            long r6 = android.os.SystemClock.uptimeMillis()     // Catch:{ PackageParserException -> 0x0e97 }
            android.content.pm.PackageParser$SigningDetails r9 = r2.signingDetails     // Catch:{ PackageParserException -> 0x0e97 }
            android.content.pm.PackageParser$SigningDetails r11 = android.content.pm.PackageParser.SigningDetails.UNKNOWN     // Catch:{ PackageParserException -> 0x0e97 }
            if (r9 == r11) goto L_0x022b
            android.content.pm.PackageParser$SigningDetails r9 = r2.signingDetails     // Catch:{ PackageParserException -> 0x021d }
            r10.setSigningDetails(r9)     // Catch:{ PackageParserException -> 0x021d }
            r15 = r10
            goto L_0x0230
        L_0x021d:
            r0 = move-exception
            r2 = r0
            r44 = r10
            r42 = r12
            r32 = r14
            r41 = r28
            r28 = r4
            goto L_0x0ea3
        L_0x022b:
            r9 = 0
            android.content.pm.PackageParser.collectCertificates(r10, r9)     // Catch:{ PackageParserException -> 0x0e97 }
            r15 = r10
        L_0x0230:
            com.android.server.pm.InstallationStatistic r9 = r48.getStatistic()     // Catch:{ PackageParserException -> 0x0e8a }
            long r10 = r9.timeCollectingCerts     // Catch:{ PackageParserException -> 0x0e8a }
            long r29 = android.os.SystemClock.uptimeMillis()     // Catch:{ PackageParserException -> 0x0e8a }
            long r29 = r29 - r6
            long r10 = r10 + r29
            r9.timeCollectingCerts = r10     // Catch:{ PackageParserException -> 0x0e8a }
            boolean r6 = com.android.server.pm.PackageManagerServiceInjector.checkEnterpriseRestriction(r1, r15)
            if (r6 != 0) goto L_0x0e7c
            if (r23 == 0) goto L_0x0278
            android.content.pm.PackageParser$SigningDetails r6 = r15.mSigningDetails
            int r6 = r6.signatureSchemeVersion
            r7 = 2
            if (r6 < r7) goto L_0x0251
            goto L_0x0278
        L_0x0251:
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            java.lang.String r7 = "Instant app package "
            r6.append(r7)
            java.lang.String r7 = r15.packageName
            r6.append(r7)
            java.lang.String r7 = " is not signed with at least APK Signature Scheme v2"
            r6.append(r7)
            java.lang.String r6 = r6.toString()
            java.lang.String r7 = "PackageManager"
            android.util.Slog.w(r7, r6)
            com.android.server.pm.PackageManagerService$PrepareFailure r6 = new com.android.server.pm.PackageManagerService$PrepareFailure
            java.lang.String r7 = "Instant app package must be signed with APK Signature Scheme v2 or greater"
            r9 = -116(0xffffffffffffff8c, float:NaN)
            r6.<init>((int) r9, (java.lang.String) r7)
            throw r6
        L_0x0278:
            r29 = 0
            r6 = 0
            r7 = 0
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r9 = r1.mPackages
            monitor-enter(r9)
            r10 = r4 & 2
            if (r10 == 0) goto L_0x0449
            com.android.server.pm.Settings r10 = r1.mSettings     // Catch:{ all -> 0x0439 }
            java.lang.String r10 = r10.getRenamedPackageLPr(r5)     // Catch:{ all -> 0x0439 }
            java.util.ArrayList r11 = r15.mOriginalPackages     // Catch:{ all -> 0x0439 }
            if (r11 == 0) goto L_0x02b7
            java.util.ArrayList r11 = r15.mOriginalPackages     // Catch:{ all -> 0x02a9 }
            boolean r11 = r11.contains(r10)     // Catch:{ all -> 0x02a9 }
            if (r11 == 0) goto L_0x02b7
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r11 = r1.mPackages     // Catch:{ all -> 0x02a9 }
            boolean r11 = r11.containsKey(r10)     // Catch:{ all -> 0x02a9 }
            if (r11 == 0) goto L_0x02b7
            r15.setPackageName(r10)     // Catch:{ all -> 0x02a9 }
            java.lang.String r11 = r15.packageName     // Catch:{ all -> 0x02a9 }
            r5 = r11
            r7 = 1
            r30 = r6
            r6 = r10
            goto L_0x0302
        L_0x02a9:
            r0 = move-exception
            r2 = r0
            r42 = r12
            r32 = r14
            r44 = r15
            r41 = r28
            r28 = r4
            goto L_0x0e77
        L_0x02b7:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r11 = r1.mPackages     // Catch:{ all -> 0x0439 }
            boolean r11 = r11.containsKey(r5)     // Catch:{ all -> 0x0439 }
            if (r11 == 0) goto L_0x02ff
            r7 = 1
            r11 = 8
            r13 = 1
            r1.acquireUxPerfLock(r11, r5, r13)     // Catch:{ all -> 0x02ed }
            android.util.BoostFramework r11 = new android.util.BoostFramework     // Catch:{ all -> 0x02ed }
            r11.<init>()     // Catch:{ all -> 0x02ed }
            r13 = 4242(0x1092, float:5.944E-42)
            r30 = r6
            r18 = r7
            r6 = -1
            r7 = 0
            r11.perfHint(r13, r5, r6, r7)     // Catch:{ all -> 0x02db }
            r6 = r10
            r7 = r18
            goto L_0x0302
        L_0x02db:
            r0 = move-exception
            r2 = r0
            r42 = r12
            r32 = r14
            r44 = r15
            r7 = r18
            r41 = r28
            r6 = r30
            r28 = r4
            goto L_0x0e77
        L_0x02ed:
            r0 = move-exception
            r30 = r6
            r18 = r7
            r2 = r0
            r42 = r12
            r32 = r14
            r44 = r15
            r41 = r28
            r28 = r4
            goto L_0x0e77
        L_0x02ff:
            r30 = r6
            r6 = r10
        L_0x0302:
            android.content.pm.PackageParser$Package r11 = r15.parentPackage     // Catch:{ all -> 0x0425 }
            if (r11 != 0) goto L_0x03df
            if (r7 == 0) goto L_0x03d3
            r11 = 1
            r3.isReplace = r11     // Catch:{ all -> 0x0425 }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r11 = r1.mPackages     // Catch:{ all -> 0x0425 }
            java.lang.Object r11 = r11.get(r5)     // Catch:{ all -> 0x0425 }
            android.content.pm.PackageParser$Package r11 = (android.content.pm.PackageParser.Package) r11     // Catch:{ all -> 0x0425 }
            android.content.pm.ApplicationInfo r13 = r11.applicationInfo     // Catch:{ all -> 0x0425 }
            int r13 = r13.targetSdkVersion     // Catch:{ all -> 0x0425 }
            android.content.pm.ApplicationInfo r10 = r15.applicationInfo     // Catch:{ all -> 0x0425 }
            int r10 = r10.targetSdkVersion     // Catch:{ all -> 0x0425 }
            r31 = r5
            r5 = 22
            if (r13 <= r5) goto L_0x0372
            r5 = 22
            if (r10 <= r5) goto L_0x032a
            r32 = r6
            r33 = r7
            goto L_0x0376
        L_0x032a:
            com.android.server.pm.PackageManagerService$PrepareFailure r5 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x035e }
            r32 = r6
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ all -> 0x035e }
            r6.<init>()     // Catch:{ all -> 0x035e }
            r33 = r7
            java.lang.String r7 = "Package "
            r6.append(r7)     // Catch:{ all -> 0x0411 }
            java.lang.String r7 = r15.packageName     // Catch:{ all -> 0x0411 }
            r6.append(r7)     // Catch:{ all -> 0x0411 }
            java.lang.String r7 = " new target SDK "
            r6.append(r7)     // Catch:{ all -> 0x0411 }
            r6.append(r10)     // Catch:{ all -> 0x0411 }
            java.lang.String r7 = " doesn't support runtime permissions but the old target SDK "
            r6.append(r7)     // Catch:{ all -> 0x0411 }
            r6.append(r13)     // Catch:{ all -> 0x0411 }
            java.lang.String r7 = " does."
            r6.append(r7)     // Catch:{ all -> 0x0411 }
            java.lang.String r6 = r6.toString()     // Catch:{ all -> 0x0411 }
            r7 = -26
            r5.<init>((int) r7, (java.lang.String) r6)     // Catch:{ all -> 0x0411 }
            throw r5     // Catch:{ all -> 0x0411 }
        L_0x035e:
            r0 = move-exception
            r33 = r7
            r2 = r0
            r42 = r12
            r32 = r14
            r44 = r15
            r41 = r28
            r6 = r30
            r5 = r31
            r28 = r4
            goto L_0x0e77
        L_0x0372:
            r32 = r6
            r33 = r7
        L_0x0376:
            android.content.pm.ApplicationInfo r5 = r11.applicationInfo     // Catch:{ all -> 0x0411 }
            int r5 = r5.flags     // Catch:{ all -> 0x0411 }
            r6 = 8
            r5 = r5 & r6
            if (r5 == 0) goto L_0x03a4
            r5 = 2097152(0x200000, float:2.938736E-39)
            r5 = r5 & r4
            if (r5 == 0) goto L_0x0385
            goto L_0x03a4
        L_0x0385:
            com.android.server.pm.PackageManagerService$PrepareFailure r5 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x0411 }
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ all -> 0x0411 }
            r6.<init>()     // Catch:{ all -> 0x0411 }
            java.lang.String r7 = "Package "
            r6.append(r7)     // Catch:{ all -> 0x0411 }
            java.lang.String r7 = r11.packageName     // Catch:{ all -> 0x0411 }
            r6.append(r7)     // Catch:{ all -> 0x0411 }
            java.lang.String r7 = " is a persistent app. Persistent apps are not updateable."
            r6.append(r7)     // Catch:{ all -> 0x0411 }
            java.lang.String r6 = r6.toString()     // Catch:{ all -> 0x0411 }
            r7 = -2
            r5.<init>((int) r7, (java.lang.String) r6)     // Catch:{ all -> 0x0411 }
            throw r5     // Catch:{ all -> 0x0411 }
        L_0x03a4:
            android.content.pm.PackageParser$Package r5 = r11.parentPackage     // Catch:{ all -> 0x0411 }
            if (r5 != 0) goto L_0x03a9
            goto L_0x03d9
        L_0x03a9:
            com.android.server.pm.PackageManagerService$PrepareFailure r5 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x0411 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x0411 }
            r7.<init>()     // Catch:{ all -> 0x0411 }
            java.lang.String r6 = "Package "
            r7.append(r6)     // Catch:{ all -> 0x0411 }
            java.lang.String r6 = r15.packageName     // Catch:{ all -> 0x0411 }
            r7.append(r6)     // Catch:{ all -> 0x0411 }
            java.lang.String r6 = " is child of package "
            r7.append(r6)     // Catch:{ all -> 0x0411 }
            android.content.pm.PackageParser$Package r6 = r11.parentPackage     // Catch:{ all -> 0x0411 }
            r7.append(r6)     // Catch:{ all -> 0x0411 }
            java.lang.String r6 = ". Child packages can be updated only through the parent package."
            r7.append(r6)     // Catch:{ all -> 0x0411 }
            java.lang.String r6 = r7.toString()     // Catch:{ all -> 0x0411 }
            r7 = -106(0xffffffffffffff96, float:NaN)
            r5.<init>((int) r7, (java.lang.String) r6)     // Catch:{ all -> 0x0411 }
            throw r5     // Catch:{ all -> 0x0411 }
        L_0x03d3:
            r31 = r5
            r32 = r6
            r33 = r7
        L_0x03d9:
            r13 = r31
            r7 = r33
            goto L_0x044c
        L_0x03df:
            r31 = r5
            r32 = r6
            r33 = r7
            com.android.server.pm.PackageManagerService$PrepareFailure r5 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x0411 }
            r6 = -106(0xffffffffffffff96, float:NaN)
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x0411 }
            r7.<init>()     // Catch:{ all -> 0x0411 }
            java.lang.String r10 = "Package "
            r7.append(r10)     // Catch:{ all -> 0x0411 }
            java.lang.String r10 = r15.packageName     // Catch:{ all -> 0x0411 }
            r7.append(r10)     // Catch:{ all -> 0x0411 }
            java.lang.String r10 = " is child of package "
            r7.append(r10)     // Catch:{ all -> 0x0411 }
            android.content.pm.PackageParser$Package r10 = r15.parentPackage     // Catch:{ all -> 0x0411 }
            android.content.pm.PackageParser$Package r10 = r10.parentPackage     // Catch:{ all -> 0x0411 }
            r7.append(r10)     // Catch:{ all -> 0x0411 }
            java.lang.String r10 = ". Child packages can be updated only through the parent package."
            r7.append(r10)     // Catch:{ all -> 0x0411 }
            java.lang.String r7 = r7.toString()     // Catch:{ all -> 0x0411 }
            r5.<init>((int) r6, (java.lang.String) r7)     // Catch:{ all -> 0x0411 }
            throw r5     // Catch:{ all -> 0x0411 }
        L_0x0411:
            r0 = move-exception
            r2 = r0
            r42 = r12
            r32 = r14
            r44 = r15
            r41 = r28
            r6 = r30
            r5 = r31
            r7 = r33
            r28 = r4
            goto L_0x0e77
        L_0x0425:
            r0 = move-exception
            r31 = r5
            r33 = r7
            r2 = r0
            r42 = r12
            r32 = r14
            r44 = r15
            r41 = r28
            r6 = r30
            r28 = r4
            goto L_0x0e77
        L_0x0439:
            r0 = move-exception
            r30 = r6
            r2 = r0
            r42 = r12
            r32 = r14
            r44 = r15
            r41 = r28
            r28 = r4
            goto L_0x0e77
        L_0x0449:
            r30 = r6
            r13 = r5
        L_0x044c:
            com.android.server.pm.Settings r5 = r1.mSettings     // Catch:{ all -> 0x0e63 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r5 = r5.mPackages     // Catch:{ all -> 0x0e63 }
            java.lang.Object r5 = r5.get(r13)     // Catch:{ all -> 0x0e63 }
            com.android.server.pm.PackageSetting r5 = (com.android.server.pm.PackageSetting) r5     // Catch:{ all -> 0x0e63 }
            if (r5 == 0) goto L_0x057f
            r10 = r5
            android.content.pm.ApplicationInfo r11 = r15.applicationInfo     // Catch:{ all -> 0x056c }
            boolean r11 = r11.isStaticSharedLibrary()     // Catch:{ all -> 0x056c }
            if (r11 == 0) goto L_0x0489
            android.content.pm.SharedLibraryInfo r11 = r1.getLatestSharedLibraVersionLPr(r15)     // Catch:{ all -> 0x0478 }
            if (r11 == 0) goto L_0x0475
            com.android.server.pm.Settings r6 = r1.mSettings     // Catch:{ all -> 0x0478 }
            r32 = r10
            java.lang.String r10 = r11.getPackageName()     // Catch:{ all -> 0x0478 }
            com.android.server.pm.PackageSetting r6 = r6.getPackageLPr(r10)     // Catch:{ all -> 0x0478 }
            r10 = r6
            goto L_0x048d
        L_0x0475:
            r32 = r10
            goto L_0x048b
        L_0x0478:
            r0 = move-exception
            r2 = r0
            r42 = r12
            r5 = r13
            r32 = r14
            r44 = r15
            r41 = r28
            r6 = r30
            r28 = r4
            goto L_0x0e77
        L_0x0489:
            r32 = r10
        L_0x048b:
            r10 = r32
        L_0x048d:
            com.android.server.pm.Settings r6 = r1.mSettings     // Catch:{ all -> 0x056c }
            com.android.server.pm.KeySetManagerService r6 = r6.mKeySetManagerService     // Catch:{ all -> 0x056c }
            boolean r11 = r6.shouldCheckUpgradeKeySetLocked(r10, r8)     // Catch:{ all -> 0x056c }
            if (r11 == 0) goto L_0x04f7
            boolean r11 = r6.checkUpgradeKeySetLocked(r10, r15)     // Catch:{ all -> 0x04e6 }
            if (r11 == 0) goto L_0x04a5
            r33 = r4
            r35 = r7
            r32 = r14
            goto L_0x0521
        L_0x04a5:
            com.android.server.pm.PackageManagerService$PrepareFailure r11 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x04e6 }
            r32 = r14
            java.lang.StringBuilder r14 = new java.lang.StringBuilder     // Catch:{ all -> 0x04d7 }
            r14.<init>()     // Catch:{ all -> 0x04d7 }
            r33 = r4
            java.lang.String r4 = "Package "
            r14.append(r4)     // Catch:{ all -> 0x04c8 }
            java.lang.String r4 = r15.packageName     // Catch:{ all -> 0x04c8 }
            r14.append(r4)     // Catch:{ all -> 0x04c8 }
            java.lang.String r4 = " upgrade keys do not match the previously installed version"
            r14.append(r4)     // Catch:{ all -> 0x04c8 }
            java.lang.String r4 = r14.toString()     // Catch:{ all -> 0x04c8 }
            r14 = -7
            r11.<init>((int) r14, (java.lang.String) r4)     // Catch:{ all -> 0x04c8 }
            throw r11     // Catch:{ all -> 0x04c8 }
        L_0x04c8:
            r0 = move-exception
            r2 = r0
            r42 = r12
            r5 = r13
            r44 = r15
            r41 = r28
            r6 = r30
            r28 = r33
            goto L_0x0e77
        L_0x04d7:
            r0 = move-exception
            r2 = r0
            r42 = r12
            r5 = r13
            r44 = r15
            r41 = r28
            r6 = r30
            r28 = r4
            goto L_0x0e77
        L_0x04e6:
            r0 = move-exception
            r2 = r0
            r42 = r12
            r5 = r13
            r32 = r14
            r44 = r15
            r41 = r28
            r6 = r30
            r28 = r4
            goto L_0x0e77
        L_0x04f7:
            r33 = r4
            r32 = r14
            boolean r4 = r1.isCompatSignatureUpdateNeeded((android.content.pm.PackageParser.Package) r15)     // Catch:{ PackageManagerException -> 0x055c, all -> 0x054b }
            boolean r11 = r1.isRecoverSignatureUpdateNeeded((android.content.pm.PackageParser.Package) r15)     // Catch:{ PackageManagerException -> 0x055c, all -> 0x054b }
            android.content.pm.PackageParser$SigningDetails r14 = r15.mSigningDetails     // Catch:{ PackageManagerException -> 0x055c, all -> 0x054b }
            r35 = r7
            r7 = 0
            boolean r7 = com.android.server.pm.PackageManagerServiceUtils.verifySignatures(r10, r7, r14, r4, r11)     // Catch:{ PackageManagerException -> 0x0548 }
            if (r7 == 0) goto L_0x051e
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r14 = r1.mPackages     // Catch:{ PackageManagerException -> 0x0548 }
            monitor-enter(r14)     // Catch:{ PackageManagerException -> 0x0548 }
            r34 = r4
            java.lang.String r4 = r15.packageName     // Catch:{ all -> 0x051a }
            r6.removeAppKeySetDataLPw(r4)     // Catch:{ all -> 0x051a }
            monitor-exit(r14)     // Catch:{ all -> 0x051a }
            goto L_0x0520
        L_0x051a:
            r0 = move-exception
            r4 = r0
            monitor-exit(r14)     // Catch:{ all -> 0x051a }
            throw r4     // Catch:{ PackageManagerException -> 0x0548 }
        L_0x051e:
            r34 = r4
        L_0x0520:
        L_0x0521:
            android.content.pm.PackageParser$Package r4 = r5.pkg     // Catch:{ all -> 0x06fa }
            if (r4 == 0) goto L_0x053a
            android.content.pm.PackageParser$Package r4 = r5.pkg     // Catch:{ all -> 0x06fa }
            android.content.pm.ApplicationInfo r4 = r4.applicationInfo     // Catch:{ all -> 0x06fa }
            if (r4 == 0) goto L_0x053a
            android.content.pm.PackageParser$Package r4 = r5.pkg     // Catch:{ all -> 0x06fa }
            android.content.pm.ApplicationInfo r4 = r4.applicationInfo     // Catch:{ all -> 0x06fa }
            int r4 = r4.flags     // Catch:{ all -> 0x06fa }
            r7 = 1
            r4 = r4 & r7
            if (r4 == 0) goto L_0x0537
            r4 = 1
            goto L_0x0538
        L_0x0537:
            r4 = 0
        L_0x0538:
            r30 = r4
        L_0x053a:
            com.android.server.pm.UserManagerService r4 = sUserManager     // Catch:{ all -> 0x06fa }
            int[] r4 = r4.getUserIds()     // Catch:{ all -> 0x06fa }
            r7 = 1
            int[] r4 = r5.queryInstalledUsers(r4, r7)     // Catch:{ all -> 0x06fa }
            r3.origUsers = r4     // Catch:{ all -> 0x06fa }
            goto L_0x0585
        L_0x0548:
            r0 = move-exception
            r4 = r0
            goto L_0x0560
        L_0x054b:
            r0 = move-exception
            r35 = r7
            r2 = r0
            r42 = r12
            r5 = r13
            r44 = r15
            r41 = r28
            r6 = r30
            r28 = r33
            goto L_0x0e77
        L_0x055c:
            r0 = move-exception
            r35 = r7
            r4 = r0
        L_0x0560:
            com.android.server.pm.PackageManagerService$PrepareFailure r7 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x06fa }
            int r11 = r4.error     // Catch:{ all -> 0x06fa }
            java.lang.String r14 = r4.getMessage()     // Catch:{ all -> 0x06fa }
            r7.<init>((int) r11, (java.lang.String) r14)     // Catch:{ all -> 0x06fa }
            throw r7     // Catch:{ all -> 0x06fa }
        L_0x056c:
            r0 = move-exception
            r35 = r7
            r2 = r0
            r42 = r12
            r5 = r13
            r32 = r14
            r44 = r15
            r41 = r28
            r6 = r30
            r28 = r4
            goto L_0x0e77
        L_0x057f:
            r33 = r4
            r35 = r7
            r32 = r14
        L_0x0585:
            java.util.ArrayList r4 = r15.permissions     // Catch:{ all -> 0x0e50 }
            int r4 = r4.size()     // Catch:{ all -> 0x0e50 }
            int r6 = r4 + -1
        L_0x058d:
            if (r6 < 0) goto L_0x070b
            java.util.ArrayList r7 = r15.permissions     // Catch:{ all -> 0x06fa }
            java.lang.Object r7 = r7.get(r6)     // Catch:{ all -> 0x06fa }
            android.content.pm.PackageParser$Permission r7 = (android.content.pm.PackageParser.Permission) r7     // Catch:{ all -> 0x06fa }
            com.android.server.pm.permission.PermissionManagerServiceInternal r10 = r1.mPermissionManager     // Catch:{ all -> 0x06fa }
            android.content.pm.PermissionInfo r11 = r7.info     // Catch:{ all -> 0x06fa }
            java.lang.String r11 = r11.name     // Catch:{ all -> 0x06fa }
            com.android.server.pm.permission.BasePermission r10 = r10.getPermissionTEMP(r11)     // Catch:{ all -> 0x06fa }
            android.content.pm.PermissionInfo r11 = r7.info     // Catch:{ all -> 0x06fa }
            int r11 = r11.protectionLevel     // Catch:{ all -> 0x06fa }
            r11 = r11 & 4096(0x1000, float:5.74E-42)
            if (r11 == 0) goto L_0x05df
            if (r30 != 0) goto L_0x05df
            java.lang.String r11 = "PackageManager"
            java.lang.StringBuilder r14 = new java.lang.StringBuilder     // Catch:{ all -> 0x06fa }
            r14.<init>()     // Catch:{ all -> 0x06fa }
            r34 = r4
            java.lang.String r4 = "Non-System package "
            r14.append(r4)     // Catch:{ all -> 0x06fa }
            java.lang.String r4 = r15.packageName     // Catch:{ all -> 0x06fa }
            r14.append(r4)     // Catch:{ all -> 0x06fa }
            java.lang.String r4 = " attempting to delcare ephemeral permission "
            r14.append(r4)     // Catch:{ all -> 0x06fa }
            android.content.pm.PermissionInfo r4 = r7.info     // Catch:{ all -> 0x06fa }
            java.lang.String r4 = r4.name     // Catch:{ all -> 0x06fa }
            r14.append(r4)     // Catch:{ all -> 0x06fa }
            java.lang.String r4 = "; Removing ephemeral."
            r14.append(r4)     // Catch:{ all -> 0x06fa }
            java.lang.String r4 = r14.toString()     // Catch:{ all -> 0x06fa }
            android.util.Slog.w(r11, r4)     // Catch:{ all -> 0x06fa }
            android.content.pm.PermissionInfo r4 = r7.info     // Catch:{ all -> 0x06fa }
            int r11 = r4.protectionLevel     // Catch:{ all -> 0x06fa }
            r11 = r11 & -4097(0xffffffffffffefff, float:NaN)
            r4.protectionLevel = r11     // Catch:{ all -> 0x06fa }
            goto L_0x05e1
        L_0x05df:
            r34 = r4
        L_0x05e1:
            if (r10 == 0) goto L_0x06ee
            java.lang.String r4 = r10.getSourcePackageName()     // Catch:{ all -> 0x06fa }
            com.android.server.pm.PackageSettingBase r11 = r10.getSourcePackageSetting()     // Catch:{ all -> 0x06fa }
            com.android.server.pm.Settings r14 = r1.mSettings     // Catch:{ all -> 0x06fa }
            com.android.server.pm.KeySetManagerService r14 = r14.mKeySetManagerService     // Catch:{ all -> 0x06fa }
            r36 = r5
            java.lang.String r5 = r15.packageName     // Catch:{ all -> 0x06fa }
            boolean r5 = r4.equals(r5)     // Catch:{ all -> 0x06fa }
            if (r5 == 0) goto L_0x0606
            boolean r5 = r14.shouldCheckUpgradeKeySetLocked(r11, r8)     // Catch:{ all -> 0x06fa }
            if (r5 == 0) goto L_0x0606
            boolean r5 = r14.checkUpgradeKeySetLocked(r11, r15)     // Catch:{ all -> 0x06fa }
            r37 = r14
            goto L_0x062c
        L_0x0606:
            com.android.server.pm.PackageSignatures r5 = r11.signatures     // Catch:{ all -> 0x06fa }
            android.content.pm.PackageParser$SigningDetails r5 = r5.mSigningDetails     // Catch:{ all -> 0x06fa }
            r37 = r14
            android.content.pm.PackageParser$SigningDetails r14 = r15.mSigningDetails     // Catch:{ all -> 0x06fa }
            r3 = 4
            boolean r5 = r5.checkCapability(r14, r3)     // Catch:{ all -> 0x06fa }
            if (r5 == 0) goto L_0x0617
            r5 = 1
            goto L_0x062c
        L_0x0617:
            android.content.pm.PackageParser$SigningDetails r5 = r15.mSigningDetails     // Catch:{ all -> 0x06fa }
            com.android.server.pm.PackageSignatures r14 = r11.signatures     // Catch:{ all -> 0x06fa }
            android.content.pm.PackageParser$SigningDetails r14 = r14.mSigningDetails     // Catch:{ all -> 0x06fa }
            boolean r3 = r5.checkCapability(r14, r3)     // Catch:{ all -> 0x06fa }
            if (r3 == 0) goto L_0x062b
            com.android.server.pm.PackageSignatures r3 = r11.signatures     // Catch:{ all -> 0x06fa }
            android.content.pm.PackageParser$SigningDetails r5 = r15.mSigningDetails     // Catch:{ all -> 0x06fa }
            r3.mSigningDetails = r5     // Catch:{ all -> 0x06fa }
            r5 = 1
            goto L_0x062c
        L_0x062b:
            r5 = 0
        L_0x062c:
            if (r5 != 0) goto L_0x06a1
            java.lang.String r3 = "android"
            boolean r3 = r4.equals(r3)     // Catch:{ all -> 0x06fa }
            if (r3 == 0) goto L_0x0668
            java.lang.String r3 = "PackageManager"
            java.lang.StringBuilder r14 = new java.lang.StringBuilder     // Catch:{ all -> 0x06fa }
            r14.<init>()     // Catch:{ all -> 0x06fa }
            r38 = r5
            java.lang.String r5 = "Package "
            r14.append(r5)     // Catch:{ all -> 0x06fa }
            java.lang.String r5 = r15.packageName     // Catch:{ all -> 0x06fa }
            r14.append(r5)     // Catch:{ all -> 0x06fa }
            java.lang.String r5 = " attempting to redeclare system permission "
            r14.append(r5)     // Catch:{ all -> 0x06fa }
            android.content.pm.PermissionInfo r5 = r7.info     // Catch:{ all -> 0x06fa }
            java.lang.String r5 = r5.name     // Catch:{ all -> 0x06fa }
            r14.append(r5)     // Catch:{ all -> 0x06fa }
            java.lang.String r5 = "; ignoring new declaration"
            r14.append(r5)     // Catch:{ all -> 0x06fa }
            java.lang.String r5 = r14.toString()     // Catch:{ all -> 0x06fa }
            android.util.Slog.w(r3, r5)     // Catch:{ all -> 0x06fa }
            java.util.ArrayList r3 = r15.permissions     // Catch:{ all -> 0x06fa }
            r3.remove(r6)     // Catch:{ all -> 0x06fa }
            goto L_0x06f0
        L_0x0668:
            r38 = r5
            com.android.server.pm.PackageManagerService$PrepareFailure r3 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x06fa }
            java.lang.StringBuilder r14 = new java.lang.StringBuilder     // Catch:{ all -> 0x06fa }
            r14.<init>()     // Catch:{ all -> 0x06fa }
            java.lang.String r5 = "Package "
            r14.append(r5)     // Catch:{ all -> 0x06fa }
            java.lang.String r5 = r15.packageName     // Catch:{ all -> 0x06fa }
            r14.append(r5)     // Catch:{ all -> 0x06fa }
            java.lang.String r5 = " attempting to redeclare permission "
            r14.append(r5)     // Catch:{ all -> 0x06fa }
            android.content.pm.PermissionInfo r5 = r7.info     // Catch:{ all -> 0x06fa }
            java.lang.String r5 = r5.name     // Catch:{ all -> 0x06fa }
            r14.append(r5)     // Catch:{ all -> 0x06fa }
            java.lang.String r5 = " already owned by "
            r14.append(r5)     // Catch:{ all -> 0x06fa }
            r14.append(r4)     // Catch:{ all -> 0x06fa }
            java.lang.String r5 = r14.toString()     // Catch:{ all -> 0x06fa }
            r14 = -112(0xffffffffffffff90, float:NaN)
            r3.<init>((int) r14, (java.lang.String) r5)     // Catch:{ all -> 0x06fa }
            android.content.pm.PermissionInfo r5 = r7.info     // Catch:{ all -> 0x06fa }
            java.lang.String r5 = r5.name     // Catch:{ all -> 0x06fa }
            com.android.server.pm.PackageManagerService$PrepareFailure r3 = r3.conflictsWithExistingPermission(r5, r4)     // Catch:{ all -> 0x06fa }
            throw r3     // Catch:{ all -> 0x06fa }
        L_0x06a1:
            r38 = r5
            java.lang.String r3 = "android"
            java.lang.String r5 = r15.packageName     // Catch:{ all -> 0x06fa }
            boolean r3 = r3.equals(r5)     // Catch:{ all -> 0x06fa }
            if (r3 != 0) goto L_0x06f0
            android.content.pm.PermissionInfo r3 = r7.info     // Catch:{ all -> 0x06fa }
            int r3 = r3.protectionLevel     // Catch:{ all -> 0x06fa }
            r3 = r3 & 15
            r5 = 1
            if (r3 != r5) goto L_0x06f0
            boolean r3 = r10.isRuntime()     // Catch:{ all -> 0x06fa }
            if (r3 != 0) goto L_0x06f0
            java.lang.String r3 = "PackageManager"
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ all -> 0x06fa }
            r5.<init>()     // Catch:{ all -> 0x06fa }
            java.lang.String r14 = "Package "
            r5.append(r14)     // Catch:{ all -> 0x06fa }
            java.lang.String r14 = r15.packageName     // Catch:{ all -> 0x06fa }
            r5.append(r14)     // Catch:{ all -> 0x06fa }
            java.lang.String r14 = " trying to change a non-runtime permission "
            r5.append(r14)     // Catch:{ all -> 0x06fa }
            android.content.pm.PermissionInfo r14 = r7.info     // Catch:{ all -> 0x06fa }
            java.lang.String r14 = r14.name     // Catch:{ all -> 0x06fa }
            r5.append(r14)     // Catch:{ all -> 0x06fa }
            java.lang.String r14 = " to runtime; keeping old protection level"
            r5.append(r14)     // Catch:{ all -> 0x06fa }
            java.lang.String r5 = r5.toString()     // Catch:{ all -> 0x06fa }
            android.util.Slog.w(r3, r5)     // Catch:{ all -> 0x06fa }
            android.content.pm.PermissionInfo r3 = r7.info     // Catch:{ all -> 0x06fa }
            int r5 = r10.getProtectionLevel()     // Catch:{ all -> 0x06fa }
            r3.protectionLevel = r5     // Catch:{ all -> 0x06fa }
            goto L_0x06f0
        L_0x06ee:
            r36 = r5
        L_0x06f0:
            int r6 = r6 + -1
            r3 = r49
            r4 = r34
            r5 = r36
            goto L_0x058d
        L_0x06fa:
            r0 = move-exception
            r2 = r0
            r42 = r12
            r5 = r13
            r44 = r15
            r41 = r28
            r6 = r30
            r28 = r33
            r7 = r35
            goto L_0x0e77
        L_0x070b:
            r34 = r4
            r36 = r5
            monitor-exit(r9)     // Catch:{ all -> 0x0e50 }
            if (r30 == 0) goto L_0x072b
            if (r12 != 0) goto L_0x0721
            if (r23 != 0) goto L_0x0717
            goto L_0x072b
        L_0x0717:
            com.android.server.pm.PackageManagerService$PrepareFailure r3 = new com.android.server.pm.PackageManagerService$PrepareFailure
            java.lang.String r4 = "Cannot update a system app with an instant app"
            r5 = -116(0xffffffffffffff8c, float:NaN)
            r3.<init>((int) r5, (java.lang.String) r4)
            throw r3
        L_0x0721:
            com.android.server.pm.PackageManagerService$PrepareFailure r3 = new com.android.server.pm.PackageManagerService$PrepareFailure
            java.lang.String r4 = "Cannot install updates to system apps on sdcard"
            r5 = -19
            r3.<init>((int) r5, (java.lang.String) r4)
            throw r3
        L_0x072b:
            com.android.server.pm.PackageManagerService$MoveInfo r3 = r2.move
            r4 = -110(0xffffffffffffff92, float:NaN)
            if (r3 == 0) goto L_0x0774
            r3 = 1
            r5 = r8 | 1
            r3 = r5 | 256(0x100, float:3.59E-43)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r5 = r1.mPackages
            monitor-enter(r5)
            com.android.server.pm.Settings r6 = r1.mSettings     // Catch:{ all -> 0x076c }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r6 = r6.mPackages     // Catch:{ all -> 0x076c }
            java.lang.Object r6 = r6.get(r13)     // Catch:{ all -> 0x076c }
            com.android.server.pm.PackageSetting r6 = (com.android.server.pm.PackageSetting) r6     // Catch:{ all -> 0x076c }
            if (r6 != 0) goto L_0x075c
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x076c }
            r7.<init>()     // Catch:{ all -> 0x076c }
            java.lang.String r8 = "Missing settings for moved package "
            r7.append(r8)     // Catch:{ all -> 0x076c }
            r7.append(r13)     // Catch:{ all -> 0x076c }
            java.lang.String r7 = r7.toString()     // Catch:{ all -> 0x076c }
            r14 = r49
            r14.setError((int) r4, (java.lang.String) r7)     // Catch:{ all -> 0x0772 }
            goto L_0x075e
        L_0x075c:
            r14 = r49
        L_0x075e:
            android.content.pm.ApplicationInfo r7 = r15.applicationInfo     // Catch:{ all -> 0x0772 }
            java.lang.String r8 = r6.primaryCpuAbiString     // Catch:{ all -> 0x0772 }
            r7.primaryCpuAbi = r8     // Catch:{ all -> 0x0772 }
            android.content.pm.ApplicationInfo r7 = r15.applicationInfo     // Catch:{ all -> 0x0772 }
            java.lang.String r8 = r6.secondaryCpuAbiString     // Catch:{ all -> 0x0772 }
            r7.secondaryCpuAbi = r8     // Catch:{ all -> 0x0772 }
            monitor-exit(r5)     // Catch:{ all -> 0x0772 }
            goto L_0x07a1
        L_0x076c:
            r0 = move-exception
            r14 = r49
        L_0x076f:
            r4 = r0
            monitor-exit(r5)     // Catch:{ all -> 0x0772 }
            throw r4
        L_0x0772:
            r0 = move-exception
            goto L_0x076f
        L_0x0774:
            r14 = r49
            r3 = 1
            r5 = r8 | 1
            java.lang.String r3 = r15.cpuAbiOverride     // Catch:{ PackageManagerException -> 0x0e35 }
            boolean r3 = android.text.TextUtils.isEmpty(r3)     // Catch:{ PackageManagerException -> 0x0e35 }
            if (r3 == 0) goto L_0x0792
            java.lang.String r3 = r2.abiOverride     // Catch:{ PackageManagerException -> 0x0784 }
            goto L_0x0794
        L_0x0784:
            r0 = move-exception
            r2 = r0
            r42 = r12
            r43 = r13
            r44 = r15
            r41 = r28
            r28 = r33
            goto L_0x0e41
        L_0x0792:
            java.lang.String r3 = r15.cpuAbiOverride     // Catch:{ PackageManagerException -> 0x0e35 }
        L_0x0794:
            boolean r6 = r15.isLibrary()     // Catch:{ PackageManagerException -> 0x0e35 }
            if (r6 != 0) goto L_0x079c
            r6 = 1
            goto L_0x079d
        L_0x079c:
            r6 = 0
        L_0x079d:
            derivePackageAbi(r15, r3, r6)     // Catch:{ PackageManagerException -> 0x0e35 }
            r3 = r5
        L_0x07a1:
            int r5 = r14.returnCode
            boolean r5 = r2.doRename(r5, r15)
            if (r5 == 0) goto L_0x0e2a
            r1.setUpFsVerityIfPossible(r15)     // Catch:{ InstallerException | IOException | DigestException | NoSuchAlgorithmException -> 0x0e05 }
            if (r23 != 0) goto L_0x07bb
            android.os.UserHandle r4 = r2.user
            int r4 = r4.getIdentifier()
            r7 = r35
            r1.startIntentFilterVerifications(r4, r7, r15)
            goto L_0x07bd
        L_0x07bb:
            r7 = r35
        L_0x07bd:
            java.lang.String r4 = "installPackageLI"
            r11 = r33
            com.android.server.pm.PackageManagerService$PackageFreezer r4 = r1.freezePackageForInstall(r13, r11, r4)
            r5 = 1
            r6 = 0
            r8 = 0
            r9 = r32
            r19 = r3
            r33 = r28
            if (r7 == 0) goto L_0x0ced
            r9 = 0
            android.content.pm.ApplicationInfo r10 = r15.applicationInfo     // Catch:{ all -> 0x0cd7 }
            boolean r10 = r10.isStaticSharedLibrary()     // Catch:{ all -> 0x0cd7 }
            if (r10 == 0) goto L_0x0834
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r10 = r1.mPackages     // Catch:{ all -> 0x081e }
            r34 = r5
            java.lang.String r5 = r15.packageName     // Catch:{ all -> 0x080a }
            java.lang.Object r5 = r10.get(r5)     // Catch:{ all -> 0x080a }
            android.content.pm.PackageParser$Package r5 = (android.content.pm.PackageParser.Package) r5     // Catch:{ all -> 0x080a }
            if (r5 == 0) goto L_0x0805
            long r35 = r5.getLongVersionCode()     // Catch:{ all -> 0x080a }
            long r37 = r15.getLongVersionCode()     // Catch:{ all -> 0x080a }
            int r10 = (r35 > r37 ? 1 : (r35 == r37 ? 0 : -1))
            if (r10 != 0) goto L_0x07f8
            r36 = r6
            goto L_0x0838
        L_0x07f8:
            com.android.server.pm.PackageManagerService$PrepareFailure r10 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x080a }
            r35 = r5
            java.lang.String r5 = "Packages declaring static-shared libs cannot be updated"
            r36 = r6
            r6 = -5
            r10.<init>((int) r6, (java.lang.String) r5)     // Catch:{ all -> 0x080a }
            throw r10     // Catch:{ all -> 0x080a }
        L_0x0805:
            r35 = r5
            r36 = r6
            goto L_0x0838
        L_0x080a:
            r0 = move-exception
            r2 = r0
            r46 = r3
            r31 = r4
            r35 = r7
            r42 = r12
            r43 = r13
            r44 = r15
            r41 = r28
            r28 = r11
            goto L_0x0dff
        L_0x081e:
            r0 = move-exception
            r34 = r5
            r2 = r0
            r46 = r3
            r31 = r4
            r35 = r7
            r42 = r12
            r43 = r13
            r44 = r15
            r41 = r28
            r28 = r11
            goto L_0x0dff
        L_0x0834:
            r34 = r5
            r36 = r6
        L_0x0838:
            r5 = r3 & 16384(0x4000, float:2.2959E-41)
            if (r5 == 0) goto L_0x083e
            r5 = 1
            goto L_0x083f
        L_0x083e:
            r5 = 0
        L_0x083f:
            java.lang.String r6 = r15.packageName     // Catch:{ all -> 0x0cc3 }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r10 = r1.mPackages     // Catch:{ all -> 0x0cc3 }
            monitor-enter(r10)     // Catch:{ all -> 0x0cc3 }
            r35 = r7
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r7 = r1.mPackages     // Catch:{ all -> 0x0c9c }
            java.lang.Object r7 = r7.get(r6)     // Catch:{ all -> 0x0c9c }
            android.content.pm.PackageParser$Package r7 = (android.content.pm.PackageParser.Package) r7     // Catch:{ all -> 0x0c9c }
            r37 = r7
            r38 = r8
            com.android.server.pm.Settings r8 = r1.mSettings     // Catch:{ all -> 0x0c89 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r8 = r8.mPackages     // Catch:{ all -> 0x0c89 }
            java.lang.Object r8 = r8.get(r6)     // Catch:{ all -> 0x0c89 }
            com.android.server.pm.PackageSetting r8 = (com.android.server.pm.PackageSetting) r8     // Catch:{ all -> 0x0c89 }
            r39 = r9
            com.android.server.pm.Settings r9 = r1.mSettings     // Catch:{ all -> 0x0c78 }
            com.android.server.pm.PackageSetting r9 = r9.getDisabledSystemPkgLPr((com.android.server.pm.PackageSetting) r8)     // Catch:{ all -> 0x0c78 }
            r40 = r9
            com.android.server.pm.Settings r9 = r1.mSettings     // Catch:{ all -> 0x0c78 }
            com.android.server.pm.KeySetManagerService r9 = r9.mKeySetManagerService     // Catch:{ all -> 0x0c78 }
            boolean r41 = r9.shouldCheckUpgradeKeySetLocked(r8, r3)     // Catch:{ all -> 0x0c78 }
            if (r41 == 0) goto L_0x08be
            boolean r16 = r9.checkUpgradeKeySetLocked(r8, r15)     // Catch:{ all -> 0x08ac }
            if (r16 == 0) goto L_0x087e
            r41 = r9
            r42 = r11
            r43 = r12
            goto L_0x0902
        L_0x087e:
            r41 = r9
            com.android.server.pm.PackageManagerService$PrepareFailure r9 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x08ac }
            r42 = r11
            java.lang.StringBuilder r11 = new java.lang.StringBuilder     // Catch:{ all -> 0x089c }
            r11.<init>()     // Catch:{ all -> 0x089c }
            r43 = r12
            java.lang.String r12 = "New package not signed by keys specified by upgrade-keysets: "
            r11.append(r12)     // Catch:{ all -> 0x08f4 }
            r11.append(r6)     // Catch:{ all -> 0x08f4 }
            java.lang.String r11 = r11.toString()     // Catch:{ all -> 0x08f4 }
            r12 = -7
            r9.<init>((int) r12, (java.lang.String) r11)     // Catch:{ all -> 0x08f4 }
            throw r9     // Catch:{ all -> 0x08f4 }
        L_0x089c:
            r0 = move-exception
            r43 = r12
            r2 = r0
            r46 = r3
            r31 = r4
            r20 = r5
            r44 = r6
            r16 = r13
            goto L_0x0cb0
        L_0x08ac:
            r0 = move-exception
            r42 = r11
            r43 = r12
            r2 = r0
            r46 = r3
            r31 = r4
            r20 = r5
            r44 = r6
            r16 = r13
            goto L_0x0cb0
        L_0x08be:
            r41 = r9
            r42 = r11
            r43 = r12
            android.content.pm.PackageParser$SigningDetails r9 = r15.mSigningDetails     // Catch:{ all -> 0x0c6b }
            android.content.pm.PackageParser$SigningDetails r11 = r7.mSigningDetails     // Catch:{ all -> 0x0c6b }
            r12 = 1
            boolean r9 = r9.checkCapability(r11, r12)     // Catch:{ all -> 0x0c6b }
            if (r9 != 0) goto L_0x0902
            android.content.pm.PackageParser$SigningDetails r9 = r7.mSigningDetails     // Catch:{ all -> 0x08f4 }
            android.content.pm.PackageParser$SigningDetails r11 = r15.mSigningDetails     // Catch:{ all -> 0x08f4 }
            r12 = 8
            boolean r9 = r9.checkCapability(r11, r12)     // Catch:{ all -> 0x08f4 }
            if (r9 == 0) goto L_0x08dc
            goto L_0x0902
        L_0x08dc:
            com.android.server.pm.PackageManagerService$PrepareFailure r9 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x08f4 }
            java.lang.StringBuilder r11 = new java.lang.StringBuilder     // Catch:{ all -> 0x08f4 }
            r11.<init>()     // Catch:{ all -> 0x08f4 }
            java.lang.String r12 = "New package has a different signature: "
            r11.append(r12)     // Catch:{ all -> 0x08f4 }
            r11.append(r6)     // Catch:{ all -> 0x08f4 }
            java.lang.String r11 = r11.toString()     // Catch:{ all -> 0x08f4 }
            r12 = -7
            r9.<init>((int) r12, (java.lang.String) r11)     // Catch:{ all -> 0x08f4 }
            throw r9     // Catch:{ all -> 0x08f4 }
        L_0x08f4:
            r0 = move-exception
            r2 = r0
            r46 = r3
            r31 = r4
            r20 = r5
            r44 = r6
            r16 = r13
            goto L_0x0cb0
        L_0x0902:
            byte[] r9 = r7.restrictUpdateHash     // Catch:{ all -> 0x0c6b }
            if (r9 == 0) goto L_0x09ab
            boolean r9 = r7.isSystem()     // Catch:{ all -> 0x099d }
            if (r9 == 0) goto L_0x09ab
            java.lang.String r9 = "SHA-512"
            java.security.MessageDigest r9 = java.security.MessageDigest.getInstance(r9)     // Catch:{ IOException | NoSuchAlgorithmException -> 0x0975 }
            java.io.File r11 = new java.io.File     // Catch:{ IOException | NoSuchAlgorithmException -> 0x0975 }
            java.lang.String r12 = r15.baseCodePath     // Catch:{ IOException | NoSuchAlgorithmException -> 0x0975 }
            r11.<init>(r12)     // Catch:{ IOException | NoSuchAlgorithmException -> 0x0975 }
            updateDigest(r9, r11)     // Catch:{ IOException | NoSuchAlgorithmException -> 0x0975 }
            java.lang.String[] r11 = r15.splitCodePaths     // Catch:{ IOException | NoSuchAlgorithmException -> 0x0975 }
            boolean r11 = com.android.internal.util.ArrayUtils.isEmpty(r11)     // Catch:{ IOException | NoSuchAlgorithmException -> 0x0975 }
            if (r11 != 0) goto L_0x0945
            java.lang.String[] r11 = r15.splitCodePaths     // Catch:{ IOException | NoSuchAlgorithmException -> 0x0975 }
            int r12 = r11.length     // Catch:{ IOException | NoSuchAlgorithmException -> 0x0975 }
            r16 = r13
            r13 = 0
        L_0x092a:
            if (r13 >= r12) goto L_0x0947
            r31 = r11[r13]     // Catch:{ IOException | NoSuchAlgorithmException -> 0x0972 }
            r44 = r31
            r31 = r11
            java.io.File r11 = new java.io.File     // Catch:{ IOException | NoSuchAlgorithmException -> 0x0972 }
            r45 = r12
            r12 = r44
            r11.<init>(r12)     // Catch:{ IOException | NoSuchAlgorithmException -> 0x0972 }
            updateDigest(r9, r11)     // Catch:{ IOException | NoSuchAlgorithmException -> 0x0972 }
            int r13 = r13 + 1
            r11 = r31
            r12 = r45
            goto L_0x092a
        L_0x0945:
            r16 = r13
        L_0x0947:
            byte[] r11 = r9.digest()     // Catch:{ IOException | NoSuchAlgorithmException -> 0x0972 }
            r9 = r11
            byte[] r11 = r7.restrictUpdateHash     // Catch:{ all -> 0x0991 }
            boolean r11 = java.util.Arrays.equals(r11, r9)     // Catch:{ all -> 0x0991 }
            if (r11 == 0) goto L_0x095a
            byte[] r11 = r7.restrictUpdateHash     // Catch:{ all -> 0x0991 }
            r15.restrictUpdateHash = r11     // Catch:{ all -> 0x0991 }
            goto L_0x09ad
        L_0x095a:
            com.android.server.pm.PackageManagerService$PrepareFailure r11 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x0991 }
            java.lang.StringBuilder r12 = new java.lang.StringBuilder     // Catch:{ all -> 0x0991 }
            r12.<init>()     // Catch:{ all -> 0x0991 }
            java.lang.String r13 = "New package fails restrict-update check: "
            r12.append(r13)     // Catch:{ all -> 0x0991 }
            r12.append(r6)     // Catch:{ all -> 0x0991 }
            java.lang.String r12 = r12.toString()     // Catch:{ all -> 0x0991 }
            r13 = -2
            r11.<init>((int) r13, (java.lang.String) r12)     // Catch:{ all -> 0x0991 }
            throw r11     // Catch:{ all -> 0x0991 }
        L_0x0972:
            r0 = move-exception
            r9 = r0
            goto L_0x0979
        L_0x0975:
            r0 = move-exception
            r16 = r13
            r9 = r0
        L_0x0979:
            com.android.server.pm.PackageManagerService$PrepareFailure r11 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x0991 }
            java.lang.StringBuilder r12 = new java.lang.StringBuilder     // Catch:{ all -> 0x0991 }
            r12.<init>()     // Catch:{ all -> 0x0991 }
            java.lang.String r13 = "Could not compute hash: "
            r12.append(r13)     // Catch:{ all -> 0x0991 }
            r12.append(r6)     // Catch:{ all -> 0x0991 }
            java.lang.String r12 = r12.toString()     // Catch:{ all -> 0x0991 }
            r13 = -2
            r11.<init>((int) r13, (java.lang.String) r12)     // Catch:{ all -> 0x0991 }
            throw r11     // Catch:{ all -> 0x0991 }
        L_0x0991:
            r0 = move-exception
            r2 = r0
            r46 = r3
            r31 = r4
            r20 = r5
            r44 = r6
            goto L_0x0cb0
        L_0x099d:
            r0 = move-exception
            r16 = r13
            r2 = r0
            r46 = r3
            r31 = r4
            r20 = r5
            r44 = r6
            goto L_0x0cb0
        L_0x09ab:
            r16 = r13
        L_0x09ad:
            java.lang.String r9 = r1.getParentOrChildPackageChangedSharedUser(r7, r15)     // Catch:{ all -> 0x0c60 }
            if (r9 != 0) goto L_0x0c34
            com.android.server.pm.UserManagerService r11 = sUserManager     // Catch:{ all -> 0x0c60 }
            int[] r11 = r11.getUserIds()     // Catch:{ all -> 0x0c60 }
            r12 = 1
            int[] r13 = r8.queryInstalledUsers(r11, r12)     // Catch:{ all -> 0x0c60 }
            r12 = r13
            if (r5 == 0) goto L_0x0a69
            android.os.UserHandle r13 = r2.user     // Catch:{ all -> 0x0a5d }
            if (r13 == 0) goto L_0x0a1c
            android.os.UserHandle r13 = r2.user     // Catch:{ all -> 0x0a5d }
            int r13 = r13.getIdentifier()     // Catch:{ all -> 0x0a5d }
            r20 = r5
            r5 = -1
            if (r13 != r5) goto L_0x09d4
            r31 = r4
            goto L_0x0a20
        L_0x09d4:
            android.os.UserHandle r5 = r2.user     // Catch:{ all -> 0x0a12 }
            int r5 = r5.getIdentifier()     // Catch:{ all -> 0x0a12 }
            boolean r5 = r8.getInstantApp(r5)     // Catch:{ all -> 0x0a12 }
            if (r5 == 0) goto L_0x09e4
            r31 = r4
            goto L_0x0a6d
        L_0x09e4:
            java.lang.String r5 = "PackageManager"
            java.lang.StringBuilder r13 = new java.lang.StringBuilder     // Catch:{ all -> 0x0a12 }
            r13.<init>()     // Catch:{ all -> 0x0a12 }
            r31 = r4
            java.lang.String r4 = "Can't replace full app with instant app: "
            r13.append(r4)     // Catch:{ all -> 0x0a55 }
            r13.append(r6)     // Catch:{ all -> 0x0a55 }
            java.lang.String r4 = " for user: "
            r13.append(r4)     // Catch:{ all -> 0x0a55 }
            android.os.UserHandle r4 = r2.user     // Catch:{ all -> 0x0a55 }
            int r4 = r4.getIdentifier()     // Catch:{ all -> 0x0a55 }
            r13.append(r4)     // Catch:{ all -> 0x0a55 }
            java.lang.String r4 = r13.toString()     // Catch:{ all -> 0x0a55 }
            android.util.Slog.w(r5, r4)     // Catch:{ all -> 0x0a55 }
            com.android.server.pm.PackageManagerService$PrepareFailure r4 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x0a55 }
            r5 = -116(0xffffffffffffff8c, float:NaN)
            r4.<init>(r5)     // Catch:{ all -> 0x0a55 }
            throw r4     // Catch:{ all -> 0x0a55 }
        L_0x0a12:
            r0 = move-exception
            r31 = r4
            r2 = r0
            r46 = r3
            r44 = r6
            goto L_0x0cb0
        L_0x0a1c:
            r31 = r4
            r20 = r5
        L_0x0a20:
            int r4 = r11.length     // Catch:{ all -> 0x0a55 }
            r5 = 0
        L_0x0a22:
            if (r5 >= r4) goto L_0x0a6d
            r13 = r11[r5]     // Catch:{ all -> 0x0a55 }
            boolean r22 = r8.getInstantApp(r13)     // Catch:{ all -> 0x0a55 }
            if (r22 == 0) goto L_0x0a2f
            int r5 = r5 + 1
            goto L_0x0a22
        L_0x0a2f:
            java.lang.String r4 = "PackageManager"
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ all -> 0x0a55 }
            r5.<init>()     // Catch:{ all -> 0x0a55 }
            java.lang.String r2 = "Can't replace full app with instant app: "
            r5.append(r2)     // Catch:{ all -> 0x0a55 }
            r5.append(r6)     // Catch:{ all -> 0x0a55 }
            java.lang.String r2 = " for user: "
            r5.append(r2)     // Catch:{ all -> 0x0a55 }
            r5.append(r13)     // Catch:{ all -> 0x0a55 }
            java.lang.String r2 = r5.toString()     // Catch:{ all -> 0x0a55 }
            android.util.Slog.w(r4, r2)     // Catch:{ all -> 0x0a55 }
            com.android.server.pm.PackageManagerService$PrepareFailure r2 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x0a55 }
            r4 = -116(0xffffffffffffff8c, float:NaN)
            r2.<init>(r4)     // Catch:{ all -> 0x0a55 }
            throw r2     // Catch:{ all -> 0x0a55 }
        L_0x0a55:
            r0 = move-exception
            r2 = r0
            r46 = r3
            r44 = r6
            goto L_0x0cb0
        L_0x0a5d:
            r0 = move-exception
            r31 = r4
            r20 = r5
            r2 = r0
            r46 = r3
            r44 = r6
            goto L_0x0cb0
        L_0x0a69:
            r31 = r4
            r20 = r5
        L_0x0a6d:
            monitor-exit(r10)     // Catch:{ all -> 0x0c2c }
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r2 = new com.android.server.pm.PackageManagerService$PackageRemovedInfo     // Catch:{ all -> 0x0c1c }
            r2.<init>(r1)     // Catch:{ all -> 0x0c1c }
            r14.removedInfo = r2     // Catch:{ all -> 0x0c1c }
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r2 = r14.removedInfo     // Catch:{ all -> 0x0c1c }
            android.content.pm.ApplicationInfo r4 = r7.applicationInfo     // Catch:{ all -> 0x0c1c }
            int r4 = r4.uid     // Catch:{ all -> 0x0c1c }
            r2.uid = r4     // Catch:{ all -> 0x0c1c }
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r2 = r14.removedInfo     // Catch:{ all -> 0x0c1c }
            java.lang.String r4 = r7.packageName     // Catch:{ all -> 0x0c1c }
            r2.removedPackage = r4     // Catch:{ all -> 0x0c1c }
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r2 = r14.removedInfo     // Catch:{ all -> 0x0c1c }
            java.lang.String r4 = r8.installerPackageName     // Catch:{ all -> 0x0c1c }
            r2.installerPackageName = r4     // Catch:{ all -> 0x0c1c }
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r2 = r14.removedInfo     // Catch:{ all -> 0x0c1c }
            java.lang.String r4 = r15.staticSharedLibName     // Catch:{ all -> 0x0c1c }
            if (r4 == 0) goto L_0x0a91
            r4 = 1
            goto L_0x0a92
        L_0x0a91:
            r4 = 0
        L_0x0a92:
            r2.isStaticSharedLib = r4     // Catch:{ all -> 0x0c1c }
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r2 = r14.removedInfo     // Catch:{ all -> 0x0c1c }
            r4 = 1
            r2.isUpdate = r4     // Catch:{ all -> 0x0c1c }
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r2 = r14.removedInfo     // Catch:{ all -> 0x0c1c }
            r2.origUsers = r12     // Catch:{ all -> 0x0c1c }
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r2 = r14.removedInfo     // Catch:{ all -> 0x0c1c }
            android.util.SparseArray r4 = new android.util.SparseArray     // Catch:{ all -> 0x0c1c }
            int r5 = r12.length     // Catch:{ all -> 0x0c1c }
            r4.<init>(r5)     // Catch:{ all -> 0x0c1c }
            r2.installReasons = r4     // Catch:{ all -> 0x0c1c }
            r2 = 0
            r4 = r2
        L_0x0aa9:
            int r2 = r12.length     // Catch:{ all -> 0x0c1c }
            if (r4 >= r2) goto L_0x0ad0
            r2 = r12[r4]     // Catch:{ all -> 0x0ac0 }
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r5 = r14.removedInfo     // Catch:{ all -> 0x0ac0 }
            android.util.SparseArray<java.lang.Integer> r5 = r5.installReasons     // Catch:{ all -> 0x0ac0 }
            int r9 = r8.getInstallReason(r2)     // Catch:{ all -> 0x0ac0 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)     // Catch:{ all -> 0x0ac0 }
            r5.put(r2, r9)     // Catch:{ all -> 0x0ac0 }
            int r4 = r4 + 1
            goto L_0x0aa9
        L_0x0ac0:
            r0 = move-exception
            r2 = r0
            r46 = r3
            r44 = r15
            r41 = r28
            r28 = r42
            r42 = r43
            r43 = r16
            goto L_0x0dff
        L_0x0ad0:
            com.android.server.pm.Settings r2 = r1.mSettings     // Catch:{ all -> 0x0c1c }
            com.android.server.pm.PackageSetting[] r2 = r2.getChildSettingsLPr(r8)     // Catch:{ all -> 0x0c1c }
            if (r2 == 0) goto L_0x0b85
            int r4 = r2.length     // Catch:{ all -> 0x0ac0 }
            r5 = 0
        L_0x0ada:
            if (r5 >= r4) goto L_0x0b7e
            r9 = r2[r5]     // Catch:{ all -> 0x0ac0 }
            r13 = 0
            if (r9 != 0) goto L_0x0ae6
            r18 = 0
            r10 = r18
            goto L_0x0ae8
        L_0x0ae6:
            android.content.pm.PackageParser$Package r10 = r9.pkg     // Catch:{ all -> 0x0ac0 }
        L_0x0ae8:
            r21 = r2
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageInstalledInfo> r2 = r14.addedChildPackages     // Catch:{ all -> 0x0ac0 }
            if (r2 == 0) goto L_0x0b26
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageInstalledInfo> r2 = r14.addedChildPackages     // Catch:{ all -> 0x0ac0 }
            r22 = r4
            java.lang.String r4 = r10.packageName     // Catch:{ all -> 0x0ac0 }
            java.lang.Object r2 = r2.get(r4)     // Catch:{ all -> 0x0ac0 }
            com.android.server.pm.PackageManagerService$PackageInstalledInfo r2 = (com.android.server.pm.PackageManagerService.PackageInstalledInfo) r2     // Catch:{ all -> 0x0ac0 }
            if (r2 == 0) goto L_0x0b23
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r4 = r2.removedInfo     // Catch:{ all -> 0x0ac0 }
            r44 = r6
            android.content.pm.ApplicationInfo r6 = r10.applicationInfo     // Catch:{ all -> 0x0ac0 }
            int r6 = r6.uid     // Catch:{ all -> 0x0ac0 }
            r4.uid = r6     // Catch:{ all -> 0x0ac0 }
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r4 = r2.removedInfo     // Catch:{ all -> 0x0ac0 }
            java.lang.String r6 = r10.packageName     // Catch:{ all -> 0x0ac0 }
            r4.removedPackage = r6     // Catch:{ all -> 0x0ac0 }
            if (r9 == 0) goto L_0x0b14
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r4 = r2.removedInfo     // Catch:{ all -> 0x0ac0 }
            java.lang.String r6 = r9.installerPackageName     // Catch:{ all -> 0x0ac0 }
            r4.installerPackageName = r6     // Catch:{ all -> 0x0ac0 }
        L_0x0b14:
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r4 = r2.removedInfo     // Catch:{ all -> 0x0ac0 }
            r6 = 1
            r4.isUpdate = r6     // Catch:{ all -> 0x0ac0 }
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r4 = r2.removedInfo     // Catch:{ all -> 0x0ac0 }
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r6 = r14.removedInfo     // Catch:{ all -> 0x0ac0 }
            android.util.SparseArray<java.lang.Integer> r6 = r6.installReasons     // Catch:{ all -> 0x0ac0 }
            r4.installReasons = r6     // Catch:{ all -> 0x0ac0 }
            r13 = 1
            goto L_0x0b2a
        L_0x0b23:
            r44 = r6
            goto L_0x0b2a
        L_0x0b26:
            r22 = r4
            r44 = r6
        L_0x0b2a:
            if (r13 != 0) goto L_0x0b70
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r2 = new com.android.server.pm.PackageManagerService$PackageRemovedInfo     // Catch:{ all -> 0x0ac0 }
            r2.<init>(r1)     // Catch:{ all -> 0x0ac0 }
            java.lang.String r4 = r10.packageName     // Catch:{ all -> 0x0ac0 }
            r2.removedPackage = r4     // Catch:{ all -> 0x0ac0 }
            if (r9 == 0) goto L_0x0b3b
            java.lang.String r4 = r9.installerPackageName     // Catch:{ all -> 0x0ac0 }
            r2.installerPackageName = r4     // Catch:{ all -> 0x0ac0 }
        L_0x0b3b:
            r4 = 0
            r2.isUpdate = r4     // Catch:{ all -> 0x0ac0 }
            r6 = 1
            r2.dataRemoved = r6     // Catch:{ all -> 0x0ac0 }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r6 = r1.mPackages     // Catch:{ all -> 0x0ac0 }
            monitor-enter(r6)     // Catch:{ all -> 0x0ac0 }
            if (r9 == 0) goto L_0x0b50
            r45 = r8
            r4 = 1
            int[] r8 = r9.queryInstalledUsers(r11, r4)     // Catch:{ all -> 0x0b6c }
            r2.origUsers = r8     // Catch:{ all -> 0x0b6c }
            goto L_0x0b52
        L_0x0b50:
            r45 = r8
        L_0x0b52:
            monitor-exit(r6)     // Catch:{ all -> 0x0b6c }
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r4 = r14.removedInfo     // Catch:{ all -> 0x0ac0 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageRemovedInfo> r4 = r4.removedChildPackages     // Catch:{ all -> 0x0ac0 }
            if (r4 != 0) goto L_0x0b62
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r4 = r14.removedInfo     // Catch:{ all -> 0x0ac0 }
            android.util.ArrayMap r6 = new android.util.ArrayMap     // Catch:{ all -> 0x0ac0 }
            r6.<init>()     // Catch:{ all -> 0x0ac0 }
            r4.removedChildPackages = r6     // Catch:{ all -> 0x0ac0 }
        L_0x0b62:
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r4 = r14.removedInfo     // Catch:{ all -> 0x0ac0 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageManagerService$PackageRemovedInfo> r4 = r4.removedChildPackages     // Catch:{ all -> 0x0ac0 }
            java.lang.String r6 = r10.packageName     // Catch:{ all -> 0x0ac0 }
            r4.put(r6, r2)     // Catch:{ all -> 0x0ac0 }
            goto L_0x0b72
        L_0x0b6c:
            r0 = move-exception
            r4 = r0
            monitor-exit(r6)     // Catch:{ all -> 0x0b6c }
            throw r4     // Catch:{ all -> 0x0ac0 }
        L_0x0b70:
            r45 = r8
        L_0x0b72:
            int r5 = r5 + 1
            r2 = r21
            r4 = r22
            r6 = r44
            r8 = r45
            goto L_0x0ada
        L_0x0b7e:
            r21 = r2
            r44 = r6
            r45 = r8
            goto L_0x0b8b
        L_0x0b85:
            r21 = r2
            r44 = r6
            r45 = r8
        L_0x0b8b:
            boolean r2 = isSystemApp((android.content.pm.PackageParser.Package) r7)     // Catch:{ all -> 0x0c1c }
            if (r2 == 0) goto L_0x0bed
            boolean r4 = isPrivilegedApp(r7)     // Catch:{ all -> 0x0c1c }
            boolean r5 = isOemApp(r7)     // Catch:{ all -> 0x0c1c }
            boolean r6 = isVendorApp(r7)     // Catch:{ all -> 0x0c1c }
            boolean r8 = isProductApp(r7)     // Catch:{ all -> 0x0c1c }
            boolean r9 = isOdmApp(r7)     // Catch:{ all -> 0x0c1c }
            r10 = r28
            r13 = 131072(0x20000, float:1.83671E-40)
            r13 = r13 | r3
            if (r4 == 0) goto L_0x0baf
            r22 = 262144(0x40000, float:3.67342E-40)
            goto L_0x0bb1
        L_0x0baf:
            r22 = 0
        L_0x0bb1:
            r13 = r13 | r22
            if (r5 == 0) goto L_0x0bb8
            r22 = 524288(0x80000, float:7.34684E-40)
            goto L_0x0bba
        L_0x0bb8:
            r22 = 0
        L_0x0bba:
            r13 = r13 | r22
            if (r6 == 0) goto L_0x0bc1
            r22 = 1048576(0x100000, float:1.469368E-39)
            goto L_0x0bc3
        L_0x0bc1:
            r22 = 0
        L_0x0bc3:
            r13 = r13 | r22
            if (r8 == 0) goto L_0x0bca
            r22 = 2097152(0x200000, float:2.938736E-39)
            goto L_0x0bcc
        L_0x0bca:
            r22 = 0
        L_0x0bcc:
            r13 = r13 | r22
            if (r9 == 0) goto L_0x0bd3
            r18 = 8388608(0x800000, float:1.17549435E-38)
            goto L_0x0bd5
        L_0x0bd3:
            r18 = 0
        L_0x0bd5:
            r13 = r13 | r18
            r18 = r2
            r2 = 1
            r14.setReturnCode(r2)     // Catch:{ all -> 0x0c1c }
            r2 = 128(0x80, float:1.794E-43)
            r46 = r3
            r3 = 128(0x80, float:1.794E-43)
            r15.setApplicationInfoFlags(r2, r3)     // Catch:{ all -> 0x0cb2 }
            r33 = r10
            r19 = r13
            r2 = r35
            goto L_0x0c02
        L_0x0bed:
            r18 = r2
            r46 = r3
            r2 = 1
            java.lang.String r3 = r7.packageName     // Catch:{ all -> 0x0c0c }
            r4 = 1
            r5 = 0
            r6 = 0
            java.lang.Object r8 = r15.mExtras     // Catch:{ all -> 0x0c0c }
            if (r8 == 0) goto L_0x0c01
            java.lang.Object r8 = r15.mExtras     // Catch:{ all -> 0x0c0c }
            com.android.server.pm.PackageSetting r8 = (com.android.server.pm.PackageSetting) r8     // Catch:{ all -> 0x0c0c }
            long r8 = r8.lastUpdateTime     // Catch:{ all -> 0x0c0c }
        L_0x0c01:
        L_0x0c02:
            r38 = r18
            r3 = r19
            r35 = r21
            r4 = r40
            goto L_0x0d27
        L_0x0c0c:
            r0 = move-exception
            r35 = r2
            r44 = r15
            r41 = r28
            r28 = r42
            r42 = r43
            r2 = r0
            r43 = r16
            goto L_0x0dff
        L_0x0c1c:
            r0 = move-exception
            r46 = r3
            r2 = r0
            r44 = r15
            r41 = r28
            r28 = r42
            r42 = r43
            r43 = r16
            goto L_0x0dff
        L_0x0c2c:
            r0 = move-exception
            r46 = r3
            r44 = r6
            r2 = r0
            goto L_0x0cb0
        L_0x0c34:
            r46 = r3
            r31 = r4
            r20 = r5
            r44 = r6
            r45 = r8
            com.android.server.pm.PackageManagerService$PrepareFailure r2 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x0cc0 }
            r3 = -8
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x0cc0 }
            r4.<init>()     // Catch:{ all -> 0x0cc0 }
            java.lang.String r5 = "Package "
            r4.append(r5)     // Catch:{ all -> 0x0cc0 }
            r4.append(r9)     // Catch:{ all -> 0x0cc0 }
            java.lang.String r5 = " tried to change user "
            r4.append(r5)     // Catch:{ all -> 0x0cc0 }
            java.lang.String r5 = r7.mSharedUserId     // Catch:{ all -> 0x0cc0 }
            r4.append(r5)     // Catch:{ all -> 0x0cc0 }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x0cc0 }
            r2.<init>((int) r3, (java.lang.String) r4)     // Catch:{ all -> 0x0cc0 }
            throw r2     // Catch:{ all -> 0x0cc0 }
        L_0x0c60:
            r0 = move-exception
            r46 = r3
            r31 = r4
            r20 = r5
            r44 = r6
            r2 = r0
            goto L_0x0cb0
        L_0x0c6b:
            r0 = move-exception
            r46 = r3
            r31 = r4
            r20 = r5
            r44 = r6
            r16 = r13
            r2 = r0
            goto L_0x0cb0
        L_0x0c78:
            r0 = move-exception
            r46 = r3
            r31 = r4
            r20 = r5
            r44 = r6
            r42 = r11
            r43 = r12
            r16 = r13
            r2 = r0
            goto L_0x0cb0
        L_0x0c89:
            r0 = move-exception
            r46 = r3
            r31 = r4
            r20 = r5
            r44 = r6
            r39 = r9
            r42 = r11
            r43 = r12
            r16 = r13
            r2 = r0
            goto L_0x0cb0
        L_0x0c9c:
            r0 = move-exception
            r46 = r3
            r31 = r4
            r20 = r5
            r44 = r6
            r38 = r8
            r39 = r9
            r42 = r11
            r43 = r12
            r16 = r13
            r2 = r0
        L_0x0cb0:
            monitor-exit(r10)     // Catch:{ all -> 0x0cc0 }
            throw r2     // Catch:{ all -> 0x0cb2 }
        L_0x0cb2:
            r0 = move-exception
            r2 = r0
            r44 = r15
            r41 = r28
            r28 = r42
            r42 = r43
            r43 = r16
            goto L_0x0dff
        L_0x0cc0:
            r0 = move-exception
            r2 = r0
            goto L_0x0cb0
        L_0x0cc3:
            r0 = move-exception
            r46 = r3
            r31 = r4
            r35 = r7
            r2 = r0
            r42 = r12
            r43 = r13
            r44 = r15
            r41 = r28
            r28 = r11
            goto L_0x0dff
        L_0x0cd7:
            r0 = move-exception
            r46 = r3
            r31 = r4
            r34 = r5
            r35 = r7
            r2 = r0
            r42 = r12
            r43 = r13
            r44 = r15
            r41 = r28
            r28 = r11
            goto L_0x0dff
        L_0x0ced:
            r46 = r3
            r31 = r4
            r34 = r5
            r36 = r6
            r35 = r7
            r38 = r8
            r42 = r11
            r43 = r12
            r16 = r13
            r2 = 0
            r3 = 0
            r4 = 0
            r7 = 0
            r5 = 0
            java.lang.String r6 = r15.packageName     // Catch:{ all -> 0x0df1 }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r8 = r1.mPackages     // Catch:{ all -> 0x0df1 }
            monitor-enter(r8)     // Catch:{ all -> 0x0df1 }
            com.android.server.pm.Settings r10 = r1.mSettings     // Catch:{ all -> 0x0ddb }
            java.lang.String r10 = r10.getRenamedPackageLPr(r6)     // Catch:{ all -> 0x0ddb }
            if (r10 != 0) goto L_0x0dac
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r11 = r1.mPackages     // Catch:{ all -> 0x0d9d }
            boolean r11 = r11.containsKey(r6)     // Catch:{ all -> 0x0d9d }
            if (r11 != 0) goto L_0x0d76
            monitor-exit(r8)     // Catch:{ all -> 0x0d9d }
            r45 = r2
            r35 = r3
            r37 = r5
            r2 = r7
            r39 = r9
            r36 = r10
            r3 = r19
        L_0x0d27:
            r34 = 0
            com.android.server.pm.PackageManagerService$PrepareResult r40 = new com.android.server.pm.PackageManagerService$PrepareResult     // Catch:{ all -> 0x0d66 }
            r13 = r48
            int r6 = r13.installReason     // Catch:{ all -> 0x0d66 }
            android.os.UserHandle r9 = r13.user     // Catch:{ all -> 0x0d66 }
            r22 = 0
            r5 = r40
            r7 = r39
            r8 = r27
            r10 = r2
            r41 = r28
            r28 = r42
            r11 = r3
            r42 = r43
            r12 = r33
            r43 = r16
            r13 = r37
            r14 = r15
            r44 = r15
            r15 = r2
            r16 = r38
            r17 = r36
            r18 = r31
            r19 = r45
            r20 = r4
            r21 = r35
            r5.<init>(r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21)     // Catch:{ all -> 0x0d60 }
            if (r34 == 0) goto L_0x0d5f
            r31.close()
        L_0x0d5f:
            return r40
        L_0x0d60:
            r0 = move-exception
            r35 = r2
            r2 = r0
            goto L_0x0dff
        L_0x0d66:
            r0 = move-exception
            r44 = r15
            r41 = r28
            r28 = r42
            r42 = r43
            r43 = r16
            r35 = r2
            r2 = r0
            goto L_0x0dff
        L_0x0d76:
            r44 = r15
            r41 = r28
            r28 = r42
            r42 = r43
            r43 = r16
            com.android.server.pm.PackageManagerService$PrepareFailure r11 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x0dd6 }
            java.lang.StringBuilder r12 = new java.lang.StringBuilder     // Catch:{ all -> 0x0dd6 }
            r12.<init>()     // Catch:{ all -> 0x0dd6 }
            java.lang.String r13 = "Attempt to re-install "
            r12.append(r13)     // Catch:{ all -> 0x0dd6 }
            r12.append(r6)     // Catch:{ all -> 0x0dd6 }
            java.lang.String r13 = " without first uninstalling."
            r12.append(r13)     // Catch:{ all -> 0x0dd6 }
            java.lang.String r12 = r12.toString()     // Catch:{ all -> 0x0dd6 }
            r13 = -1
            r11.<init>((int) r13, (java.lang.String) r12)     // Catch:{ all -> 0x0dd6 }
            throw r11     // Catch:{ all -> 0x0dd6 }
        L_0x0d9d:
            r0 = move-exception
            r44 = r15
            r41 = r28
            r28 = r42
            r42 = r43
            r43 = r16
            r36 = r10
            r10 = r0
            goto L_0x0de7
        L_0x0dac:
            r44 = r15
            r41 = r28
            r28 = r42
            r42 = r43
            r43 = r16
            com.android.server.pm.PackageManagerService$PrepareFailure r11 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x0dd6 }
            java.lang.StringBuilder r12 = new java.lang.StringBuilder     // Catch:{ all -> 0x0dd6 }
            r12.<init>()     // Catch:{ all -> 0x0dd6 }
            java.lang.String r13 = "Attempt to re-install "
            r12.append(r13)     // Catch:{ all -> 0x0dd6 }
            r12.append(r6)     // Catch:{ all -> 0x0dd6 }
            java.lang.String r13 = " without first uninstalling package running as "
            r12.append(r13)     // Catch:{ all -> 0x0dd6 }
            r12.append(r10)     // Catch:{ all -> 0x0dd6 }
            java.lang.String r12 = r12.toString()     // Catch:{ all -> 0x0dd6 }
            r13 = -1
            r11.<init>((int) r13, (java.lang.String) r12)     // Catch:{ all -> 0x0dd6 }
            throw r11     // Catch:{ all -> 0x0dd6 }
        L_0x0dd6:
            r0 = move-exception
            r36 = r10
            r10 = r0
            goto L_0x0de7
        L_0x0ddb:
            r0 = move-exception
            r44 = r15
            r41 = r28
            r28 = r42
            r42 = r43
            r43 = r16
            r10 = r0
        L_0x0de7:
            monitor-exit(r8)     // Catch:{ all -> 0x0dee }
            throw r10     // Catch:{ all -> 0x0de9 }
        L_0x0de9:
            r0 = move-exception
            r2 = r0
            r35 = r7
            goto L_0x0dff
        L_0x0dee:
            r0 = move-exception
            r10 = r0
            goto L_0x0de7
        L_0x0df1:
            r0 = move-exception
            r44 = r15
            r41 = r28
            r28 = r42
            r42 = r43
            r43 = r16
            r2 = r0
            r35 = r7
        L_0x0dff:
            if (r34 == 0) goto L_0x0e04
            r31.close()
        L_0x0e04:
            throw r2
        L_0x0e05:
            r0 = move-exception
            r46 = r3
            r42 = r12
            r43 = r13
            r44 = r15
            r41 = r28
            r28 = r33
            r2 = r0
            com.android.server.pm.PackageManagerService$PrepareFailure r3 = new com.android.server.pm.PackageManagerService$PrepareFailure
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r6 = "Failed to set up verity: "
            r5.append(r6)
            r5.append(r2)
            java.lang.String r5 = r5.toString()
            r3.<init>((int) r4, (java.lang.String) r5)
            throw r3
        L_0x0e2a:
            r46 = r3
            com.android.server.pm.PackageManagerService$PrepareFailure r2 = new com.android.server.pm.PackageManagerService$PrepareFailure
            r3 = -4
            java.lang.String r4 = "Failed rename"
            r2.<init>((int) r3, (java.lang.String) r4)
            throw r2
        L_0x0e35:
            r0 = move-exception
            r42 = r12
            r43 = r13
            r44 = r15
            r41 = r28
            r28 = r33
            r2 = r0
        L_0x0e41:
            java.lang.String r3 = "PackageManager"
            java.lang.String r6 = "Error deriving application ABI"
            android.util.Slog.e(r3, r6, r2)
            com.android.server.pm.PackageManagerService$PrepareFailure r3 = new com.android.server.pm.PackageManagerService$PrepareFailure
            java.lang.String r6 = "Error deriving application ABI"
            r3.<init>((int) r4, (java.lang.String) r6)
            throw r3
        L_0x0e50:
            r0 = move-exception
            r42 = r12
            r43 = r13
            r44 = r15
            r41 = r28
            r28 = r33
            r2 = r0
            r6 = r30
            r7 = r35
            r5 = r43
            goto L_0x0e77
        L_0x0e63:
            r0 = move-exception
            r35 = r7
            r42 = r12
            r43 = r13
            r32 = r14
            r44 = r15
            r41 = r28
            r28 = r4
            r2 = r0
            r6 = r30
            r5 = r43
        L_0x0e77:
            monitor-exit(r9)     // Catch:{ all -> 0x0e79 }
            throw r2
        L_0x0e79:
            r0 = move-exception
            r2 = r0
            goto L_0x0e77
        L_0x0e7c:
            r41 = r28
            r28 = r4
            com.android.server.pm.PackageManagerService$PrepareFailure r2 = new com.android.server.pm.PackageManagerService$PrepareFailure
            java.lang.String r3 = "Install app is rejected by enterprise"
            r4 = -116(0xffffffffffffff8c, float:NaN)
            r2.<init>((int) r4, (java.lang.String) r3)
            throw r2
        L_0x0e8a:
            r0 = move-exception
            r42 = r12
            r32 = r14
            r44 = r15
            r41 = r28
            r28 = r4
            r2 = r0
            goto L_0x0ea3
        L_0x0e97:
            r0 = move-exception
            r44 = r10
            r42 = r12
            r32 = r14
            r41 = r28
            r28 = r4
            r2 = r0
        L_0x0ea3:
            com.android.server.pm.PackageManagerService$PrepareFailure r3 = new com.android.server.pm.PackageManagerService$PrepareFailure
            java.lang.String r4 = "Failed collect during installPackageLI"
            r3.<init>((java.lang.String) r4, (java.lang.Exception) r2)
            throw r3
        L_0x0eab:
            r0 = move-exception
            r28 = r4
            r22 = r9
            r41 = r11
            r42 = r12
            r26 = r13
            r32 = r14
            r27 = r15
            r2 = r0
            goto L_0x0ed6
        L_0x0ebc:
            r0 = move-exception
            r28 = r4
            r22 = r9
            r41 = r11
            r42 = r12
            r26 = r13
            r32 = r14
            r27 = r15
            r2 = r0
            com.android.server.pm.PackageManagerService$PrepareFailure r3 = new com.android.server.pm.PackageManagerService$PrepareFailure     // Catch:{ all -> 0x0ed4 }
            java.lang.String r4 = "Failed parse during installPackageLI"
            r3.<init>((java.lang.String) r4, (java.lang.Exception) r2)     // Catch:{ all -> 0x0ed4 }
            throw r3     // Catch:{ all -> 0x0ed4 }
        L_0x0ed4:
            r0 = move-exception
            r2 = r0
        L_0x0ed6:
            android.os.Trace.traceEnd(r6)
            throw r2
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.preparePackageLI(com.android.server.pm.PackageManagerService$InstallArgs, com.android.server.pm.PackageManagerService$PackageInstalledInfo):com.android.server.pm.PackageManagerService$PrepareResult");
    }

    private void setUpFsVerityIfPossible(PackageParser.Package pkg) throws Installer.InstallerException, PrepareFailure, IOException, DigestException, NoSuchAlgorithmException {
        byte[] rootHash;
        boolean standardMode = PackageManagerServiceUtils.isApkVerityEnabled();
        boolean legacyMode = PackageManagerServiceUtils.isLegacyApkVerityEnabled();
        if (standardMode || legacyMode) {
            ArrayMap<String, String> fsverityCandidates = new ArrayMap<>();
            int i = 0;
            if (legacyMode) {
                synchronized (this.mPackages) {
                    PackageSetting ps = this.mSettings.mPackages.get(pkg.packageName);
                    if (ps != null && ps.isPrivileged()) {
                        fsverityCandidates.put(pkg.baseCodePath, (Object) null);
                        if (pkg.splitCodePaths != null) {
                            String[] strArr = pkg.splitCodePaths;
                            int length = strArr.length;
                            while (i < length) {
                                fsverityCandidates.put(strArr[i], (Object) null);
                                i++;
                            }
                        }
                    }
                }
            } else {
                fsverityCandidates.put(pkg.baseCodePath, VerityUtils.getFsveritySignatureFilePath(pkg.baseCodePath));
                String dmPath = DexMetadataHelper.buildDexMetadataPathForApk(pkg.baseCodePath);
                if (new File(dmPath).exists()) {
                    fsverityCandidates.put(dmPath, VerityUtils.getFsveritySignatureFilePath(dmPath));
                }
                if (pkg.splitCodePaths != null) {
                    String[] strArr2 = pkg.splitCodePaths;
                    int length2 = strArr2.length;
                    while (i < length2) {
                        String path = strArr2[i];
                        fsverityCandidates.put(path, VerityUtils.getFsveritySignatureFilePath(path));
                        String splitDmPath = DexMetadataHelper.buildDexMetadataPathForApk(path);
                        if (new File(splitDmPath).exists()) {
                            fsverityCandidates.put(splitDmPath, VerityUtils.getFsveritySignatureFilePath(splitDmPath));
                        }
                        i++;
                    }
                }
            }
            for (Map.Entry<String, String> entry : fsverityCandidates.entrySet()) {
                String filePath = entry.getKey();
                String signaturePath = entry.getValue();
                if (legacyMode) {
                    VerityUtils.SetupResult result = VerityUtils.generateApkVeritySetupData(filePath);
                    if (result.isOk()) {
                        if (Build.IS_DEBUGGABLE) {
                            Slog.i(TAG, "Enabling verity to " + filePath);
                        }
                        FileDescriptor fd = result.getUnownedFileDescriptor();
                        try {
                            rootHash = VerityUtils.generateApkVerityRootHash(filePath);
                            this.mInstaller.assertFsverityRootHashMatches(filePath, rootHash);
                        } catch (Installer.InstallerException e) {
                            this.mInstaller.installApkVerity(filePath, fd, result.getContentSize());
                            this.mInstaller.assertFsverityRootHashMatches(filePath, rootHash);
                        } catch (Throwable th) {
                            IoUtils.closeQuietly(fd);
                            throw th;
                        }
                        IoUtils.closeQuietly(fd);
                    } else if (result.isFailed()) {
                        throw new PrepareFailure(-118, "Failed to generate verity");
                    }
                } else if (new File(signaturePath).exists() && !VerityUtils.hasFsverity(filePath)) {
                    try {
                        VerityUtils.setUpFsverity(filePath, signaturePath);
                    } catch (IOException | SecurityException | DigestException | NoSuchAlgorithmException e2) {
                        throw new PrepareFailure(-118, "Failed to enable fs-verity: " + e2);
                    }
                }
            }
        }
    }

    private void startIntentFilterVerifications(int userId, boolean replacing, PackageParser.Package pkg) {
        ComponentName componentName = this.mIntentFilterVerifierComponent;
        if (componentName == null) {
            Slog.w(TAG, "No IntentFilter verification will not be done as there is no IntentFilterVerifier available!");
            return;
        }
        int childCount = 0;
        int verifierUid = getPackageUid(componentName.getPackageName(), 268435456, userId == -1 ? 0 : userId);
        Message msg = this.mHandler.obtainMessage(17);
        msg.obj = new IFVerificationParams(pkg, replacing, userId, verifierUid);
        this.mHandler.sendMessage(msg);
        if (pkg.childPackages != null) {
            childCount = pkg.childPackages.size();
        }
        for (int i = 0; i < childCount; i++) {
            Message msg2 = this.mHandler.obtainMessage(17);
            msg2.obj = new IFVerificationParams((PackageParser.Package) pkg.childPackages.get(i), replacing, userId, verifierUid);
            this.mHandler.sendMessage(msg2);
        }
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:43:0x00ab, code lost:
        if (r5 <= 0) goto L_0x00b5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:0x00ad, code lost:
        r1.mIntentFilterVerifier.startVerifications(r19);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:0x00b5, code lost:
        r6 = r19;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:51:0x00bd, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:64:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:65:?, code lost:
        return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void verifyIntentFiltersIfNeeded(int r19, int r20, boolean r21, android.content.pm.PackageParser.Package r22) {
        /*
            r18 = this;
            r1 = r18
            r2 = r22
            java.util.ArrayList r0 = r2.activities
            int r3 = r0.size()
            if (r3 != 0) goto L_0x000d
            return
        L_0x000d:
            boolean r4 = hasDomainURLs(r22)
            if (r4 != 0) goto L_0x0014
            return
        L_0x0014:
            r5 = 0
            java.lang.String r12 = r2.packageName
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r13 = r1.mPackages
            monitor-enter(r13)
            if (r21 != 0) goto L_0x0026
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x00b8 }
            android.content.pm.IntentFilterVerificationInfo r0 = r0.getIntentFilterVerificationLPr(r12)     // Catch:{ all -> 0x00b8 }
            if (r0 == 0) goto L_0x0026
            monitor-exit(r13)     // Catch:{ all -> 0x00b8 }
            return
        L_0x0026:
            r0 = 0
            java.util.ArrayList r6 = r2.activities     // Catch:{ all -> 0x00b8 }
            java.util.Iterator r6 = r6.iterator()     // Catch:{ all -> 0x00b8 }
        L_0x002d:
            boolean r7 = r6.hasNext()     // Catch:{ all -> 0x00b8 }
            if (r7 == 0) goto L_0x005b
            java.lang.Object r7 = r6.next()     // Catch:{ all -> 0x00b8 }
            android.content.pm.PackageParser$Activity r7 = (android.content.pm.PackageParser.Activity) r7     // Catch:{ all -> 0x00b8 }
            java.util.ArrayList r8 = r7.intents     // Catch:{ all -> 0x00b8 }
            java.util.Iterator r8 = r8.iterator()     // Catch:{ all -> 0x00b8 }
        L_0x003f:
            boolean r9 = r8.hasNext()     // Catch:{ all -> 0x00b8 }
            if (r9 == 0) goto L_0x005a
            java.lang.Object r9 = r8.next()     // Catch:{ all -> 0x00b8 }
            android.content.pm.PackageParser$ActivityIntentInfo r9 = (android.content.pm.PackageParser.ActivityIntentInfo) r9     // Catch:{ all -> 0x00b8 }
            boolean r10 = r9.needsVerification()     // Catch:{ all -> 0x00b8 }
            if (r10 == 0) goto L_0x0059
            boolean r10 = r1.needsNetworkVerificationLPr(r9)     // Catch:{ all -> 0x00b8 }
            if (r10 == 0) goto L_0x0059
            r0 = 1
            goto L_0x005a
        L_0x0059:
            goto L_0x003f
        L_0x005a:
            goto L_0x002d
        L_0x005b:
            if (r0 == 0) goto L_0x00aa
            int r9 = r1.mIntentFilterVerificationToken     // Catch:{ all -> 0x00b8 }
            int r6 = r9 + 1
            r1.mIntentFilterVerificationToken = r6     // Catch:{ all -> 0x00b8 }
            java.util.ArrayList r6 = r2.activities     // Catch:{ all -> 0x00b8 }
            java.util.Iterator r14 = r6.iterator()     // Catch:{ all -> 0x00b8 }
        L_0x0069:
            boolean r6 = r14.hasNext()     // Catch:{ all -> 0x00b8 }
            if (r6 == 0) goto L_0x00aa
            java.lang.Object r6 = r14.next()     // Catch:{ all -> 0x00b8 }
            android.content.pm.PackageParser$Activity r6 = (android.content.pm.PackageParser.Activity) r6     // Catch:{ all -> 0x00b8 }
            r15 = r6
            java.util.ArrayList r6 = r15.intents     // Catch:{ all -> 0x00b8 }
            java.util.Iterator r16 = r6.iterator()     // Catch:{ all -> 0x00b8 }
        L_0x007c:
            boolean r6 = r16.hasNext()     // Catch:{ all -> 0x00b8 }
            if (r6 == 0) goto L_0x00a9
            java.lang.Object r6 = r16.next()     // Catch:{ all -> 0x00b8 }
            android.content.pm.PackageParser$ActivityIntentInfo r6 = (android.content.pm.PackageParser.ActivityIntentInfo) r6     // Catch:{ all -> 0x00b8 }
            r11 = r6
            r6 = 1
            boolean r6 = r11.handlesWebUris(r6)     // Catch:{ all -> 0x00b8 }
            if (r6 == 0) goto L_0x00a6
            boolean r6 = r1.needsNetworkVerificationLPr(r11)     // Catch:{ all -> 0x00b8 }
            if (r6 == 0) goto L_0x00a6
            com.android.server.pm.PackageManagerService$IntentFilterVerifier<android.content.pm.PackageParser$ActivityIntentInfo> r6 = r1.mIntentFilterVerifier     // Catch:{ all -> 0x00b8 }
            r7 = r20
            r8 = r19
            r10 = r11
            r17 = r11
            r11 = r12
            r6.addOneIntentFilterVerification(r7, r8, r9, r10, r11)     // Catch:{ all -> 0x00b8 }
            int r5 = r5 + 1
            goto L_0x00a8
        L_0x00a6:
            r17 = r11
        L_0x00a8:
            goto L_0x007c
        L_0x00a9:
            goto L_0x0069
        L_0x00aa:
            monitor-exit(r13)     // Catch:{ all -> 0x00b8 }
            if (r5 <= 0) goto L_0x00b5
            com.android.server.pm.PackageManagerService$IntentFilterVerifier<android.content.pm.PackageParser$ActivityIntentInfo> r0 = r1.mIntentFilterVerifier
            r6 = r19
            r0.startVerifications(r6)
            goto L_0x00b7
        L_0x00b5:
            r6 = r19
        L_0x00b7:
            return
        L_0x00b8:
            r0 = move-exception
            r6 = r19
        L_0x00bb:
            monitor-exit(r13)     // Catch:{ all -> 0x00bd }
            throw r0
        L_0x00bd:
            r0 = move-exception
            goto L_0x00bb
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.verifyIntentFiltersIfNeeded(int, int, boolean, android.content.pm.PackageParser$Package):void");
    }

    @GuardedBy({"mPackages"})
    private boolean needsNetworkVerificationLPr(PackageParser.ActivityIntentInfo filter) {
        int status;
        IntentFilterVerificationInfo ivi = this.mSettings.getIntentFilterVerificationLPr(filter.activity.getComponentName().getPackageName());
        if (ivi == null || (status = ivi.getStatus()) == 0 || status == 1 || status == 2) {
            return true;
        }
        return false;
    }

    private static boolean isMultiArch(ApplicationInfo info) {
        return (info.flags & Integer.MIN_VALUE) != 0;
    }

    /* access modifiers changed from: private */
    public static boolean isExternal(PackageParser.Package pkg) {
        return (pkg.applicationInfo.flags & 262144) != 0;
    }

    private static boolean isExternal(PackageSetting ps) {
        return (ps.pkgFlags & 262144) != 0;
    }

    private static boolean isSystemApp(PackageParser.Package pkg) {
        return (pkg.applicationInfo.flags & 1) != 0;
    }

    private static boolean isPrivilegedApp(PackageParser.Package pkg) {
        return (pkg.applicationInfo.privateFlags & 8) != 0;
    }

    private static boolean isOemApp(PackageParser.Package pkg) {
        return (pkg.applicationInfo.privateFlags & 131072) != 0;
    }

    private static boolean isVendorApp(PackageParser.Package pkg) {
        return (pkg.applicationInfo.privateFlags & 262144) != 0;
    }

    private static boolean isProductApp(PackageParser.Package pkg) {
        return (pkg.applicationInfo.privateFlags & 524288) != 0;
    }

    private static boolean isProductServicesApp(PackageParser.Package pkg) {
        return (pkg.applicationInfo.privateFlags & 2097152) != 0;
    }

    private static boolean isOdmApp(PackageParser.Package pkg) {
        return (pkg.applicationInfo.privateFlags & 1073741824) != 0;
    }

    private static boolean hasDomainURLs(PackageParser.Package pkg) {
        return (pkg.applicationInfo.privateFlags & 16) != 0;
    }

    private static boolean isSystemApp(PackageSetting ps) {
        return (ps.pkgFlags & 1) != 0;
    }

    private static boolean isUpdatedSystemApp(PackageSetting ps) {
        return (ps.pkgFlags & 128) != 0;
    }

    private Settings.VersionInfo getSettingsVersionForPackage(PackageParser.Package pkg) {
        if (!isExternal(pkg)) {
            return this.mSettings.getInternalVersion();
        }
        if (TextUtils.isEmpty(pkg.volumeUuid)) {
            return this.mSettings.getExternalVersion();
        }
        return this.mSettings.findOrCreateVersion(pkg.volumeUuid);
    }

    private void deleteTempPackageFiles() {
        $$Lambda$PackageManagerService$xKFHvZAUir1Y_lClMWZh87peKs8 r0 = $$Lambda$PackageManagerService$xKFHvZAUir1Y_lClMWZh87peKs8.INSTANCE;
    }

    static /* synthetic */ boolean lambda$deleteTempPackageFiles$15(File dir, String name) {
        return name.startsWith("vmdl") && name.endsWith(".tmp");
    }

    public void deletePackageAsUser(String packageName, int versionCode, IPackageDeleteObserver observer, int userId, int flags) {
        deletePackageVersioned(new VersionedPackage(packageName, versionCode), new PackageManager.LegacyPackageDeleteObserver(observer).getBinder(), userId, flags);
    }

    /* JADX INFO: finally extract failed */
    /* JADX WARNING: Code restructure failed: missing block: B:44:0x00f8, code lost:
        r0 = th;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void deletePackageVersioned(android.content.pm.VersionedPackage r26, android.content.pm.IPackageDeleteObserver2 r27, int r28, int r29) {
        /*
            r25 = this;
            r14 = r25
            r15 = r27
            r13 = r28
            int r12 = android.os.Binder.getCallingUid()
            android.content.Context r0 = r14.mContext
            java.lang.String r1 = "android.permission.DELETE_PACKAGES"
            r2 = 0
            r0.enforceCallingOrSelfPermission(r1, r2)
            boolean r16 = r14.canViewInstantApps(r12, r13)
            com.android.internal.util.Preconditions.checkNotNull(r26)
            com.android.internal.util.Preconditions.checkNotNull(r27)
            long r0 = r26.getLongVersionCode()
            r2 = -1
            r4 = 9223372036854775807(0x7fffffffffffffff, double:NaN)
            java.lang.String r6 = "versionCode must be >= -1"
            com.android.internal.util.Preconditions.checkArgumentInRange(r0, r2, r4, r6)
            java.lang.String r11 = r26.getPackageName()
            long r9 = r26.getLongVersionCode()
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r14.mPackages
            monitor-enter(r1)
            java.lang.String r0 = r14.resolveInternalPackageNameLPr(r11, r9)     // Catch:{ all -> 0x00ef }
            monitor-exit(r1)     // Catch:{ all -> 0x00ef }
            int r7 = android.os.Binder.getCallingUid()
            boolean r1 = r14.isOrphaned(r0)
            if (r1 != 0) goto L_0x0058
            boolean r1 = r14.isCallerAllowedToSilentlyUninstall(r7, r0)
            if (r1 != 0) goto L_0x0058
            com.android.server.pm.PackageManagerService$PackageHandler r1 = r14.mHandler
            com.android.server.pm.-$$Lambda$PackageManagerService$yQ3ZqZMHaduvv1mk1KLU_DO0B8c r2 = new com.android.server.pm.-$$Lambda$PackageManagerService$yQ3ZqZMHaduvv1mk1KLU_DO0B8c
            r2.<init>(r11, r15)
            r1.post(r2)
            return
        L_0x0058:
            r1 = r29 & 2
            r2 = 0
            r3 = 1
            if (r1 == 0) goto L_0x0060
            r1 = r3
            goto L_0x0061
        L_0x0060:
            r1 = r2
        L_0x0061:
            r17 = r1
            if (r17 == 0) goto L_0x006c
            com.android.server.pm.UserManagerService r1 = sUserManager
            int[] r1 = r1.getUserIds()
            goto L_0x0070
        L_0x006c:
            int[] r1 = new int[r3]
            r1[r2] = r13
        L_0x0070:
            r8 = r1
            int r1 = android.os.UserHandle.getUserId(r7)
            if (r1 != r13) goto L_0x007c
            if (r17 == 0) goto L_0x0094
            int r1 = r8.length
            if (r1 <= r3) goto L_0x0094
        L_0x007c:
            android.content.Context r1 = r14.mContext
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r3 = "deletePackage for user "
            r2.append(r3)
            r2.append(r13)
            java.lang.String r2 = r2.toString()
            java.lang.String r3 = "android.permission.INTERACT_ACROSS_USERS_FULL"
            r1.enforceCallingOrSelfPermission(r3, r2)
        L_0x0094:
            java.lang.String r1 = "no_uninstall_apps"
            boolean r1 = r14.isUserRestricted(r13, r1)
            if (r1 == 0) goto L_0x00a8
            com.android.server.pm.PackageManagerService$PackageHandler r1 = r14.mHandler
            com.android.server.pm.-$$Lambda$PackageManagerService$0EUxpdbuTb7cQLNv-aW7DZICCCU r2 = new com.android.server.pm.-$$Lambda$PackageManagerService$0EUxpdbuTb7cQLNv-aW7DZICCCU
            r2.<init>(r15, r11)
            r1.post(r2)
            return
        L_0x00a8:
            if (r17 != 0) goto L_0x00bb
            boolean r1 = r14.getBlockUninstallForUser(r0, r13)
            if (r1 == 0) goto L_0x00bb
            com.android.server.pm.PackageManagerService$PackageHandler r1 = r14.mHandler
            com.android.server.pm.-$$Lambda$PackageManagerService$CS3aJUelGPn4PWtkx1QPsjrbNtc r2 = new com.android.server.pm.-$$Lambda$PackageManagerService$CS3aJUelGPn4PWtkx1QPsjrbNtc
            r2.<init>(r15, r11)
            r1.post(r2)
            return
        L_0x00bb:
            boolean r1 = com.android.server.pm.PackageManagerServiceInjector.protectAppFromDeleting(r14, r11, r15, r7)
            if (r1 == 0) goto L_0x00c2
            return
        L_0x00c2:
            com.android.server.pm.PackageManagerService$PackageHandler r6 = r14.mHandler
            com.android.server.pm.-$$Lambda$PackageManagerService$YHri1Lu_7U5nzv2NPItDUIuocnY r5 = new com.android.server.pm.-$$Lambda$PackageManagerService$YHri1Lu_7U5nzv2NPItDUIuocnY
            r1 = r5
            r2 = r25
            r3 = r0
            r4 = r12
            r18 = r0
            r0 = r5
            r5 = r16
            r14 = r6
            r6 = r17
            r19 = r7
            r20 = r8
            r7 = r9
            r21 = r9
            r9 = r28
            r10 = r29
            r23 = r11
            r11 = r20
            r24 = r12
            r12 = r27
            r13 = r23
            r1.<init>(r3, r4, r5, r6, r7, r9, r10, r11, r12, r13)
            r14.post(r0)
            return
        L_0x00ef:
            r0 = move-exception
            r21 = r9
            r23 = r11
            r24 = r12
        L_0x00f6:
            monitor-exit(r1)     // Catch:{ all -> 0x00f8 }
            throw r0
        L_0x00f8:
            r0 = move-exception
            goto L_0x00f6
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.deletePackageVersioned(android.content.pm.VersionedPackage, android.content.pm.IPackageDeleteObserver2, int, int):void");
    }

    static /* synthetic */ void lambda$deletePackageVersioned$16(String packageName, IPackageDeleteObserver2 observer) {
        try {
            Intent intent = new Intent("android.intent.action.UNINSTALL_PACKAGE");
            intent.setData(Uri.fromParts("package", packageName, (String) null));
            intent.putExtra("android.content.pm.extra.CALLBACK", observer.asBinder());
            observer.onUserActionRequired(intent);
        } catch (RemoteException e) {
        }
    }

    static /* synthetic */ void lambda$deletePackageVersioned$17(IPackageDeleteObserver2 observer, String packageName) {
        try {
            observer.onPackageDeleted(packageName, -3, (String) null);
        } catch (RemoteException e) {
        }
    }

    static /* synthetic */ void lambda$deletePackageVersioned$18(IPackageDeleteObserver2 observer, String packageName) {
        try {
            observer.onPackageDeleted(packageName, -4, (String) null);
        } catch (RemoteException e) {
        }
    }

    public /* synthetic */ void lambda$deletePackageVersioned$19$PackageManagerService(String internalPackageName, int callingUid, boolean canViewInstantApps, boolean deleteAllUsers, long versionCode, int userId, int deleteFlags, int[] users, IPackageDeleteObserver2 observer, String packageName) {
        boolean doDeletePackage;
        int returnCode;
        int returnCode2;
        int i;
        int i2;
        String str = internalPackageName;
        int[] iArr = users;
        final String str2 = packageName;
        PackageSetting ps = this.mSettings.mPackages.get(str);
        if (ps != null) {
            doDeletePackage = !ps.getInstantApp(UserHandle.getUserId(callingUid)) || canViewInstantApps;
        } else {
            doDeletePackage = true;
        }
        if (!doDeletePackage) {
            returnCode = -1;
        } else if (!deleteAllUsers) {
            returnCode = deletePackageX(internalPackageName, versionCode, userId, deleteFlags);
        } else {
            int[] blockUninstallUserIds = getBlockUninstallForUsers(str, iArr);
            if (ArrayUtils.isEmpty(blockUninstallUserIds)) {
                returnCode2 = deletePackageX(internalPackageName, versionCode, userId, deleteFlags);
            } else {
                int userFlags = deleteFlags & -3;
                int length = iArr.length;
                int i3 = 0;
                while (i3 < length) {
                    int userId1 = iArr[i3];
                    if (!ArrayUtils.contains(blockUninstallUserIds, userId1)) {
                        int userId12 = userId1;
                        i2 = i3;
                        i = length;
                        int returnCode3 = deletePackageX(internalPackageName, versionCode, userId12, userFlags);
                        if (returnCode3 != 1) {
                            Slog.w(TAG, "Package delete failed for user " + userId12 + ", returnCode " + returnCode3);
                        }
                    } else {
                        i2 = i3;
                        i = length;
                    }
                    i3 = i2 + 1;
                    length = i;
                }
                returnCode2 = -4;
            }
            returnCode = returnCode2;
        }
        try {
            observer.onPackageDeleted(str2, returnCode, (String) null);
        } catch (RemoteException e) {
            RemoteException remoteException = e;
            Log.i(TAG, "Observer no longer exists.");
        }
        final int retCode = returnCode;
        this.mHandler.post(new Runnable() {
            public void run() {
                PackageManagerServiceInjector.onPackageDeleted(str2, retCode, (String) null);
            }
        });
    }

    private String resolveExternalPackageNameLPr(PackageParser.Package pkg) {
        if (pkg.staticSharedLibName != null) {
            return pkg.manifestPackageName;
        }
        return pkg.packageName;
    }

    /* access modifiers changed from: private */
    @GuardedBy({"mPackages"})
    public String resolveInternalPackageNameLPr(String packageName, long versionCode) {
        String str = packageName;
        String normalizedPackageName = this.mSettings.getRenamedPackageLPr(str);
        String packageName2 = normalizedPackageName != null ? normalizedPackageName : str;
        LongSparseArray<SharedLibraryInfo> versionedLib = this.mStaticLibsByDeclaringPackage.get(packageName2);
        if (versionedLib == null || versionedLib.size() <= 0) {
            return packageName2;
        }
        LongSparseLongArray versionsCallerCanSee = null;
        int callingAppId = UserHandle.getAppId(Binder.getCallingUid());
        if (!(callingAppId == 1000 || callingAppId == SHELL_UID || callingAppId == 0)) {
            versionsCallerCanSee = new LongSparseLongArray();
            String libName = versionedLib.valueAt(0).getName();
            String[] uidPackages = getPackagesForUid(Binder.getCallingUid());
            if (uidPackages != null) {
                for (String uidPackage : uidPackages) {
                    PackageSetting ps = this.mSettings.getPackageLPr(uidPackage);
                    int libIdx = ArrayUtils.indexOf(ps.usesStaticLibraries, libName);
                    if (libIdx >= 0) {
                        long libVersion = ps.usesStaticLibrariesVersions[libIdx];
                        versionsCallerCanSee.append(libVersion, libVersion);
                    }
                }
            }
        }
        if (versionsCallerCanSee != null && versionsCallerCanSee.size() <= 0) {
            return packageName2;
        }
        SharedLibraryInfo highestVersion = null;
        int versionCount = versionedLib.size();
        for (int i = 0; i < versionCount; i++) {
            SharedLibraryInfo libraryInfo = versionedLib.valueAt(i);
            if (versionsCallerCanSee == null || versionsCallerCanSee.indexOfKey(libraryInfo.getLongVersion()) >= 0) {
                long libVersionCode = libraryInfo.getDeclaringPackage().getLongVersionCode();
                if (versionCode != -1) {
                    if (libVersionCode == versionCode) {
                        return libraryInfo.getPackageName();
                    }
                } else if (highestVersion == null) {
                    highestVersion = libraryInfo;
                } else if (libVersionCode > highestVersion.getDeclaringPackage().getLongVersionCode()) {
                    highestVersion = libraryInfo;
                }
            }
        }
        if (highestVersion != null) {
            return highestVersion.getPackageName();
        }
        return packageName2;
    }

    /* access modifiers changed from: package-private */
    public boolean isCallerVerifier(int callingUid) {
        int callingUserId = UserHandle.getUserId(callingUid);
        String str = this.mRequiredVerifierPackage;
        if (str == null || callingUid != getPackageUid(str, 0, callingUserId)) {
            return false;
        }
        return true;
    }

    private boolean isCallerAllowedToSilentlyUninstall(int callingUid, String pkgName) {
        if (callingUid == SHELL_UID || callingUid == 0 || UserHandle.getAppId(callingUid) == 1000) {
            return true;
        }
        int callingUserId = UserHandle.getUserId(callingUid);
        if (callingUid == getPackageUid(getInstallerPackageName(pkgName), 0, callingUserId)) {
            return true;
        }
        String str = this.mRequiredVerifierPackage;
        if (str != null && callingUid == getPackageUid(str, 0, callingUserId)) {
            return true;
        }
        String str2 = this.mRequiredUninstallerPackage;
        if (str2 != null && callingUid == getPackageUid(str2, 0, callingUserId)) {
            return true;
        }
        String str3 = this.mStorageManagerPackage;
        if ((str3 == null || callingUid != getPackageUid(str3, 0, callingUserId)) && checkUidPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS", callingUid) != 0) {
            return PackageManagerServiceInjector.isCallerAllowedToSilentlyUninstall(callingUid, this);
        }
        return true;
    }

    private int[] getBlockUninstallForUsers(String packageName, int[] userIds) {
        int[] result = EMPTY_INT_ARRAY;
        for (int userId : userIds) {
            if (getBlockUninstallForUser(packageName, userId)) {
                result = ArrayUtils.appendInt(result, userId);
            }
        }
        return result;
    }

    public boolean isPackageDeviceAdminOnAnyUser(String packageName) {
        int callingUid = Binder.getCallingUid();
        if (checkUidPermission("android.permission.MANAGE_USERS", callingUid) != 0) {
            EventLog.writeEvent(1397638484, new Object[]{"128599183", -1, ""});
            throw new SecurityException("android.permission.MANAGE_USERS permission is required to call this API");
        } else if (getInstantAppPackageName(callingUid) == null || isCallerSameApp(packageName, callingUid)) {
            return isPackageDeviceAdmin(packageName, -1);
        } else {
            return false;
        }
    }

    private boolean isPackageDeviceAdmin(String packageName, int userId) {
        String deviceOwnerPackageName;
        IDevicePolicyManager dpm = IDevicePolicyManager.Stub.asInterface(ServiceManager.getService("device_policy"));
        if (dpm != null) {
            try {
                ComponentName deviceOwnerComponentName = dpm.getDeviceOwnerComponent(false);
                if (deviceOwnerComponentName == null) {
                    deviceOwnerPackageName = null;
                } else {
                    deviceOwnerPackageName = deviceOwnerComponentName.getPackageName();
                }
                if (packageName.equals(deviceOwnerPackageName)) {
                    return true;
                }
                int[] users = userId == -1 ? sUserManager.getUserIds() : new int[]{userId};
                for (int packageHasActiveAdmins : users) {
                    if (dpm.packageHasActiveAdmins(packageName, packageHasActiveAdmins)) {
                        return true;
                    }
                }
            } catch (RemoteException e) {
            }
        }
        return false;
    }

    private boolean shouldKeepUninstalledPackageLPr(String packageName) {
        List<String> list = this.mKeepUninstalledPackages;
        return list != null && list.contains(packageName);
    }

    /* Debug info: failed to restart local var, previous not found, register: 29 */
    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:100:?, code lost:
        r10.mInstantAppRegistry.onPackageUninstalledLPw(r4, r12.removedUsers);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:101:0x01dc, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:102:0x01dd, code lost:
        r2 = r25;
        r5 = r26;
        r6 = r27;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:107:?, code lost:
        updateSequenceNumberLP(r27, r12.removedUsers);
        updateInstantAppInstallerLocked(r30);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:108:0x01f0, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:109:0x01f1, code lost:
        r2 = r25;
        r5 = r26;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:110:0x01f7, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:111:0x01f8, code lost:
        r6 = r27;
        r2 = r25;
        r5 = r26;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:112:0x0200, code lost:
        r4 = r24;
        r6 = r27;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:114:?, code lost:
        monitor-exit(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:116:?, code lost:
        monitor-exit(r13);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:117:0x0206, code lost:
        if (r1 == false) goto L_0x021c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:119:0x020a, code lost:
        if ((r15 & 8) != 0) goto L_0x020f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:120:0x020c, code lost:
        r16 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:121:0x020f, code lost:
        r16 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:122:0x0211, code lost:
        r12.sendPackageRemovedBroadcasts(r16);
        r12.sendSystemPackageUpdatedBroadcasts();
        r12.sendSystemPackageAppearedBroadcasts();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:123:0x021c, code lost:
        java.lang.Runtime.getRuntime().gc();
        r3 = r10.mInstallLock;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:124:0x0225, code lost:
        monitor-enter(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:127:0x0228, code lost:
        if (r12.args == null) goto L_0x0237;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:129:?, code lost:
        r12.args.doPostDeleteLI(true);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:130:0x0230, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:131:0x0231, code lost:
        r13 = r25;
        r5 = r26;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:132:0x0237, code lost:
        r5 = r26;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:133:0x0239, code lost:
        if (r5 != null) goto L_0x023c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:135:?, code lost:
        r2 = r5.pkg;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:136:0x023e, code lost:
        if (r2 == null) goto L_0x028b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:138:0x0242, code lost:
        if (r2.isStub == false) goto L_0x028b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:139:0x0244, code lost:
        r7 = r10.mPackages;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:140:0x0246, code lost:
        monitor-enter(r7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:142:?, code lost:
        r8 = r10.mSettings.mPackages.get(r2.packageName);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:143:0x0253, code lost:
        if (r8 == null) goto L_0x025d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:145:0x0257, code lost:
        r13 = r25;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:147:?, code lost:
        r8.setEnabled(r13, r14, PLATFORM_PACKAGE_NAME);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:148:0x025d, code lost:
        r13 = r25;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:149:0x025f, code lost:
        monitor-exit(r7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:150:0x0260, code lost:
        if (r13 == 0) goto L_0x0264;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:151:0x0262, code lost:
        if (r13 != 1) goto L_0x028d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:154:0x0266, code lost:
        if (DEBUG_COMPRESSION == false) goto L_0x0280;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:155:0x0268, code lost:
        android.util.Slog.i(TAG, "Enabling system stub after removal; pkg: " + r2.packageName);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:156:0x0280, code lost:
        enableCompressedPackage(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:157:0x0284, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:158:0x0285, code lost:
        r13 = r25;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:160:?, code lost:
        monitor-exit(r7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:162:?, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:163:0x0289, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:165:0x028b, code lost:
        r13 = r25;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:166:0x028d, code lost:
        monitor-exit(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:167:0x028e, code lost:
        if (r1 == false) goto L_0x0296;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:168:0x0290, code lost:
        if (r11 == null) goto L_0x0296;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:169:0x0292, code lost:
        acquireUxPerfLock(7, r11, r14);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:170:0x0296, code lost:
        if (r1 == false) goto L_0x0299;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:172:0x029c, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:173:0x029d, code lost:
        r13 = r25;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:174:0x02a0, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:175:0x02a1, code lost:
        r13 = r25;
        r5 = r26;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:177:?, code lost:
        monitor-exit(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:178:0x02a6, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:179:0x02a7, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:180:0x02a9, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:181:0x02aa, code lost:
        r2 = r25;
        r5 = r26;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:182:0x02af, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:183:0x02b0, code lost:
        r2 = r25;
        r5 = r26;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:185:?, code lost:
        monitor-exit(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:187:?, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:188:0x02b6, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:189:0x02b8, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:190:0x02b9, code lost:
        r4 = r24;
        r2 = r25;
        r5 = r26;
        r6 = r27;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:191:0x02c2, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:192:0x02c3, code lost:
        r4 = r24;
        r2 = r25;
        r5 = r26;
        r6 = r27;
        r3 = r28;
        r1 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:193:0x02cf, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:194:0x02d0, code lost:
        r23 = r2;
        r4 = r3;
        r17 = r7;
        r3 = r8;
        r2 = r19;
        r5 = r20;
        r19 = r12;
        r12 = r9;
        r1 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:196:?, code lost:
        throw r1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:197:0x02df, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:198:0x02e0, code lost:
        r7 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:199:0x02e1, code lost:
        if (r3 != null) goto L_0x02e3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:201:?, code lost:
        $closeResource(r1, r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:202:0x02e6, code lost:
        throw r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:203:0x02e7, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:204:0x02e8, code lost:
        r23 = r2;
        r4 = r3;
        r17 = r7;
        r2 = r19;
        r5 = r20;
        r19 = r12;
        r12 = r9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:205:0x02f4, code lost:
        monitor-exit(r13);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:206:0x02f5, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:207:0x02f6, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:225:?, code lost:
        return -1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:226:?, code lost:
        return 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:71:0x016f, code lost:
        if (isUpdatedSystemApp(r6) == false) goto L_0x0178;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:73:0x0173, code lost:
        if ((r15 & 4) != 0) goto L_0x0178;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:74:0x0175, code lost:
        r12 = -1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:75:0x0178, code lost:
        r12 = r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:76:0x017a, code lost:
        r13 = r10.mInstallLock;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:77:0x017c, code lost:
        monitor-enter(r13);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:81:0x0183, code lost:
        r8 = freezePackageForDelete(r11, r12, r15, com.android.server.am.ProcessRecordInjector.POLICY_DELETE_PACKAGE);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:84:0x0188, code lost:
        r24 = r3;
        r25 = r19;
        r26 = r20;
        r27 = r6;
        r17 = r7;
        r28 = r8;
        r19 = r12;
        r12 = r9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:86:?, code lost:
        r1 = deletePackageLIF(r30, android.os.UserHandle.of(r7), true, r2, r15 | Integer.MIN_VALUE, r9, true, (android.content.pm.PackageParser.Package) null);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:87:0x01b7, code lost:
        r2 = null;
        r3 = r28;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:88:0x01ba, code lost:
        if (r3 == null) goto L_0x01cb;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:90:?, code lost:
        $closeResource((java.lang.Throwable) null, r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:91:0x01c0, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:92:0x01c1, code lost:
        r4 = r24;
        r2 = r25;
        r5 = r26;
        r6 = r27;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:94:?, code lost:
        r3 = r10.mPackages;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:95:0x01cd, code lost:
        monitor-enter(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x01ce, code lost:
        if (r1 == false) goto L_0x0200;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:97:0x01d0, code lost:
        r4 = r24;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:98:0x01d2, code lost:
        if (r4 == null) goto L_0x01e5;
     */
    /* JADX WARNING: Exception block dominator not found, dom blocks: [B:186:0x02b5, B:195:0x02de] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public int deletePackageX(java.lang.String r30, long r31, int r33, int r34) {
        /*
            r29 = this;
            r10 = r29
            r11 = r30
            r12 = r31
            r14 = r33
            r15 = r34
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r0 = new com.android.server.pm.PackageManagerService$PackageRemovedInfo
            r0.<init>(r10)
            r9 = r0
            r0 = r15 & 2
            r8 = -1
            if (r0 == 0) goto L_0x0017
            r0 = r8
            goto L_0x0018
        L_0x0017:
            r0 = r14
        L_0x0018:
            r7 = r0
            boolean r0 = miui.os.Build.IS_INTERNATIONAL_BUILD
            if (r0 == 0) goto L_0x0040
            boolean r0 = r10.isPackageDeviceAdmin(r11, r7)
            if (r0 == 0) goto L_0x0040
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "Not removing package "
            r0.append(r1)
            r0.append(r11)
            java.lang.String r1 = ": has active device admin"
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            java.lang.String r1 = "PackageManager"
            android.util.Slog.w(r1, r0)
            r0 = -2
            return r0
        L_0x0040:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r10.mPackages
            monitor-enter(r1)
            com.android.server.pm.Settings r0 = r10.mSettings     // Catch:{ all -> 0x02fe }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r0 = r0.mPackages     // Catch:{ all -> 0x02fe }
            java.lang.Object r0 = r0.get(r11)     // Catch:{ all -> 0x02fe }
            com.android.server.pm.PackageSetting r0 = (com.android.server.pm.PackageSetting) r0     // Catch:{ all -> 0x02fe }
            r6 = r0
            if (r6 != 0) goto L_0x006e
            java.lang.String r0 = "PackageManager"
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x0068 }
            r2.<init>()     // Catch:{ all -> 0x0068 }
            java.lang.String r3 = "Not removing non-existent package "
            r2.append(r3)     // Catch:{ all -> 0x0068 }
            r2.append(r11)     // Catch:{ all -> 0x0068 }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x0068 }
            android.util.Slog.w(r0, r2)     // Catch:{ all -> 0x0068 }
            monitor-exit(r1)     // Catch:{ all -> 0x0068 }
            return r8
        L_0x0068:
            r0 = move-exception
            r17 = r7
            r12 = r9
            goto L_0x0302
        L_0x006e:
            r2 = -1
            int r0 = (r12 > r2 ? 1 : (r12 == r2 ? 0 : -1))
            if (r0 == 0) goto L_0x00a4
            long r2 = r6.versionCode     // Catch:{ all -> 0x0068 }
            int r0 = (r2 > r12 ? 1 : (r2 == r12 ? 0 : -1))
            if (r0 == 0) goto L_0x00a4
            java.lang.String r0 = "PackageManager"
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x0068 }
            r2.<init>()     // Catch:{ all -> 0x0068 }
            java.lang.String r3 = "Not removing package "
            r2.append(r3)     // Catch:{ all -> 0x0068 }
            r2.append(r11)     // Catch:{ all -> 0x0068 }
            java.lang.String r3 = " with versionCode "
            r2.append(r3)     // Catch:{ all -> 0x0068 }
            long r3 = r6.versionCode     // Catch:{ all -> 0x0068 }
            r2.append(r3)     // Catch:{ all -> 0x0068 }
            java.lang.String r3 = " != "
            r2.append(r3)     // Catch:{ all -> 0x0068 }
            r2.append(r12)     // Catch:{ all -> 0x0068 }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x0068 }
            android.util.Slog.w(r0, r2)     // Catch:{ all -> 0x0068 }
            monitor-exit(r1)     // Catch:{ all -> 0x0068 }
            return r8
        L_0x00a4:
            com.android.server.pm.Settings r0 = r10.mSettings     // Catch:{ all -> 0x02fe }
            com.android.server.pm.PackageSetting r0 = r0.getDisabledSystemPkgLPr((java.lang.String) r11)     // Catch:{ all -> 0x02fe }
            r5 = r0
            int r0 = r6.getEnabled(r14)     // Catch:{ all -> 0x02fe }
            r4 = r0
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r10.mPackages     // Catch:{ all -> 0x02fe }
            java.lang.Object r0 = r0.get(r11)     // Catch:{ all -> 0x02fe }
            android.content.pm.PackageParser$Package r0 = (android.content.pm.PackageParser.Package) r0     // Catch:{ all -> 0x02fe }
            r3 = r0
            com.android.server.pm.UserManagerService r0 = sUserManager     // Catch:{ all -> 0x02fe }
            int[] r0 = r0.getUserIds()     // Catch:{ all -> 0x02fe }
            r2 = r0
            if (r3 == 0) goto L_0x015b
            java.lang.String r0 = r3.staticSharedLibName     // Catch:{ all -> 0x0155 }
            if (r0 == 0) goto L_0x015b
            java.lang.String r0 = r3.staticSharedLibName     // Catch:{ all -> 0x0155 }
            r17 = r9
            long r8 = r3.staticSharedLibVersion     // Catch:{ all -> 0x014e }
            android.content.pm.SharedLibraryInfo r0 = r10.getSharedLibraryInfoLPr(r0, r8)     // Catch:{ all -> 0x014e }
            if (r0 == 0) goto L_0x0149
            int r8 = r2.length     // Catch:{ all -> 0x014e }
            r9 = 0
        L_0x00d5:
            if (r9 >= r8) goto L_0x0144
            r19 = r2[r9]     // Catch:{ all -> 0x014e }
            r20 = r19
            r19 = r4
            r4 = -1
            if (r7 == r4) goto L_0x00e7
            r4 = r20
            if (r7 == r4) goto L_0x00e9
            r20 = r5
            goto L_0x013b
        L_0x00e7:
            r4 = r20
        L_0x00e9:
            r20 = r5
            r5 = 4202496(0x402000, float:5.888951E-39)
            java.util.List r5 = r10.getPackagesUsingSharedLibraryLPr(r0, r5, r4)     // Catch:{ all -> 0x014e }
            boolean r21 = com.android.internal.util.ArrayUtils.isEmpty(r5)     // Catch:{ all -> 0x014e }
            if (r21 != 0) goto L_0x013b
            java.lang.String r8 = "PackageManager"
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ all -> 0x014e }
            r9.<init>()     // Catch:{ all -> 0x014e }
            java.lang.String r12 = "Not removing package "
            r9.append(r12)     // Catch:{ all -> 0x014e }
            java.lang.String r12 = r3.manifestPackageName     // Catch:{ all -> 0x014e }
            r9.append(r12)     // Catch:{ all -> 0x014e }
            java.lang.String r12 = " hosting lib "
            r9.append(r12)     // Catch:{ all -> 0x014e }
            java.lang.String r12 = r0.getName()     // Catch:{ all -> 0x014e }
            r9.append(r12)     // Catch:{ all -> 0x014e }
            java.lang.String r12 = " version "
            r9.append(r12)     // Catch:{ all -> 0x014e }
            long r12 = r0.getLongVersion()     // Catch:{ all -> 0x014e }
            r9.append(r12)     // Catch:{ all -> 0x014e }
            java.lang.String r12 = " used by "
            r9.append(r12)     // Catch:{ all -> 0x014e }
            r9.append(r5)     // Catch:{ all -> 0x014e }
            java.lang.String r12 = " for user "
            r9.append(r12)     // Catch:{ all -> 0x014e }
            r9.append(r4)     // Catch:{ all -> 0x014e }
            java.lang.String r9 = r9.toString()     // Catch:{ all -> 0x014e }
            android.util.Slog.w(r8, r9)     // Catch:{ all -> 0x014e }
            r8 = -6
            monitor-exit(r1)     // Catch:{ all -> 0x014e }
            return r8
        L_0x013b:
            int r9 = r9 + 1
            r12 = r31
            r4 = r19
            r5 = r20
            goto L_0x00d5
        L_0x0144:
            r19 = r4
            r20 = r5
            goto L_0x0161
        L_0x0149:
            r19 = r4
            r20 = r5
            goto L_0x0161
        L_0x014e:
            r0 = move-exception
            r12 = r17
            r17 = r7
            goto L_0x0302
        L_0x0155:
            r0 = move-exception
            r17 = r7
            r12 = r9
            goto L_0x0302
        L_0x015b:
            r19 = r4
            r20 = r5
            r17 = r9
        L_0x0161:
            r0 = 1
            int[] r4 = r6.queryInstalledUsers(r2, r0)     // Catch:{ all -> 0x02f8 }
            r9 = r17
            r9.origUsers = r4     // Catch:{ all -> 0x02fe }
            monitor-exit(r1)     // Catch:{ all -> 0x02fe }
            boolean r1 = isUpdatedSystemApp(r6)
            if (r1 == 0) goto L_0x0178
            r1 = r15 & 4
            if (r1 != 0) goto L_0x0178
            r1 = -1
            r12 = r1
            goto L_0x017a
        L_0x0178:
            r1 = r7
            r12 = r1
        L_0x017a:
            java.lang.Object r13 = r10.mInstallLock
            monitor-enter(r13)
            java.lang.String r1 = "deletePackageX"
            com.android.server.pm.PackageManagerService$PackageFreezer r1 = r10.freezePackageForDelete(r11, r12, r15, r1)     // Catch:{ all -> 0x02e7 }
            r8 = r1
            android.os.UserHandle r4 = android.os.UserHandle.of(r7)     // Catch:{ all -> 0x02cf }
            r5 = 1
            r1 = -2147483648(0xffffffff80000000, float:-0.0)
            r17 = r15 | r1
            r21 = 1
            r22 = 0
            r1 = r29
            r23 = r2
            r2 = r30
            r24 = r3
            r3 = r4
            r25 = r19
            r18 = -1
            r4 = r5
            r26 = r20
            r5 = r23
            r27 = r6
            r6 = r17
            r17 = r7
            r7 = r9
            r28 = r8
            r8 = r21
            r19 = r12
            r12 = r9
            r9 = r22
            boolean r1 = r1.deletePackageLIF(r2, r3, r4, r5, r6, r7, r8, r9)     // Catch:{ all -> 0x02c2 }
            r2 = 0
            r3 = r28
            if (r3 == 0) goto L_0x01cb
            $closeResource(r2, r3)     // Catch:{ all -> 0x01c0 }
            goto L_0x01cb
        L_0x01c0:
            r0 = move-exception
            r4 = r24
            r2 = r25
            r5 = r26
            r6 = r27
            goto L_0x02f4
        L_0x01cb:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r10.mPackages     // Catch:{ all -> 0x02b8 }
            monitor-enter(r3)     // Catch:{ all -> 0x02b8 }
            if (r1 == 0) goto L_0x0200
            r4 = r24
            if (r4 == 0) goto L_0x01e5
            com.android.server.pm.InstantAppRegistry r5 = r10.mInstantAppRegistry     // Catch:{ all -> 0x01dc }
            int[] r6 = r12.removedUsers     // Catch:{ all -> 0x01dc }
            r5.onPackageUninstalledLPw(r4, r6)     // Catch:{ all -> 0x01dc }
            goto L_0x01e5
        L_0x01dc:
            r0 = move-exception
            r2 = r25
            r5 = r26
            r6 = r27
            goto L_0x02b4
        L_0x01e5:
            int[] r5 = r12.removedUsers     // Catch:{ all -> 0x01f7 }
            r6 = r27
            r10.updateSequenceNumberLP(r6, r5)     // Catch:{ all -> 0x01f0 }
            r29.updateInstantAppInstallerLocked(r30)     // Catch:{ all -> 0x01f0 }
            goto L_0x0204
        L_0x01f0:
            r0 = move-exception
            r2 = r25
            r5 = r26
            goto L_0x02b4
        L_0x01f7:
            r0 = move-exception
            r6 = r27
            r2 = r25
            r5 = r26
            goto L_0x02b4
        L_0x0200:
            r4 = r24
            r6 = r27
        L_0x0204:
            monitor-exit(r3)     // Catch:{ all -> 0x02af }
            monitor-exit(r13)     // Catch:{ all -> 0x02a9 }
            if (r1 == 0) goto L_0x021c
            r3 = r15 & 8
            if (r3 != 0) goto L_0x020f
            r16 = r0
            goto L_0x0211
        L_0x020f:
            r16 = 0
        L_0x0211:
            r3 = r16
            r12.sendPackageRemovedBroadcasts(r3)
            r12.sendSystemPackageUpdatedBroadcasts()
            r12.sendSystemPackageAppearedBroadcasts()
        L_0x021c:
            java.lang.Runtime r3 = java.lang.Runtime.getRuntime()
            r3.gc()
            java.lang.Object r3 = r10.mInstallLock
            monitor-enter(r3)
            com.android.server.pm.PackageManagerService$InstallArgs r5 = r12.args     // Catch:{ all -> 0x02a0 }
            if (r5 == 0) goto L_0x0237
            com.android.server.pm.PackageManagerService$InstallArgs r5 = r12.args     // Catch:{ all -> 0x0230 }
            r5.doPostDeleteLI(r0)     // Catch:{ all -> 0x0230 }
            goto L_0x0237
        L_0x0230:
            r0 = move-exception
            r13 = r25
            r5 = r26
            goto L_0x02a5
        L_0x0237:
            r5 = r26
            if (r5 != 0) goto L_0x023c
            goto L_0x023e
        L_0x023c:
            android.content.pm.PackageParser$Package r2 = r5.pkg     // Catch:{ all -> 0x029c }
        L_0x023e:
            if (r2 == 0) goto L_0x028b
            boolean r7 = r2.isStub     // Catch:{ all -> 0x029c }
            if (r7 == 0) goto L_0x028b
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r7 = r10.mPackages     // Catch:{ all -> 0x029c }
            monitor-enter(r7)     // Catch:{ all -> 0x029c }
            com.android.server.pm.Settings r8 = r10.mSettings     // Catch:{ all -> 0x0284 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r8 = r8.mPackages     // Catch:{ all -> 0x0284 }
            java.lang.String r9 = r2.packageName     // Catch:{ all -> 0x0284 }
            java.lang.Object r8 = r8.get(r9)     // Catch:{ all -> 0x0284 }
            com.android.server.pm.PackageSetting r8 = (com.android.server.pm.PackageSetting) r8     // Catch:{ all -> 0x0284 }
            if (r8 == 0) goto L_0x025d
            java.lang.String r9 = "android"
            r13 = r25
            r8.setEnabled(r13, r14, r9)     // Catch:{ all -> 0x0289 }
            goto L_0x025f
        L_0x025d:
            r13 = r25
        L_0x025f:
            monitor-exit(r7)     // Catch:{ all -> 0x0289 }
            if (r13 == 0) goto L_0x0264
            if (r13 != r0) goto L_0x028d
        L_0x0264:
            boolean r7 = DEBUG_COMPRESSION     // Catch:{ all -> 0x02a7 }
            if (r7 == 0) goto L_0x0280
            java.lang.String r7 = "PackageManager"
            java.lang.StringBuilder r8 = new java.lang.StringBuilder     // Catch:{ all -> 0x02a7 }
            r8.<init>()     // Catch:{ all -> 0x02a7 }
            java.lang.String r9 = "Enabling system stub after removal; pkg: "
            r8.append(r9)     // Catch:{ all -> 0x02a7 }
            java.lang.String r9 = r2.packageName     // Catch:{ all -> 0x02a7 }
            r8.append(r9)     // Catch:{ all -> 0x02a7 }
            java.lang.String r8 = r8.toString()     // Catch:{ all -> 0x02a7 }
            android.util.Slog.i(r7, r8)     // Catch:{ all -> 0x02a7 }
        L_0x0280:
            r10.enableCompressedPackage(r2)     // Catch:{ all -> 0x02a7 }
            goto L_0x028d
        L_0x0284:
            r0 = move-exception
            r13 = r25
        L_0x0287:
            monitor-exit(r7)     // Catch:{ all -> 0x0289 }
            throw r0     // Catch:{ all -> 0x02a7 }
        L_0x0289:
            r0 = move-exception
            goto L_0x0287
        L_0x028b:
            r13 = r25
        L_0x028d:
            monitor-exit(r3)     // Catch:{ all -> 0x02a7 }
            if (r1 == 0) goto L_0x0296
            if (r11 == 0) goto L_0x0296
            r2 = 7
            r10.acquireUxPerfLock(r2, r11, r14)
        L_0x0296:
            if (r1 == 0) goto L_0x0299
            goto L_0x029b
        L_0x0299:
            r0 = r18
        L_0x029b:
            return r0
        L_0x029c:
            r0 = move-exception
            r13 = r25
            goto L_0x02a5
        L_0x02a0:
            r0 = move-exception
            r13 = r25
            r5 = r26
        L_0x02a5:
            monitor-exit(r3)     // Catch:{ all -> 0x02a7 }
            throw r0
        L_0x02a7:
            r0 = move-exception
            goto L_0x02a5
        L_0x02a9:
            r0 = move-exception
            r2 = r25
            r5 = r26
            goto L_0x02f4
        L_0x02af:
            r0 = move-exception
            r2 = r25
            r5 = r26
        L_0x02b4:
            monitor-exit(r3)     // Catch:{ all -> 0x02b6 }
            throw r0     // Catch:{ all -> 0x02f6 }
        L_0x02b6:
            r0 = move-exception
            goto L_0x02b4
        L_0x02b8:
            r0 = move-exception
            r4 = r24
            r2 = r25
            r5 = r26
            r6 = r27
            goto L_0x02f4
        L_0x02c2:
            r0 = move-exception
            r4 = r24
            r2 = r25
            r5 = r26
            r6 = r27
            r3 = r28
            r1 = r0
            goto L_0x02de
        L_0x02cf:
            r0 = move-exception
            r23 = r2
            r4 = r3
            r17 = r7
            r3 = r8
            r2 = r19
            r5 = r20
            r19 = r12
            r12 = r9
            r1 = r0
        L_0x02de:
            throw r1     // Catch:{ all -> 0x02df }
        L_0x02df:
            r0 = move-exception
            r7 = r0
            if (r3 == 0) goto L_0x02e6
            $closeResource(r1, r3)     // Catch:{ all -> 0x02f6 }
        L_0x02e6:
            throw r7     // Catch:{ all -> 0x02f6 }
        L_0x02e7:
            r0 = move-exception
            r23 = r2
            r4 = r3
            r17 = r7
            r2 = r19
            r5 = r20
            r19 = r12
            r12 = r9
        L_0x02f4:
            monitor-exit(r13)     // Catch:{ all -> 0x02f6 }
            throw r0
        L_0x02f6:
            r0 = move-exception
            goto L_0x02f4
        L_0x02f8:
            r0 = move-exception
            r12 = r17
            r17 = r7
            goto L_0x0302
        L_0x02fe:
            r0 = move-exception
            r17 = r7
            r12 = r9
        L_0x0302:
            monitor-exit(r1)     // Catch:{ all -> 0x0304 }
            throw r0
        L_0x0304:
            r0 = move-exception
            goto L_0x0302
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.deletePackageX(java.lang.String, long, int, int):int");
    }

    private void acquireUxPerfLock(int opcode, String pkgName, int dat) {
        new BoostFramework().perfUXEngine_events(opcode, 0, pkgName, dat);
    }

    static class PackageRemovedInfo {
        ArrayMap<String, PackageInstalledInfo> appearedChildPackages;
        InstallArgs args = null;
        int[] broadcastUsers = null;
        boolean dataRemoved;
        SparseArray<Integer> installReasons;
        String installerPackageName;
        int[] instantUserIds = null;
        boolean isRemovedPackageSystemUpdate = false;
        boolean isStaticSharedLib;
        boolean isUpdate;
        int[] origUsers;
        final PackageSender packageSender;
        int removedAppId = -1;
        ArrayMap<String, PackageRemovedInfo> removedChildPackages;
        boolean removedForAllUsers;
        String removedPackage;
        int[] removedUsers = null;
        int uid = -1;

        PackageRemovedInfo(PackageSender packageSender2) {
            this.packageSender = packageSender2;
        }

        /* access modifiers changed from: package-private */
        public void sendPackageRemovedBroadcasts(boolean killApp) {
            sendPackageRemovedBroadcastInternal(killApp);
            ArrayMap<String, PackageRemovedInfo> arrayMap = this.removedChildPackages;
            int childCount = arrayMap != null ? arrayMap.size() : 0;
            for (int i = 0; i < childCount; i++) {
                this.removedChildPackages.valueAt(i).sendPackageRemovedBroadcastInternal(killApp);
            }
        }

        /* access modifiers changed from: package-private */
        public void sendSystemPackageUpdatedBroadcasts() {
            if (this.isRemovedPackageSystemUpdate) {
                sendSystemPackageUpdatedBroadcastsInternal();
                ArrayMap<String, PackageRemovedInfo> arrayMap = this.removedChildPackages;
                int childCount = arrayMap != null ? arrayMap.size() : 0;
                for (int i = 0; i < childCount; i++) {
                    PackageRemovedInfo childInfo = this.removedChildPackages.valueAt(i);
                    if (childInfo.isRemovedPackageSystemUpdate) {
                        childInfo.sendSystemPackageUpdatedBroadcastsInternal();
                    }
                }
            }
        }

        /* access modifiers changed from: package-private */
        public void sendSystemPackageAppearedBroadcasts() {
            ArrayMap<String, PackageInstalledInfo> arrayMap = this.appearedChildPackages;
            int packageCount = arrayMap != null ? arrayMap.size() : 0;
            for (int i = 0; i < packageCount; i++) {
                PackageInstalledInfo installedInfo = this.appearedChildPackages.valueAt(i);
                this.packageSender.sendPackageAddedForNewUsers(installedInfo.name, true, false, UserHandle.getAppId(installedInfo.uid), installedInfo.newUsers, (int[]) null);
            }
        }

        private void sendSystemPackageUpdatedBroadcastsInternal() {
            Bundle extras = new Bundle(2);
            int i = this.removedAppId;
            if (i < 0) {
                i = this.uid;
            }
            extras.putInt("android.intent.extra.UID", i);
            extras.putBoolean("android.intent.extra.REPLACING", true);
            Bundle bundle = extras;
            this.packageSender.sendPackageBroadcast("android.intent.action.PACKAGE_ADDED", this.removedPackage, bundle, 0, (String) null, (IIntentReceiver) null, (int[]) null, (int[]) null);
            this.packageSender.sendPackageBroadcast("android.intent.action.PACKAGE_REPLACED", this.removedPackage, bundle, 0, (String) null, (IIntentReceiver) null, (int[]) null, (int[]) null);
            this.packageSender.sendPackageBroadcast("android.intent.action.MY_PACKAGE_REPLACED", (String) null, (Bundle) null, 0, this.removedPackage, (IIntentReceiver) null, (int[]) null, (int[]) null);
            String str = this.installerPackageName;
            if (str != null) {
                Bundle bundle2 = extras;
                this.packageSender.sendPackageBroadcast("android.intent.action.PACKAGE_ADDED", this.removedPackage, bundle2, 0, str, (IIntentReceiver) null, (int[]) null, (int[]) null);
                this.packageSender.sendPackageBroadcast("android.intent.action.PACKAGE_REPLACED", this.removedPackage, bundle2, 0, this.installerPackageName, (IIntentReceiver) null, (int[]) null, (int[]) null);
            }
        }

        private void sendPackageRemovedBroadcastInternal(boolean killApp) {
            if (!this.isStaticSharedLib) {
                Bundle extras = new Bundle(2);
                int removedUid = this.removedAppId;
                if (removedUid < 0) {
                    removedUid = this.uid;
                }
                extras.putInt("android.intent.extra.UID", removedUid);
                extras.putBoolean("android.intent.extra.DATA_REMOVED", this.dataRemoved);
                extras.putBoolean("android.intent.extra.DONT_KILL_APP", !killApp);
                if (this.isUpdate || this.isRemovedPackageSystemUpdate) {
                    extras.putBoolean("android.intent.extra.REPLACING", true);
                }
                extras.putBoolean("android.intent.extra.REMOVED_FOR_ALL_USERS", this.removedForAllUsers);
                String str = this.removedPackage;
                if (str != null) {
                    this.packageSender.sendPackageBroadcast("android.intent.action.PACKAGE_REMOVED", str, extras, 0, (String) null, (IIntentReceiver) null, this.broadcastUsers, this.instantUserIds);
                    String str2 = this.installerPackageName;
                    if (str2 != null) {
                        this.packageSender.sendPackageBroadcast("android.intent.action.PACKAGE_REMOVED", this.removedPackage, extras, 0, str2, (IIntentReceiver) null, this.broadcastUsers, this.instantUserIds);
                    }
                    if (this.dataRemoved && !this.isRemovedPackageSystemUpdate) {
                        this.packageSender.sendPackageBroadcast("android.intent.action.PACKAGE_FULLY_REMOVED", this.removedPackage, extras, DumpState.DUMP_SERVICE_PERMISSIONS, (String) null, (IIntentReceiver) null, this.broadcastUsers, this.instantUserIds);
                        this.packageSender.notifyPackageRemoved(this.removedPackage, removedUid);
                    }
                }
                if (this.removedAppId >= 0) {
                    this.packageSender.sendPackageBroadcast("android.intent.action.UID_REMOVED", (String) null, extras, DumpState.DUMP_SERVICE_PERMISSIONS, (String) null, (IIntentReceiver) null, this.broadcastUsers, this.instantUserIds);
                }
            }
        }

        /* access modifiers changed from: package-private */
        public void populateUsers(int[] userIds, PackageSetting deletedPackageSetting) {
            this.removedUsers = userIds;
            if (this.removedUsers == null) {
                this.broadcastUsers = null;
                return;
            }
            this.broadcastUsers = PackageManagerService.EMPTY_INT_ARRAY;
            this.instantUserIds = PackageManagerService.EMPTY_INT_ARRAY;
            for (int i = userIds.length - 1; i >= 0; i--) {
                int userId = userIds[i];
                if (deletedPackageSetting.getInstantApp(userId)) {
                    this.instantUserIds = ArrayUtils.appendInt(this.instantUserIds, userId);
                } else {
                    this.broadcastUsers = ArrayUtils.appendInt(this.broadcastUsers, userId);
                }
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:38:0x00b8, code lost:
        r1.mHandler.post(new com.android.server.pm.$$Lambda$PackageManagerService$dXhuyxmq1KMoFv5e0Vx_o3hKjBI(r1, r2));
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void removePackageDataLIF(com.android.server.pm.PackageSetting r19, int[] r20, com.android.server.pm.PackageManagerService.PackageRemovedInfo r21, int r22, boolean r23) {
        /*
            r18 = this;
            r1 = r18
            r2 = r19
            r3 = r20
            r4 = r21
            java.lang.String r5 = r2.name
            android.content.pm.PackageParser$Package r6 = r2.pkg
            r7 = 1
            if (r4 == 0) goto L_0x002e
            r4.removedPackage = r5
            java.lang.String r8 = r2.installerPackageName
            r4.installerPackageName = r8
            if (r6 == 0) goto L_0x001d
            java.lang.String r8 = r6.staticSharedLibName
            if (r8 == 0) goto L_0x001d
            r8 = r7
            goto L_0x001e
        L_0x001d:
            r8 = 0
        L_0x001e:
            r4.isStaticSharedLib = r8
            com.android.server.pm.UserManagerService r8 = sUserManager
            int[] r8 = r8.getUserIds()
            int[] r8 = r2.queryInstalledUsers(r8, r7)
            r4.populateUsers(r8, r2)
        L_0x002e:
            java.lang.String r8 = r2.name
            r9 = -2147483648(0xffffffff80000000, float:-0.0)
            r9 = r22 & r9
            if (r9 == 0) goto L_0x0038
            r9 = r7
            goto L_0x0039
        L_0x0038:
            r9 = 0
        L_0x0039:
            r1.removePackageLI((java.lang.String) r8, (boolean) r9)
            r8 = r22 & 1
            r9 = -1
            if (r8 != 0) goto L_0x005c
            if (r6 == 0) goto L_0x0045
            r8 = r6
            goto L_0x0051
        L_0x0045:
            android.content.pm.PackageParser$Package r8 = new android.content.pm.PackageParser$Package
            java.lang.String r10 = r2.name
            r8.<init>(r10)
            java.lang.String r10 = r2.volumeUuid
            r8.setVolumeUuid(r10)
        L_0x0051:
            r10 = 7
            r1.destroyAppDataLIF(r8, r9, r10)
            r1.destroyAppProfilesLIF(r8)
            if (r4 == 0) goto L_0x005c
            r4.dataRemoved = r7
        L_0x005c:
            r7 = -1
            r8 = 0
            r10 = r22 & 1
            if (r10 != 0) goto L_0x00d8
            android.util.SparseBooleanArray r10 = new android.util.SparseBooleanArray
            r10.<init>()
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r11 = r1.mPackages
            monitor-enter(r11)
            java.lang.String r12 = r2.name     // Catch:{ all -> 0x00d5 }
            r1.clearIntentFilterVerificationsLPw(r12, r9)     // Catch:{ all -> 0x00d5 }
            r1.clearDefaultBrowserIfNeeded(r5)     // Catch:{ all -> 0x00d5 }
            com.android.server.pm.Settings r12 = r1.mSettings     // Catch:{ all -> 0x00d5 }
            com.android.server.pm.KeySetManagerService r12 = r12.mKeySetManagerService     // Catch:{ all -> 0x00d5 }
            r12.removeAppKeySetDataLPw(r5)     // Catch:{ all -> 0x00d5 }
            com.android.server.pm.Settings r12 = r1.mSettings     // Catch:{ all -> 0x00d5 }
            int r12 = r12.removePackageLPw(r5)     // Catch:{ all -> 0x00d5 }
            r7 = r12
            if (r4 == 0) goto L_0x0085
            r4.removedAppId = r7     // Catch:{ all -> 0x00d5 }
        L_0x0085:
            com.android.server.pm.permission.PermissionManagerServiceInternal r12 = r1.mPermissionManager     // Catch:{ all -> 0x00d5 }
            java.lang.String r13 = r2.name     // Catch:{ all -> 0x00d5 }
            r14 = 0
            r15 = 0
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r1.mPackages     // Catch:{ all -> 0x00d5 }
            java.util.Collection r16 = r0.values()     // Catch:{ all -> 0x00d5 }
            com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r0 = r1.mPermissionCallback     // Catch:{ all -> 0x00d5 }
            r17 = r0
            r12.updatePermissions(r13, r14, r15, r16, r17)     // Catch:{ all -> 0x00d5 }
            com.android.server.pm.SharedUserSetting r0 = r2.sharedUser     // Catch:{ all -> 0x00d5 }
            if (r0 == 0) goto L_0x00c2
            com.android.server.pm.UserManagerService r0 = com.android.server.pm.UserManagerService.getInstance()     // Catch:{ all -> 0x00d5 }
            int[] r0 = r0.getUserIds()     // Catch:{ all -> 0x00d5 }
            int r12 = r0.length     // Catch:{ all -> 0x00d5 }
            r13 = 0
        L_0x00a6:
            if (r13 >= r12) goto L_0x00c2
            r14 = r0[r13]     // Catch:{ all -> 0x00d5 }
            com.android.server.pm.Settings r15 = r1.mSettings     // Catch:{ all -> 0x00d5 }
            int r15 = r15.updateSharedUserPermsLPw(r2, r14)     // Catch:{ all -> 0x00d5 }
            if (r15 == r9) goto L_0x00b8
            if (r15 < 0) goto L_0x00b5
            goto L_0x00b8
        L_0x00b5:
            int r13 = r13 + 1
            goto L_0x00a6
        L_0x00b8:
            com.android.server.pm.PackageManagerService$PackageHandler r0 = r1.mHandler     // Catch:{ all -> 0x00d5 }
            com.android.server.pm.-$$Lambda$PackageManagerService$dXhuyxmq1KMoFv5e0Vx_o3hKjBI r12 = new com.android.server.pm.-$$Lambda$PackageManagerService$dXhuyxmq1KMoFv5e0Vx_o3hKjBI     // Catch:{ all -> 0x00d5 }
            r12.<init>(r2)     // Catch:{ all -> 0x00d5 }
            r0.post(r12)     // Catch:{ all -> 0x00d5 }
        L_0x00c2:
            java.lang.String r0 = r2.name     // Catch:{ all -> 0x00d5 }
            r1.clearPackagePreferredActivitiesLPw(r0, r10, r9)     // Catch:{ all -> 0x00d5 }
            monitor-exit(r11)     // Catch:{ all -> 0x00d5 }
            int r0 = r10.size()
            if (r0 <= 0) goto L_0x00d8
            r1.updateDefaultHomeNotLocked((android.util.SparseBooleanArray) r10)
            r1.postPreferredActivityChangedBroadcast(r9)
            goto L_0x00d8
        L_0x00d5:
            r0 = move-exception
            monitor-exit(r11)     // Catch:{ all -> 0x00d5 }
            throw r0
        L_0x00d8:
            if (r3 == 0) goto L_0x00fa
            if (r4 == 0) goto L_0x00fa
            int[] r0 = r4.origUsers
            if (r0 == 0) goto L_0x00fa
            int r0 = r3.length
            r10 = r8
            r8 = 0
        L_0x00e3:
            if (r8 >= r0) goto L_0x00fb
            r11 = r3[r8]
            int[] r12 = r4.origUsers
            boolean r12 = com.android.internal.util.ArrayUtils.contains(r12, r11)
            boolean r13 = r2.getInstalled(r11)
            if (r12 == r13) goto L_0x00f4
            r10 = 1
        L_0x00f4:
            r2.setInstalled(r12, r11)
            int r8 = r8 + 1
            goto L_0x00e3
        L_0x00fa:
            r10 = r8
        L_0x00fb:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r8 = r1.mPackages
            monitor-enter(r8)
            if (r23 == 0) goto L_0x0108
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0106 }
            r0.writeLPr()     // Catch:{ all -> 0x0106 }
            goto L_0x0108
        L_0x0106:
            r0 = move-exception
            goto L_0x0116
        L_0x0108:
            if (r10 == 0) goto L_0x010f
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0106 }
            r0.writeKernelMappingLPr(r2)     // Catch:{ all -> 0x0106 }
        L_0x010f:
            monitor-exit(r8)     // Catch:{ all -> 0x0106 }
            if (r7 == r9) goto L_0x0115
            removeKeystoreDataIfNeeded(r9, r7)
        L_0x0115:
            return
        L_0x0116:
            monitor-exit(r8)     // Catch:{ all -> 0x0106 }
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.removePackageDataLIF(com.android.server.pm.PackageSetting, int[], com.android.server.pm.PackageManagerService$PackageRemovedInfo, int, boolean):void");
    }

    public /* synthetic */ void lambda$removePackageDataLIF$20$PackageManagerService(PackageSetting deletedPs) {
        killApplication(deletedPs.name, deletedPs.appId, KILL_APP_REASON_GIDS_CHANGED);
    }

    static boolean locationIsPrivileged(String path) {
        try {
            File privilegedAppDir = new File(Environment.getRootDirectory(), "priv-app");
            File privilegedVendorAppDir = new File(Environment.getVendorDirectory(), "priv-app");
            File privilegedOdmAppDir = new File(Environment.getOdmDirectory(), "priv-app");
            File privilegedProductAppDir = new File(Environment.getProductDirectory(), "priv-app");
            File privilegedProductServicesAppDir = new File(Environment.getProductServicesDirectory(), "priv-app");
            if (!path.startsWith(privilegedAppDir.getCanonicalPath() + SliceClientPermissions.SliceAuthority.DELIMITER)) {
                if (!path.startsWith(privilegedVendorAppDir.getCanonicalPath() + SliceClientPermissions.SliceAuthority.DELIMITER)) {
                    if (!path.startsWith(privilegedOdmAppDir.getCanonicalPath() + SliceClientPermissions.SliceAuthority.DELIMITER)) {
                        if (!path.startsWith(privilegedProductAppDir.getCanonicalPath() + SliceClientPermissions.SliceAuthority.DELIMITER)) {
                            if (path.startsWith(privilegedProductServicesAppDir.getCanonicalPath() + SliceClientPermissions.SliceAuthority.DELIMITER)) {
                                return true;
                            }
                            return false;
                        }
                    }
                }
            }
            return true;
        } catch (IOException e) {
            Slog.e(TAG, "Unable to access code path " + path);
            return false;
        }
    }

    static boolean locationIsOem(String path) {
        try {
            return path.startsWith(Environment.getOemDirectory().getCanonicalPath() + SliceClientPermissions.SliceAuthority.DELIMITER);
        } catch (IOException e) {
            Slog.e(TAG, "Unable to access code path " + path);
            return false;
        }
    }

    static boolean locationIsVendor(String path) {
        try {
            if (!path.startsWith(Environment.getVendorDirectory().getCanonicalPath() + SliceClientPermissions.SliceAuthority.DELIMITER)) {
                if (path.startsWith(Environment.getOdmDirectory().getCanonicalPath() + SliceClientPermissions.SliceAuthority.DELIMITER)) {
                    return true;
                }
                return false;
            }
            return true;
        } catch (IOException e) {
            Slog.e(TAG, "Unable to access code path " + path);
            return false;
        }
    }

    static boolean locationIsProduct(String path) {
        try {
            return path.startsWith(Environment.getProductDirectory().getCanonicalPath() + SliceClientPermissions.SliceAuthority.DELIMITER);
        } catch (IOException e) {
            Slog.e(TAG, "Unable to access code path " + path);
            return false;
        }
    }

    static boolean locationIsProductServices(String path) {
        try {
            return path.startsWith(Environment.getProductServicesDirectory().getCanonicalPath() + SliceClientPermissions.SliceAuthority.DELIMITER);
        } catch (IOException e) {
            Slog.e(TAG, "Unable to access code path " + path);
            return false;
        }
    }

    static boolean locationIsOdm(String path) {
        try {
            return path.startsWith(Environment.getOdmDirectory().getCanonicalPath() + SliceClientPermissions.SliceAuthority.DELIMITER);
        } catch (IOException e) {
            Slog.e(TAG, "Unable to access code path " + path);
            return false;
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 17 */
    private void deleteSystemPackageLIF(DeletePackageAction action, PackageSetting deletedPs, int[] allUserHandles, int flags, PackageRemovedInfo outInfo, boolean writeSettings) throws SystemDeleteException {
        int flags2;
        PackageSetting stubPs;
        PackageSetting stubPs2;
        PackageRemovedInfo childInfo;
        PackageSetting packageSetting = deletedPs;
        PackageRemovedInfo packageRemovedInfo = outInfo;
        boolean z = (allUserHandles == null || packageRemovedInfo == null || packageRemovedInfo.origUsers == null) ? false : true;
        PackageParser.Package deletedPkg = packageSetting.pkg;
        PackageSetting disabledPs = action.disabledPs;
        Slog.d(TAG, "Deleting system pkg from data partition");
        if (packageRemovedInfo != null) {
            packageRemovedInfo.isRemovedPackageSystemUpdate = true;
            if (packageRemovedInfo.removedChildPackages != null) {
                int childCount = packageSetting.childPackageNames != null ? packageSetting.childPackageNames.size() : 0;
                for (int i = 0; i < childCount; i++) {
                    String childPackageName = (String) packageSetting.childPackageNames.get(i);
                    if (!(disabledPs.childPackageNames == null || !disabledPs.childPackageNames.contains(childPackageName) || (childInfo = packageRemovedInfo.removedChildPackages.get(childPackageName)) == null)) {
                        childInfo.isRemovedPackageSystemUpdate = true;
                    }
                }
            }
        }
        if (disabledPs.versionCode < packageSetting.versionCode) {
            flags2 = flags & -2;
        } else {
            flags2 = flags | 1;
        }
        PackageSetting disabledPs2 = disabledPs;
        deleteInstalledPackageLIF(deletedPs, true, flags2, allUserHandles, outInfo, writeSettings, disabledPs.pkg);
        synchronized (this.mPackages) {
            if (disabledPs2.pkg != null) {
                enableSystemPackageLPw(disabledPs2.pkg);
            }
            removeNativeBinariesLI(packageSetting);
        }
        try {
            installPackageFromSystemLIF(disabledPs2.codePathString, allUserHandles, packageRemovedInfo == null ? null : packageRemovedInfo.origUsers, deletedPs.getPermissionsState(), writeSettings);
            if (disabledPs2.pkg.isStub && (stubPs2 = this.mSettings.mPackages.get(deletedPkg.packageName)) != null) {
                stubPs2.setEnabled(2, 0, PLATFORM_PACKAGE_NAME);
            }
        } catch (PackageManagerException e) {
            Slog.w(TAG, "Failed to restore system package:" + deletedPkg.packageName + ": " + e.getMessage());
            throw new SystemDeleteException(e);
        } catch (Throwable th) {
            if (disabledPs2.pkg.isStub && (stubPs = this.mSettings.mPackages.get(deletedPkg.packageName)) != null) {
                stubPs.setEnabled(2, 0, PLATFORM_PACKAGE_NAME);
            }
            throw th;
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:57:0x0114, code lost:
        return r1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private android.content.pm.PackageParser.Package installPackageFromSystemLIF(java.lang.String r23, int[] r24, int[] r25, com.android.server.pm.permission.PermissionsState r26, boolean r27) throws com.android.server.pm.PackageManagerException {
        /*
            r22 = this;
            r8 = r22
            r9 = r24
            r10 = r25
            r11 = r26
            int r0 = r8.mDefParseFlags
            r12 = 1
            r0 = r0 | r12
            r13 = r0 | 16
            r0 = 131072(0x20000, float:1.83671E-40)
            boolean r1 = locationIsPrivileged(r23)
            if (r1 == 0) goto L_0x0019
            r1 = 262144(0x40000, float:3.67342E-40)
            r0 = r0 | r1
        L_0x0019:
            boolean r1 = locationIsOem(r23)
            if (r1 == 0) goto L_0x0022
            r1 = 524288(0x80000, float:7.34684E-40)
            r0 = r0 | r1
        L_0x0022:
            boolean r1 = locationIsVendor(r23)
            if (r1 == 0) goto L_0x002b
            r1 = 1048576(0x100000, float:1.469368E-39)
            r0 = r0 | r1
        L_0x002b:
            boolean r1 = locationIsProduct(r23)
            if (r1 == 0) goto L_0x0034
            r1 = 2097152(0x200000, float:2.938736E-39)
            r0 = r0 | r1
        L_0x0034:
            boolean r1 = locationIsProductServices(r23)
            if (r1 == 0) goto L_0x003d
            r1 = 4194304(0x400000, float:5.877472E-39)
            r0 = r0 | r1
        L_0x003d:
            boolean r1 = locationIsOdm(r23)
            if (r1 == 0) goto L_0x0048
            r1 = 8388608(0x800000, float:1.17549435E-38)
            r0 = r0 | r1
            r14 = r0
            goto L_0x0049
        L_0x0048:
            r14 = r0
        L_0x0049:
            java.io.File r2 = new java.io.File
            r15 = r23
            r2.<init>(r15)
            r5 = 0
            r7 = 0
            r1 = r22
            r3 = r13
            r4 = r14
            android.content.pm.PackageParser$Package r1 = r1.scanPackageTracedLI((java.io.File) r2, (int) r3, (int) r4, (long) r5, (android.os.UserHandle) r7)
            r0 = 0
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r8.mPackages     // Catch:{ PackageManagerException -> 0x0066 }
            java.util.Map r3 = java.util.Collections.unmodifiableMap(r3)     // Catch:{ PackageManagerException -> 0x0066 }
            r8.updateSharedLibrariesLocked(r1, r0, r3)     // Catch:{ PackageManagerException -> 0x0066 }
            goto L_0x0082
        L_0x0066:
            r0 = move-exception
            java.lang.StringBuilder r3 = new java.lang.StringBuilder
            r3.<init>()
            java.lang.String r4 = "updateAllSharedLibrariesLPw failed: "
            r3.append(r4)
            java.lang.String r4 = r0.getMessage()
            r3.append(r4)
            java.lang.String r3 = r3.toString()
            java.lang.String r4 = "PackageManager"
            android.util.Slog.e(r4, r3)
        L_0x0082:
            r8.prepareAppDataAfterInstallLIF(r1)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r8.mPackages
            monitor-enter(r3)
            com.android.server.pm.Settings r0 = r8.mSettings     // Catch:{ all -> 0x0115 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r0 = r0.mPackages     // Catch:{ all -> 0x0115 }
            java.lang.String r4 = r1.packageName     // Catch:{ all -> 0x0115 }
            java.lang.Object r0 = r0.get(r4)     // Catch:{ all -> 0x0115 }
            com.android.server.pm.PackageSetting r0 = (com.android.server.pm.PackageSetting) r0     // Catch:{ all -> 0x0115 }
            if (r11 == 0) goto L_0x00a3
            com.android.server.pm.permission.PermissionsState r4 = r0.getPermissionsState()     // Catch:{ all -> 0x009e }
            r4.copyFrom(r11)     // Catch:{ all -> 0x009e }
            goto L_0x00a3
        L_0x009e:
            r0 = move-exception
            r17 = r2
            goto L_0x0118
        L_0x00a3:
            com.android.server.pm.permission.PermissionManagerServiceInternal r4 = r8.mPermissionManager     // Catch:{ all -> 0x0115 }
            java.lang.String r5 = r1.packageName     // Catch:{ all -> 0x0115 }
            r19 = 1
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r6 = r8.mPackages     // Catch:{ all -> 0x0115 }
            java.util.Collection r20 = r6.values()     // Catch:{ all -> 0x0115 }
            com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r6 = r8.mPermissionCallback     // Catch:{ all -> 0x0115 }
            r16 = r4
            r17 = r5
            r18 = r1
            r21 = r6
            r16.updatePermissions(r17, r18, r19, r20, r21)     // Catch:{ all -> 0x0115 }
            if (r9 == 0) goto L_0x00c1
            if (r10 == 0) goto L_0x00c1
            goto L_0x00c2
        L_0x00c1:
            r12 = 0
        L_0x00c2:
            r5 = r12
            if (r5 == 0) goto L_0x0108
            r6 = 0
            int r7 = r9.length     // Catch:{ all -> 0x0115 }
            r12 = r6
            r6 = 0
        L_0x00c9:
            if (r6 >= r7) goto L_0x00f7
            r16 = r9[r6]     // Catch:{ all -> 0x0115 }
            r17 = r16
            r4 = r17
            boolean r17 = com.android.internal.util.ArrayUtils.contains(r10, r4)     // Catch:{ all -> 0x0115 }
            r18 = r17
            r17 = r2
            boolean r2 = r0.getInstalled(r4)     // Catch:{ all -> 0x011a }
            r19 = r5
            r5 = r18
            if (r5 == r2) goto L_0x00e5
            r2 = 1
            r12 = r2
        L_0x00e5:
            r0.setInstalled(r5, r4)     // Catch:{ all -> 0x011a }
            com.android.server.pm.Settings r2 = r8.mSettings     // Catch:{ all -> 0x011a }
            r18 = r5
            r5 = 0
            r2.writeRuntimePermissionsForUserLPr(r4, r5)     // Catch:{ all -> 0x011a }
            int r6 = r6 + 1
            r2 = r17
            r5 = r19
            goto L_0x00c9
        L_0x00f7:
            r17 = r2
            r19 = r5
            com.android.server.pm.Settings r2 = r8.mSettings     // Catch:{ all -> 0x011a }
            r2.writeAllUsersPackageRestrictionsLPr()     // Catch:{ all -> 0x011a }
            if (r12 == 0) goto L_0x010c
            com.android.server.pm.Settings r2 = r8.mSettings     // Catch:{ all -> 0x011a }
            r2.writeKernelMappingLPr(r0)     // Catch:{ all -> 0x011a }
            goto L_0x010c
        L_0x0108:
            r17 = r2
            r19 = r5
        L_0x010c:
            if (r27 == 0) goto L_0x0113
            com.android.server.pm.Settings r2 = r8.mSettings     // Catch:{ all -> 0x011a }
            r2.writeLPr()     // Catch:{ all -> 0x011a }
        L_0x0113:
            monitor-exit(r3)     // Catch:{ all -> 0x011a }
            return r1
        L_0x0115:
            r0 = move-exception
            r17 = r2
        L_0x0118:
            monitor-exit(r3)     // Catch:{ all -> 0x011a }
            throw r0
        L_0x011a:
            r0 = move-exception
            goto L_0x0118
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.installPackageFromSystemLIF(java.lang.String, int[], int[], com.android.server.pm.permission.PermissionsState, boolean):android.content.pm.PackageParser$Package");
    }

    private void deleteInstalledPackageLIF(PackageSetting ps, boolean deleteCodeAndResources, int flags, int[] allUserHandles, PackageRemovedInfo outInfo, boolean writeSettings, PackageParser.Package replacingPackage) {
        int i;
        PackageSetting childPs;
        PackageSetting packageSetting = ps;
        PackageRemovedInfo packageRemovedInfo = outInfo;
        PackageParser.Package packageR = replacingPackage;
        synchronized (this.mPackages) {
            if (packageRemovedInfo != null) {
                try {
                    packageRemovedInfo.uid = packageSetting.appId;
                } catch (Throwable th) {
                    while (true) {
                        throw th;
                    }
                }
            }
            i = 0;
            if (!(packageRemovedInfo == null || packageRemovedInfo.removedChildPackages == null)) {
                int childCount = packageSetting.childPackageNames != null ? packageSetting.childPackageNames.size() : 0;
                for (int i2 = 0; i2 < childCount; i2++) {
                    String childPackageName = (String) packageSetting.childPackageNames.get(i2);
                    PackageSetting childPs2 = this.mSettings.mPackages.get(childPackageName);
                    PackageRemovedInfo childInfo = packageRemovedInfo.removedChildPackages.get(childPackageName);
                    if (childInfo != null) {
                        childInfo.uid = childPs2.appId;
                    }
                }
            }
        }
        removePackageDataLIF(ps, allUserHandles, outInfo, flags, writeSettings);
        if (packageSetting.childPackageNames != null) {
            i = packageSetting.childPackageNames.size();
        }
        int childCount2 = i;
        for (int i3 = 0; i3 < childCount2; i3++) {
            synchronized (this.mPackages) {
                childPs = this.mSettings.getPackageLPr((String) packageSetting.childPackageNames.get(i3));
            }
            if (childPs != null) {
                removePackageDataLIF(childPs, allUserHandles, (packageRemovedInfo == null || packageRemovedInfo.removedChildPackages == null) ? null : packageRemovedInfo.removedChildPackages.get(childPs.name), ((flags & 1) == 0 || packageR == null || packageR.hasChildPackage(childPs.name)) ? flags : flags & -2, writeSettings);
            }
        }
        if (packageSetting.parentPackageName == null && deleteCodeAndResources && packageRemovedInfo != null) {
            packageRemovedInfo.args = createInstallArgsForExisting(packageSetting.codePathString, packageSetting.resourcePathString, InstructionSets.getAppDexInstructionSets(ps));
        }
    }

    public boolean setBlockUninstallForUser(String packageName, boolean blockUninstall, int userId) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.DELETE_PACKAGES", (String) null);
        synchronized (this.mPackages) {
            PackageParser.Package pkg = this.mPackages.get(packageName);
            if (pkg == null || pkg.staticSharedLibName == null) {
                this.mSettings.setBlockUninstallLPw(userId, packageName, blockUninstall);
                this.mSettings.writePackageRestrictionsLPr(userId);
                return true;
            }
            Slog.w(TAG, "Cannot block uninstall of package: " + packageName + " providing static shared library: " + pkg.staticSharedLibName);
            return false;
        }
    }

    public boolean getBlockUninstallForUser(String packageName, int userId) {
        synchronized (this.mPackages) {
            PackageSetting ps = this.mSettings.mPackages.get(packageName);
            if (ps != null) {
                if (!filterAppAccessLPr(ps, Binder.getCallingUid(), userId)) {
                    boolean blockUninstallLPr = this.mSettings.getBlockUninstallLPr(userId, packageName);
                    return blockUninstallLPr;
                }
            }
            return false;
        }
    }

    public boolean setRequiredForSystemUser(String packageName, boolean systemUserApp) {
        enforceSystemOrRoot("setRequiredForSystemUser can only be run by the system or root");
        synchronized (this.mPackages) {
            PackageSetting ps = this.mSettings.mPackages.get(packageName);
            if (ps == null) {
                Log.w(TAG, "Package doesn't exist: " + packageName);
                return false;
            }
            if (systemUserApp) {
                ps.pkgPrivateFlags |= 512;
            } else {
                ps.pkgPrivateFlags &= -513;
            }
            this.mSettings.writeLPr();
            return true;
        }
    }

    private static class DeletePackageAction {
        public final PackageSetting deletingPs;
        public final PackageSetting disabledPs;
        public final int flags;
        public final PackageRemovedInfo outInfo;
        public final UserHandle user;

        private DeletePackageAction(PackageSetting deletingPs2, PackageSetting disabledPs2, PackageRemovedInfo outInfo2, int flags2, UserHandle user2) {
            this.deletingPs = deletingPs2;
            this.disabledPs = disabledPs2;
            this.outInfo = outInfo2;
            this.flags = flags2;
            this.user = user2;
        }
    }

    @GuardedBy({"mPackages"})
    private static DeletePackageAction mayDeletePackageLocked(PackageRemovedInfo outInfo, PackageSetting ps, PackageSetting disabledPs, PackageSetting[] children, int flags, UserHandle user) {
        PackageRemovedInfo packageRemovedInfo = outInfo;
        PackageSetting packageSetting = ps;
        PackageSetting[] packageSettingArr = children;
        if (packageSetting == null) {
            return null;
        }
        if (isSystemApp(ps)) {
            if (packageSetting.parentPackageName != null) {
                Slog.w(TAG, "Attempt to delete child system package " + packageSetting.pkg.packageName);
                return null;
            }
            boolean deleteAllUsers = true;
            boolean deleteSystem = (flags & 4) != 0;
            if (!(user == null || user.getIdentifier() == -1)) {
                deleteAllUsers = false;
            }
            if ((!deleteSystem || deleteAllUsers) && disabledPs == null) {
                Slog.w(TAG, "Attempt to delete unknown system package " + packageSetting.pkg.packageName);
                return null;
            }
        }
        int parentReferenceCount = packageSetting.childPackageNames != null ? packageSetting.childPackageNames.size() : 0;
        int childCount = packageSettingArr != null ? packageSettingArr.length : 0;
        if (childCount != parentReferenceCount) {
            return null;
        }
        if (!(childCount == 0 || packageRemovedInfo == null || packageRemovedInfo.removedChildPackages == null)) {
            for (PackageSetting child : packageSettingArr) {
                if (child == null || !packageSetting.childPackageNames.contains(child.name)) {
                    return null;
                }
            }
        }
        return new DeletePackageAction(ps, disabledPs, outInfo, flags, user);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:10:0x002a, code lost:
        return false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:13:?, code lost:
        executeDeletePackageLIF(r10, r13, r15, r16, r19, r20);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:14:0x0038, code lost:
        return true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x003b, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x003c, code lost:
        r0 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:17:0x003e, code lost:
        return false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x0028, code lost:
        if (r10 != null) goto L_0x002b;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private boolean deletePackageLIF(java.lang.String r13, android.os.UserHandle r14, boolean r15, int[] r16, int r17, com.android.server.pm.PackageManagerService.PackageRemovedInfo r18, boolean r19, android.content.pm.PackageParser.Package r20) {
        /*
            r12 = this;
            r8 = r12
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r8.mPackages
            monitor-enter(r1)
            com.android.server.pm.Settings r0 = r8.mSettings     // Catch:{ all -> 0x003f }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r0 = r0.mPackages     // Catch:{ all -> 0x003f }
            r9 = r13
            java.lang.Object r0 = r0.get(r13)     // Catch:{ all -> 0x0043 }
            com.android.server.pm.PackageSetting r0 = (com.android.server.pm.PackageSetting) r0     // Catch:{ all -> 0x0043 }
            com.android.server.pm.Settings r2 = r8.mSettings     // Catch:{ all -> 0x0043 }
            com.android.server.pm.PackageSetting r4 = r2.getDisabledSystemPkgLPr((com.android.server.pm.PackageSetting) r0)     // Catch:{ all -> 0x0043 }
            com.android.server.pm.Settings r2 = r8.mSettings     // Catch:{ all -> 0x0043 }
            com.android.server.pm.PackageSetting[] r5 = r2.getChildSettingsLPr(r0)     // Catch:{ all -> 0x0043 }
            r2 = r18
            r3 = r0
            r6 = r17
            r7 = r14
            com.android.server.pm.PackageManagerService$DeletePackageAction r2 = mayDeletePackageLocked(r2, r3, r4, r5, r6, r7)     // Catch:{ all -> 0x0043 }
            r10 = r2
            monitor-exit(r1)     // Catch:{ all -> 0x0043 }
            r11 = 0
            if (r10 != 0) goto L_0x002b
            return r11
        L_0x002b:
            r1 = r12
            r2 = r10
            r3 = r13
            r4 = r15
            r5 = r16
            r6 = r19
            r7 = r20
            r1.executeDeletePackageLIF(r2, r3, r4, r5, r6, r7)     // Catch:{ SystemDeleteException -> 0x003b }
            r0 = 1
            return r0
        L_0x003b:
            r0 = move-exception
            r1 = r0
            r0 = r1
            return r11
        L_0x003f:
            r0 = move-exception
            r9 = r13
        L_0x0041:
            monitor-exit(r1)     // Catch:{ all -> 0x0043 }
            throw r0
        L_0x0043:
            r0 = move-exception
            goto L_0x0041
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.deletePackageLIF(java.lang.String, android.os.UserHandle, boolean, int[], int, com.android.server.pm.PackageManagerService$PackageRemovedInfo, boolean, android.content.pm.PackageParser$Package):boolean");
    }

    private static class SystemDeleteException extends Exception {
        public final PackageManagerException reason;

        private SystemDeleteException(PackageManagerException reason2) {
            this.reason = reason2;
        }
    }

    private void executeDeletePackageLIF(DeletePackageAction action, String packageName, boolean deleteCodeAndResources, int[] allUserHandles, boolean writeSettings, PackageParser.Package replacingPackage) throws SystemDeleteException {
        int childCount;
        boolean keepUninstalledPackage;
        DeletePackageAction deletePackageAction = action;
        String str = packageName;
        int[] iArr = allUserHandles;
        PackageSetting ps = deletePackageAction.deletingPs;
        PackageRemovedInfo outInfo = deletePackageAction.outInfo;
        UserHandle user = deletePackageAction.user;
        int flags = deletePackageAction.flags;
        boolean systemApp = isSystemApp(ps);
        int removedUserId = -1;
        if (ps.parentPackageName == null || (systemApp && (flags & 4) == 0)) {
            int userId = user == null ? -1 : user.getIdentifier();
            if (ps.getPermissionsState().hasPermission("android.permission.SUSPEND_APPS", userId)) {
                unsuspendForSuspendingPackage(str, userId);
            }
            if ((!systemApp || (flags & 4) != 0) && userId != -1) {
                synchronized (this.mPackages) {
                    markPackageUninstalledForUserLPw(ps, user);
                    if (!systemApp) {
                        boolean keepUninstalledPackage2 = shouldKeepUninstalledPackageLPr(str);
                        if (!ps.isAnyInstalled(sUserManager.getUserIds())) {
                            if (!keepUninstalledPackage2) {
                                ps.setInstalled(true, userId);
                                this.mSettings.writeKernelMappingLPr(ps);
                                keepUninstalledPackage = false;
                            }
                        }
                        keepUninstalledPackage = true;
                    } else {
                        keepUninstalledPackage = true;
                    }
                }
                if (keepUninstalledPackage) {
                    clearPackageStateForUserLIF(ps, userId, outInfo, flags);
                    synchronized (this.mPackages) {
                        scheduleWritePackageRestrictionsLocked(user);
                    }
                    return;
                }
            }
            if (!(ps.childPackageNames == null || outInfo == null)) {
                synchronized (this.mPackages) {
                    int childCount2 = ps.childPackageNames.size();
                    outInfo.removedChildPackages = new ArrayMap<>(childCount2);
                    int i = 0;
                    while (i < childCount2) {
                        String childPackageName = (String) ps.childPackageNames.get(i);
                        PackageRemovedInfo childInfo = new PackageRemovedInfo(this);
                        childInfo.removedPackage = childPackageName;
                        childInfo.installerPackageName = ps.installerPackageName;
                        outInfo.removedChildPackages.put(childPackageName, childInfo);
                        PackageSetting childPs = this.mSettings.getPackageLPr(childPackageName);
                        if (childPs != null) {
                            childCount = childCount2;
                            childInfo.origUsers = childPs.queryInstalledUsers(iArr, true);
                        } else {
                            childCount = childCount2;
                        }
                        i++;
                        childCount2 = childCount;
                    }
                }
            }
            if (systemApp) {
                int i2 = userId;
                deleteSystemPackageLIF(action, ps, allUserHandles, flags, outInfo, writeSettings);
                int i3 = flags;
            } else {
                int i4 = flags;
                deleteInstalledPackageLIF(ps, deleteCodeAndResources, flags, allUserHandles, outInfo, writeSettings, replacingPackage);
            }
            if (outInfo != null) {
                int childCount3 = 0;
                outInfo.removedForAllUsers = this.mPackages.get(ps.name) == null;
                if (outInfo.removedChildPackages != null) {
                    synchronized (this.mPackages) {
                        int childCount4 = outInfo.removedChildPackages.size();
                        for (int i5 = 0; i5 < childCount4; i5++) {
                            PackageRemovedInfo childInfo2 = outInfo.removedChildPackages.valueAt(i5);
                            if (childInfo2 != null) {
                                childInfo2.removedForAllUsers = this.mPackages.get(childInfo2.removedPackage) == null;
                            }
                        }
                    }
                }
                if (systemApp) {
                    synchronized (this.mPackages) {
                        PackageSetting updatedPs = this.mSettings.getPackageLPr(ps.name);
                        if (!(updatedPs == null || updatedPs.childPackageNames == null)) {
                            childCount3 = updatedPs.childPackageNames.size();
                        }
                        for (int i6 = 0; i6 < childCount3; i6++) {
                            String childPackageName2 = (String) updatedPs.childPackageNames.get(i6);
                            if (outInfo.removedChildPackages == null || outInfo.removedChildPackages.indexOfKey(childPackageName2) < 0) {
                                PackageSetting childPs2 = this.mSettings.getPackageLPr(childPackageName2);
                                if (childPs2 != null) {
                                    PackageInstalledInfo installRes = new PackageInstalledInfo();
                                    installRes.name = childPackageName2;
                                    installRes.newUsers = childPs2.queryInstalledUsers(iArr, true);
                                    installRes.pkg = this.mPackages.get(childPackageName2);
                                    installRes.uid = childPs2.pkg.applicationInfo.uid;
                                    if (outInfo.appearedChildPackages == null) {
                                        outInfo.appearedChildPackages = new ArrayMap<>();
                                    }
                                    outInfo.appearedChildPackages.put(childPackageName2, installRes);
                                }
                            }
                        }
                    }
                    return;
                }
                return;
            }
            return;
        }
        if (user != null) {
            removedUserId = user.getIdentifier();
        }
        clearPackageStateForUserLIF(ps, removedUserId, outInfo, flags);
        synchronized (this.mPackages) {
            markPackageUninstalledForUserLPw(ps, user);
            scheduleWritePackageRestrictionsLocked(user);
        }
    }

    @GuardedBy({"mPackages"})
    private void markPackageUninstalledForUserLPw(PackageSetting ps, UserHandle user) {
        PackageSetting packageSetting = ps;
        int[] userIds = (user == null || user.getIdentifier() == -1) ? sUserManager.getUserIds() : new int[]{user.getIdentifier()};
        int length = userIds.length;
        int i = 0;
        while (i < length) {
            int nextUserId = userIds[i];
            int nextUserId2 = nextUserId;
            int i2 = packageSetting.readUserState(nextUserId2).domainVerificationStatus;
            PackageSetting packageSetting2 = packageSetting;
            packageSetting = ps;
            int i3 = nextUserId2;
            packageSetting.setUserState(nextUserId, 0, 0, false, true, true, false, 0, false, (String) null, (SuspendDialogInfo) null, (PersistableBundle) null, (PersistableBundle) null, false, false, (String) null, (ArraySet<String>) null, (ArraySet<String>) null, i2, 0, 0, (String) null);
            i++;
            length = length;
            userIds = userIds;
        }
        this.mSettings.writeKernelMappingLPr(ps);
    }

    private void clearPackageStateForUserLIF(PackageSetting ps, int userId, PackageRemovedInfo outInfo, int flags) {
        PackageParser.Package pkg;
        synchronized (this.mPackages) {
            pkg = this.mPackages.get(ps.name);
        }
        destroyAppProfilesLIF(pkg);
        boolean z = false;
        int[] userIds = userId == -1 ? sUserManager.getUserIds() : new int[]{userId};
        for (int nextUserId : userIds) {
            destroyAppDataLIF(pkg, nextUserId, 7);
            clearDefaultBrowserIfNeededForUser(ps.name, nextUserId);
            removeKeystoreDataIfNeeded(nextUserId, ps.appId);
            SparseBooleanArray changedUsers = new SparseBooleanArray();
            clearPackagePreferredActivitiesLPw(ps.name, changedUsers, nextUserId);
            if (changedUsers.size() > 0) {
                updateDefaultHomeNotLocked(changedUsers);
                postPreferredActivityChangedBroadcast(nextUserId);
                synchronized (this.mPackages) {
                    scheduleWritePackageRestrictionsLocked(nextUserId);
                }
            }
            synchronized (this.mPackages) {
                resetUserChangesToRuntimePermissionsAndFlagsLPw(ps, nextUserId);
            }
            if ((flags & 16) != 0) {
                try {
                    MediaStore.deleteContributedMedia(this.mContext, ps.name, UserHandle.of(nextUserId));
                } catch (IOException e) {
                    Slog.w(TAG, "Failed to delete contributed media for " + ps.name, e);
                }
            }
        }
        if (outInfo != null) {
            outInfo.removedPackage = ps.name;
            outInfo.installerPackageName = ps.installerPackageName;
            if (!(pkg == null || pkg.staticSharedLibName == null)) {
                z = true;
            }
            outInfo.isStaticSharedLib = z;
            outInfo.removedAppId = ps.appId;
            outInfo.removedUsers = userIds;
            outInfo.broadcastUsers = userIds;
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 5 */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x002b, code lost:
        r3 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x002c, code lost:
        if (r0 != null) goto L_0x002e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:25:0x002e, code lost:
        $closeResource(r2, r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x0031, code lost:
        throw r3;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void clearApplicationProfileData(java.lang.String r6) {
        /*
            r5 = this;
            java.lang.String r0 = "Only the system can clear all profile data"
            enforceSystemOrRoot(r0)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r5.mPackages
            monitor-enter(r0)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r5.mPackages     // Catch:{ all -> 0x0032 }
            java.lang.Object r1 = r1.get(r6)     // Catch:{ all -> 0x0032 }
            android.content.pm.PackageParser$Package r1 = (android.content.pm.PackageParser.Package) r1     // Catch:{ all -> 0x0032 }
            monitor-exit(r0)     // Catch:{ all -> 0x0032 }
            java.lang.String r0 = "clearApplicationProfileData"
            com.android.server.pm.PackageManagerService$PackageFreezer r0 = r5.freezePackage(r6, r0)
            r2 = 0
            java.lang.Object r3 = r5.mInstallLock     // Catch:{ all -> 0x0029 }
            monitor-enter(r3)     // Catch:{ all -> 0x0029 }
            r4 = -1
            r5.clearAppProfilesLIF(r1, r4)     // Catch:{ all -> 0x0026 }
            monitor-exit(r3)     // Catch:{ all -> 0x0026 }
            if (r0 == 0) goto L_0x0025
            $closeResource(r2, r0)
        L_0x0025:
            return
        L_0x0026:
            r2 = move-exception
            monitor-exit(r3)     // Catch:{ all -> 0x0026 }
            throw r2     // Catch:{ all -> 0x0029 }
        L_0x0029:
            r2 = move-exception
            throw r2     // Catch:{ all -> 0x002b }
        L_0x002b:
            r3 = move-exception
            if (r0 == 0) goto L_0x0031
            $closeResource(r2, r0)
        L_0x0031:
            throw r3
        L_0x0032:
            r1 = move-exception
            monitor-exit(r0)     // Catch:{ all -> 0x0032 }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.clearApplicationProfileData(java.lang.String):void");
    }

    public void clearApplicationUserData(String packageName, IPackageDataObserver observer, int userId) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.CLEAR_APP_USER_DATA", (String) null);
        int callingUid = Binder.getCallingUid();
        this.mPermissionManager.enforceCrossUserPermission(callingUid, userId, true, false, "clear application data");
        PackageSetting ps = this.mSettings.getPackageLPr(packageName);
        boolean filterApp = ps != null && filterAppAccessLPr(ps, callingUid, userId);
        if (filterApp || !this.mProtectedPackages.isPackageDataProtected(userId, packageName)) {
            final boolean z = filterApp;
            final String str = packageName;
            final int i = userId;
            final IPackageDataObserver iPackageDataObserver = observer;
            this.mHandler.post(new Runnable() {
                /* Debug info: failed to restart local var, previous not found, register: 6 */
                /* JADX WARNING: Code restructure failed: missing block: B:37:0x006c, code lost:
                    r2 = move-exception;
                 */
                /* JADX WARNING: Code restructure failed: missing block: B:38:0x006d, code lost:
                    if (r0 != null) goto L_0x006f;
                 */
                /* JADX WARNING: Code restructure failed: missing block: B:40:?, code lost:
                    r0.close();
                 */
                /* JADX WARNING: Code restructure failed: missing block: B:41:0x0073, code lost:
                    r3 = move-exception;
                 */
                /* JADX WARNING: Code restructure failed: missing block: B:42:0x0074, code lost:
                    r1.addSuppressed(r3);
                 */
                /* JADX WARNING: Code restructure failed: missing block: B:43:0x0077, code lost:
                    throw r2;
                 */
                /* Code decompiled incorrectly, please refer to instructions dump. */
                public void run() {
                    /*
                        r6 = this;
                        com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                        com.android.server.pm.PackageManagerService$PackageHandler r0 = r0.mHandler
                        r0.removeCallbacks(r6)
                        boolean r0 = r5
                        if (r0 != 0) goto L_0x0078
                        com.android.server.pm.PackageManagerService r0 = com.android.server.pm.PackageManagerService.this
                        java.lang.String r1 = r6
                        java.lang.String r2 = "clearApplicationUserData"
                        com.android.server.pm.PackageManagerService$PackageFreezer r0 = r0.freezePackage(r1, r2)
                        com.android.server.pm.PackageManagerService r1 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x006a }
                        java.lang.Object r1 = r1.mInstallLock     // Catch:{ all -> 0x006a }
                        monitor-enter(r1)     // Catch:{ all -> 0x006a }
                        com.android.server.pm.PackageManagerService r2 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x0067 }
                        java.lang.String r3 = r6     // Catch:{ all -> 0x0067 }
                        int r4 = r7     // Catch:{ all -> 0x0067 }
                        boolean r2 = r2.clearApplicationUserDataLIF(r3, r4)     // Catch:{ all -> 0x0067 }
                        monitor-exit(r1)     // Catch:{ all -> 0x0067 }
                        com.android.server.pm.PackageManagerService r1 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x006a }
                        android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r1.mPackages     // Catch:{ all -> 0x006a }
                        monitor-enter(r1)     // Catch:{ all -> 0x006a }
                        com.android.server.pm.PackageManagerService r3 = com.android.server.pm.PackageManagerService.this     // Catch:{ all -> 0x0064 }
                        com.android.server.pm.InstantAppRegistry r3 = r3.mInstantAppRegistry     // Catch:{ all -> 0x0064 }
                        java.lang.String r4 = r6     // Catch:{ all -> 0x0064 }
                        int r5 = r7     // Catch:{ all -> 0x0064 }
                        r3.deleteInstantApplicationMetadataLPw(r4, r5)     // Catch:{ all -> 0x0064 }
                        monitor-exit(r1)     // Catch:{ all -> 0x0064 }
                        if (r0 == 0) goto L_0x003d
                        r0.close()
                    L_0x003d:
                        if (r2 == 0) goto L_0x0079
                        java.lang.Class<com.android.server.storage.DeviceStorageMonitorInternal> r0 = com.android.server.storage.DeviceStorageMonitorInternal.class
                        java.lang.Object r0 = com.android.server.LocalServices.getService(r0)
                        com.android.server.storage.DeviceStorageMonitorInternal r0 = (com.android.server.storage.DeviceStorageMonitorInternal) r0
                        if (r0 == 0) goto L_0x004c
                        r0.checkMemory()
                    L_0x004c:
                        com.android.server.pm.PackageManagerService r1 = com.android.server.pm.PackageManagerService.this
                        java.lang.String r3 = r6
                        int r4 = r7
                        java.lang.String r5 = "android.permission.SUSPEND_APPS"
                        int r1 = r1.checkPermission(r5, r3, r4)
                        if (r1 != 0) goto L_0x0063
                        com.android.server.pm.PackageManagerService r1 = com.android.server.pm.PackageManagerService.this
                        java.lang.String r3 = r6
                        int r4 = r7
                        r1.unsuspendForSuspendingPackage(r3, r4)
                    L_0x0063:
                        goto L_0x0079
                    L_0x0064:
                        r3 = move-exception
                        monitor-exit(r1)     // Catch:{ all -> 0x0064 }
                        throw r3     // Catch:{ all -> 0x006a }
                    L_0x0067:
                        r2 = move-exception
                        monitor-exit(r1)     // Catch:{ all -> 0x0067 }
                        throw r2     // Catch:{ all -> 0x006a }
                    L_0x006a:
                        r1 = move-exception
                        throw r1     // Catch:{ all -> 0x006c }
                    L_0x006c:
                        r2 = move-exception
                        if (r0 == 0) goto L_0x0077
                        r0.close()     // Catch:{ all -> 0x0073 }
                        goto L_0x0077
                    L_0x0073:
                        r3 = move-exception
                        r1.addSuppressed(r3)
                    L_0x0077:
                        throw r2
                    L_0x0078:
                        r2 = 0
                    L_0x0079:
                        android.content.pm.IPackageDataObserver r0 = r8
                        if (r0 == 0) goto L_0x008b
                        java.lang.String r1 = r6     // Catch:{ RemoteException -> 0x0083 }
                        r0.onRemoveCompleted(r1, r2)     // Catch:{ RemoteException -> 0x0083 }
                        goto L_0x008b
                    L_0x0083:
                        r0 = move-exception
                        java.lang.String r1 = "PackageManager"
                        java.lang.String r3 = "Observer no longer exists."
                        android.util.Log.i(r1, r3)
                    L_0x008b:
                        return
                    */
                    throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.AnonymousClass6.run():void");
                }
            });
            return;
        }
        throw new SecurityException("Cannot clear data for a protected package: " + packageName);
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:18:0x004e, code lost:
        clearAppDataLIF(r2, r8, 7);
        removeKeystoreDataIfNeeded(r8, android.os.UserHandle.getAppId(r2.applicationInfo.uid));
        r1 = getUserManagerInternal();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:19:0x0065, code lost:
        if (r1.isUserUnlockingOrUnlocked(r8) == false) goto L_0x0069;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x0067, code lost:
        r3 = 3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:0x006d, code lost:
        if (r1.isUserRunning(r8) == 0) goto L_0x0071;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x006f, code lost:
        r3 = 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x0071, code lost:
        r3 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:25:0x0072, code lost:
        prepareAppDataContentsLIF(r2, r8, r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x0076, code lost:
        return true;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean clearApplicationUserDataLIF(java.lang.String r7, int r8) {
        /*
            r6 = this;
            r0 = 0
            if (r7 != 0) goto L_0x000b
            java.lang.String r1 = "PackageManager"
            java.lang.String r2 = "Attempt to delete null packageName."
            android.util.Slog.w(r1, r2)
            return r0
        L_0x000b:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r6.mPackages
            monitor-enter(r1)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r6.mPackages     // Catch:{ all -> 0x0077 }
            java.lang.Object r2 = r2.get(r7)     // Catch:{ all -> 0x0077 }
            android.content.pm.PackageParser$Package r2 = (android.content.pm.PackageParser.Package) r2     // Catch:{ all -> 0x0077 }
            if (r2 != 0) goto L_0x0027
            com.android.server.pm.Settings r3 = r6.mSettings     // Catch:{ all -> 0x0077 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r3 = r3.mPackages     // Catch:{ all -> 0x0077 }
            java.lang.Object r3 = r3.get(r7)     // Catch:{ all -> 0x0077 }
            com.android.server.pm.PackageSetting r3 = (com.android.server.pm.PackageSetting) r3     // Catch:{ all -> 0x0077 }
            if (r3 == 0) goto L_0x0027
            android.content.pm.PackageParser$Package r4 = r3.pkg     // Catch:{ all -> 0x0077 }
            r2 = r4
        L_0x0027:
            if (r2 != 0) goto L_0x0046
            java.lang.String r3 = "PackageManager"
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x0077 }
            r4.<init>()     // Catch:{ all -> 0x0077 }
            java.lang.String r5 = "Package named '"
            r4.append(r5)     // Catch:{ all -> 0x0077 }
            r4.append(r7)     // Catch:{ all -> 0x0077 }
            java.lang.String r5 = "' doesn't exist."
            r4.append(r5)     // Catch:{ all -> 0x0077 }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x0077 }
            android.util.Slog.w(r3, r4)     // Catch:{ all -> 0x0077 }
            monitor-exit(r1)     // Catch:{ all -> 0x0077 }
            return r0
        L_0x0046:
            java.lang.Object r0 = r2.mExtras     // Catch:{ all -> 0x0077 }
            com.android.server.pm.PackageSetting r0 = (com.android.server.pm.PackageSetting) r0     // Catch:{ all -> 0x0077 }
            r6.resetUserChangesToRuntimePermissionsAndFlagsLPw(r0, r8)     // Catch:{ all -> 0x0077 }
            monitor-exit(r1)     // Catch:{ all -> 0x0077 }
            r0 = 7
            r6.clearAppDataLIF(r2, r8, r0)
            android.content.pm.ApplicationInfo r0 = r2.applicationInfo
            int r0 = r0.uid
            int r0 = android.os.UserHandle.getAppId(r0)
            removeKeystoreDataIfNeeded(r8, r0)
            android.os.UserManagerInternal r1 = r6.getUserManagerInternal()
            boolean r3 = r1.isUserUnlockingOrUnlocked(r8)
            if (r3 == 0) goto L_0x0069
            r3 = 3
            goto L_0x0072
        L_0x0069:
            boolean r3 = r1.isUserRunning(r8)
            if (r3 == 0) goto L_0x0071
            r3 = 1
            goto L_0x0072
        L_0x0071:
            r3 = 0
        L_0x0072:
            r6.prepareAppDataContentsLIF(r2, r8, r3)
            r4 = 1
            return r4
        L_0x0077:
            r0 = move-exception
            monitor-exit(r1)     // Catch:{ all -> 0x0077 }
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.clearApplicationUserDataLIF(java.lang.String, int):boolean");
    }

    @GuardedBy({"mPackages"})
    private void resetUserChangesToRuntimePermissionsAndFlagsLPw(int userId) {
        int packageCount = this.mPackages.size();
        for (int i = 0; i < packageCount; i++) {
            resetUserChangesToRuntimePermissionsAndFlagsLPw((PackageSetting) this.mPackages.valueAt(i).mExtras, userId);
        }
    }

    private void resetNetworkPolicies(int userId) {
        ((NetworkPolicyManagerInternal) LocalServices.getService(NetworkPolicyManagerInternal.class)).resetUserState(userId);
    }

    @GuardedBy({"mPackages"})
    private void resetUserChangesToRuntimePermissionsAndFlagsLPw(PackageSetting ps, int userId) {
        SparseBooleanArray updatedUsers;
        int i;
        int permissionCount;
        int flags;
        boolean used;
        int packageCount;
        PackageSetting packageSetting = ps;
        if (packageSetting.pkg != null) {
            String packageName = packageSetting.pkg.packageName;
            final boolean[] permissionRemoved = new boolean[1];
            final ArraySet<Long> revokedPermissions = new ArraySet<>();
            final SparseBooleanArray updatedUsers2 = new SparseBooleanArray();
            AnonymousClass7 r11 = new PermissionManagerServiceInternal.PermissionCallback() {
                public void onGidsChanged(int appId, int userId) {
                    PackageManagerService.this.mPermissionCallback.onGidsChanged(appId, userId);
                }

                public void onPermissionChanged() {
                    PackageManagerService.this.mPermissionCallback.onPermissionChanged();
                }

                public void onPermissionGranted(int uid, int userId) {
                    PackageManagerService.this.mPermissionCallback.onPermissionGranted(uid, userId);
                }

                public void onInstallPermissionGranted() {
                    PackageManagerService.this.mPermissionCallback.onInstallPermissionGranted();
                }

                public void onPermissionRevoked(int uid, int userId) {
                    revokedPermissions.add(Long.valueOf(IntPair.of(uid, userId)));
                    updatedUsers2.put(userId, true);
                }

                public void onInstallPermissionRevoked() {
                    PackageManagerService.this.mPermissionCallback.onInstallPermissionRevoked();
                }

                public void onPermissionUpdated(int[] updatedUserIds, boolean sync) {
                    for (int userId : updatedUserIds) {
                        if (sync) {
                            updatedUsers2.put(userId, true);
                        } else if (!updatedUsers2.get(userId)) {
                            updatedUsers2.put(userId, false);
                        }
                    }
                }

                public void onPermissionRemoved() {
                    permissionRemoved[0] = true;
                }

                public void onInstallPermissionUpdated() {
                    PackageManagerService.this.mPermissionCallback.onInstallPermissionUpdated();
                }
            };
            int permissionCount2 = packageSetting.pkg.requestedPermissions.size();
            int i2 = 0;
            while (i2 < permissionCount2) {
                String permName = (String) packageSetting.pkg.requestedPermissions.get(i2);
                BasePermission bp = this.mPermissionManager.getPermissionTEMP(permName);
                if (bp == null) {
                    i = i2;
                    permissionCount = permissionCount2;
                    updatedUsers = updatedUsers2;
                } else if (bp.isRemoved()) {
                    i = i2;
                    permissionCount = permissionCount2;
                    updatedUsers = updatedUsers2;
                } else {
                    if (packageSetting.sharedUser != null) {
                        boolean used2 = false;
                        int packageCount2 = packageSetting.sharedUser.packages.size();
                        int j = 0;
                        while (true) {
                            if (j >= packageCount2) {
                                used = used2;
                                int i3 = packageCount2;
                                break;
                            }
                            PackageSetting pkg = packageSetting.sharedUser.packages.valueAt(j);
                            boolean used3 = used2;
                            if (pkg.pkg != null) {
                                packageCount = packageCount2;
                                if (!pkg.pkg.packageName.equals(packageSetting.pkg.packageName) && pkg.pkg.requestedPermissions.contains(permName)) {
                                    used = true;
                                    break;
                                }
                            } else {
                                packageCount = packageCount2;
                            }
                            j++;
                            used2 = used3;
                            packageCount2 = packageCount;
                        }
                        if (used) {
                            i = i2;
                            permissionCount = permissionCount2;
                            updatedUsers = updatedUsers2;
                        }
                    }
                    int oldFlags = this.mPermissionManager.getPermissionFlags(permName, packageName, 1000, userId);
                    if (packageSetting.pkg.applicationInfo.targetSdkVersion >= 23 || !bp.isRuntime()) {
                        flags = 0;
                    } else {
                        flags = 0 | 72;
                    }
                    String permName2 = permName;
                    i = i2;
                    permissionCount = permissionCount2;
                    updatedUsers = updatedUsers2;
                    this.mPermissionManager.updatePermissionFlags(permName, packageName, 75, flags, 1000, userId, false, r11);
                    if (bp.isRuntime() && (oldFlags & 20) == 0) {
                        if ((oldFlags & 32) != 0) {
                            this.mPermissionManager.grantRuntimePermission(permName2, packageName, false, 1000, userId, r11);
                        } else if ((flags & 64) == 0) {
                            this.mPermissionManager.revokeRuntimePermission(permName2, packageName, false, userId, r11);
                        }
                    }
                }
                i2 = i + 1;
                permissionCount2 = permissionCount;
                updatedUsers2 = updatedUsers;
            }
            int i4 = i2;
            int i5 = permissionCount2;
            SparseBooleanArray updatedUsers3 = updatedUsers2;
            if (permissionRemoved[0]) {
                this.mPermissionCallback.onPermissionRemoved();
            }
            if (!revokedPermissions.isEmpty()) {
                int numRevokedPermissions = revokedPermissions.size();
                for (int i6 = 0; i6 < numRevokedPermissions; i6++) {
                    int revocationUID = IntPair.first(revokedPermissions.valueAt(i6).longValue());
                    int revocationUserId = IntPair.second(revokedPermissions.valueAt(i6).longValue());
                    this.mOnPermissionChangeListeners.onPermissionsChanged(revocationUID);
                    this.mHandler.post(new Runnable(revocationUID, revocationUserId) {
                        private final /* synthetic */ int f$1;
                        private final /* synthetic */ int f$2;

                        {
                            this.f$1 = r2;
                            this.f$2 = r3;
                        }

                        public final void run() {
                            PackageManagerService.this.lambda$resetUserChangesToRuntimePermissionsAndFlagsLPw$21$PackageManagerService(this.f$1, this.f$2);
                        }
                    });
                }
            }
            int numRevokedPermissions2 = updatedUsers3.size();
            for (int i7 = 0; i7 < numRevokedPermissions2; i7++) {
                SparseBooleanArray updatedUsers4 = updatedUsers3;
                this.mSettings.writeRuntimePermissionsForUserLPr(updatedUsers4.keyAt(i7), updatedUsers4.valueAt(i7));
            }
        }
    }

    public /* synthetic */ void lambda$resetUserChangesToRuntimePermissionsAndFlagsLPw$21$PackageManagerService(int revocationUID, int revocationUserId) {
        killUid(UserHandle.getAppId(revocationUID), revocationUserId, KILL_APP_REASON_PERMISSIONS_REVOKED);
    }

    private static void removeKeystoreDataIfNeeded(int userId, int appId) {
        if (appId >= 0) {
            KeyStore keyStore = KeyStore.getInstance();
            if (keyStore == null) {
                Slog.w(TAG, "Could not contact keystore to clear entries for app id " + appId);
            } else if (userId == -1) {
                for (int individual : sUserManager.getUserIds()) {
                    keyStore.clearUid(UserHandle.getUid(individual, appId));
                }
            } else {
                keyStore.clearUid(UserHandle.getUid(userId, appId));
            }
        }
    }

    public void deleteApplicationCacheFiles(String packageName, IPackageDataObserver observer) {
        deleteApplicationCacheFilesAsUser(packageName, UserHandle.getCallingUserId(), observer);
    }

    public void deleteApplicationCacheFilesAsUser(String packageName, int userId, IPackageDataObserver observer) {
        PackageParser.Package pkg;
        int callingUid = Binder.getCallingUid();
        if (this.mContext.checkCallingOrSelfPermission("android.permission.INTERNAL_DELETE_CACHE_FILES") != 0) {
            if (this.mContext.checkCallingOrSelfPermission("android.permission.DELETE_CACHE_FILES") == 0) {
                Slog.w(TAG, "Calling uid " + callingUid + " does not have " + "android.permission.INTERNAL_DELETE_CACHE_FILES" + ", silently ignoring");
                return;
            }
            this.mContext.enforceCallingOrSelfPermission("android.permission.INTERNAL_DELETE_CACHE_FILES", (String) null);
        }
        this.mPermissionManager.enforceCrossUserPermission(callingUid, userId, true, false, "delete application cache files");
        int hasAccessInstantApps = this.mContext.checkCallingOrSelfPermission("android.permission.ACCESS_INSTANT_APPS");
        synchronized (this.mPackages) {
            pkg = this.mPackages.get(packageName);
        }
        this.mHandler.post(new Runnable(pkg, callingUid, hasAccessInstantApps, userId, observer, packageName) {
            private final /* synthetic */ PackageParser.Package f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ int f$3;
            private final /* synthetic */ int f$4;
            private final /* synthetic */ IPackageDataObserver f$5;
            private final /* synthetic */ String f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                PackageManagerService.this.lambda$deleteApplicationCacheFilesAsUser$22$PackageManagerService(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$deleteApplicationCacheFilesAsUser$22$PackageManagerService(PackageParser.Package pkg, int callingUid, int hasAccessInstantApps, int userId, IPackageDataObserver observer, String packageName) {
        PackageSetting ps = pkg == null ? null : (PackageSetting) pkg.mExtras;
        boolean doClearData = true;
        if (ps != null) {
            doClearData = !ps.getInstantApp(UserHandle.getUserId(callingUid)) || hasAccessInstantApps == 0;
        }
        if (doClearData) {
            synchronized (this.mInstallLock) {
                clearAppDataLIF(pkg, userId, 23);
                clearAppDataLIF(pkg, userId, 39);
            }
        }
        if (observer != null) {
            try {
                observer.onRemoveCompleted(packageName, true);
            } catch (RemoteException e) {
                Log.i(TAG, "Observer no longer exists.");
            }
        }
    }

    public void getPackageSizeInfo(String packageName, int userHandle, IPackageStatsObserver observer) {
        throw new UnsupportedOperationException("Shame on you for calling the hidden API getPackageSizeInfo(). Shame!");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:11:?, code lost:
        r12.mInstaller.getAppSize(r1.volumeUuid, new java.lang.String[]{r13}, r14, 0, r1.appId, new long[]{r1.getCeDataInode(r14)}, new java.lang.String[]{r1.codePathString}, r15);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x004c, code lost:
        if (isSystemApp(r1) == false) goto L_0x0058;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:14:0x0052, code lost:
        if (isUpdatedSystemApp(r1) != false) goto L_0x0058;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x0054, code lost:
        r15.codeSize = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x0058, code lost:
        r15.dataSize -= r15.cacheSize;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:17:0x0060, code lost:
        return true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:18:0x0061, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:19:0x0062, code lost:
        android.util.Slog.w(TAG, java.lang.String.valueOf(r0));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x006b, code lost:
        return false;
     */
    @com.android.internal.annotations.GuardedBy({"mInstallLock"})
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private boolean getPackageSizeInfoLI(java.lang.String r13, int r14, android.content.pm.PackageStats r15) {
        /*
            r12 = this;
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r12.mPackages
            monitor-enter(r0)
            com.android.server.pm.Settings r1 = r12.mSettings     // Catch:{ all -> 0x006c }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r1 = r1.mPackages     // Catch:{ all -> 0x006c }
            java.lang.Object r1 = r1.get(r13)     // Catch:{ all -> 0x006c }
            com.android.server.pm.PackageSetting r1 = (com.android.server.pm.PackageSetting) r1     // Catch:{ all -> 0x006c }
            r2 = 0
            if (r1 != 0) goto L_0x0028
            java.lang.String r3 = "PackageManager"
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x006c }
            r4.<init>()     // Catch:{ all -> 0x006c }
            java.lang.String r5 = "Failed to find settings for "
            r4.append(r5)     // Catch:{ all -> 0x006c }
            r4.append(r13)     // Catch:{ all -> 0x006c }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x006c }
            android.util.Slog.w(r3, r4)     // Catch:{ all -> 0x006c }
            monitor-exit(r0)     // Catch:{ all -> 0x006c }
            return r2
        L_0x0028:
            monitor-exit(r0)     // Catch:{ all -> 0x006c }
            r0 = 1
            java.lang.String[] r5 = new java.lang.String[r0]
            r5[r2] = r13
            long[] r9 = new long[r0]
            long r3 = r1.getCeDataInode(r14)
            r9[r2] = r3
            java.lang.String[] r10 = new java.lang.String[r0]
            java.lang.String r3 = r1.codePathString
            r10[r2] = r3
            com.android.server.pm.Installer r3 = r12.mInstaller     // Catch:{ InstallerException -> 0x0061 }
            java.lang.String r4 = r1.volumeUuid     // Catch:{ InstallerException -> 0x0061 }
            r7 = 0
            int r8 = r1.appId     // Catch:{ InstallerException -> 0x0061 }
            r6 = r14
            r11 = r15
            r3.getAppSize(r4, r5, r6, r7, r8, r9, r10, r11)     // Catch:{ InstallerException -> 0x0061 }
            boolean r3 = isSystemApp((com.android.server.pm.PackageSetting) r1)     // Catch:{ InstallerException -> 0x0061 }
            if (r3 == 0) goto L_0x0058
            boolean r3 = isUpdatedSystemApp(r1)     // Catch:{ InstallerException -> 0x0061 }
            if (r3 != 0) goto L_0x0058
            r3 = 0
            r15.codeSize = r3     // Catch:{ InstallerException -> 0x0061 }
        L_0x0058:
            long r3 = r15.dataSize     // Catch:{ InstallerException -> 0x0061 }
            long r6 = r15.cacheSize     // Catch:{ InstallerException -> 0x0061 }
            long r3 = r3 - r6
            r15.dataSize = r3     // Catch:{ InstallerException -> 0x0061 }
            return r0
        L_0x0061:
            r0 = move-exception
            java.lang.String r3 = java.lang.String.valueOf(r0)
            java.lang.String r4 = "PackageManager"
            android.util.Slog.w(r4, r3)
            return r2
        L_0x006c:
            r1 = move-exception
            monitor-exit(r0)     // Catch:{ all -> 0x006c }
            throw r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.getPackageSizeInfoLI(java.lang.String, int, android.content.pm.PackageStats):boolean");
    }

    /* access modifiers changed from: private */
    @GuardedBy({"mPackages"})
    public int getUidTargetSdkVersionLockedLPr(int uid) {
        int v;
        SettingBase settingLPr = this.mSettings.getSettingLPr(UserHandle.getAppId(uid));
        if (settingLPr instanceof SharedUserSetting) {
            int vers = 10000;
            Iterator<PackageSetting> it = ((SharedUserSetting) settingLPr).packages.iterator();
            while (it.hasNext()) {
                PackageSetting ps = it.next();
                if (ps.pkg != null && (v = ps.pkg.applicationInfo.targetSdkVersion) < vers) {
                    vers = v;
                }
            }
            return vers;
        } else if (!(settingLPr instanceof PackageSetting)) {
            return 10000;
        } else {
            PackageSetting ps2 = (PackageSetting) settingLPr;
            if (ps2.pkg != null) {
                return ps2.pkg.applicationInfo.targetSdkVersion;
            }
            return 10000;
        }
    }

    /* access modifiers changed from: private */
    @GuardedBy({"mPackages"})
    public int getPackageTargetSdkVersionLockedLPr(String packageName) {
        PackageParser.Package p = this.mPackages.get(packageName);
        if (p != null) {
            return p.applicationInfo.targetSdkVersion;
        }
        return 10000;
    }

    public void addPreferredActivity(IntentFilter filter, int match, ComponentName[] set, ComponentName activity, int userId) {
        addPreferredActivityInternal(filter, match, set, activity, true, userId, "Adding preferred");
    }

    /* JADX INFO: finally extract failed */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x0093, code lost:
        r0 = th;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void addPreferredActivityInternal(android.content.IntentFilter r17, int r18, android.content.ComponentName[] r19, android.content.ComponentName r20, boolean r21, int r22, java.lang.String r23) {
        /*
            r16 = this;
            r1 = r16
            r8 = r22
            int r9 = android.os.Binder.getCallingUid()
            com.android.server.pm.permission.PermissionManagerServiceInternal r2 = r1.mPermissionManager
            r5 = 1
            r6 = 0
            java.lang.String r7 = "add preferred activity"
            r3 = r9
            r4 = r22
            r2.enforceCrossUserPermission(r3, r4, r5, r6, r7)
            android.content.Context r0 = r1.mContext
            java.lang.String r2 = "android.permission.SET_PREFERRED_APPLICATIONS"
            int r0 = r0.checkCallingOrSelfPermission(r2)
            if (r0 == 0) goto L_0x0045
            int r0 = r1.getUidTargetSdkVersionLockedLPr(r9)
            r2 = 8
            if (r0 >= r2) goto L_0x003d
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r2 = "Ignoring addPreferredActivity() from uid "
            r0.append(r2)
            r0.append(r9)
            java.lang.String r0 = r0.toString()
            java.lang.String r2 = "PackageManager"
            android.util.Slog.w(r2, r0)
            return
        L_0x003d:
            android.content.Context r0 = r1.mContext
            r2 = 0
            java.lang.String r3 = "android.permission.SET_PREFERRED_APPLICATIONS"
            r0.enforceCallingOrSelfPermission(r3, r2)
        L_0x0045:
            int r0 = r17.countActions()
            if (r0 != 0) goto L_0x0053
            java.lang.String r0 = "PackageManager"
            java.lang.String r2 = "Cannot set a preferred activity with no filter actions"
            android.util.Slog.w(r0, r2)
            return
        L_0x0053:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r1.mPackages
            monitor-enter(r2)
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x008e }
            com.android.server.pm.PreferredIntentResolver r0 = r0.editPreferredActivitiesLPw(r8)     // Catch:{ all -> 0x008e }
            com.android.server.pm.PreferredActivity r3 = new com.android.server.pm.PreferredActivity     // Catch:{ all -> 0x008e }
            r10 = r3
            r11 = r17
            r12 = r18
            r13 = r19
            r14 = r20
            r15 = r21
            r10.<init>(r11, r12, r13, r14, r15)     // Catch:{ all -> 0x008e }
            r0.addFilter(r3)     // Catch:{ all -> 0x008e }
            r1.scheduleWritePackageRestrictionsLocked((int) r8)     // Catch:{ all -> 0x008e }
            monitor-exit(r2)     // Catch:{ all -> 0x008e }
            java.lang.String r0 = "android.intent.category.HOME"
            r3 = r17
            boolean r0 = r3.hasCategory(r0)
            if (r0 == 0) goto L_0x0084
            java.lang.String r0 = r20.getPackageName()
            com.android.server.pm.PackageManagerServiceInjector.setDefaultHome(r8, r0)
        L_0x0084:
            boolean r0 = r1.updateDefaultHomeNotLocked((int) r8)
            if (r0 != 0) goto L_0x008d
            r1.postPreferredActivityChangedBroadcast(r8)
        L_0x008d:
            return
        L_0x008e:
            r0 = move-exception
            r3 = r17
        L_0x0091:
            monitor-exit(r2)     // Catch:{ all -> 0x0093 }
            throw r0
        L_0x0093:
            r0 = move-exception
            goto L_0x0091
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.addPreferredActivityInternal(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName, boolean, int, java.lang.String):void");
    }

    private void postPreferredActivityChangedBroadcast(int userId) {
        this.mHandler.post(new Runnable(userId) {
            private final /* synthetic */ int f$0;

            {
                this.f$0 = r1;
            }

            public final void run() {
                PackageManagerService.lambda$postPreferredActivityChangedBroadcast$23(this.f$0);
            }
        });
    }

    static /* synthetic */ void lambda$postPreferredActivityChangedBroadcast$23(int userId) {
        IActivityManager am = ActivityManager.getService();
        if (am != null) {
            Intent intent = new Intent("android.intent.action.ACTION_PREFERRED_ACTIVITY_CHANGED");
            intent.putExtra("android.intent.extra.user_handle", userId);
            intent.addFlags(BroadcastQueueInjector.FLAG_IMMUTABLE);
            Intent intent2 = intent;
            try {
                am.broadcastIntent((IApplicationThread) null, intent, (String) null, (IIntentReceiver) null, 0, (String) null, (Bundle) null, (String[]) null, -1, (Bundle) null, false, false, userId);
            } catch (RemoteException e) {
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:21:0x0063, code lost:
        r9.mContext.enforceCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS", (java.lang.String) null);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:69:0x00eb, code lost:
        addPreferredActivityInternal(r16, r17, r18, r19, true, r20, "Replacing preferred");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:70:0x00fc, code lost:
        return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void replacePreferredActivity(android.content.IntentFilter r16, int r17, android.content.ComponentName[] r18, android.content.ComponentName r19, int r20) {
        /*
            r15 = this;
            r9 = r15
            int r0 = r16.countActions()
            r1 = 1
            if (r0 != r1) goto L_0x013e
            int r0 = r16.countDataAuthorities()
            if (r0 != 0) goto L_0x012d
            int r0 = r16.countDataPaths()
            if (r0 != 0) goto L_0x0124
            int r0 = r16.countDataSchemes()
            if (r0 > r1) goto L_0x011b
            int r0 = r16.countDataTypes()
            if (r0 != 0) goto L_0x0112
            int r10 = android.os.Binder.getCallingUid()
            com.android.server.pm.permission.PermissionManagerServiceInternal r2 = r9.mPermissionManager
            r5 = 1
            r6 = 0
            java.lang.String r7 = "replace preferred activity"
            r3 = r10
            r4 = r20
            r2.enforceCrossUserPermission(r3, r4, r5, r6, r7)
            android.content.Context r0 = r9.mContext
            java.lang.String r2 = "android.permission.SET_PREFERRED_APPLICATIONS"
            int r0 = r0.checkCallingOrSelfPermission(r2)
            if (r0 == 0) goto L_0x006f
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r9.mPackages
            monitor-enter(r2)
            int r0 = r15.getUidTargetSdkVersionLockedLPr(r10)     // Catch:{ all -> 0x006c }
            r3 = 8
            if (r0 >= r3) goto L_0x0062
            java.lang.String r0 = "PackageManager"
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ all -> 0x006c }
            r1.<init>()     // Catch:{ all -> 0x006c }
            java.lang.String r3 = "Ignoring replacePreferredActivity() from uid "
            r1.append(r3)     // Catch:{ all -> 0x006c }
            int r3 = android.os.Binder.getCallingUid()     // Catch:{ all -> 0x006c }
            r1.append(r3)     // Catch:{ all -> 0x006c }
            java.lang.String r1 = r1.toString()     // Catch:{ all -> 0x006c }
            android.util.Slog.w(r0, r1)     // Catch:{ all -> 0x006c }
            monitor-exit(r2)     // Catch:{ all -> 0x006c }
            return
        L_0x0062:
            monitor-exit(r2)     // Catch:{ all -> 0x006c }
            android.content.Context r0 = r9.mContext
            r2 = 0
            java.lang.String r3 = "android.permission.SET_PREFERRED_APPLICATIONS"
            r0.enforceCallingOrSelfPermission(r3, r2)
            goto L_0x006f
        L_0x006c:
            r0 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x006c }
            throw r0
        L_0x006f:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r9.mPackages
            monitor-enter(r2)
            com.android.server.pm.Settings r0 = r9.mSettings     // Catch:{ all -> 0x0105 }
            android.util.SparseArray<com.android.server.pm.PreferredIntentResolver> r0 = r0.mPreferredActivities     // Catch:{ all -> 0x0105 }
            r11 = r20
            java.lang.Object r0 = r0.get(r11)     // Catch:{ all -> 0x00fd }
            com.android.server.pm.PreferredIntentResolver r0 = (com.android.server.pm.PreferredIntentResolver) r0     // Catch:{ all -> 0x00fd }
            if (r0 == 0) goto L_0x00e4
            r12 = r16
            java.util.ArrayList r3 = r0.findFilters(r12)     // Catch:{ all -> 0x00e2 }
            if (r3 == 0) goto L_0x00c9
            int r4 = r3.size()     // Catch:{ all -> 0x00e2 }
            if (r4 != r1) goto L_0x00c9
            r4 = 0
            java.lang.Object r4 = r3.get(r4)     // Catch:{ all -> 0x00e2 }
            com.android.server.pm.PreferredActivity r4 = (com.android.server.pm.PreferredActivity) r4     // Catch:{ all -> 0x00e2 }
            com.android.server.pm.PreferredComponent r5 = r4.mPref     // Catch:{ all -> 0x00e2 }
            boolean r5 = r5.mAlways     // Catch:{ all -> 0x00e2 }
            if (r5 == 0) goto L_0x00c4
            com.android.server.pm.PreferredComponent r5 = r4.mPref     // Catch:{ all -> 0x00e2 }
            android.content.ComponentName r5 = r5.mComponent     // Catch:{ all -> 0x00e2 }
            r13 = r19
            boolean r5 = r5.equals(r13)     // Catch:{ all -> 0x00c0 }
            if (r5 == 0) goto L_0x00bd
            com.android.server.pm.PreferredComponent r5 = r4.mPref     // Catch:{ all -> 0x00c0 }
            int r5 = r5.mMatch     // Catch:{ all -> 0x00c0 }
            r6 = 268369920(0xfff0000, float:2.5144941E-29)
            r6 = r17 & r6
            if (r5 != r6) goto L_0x00bd
            com.android.server.pm.PreferredComponent r5 = r4.mPref     // Catch:{ all -> 0x00c0 }
            r14 = r18
            boolean r5 = r5.sameSet(r14)     // Catch:{ all -> 0x0110 }
            if (r5 == 0) goto L_0x00cd
            monitor-exit(r2)     // Catch:{ all -> 0x0110 }
            return
        L_0x00bd:
            r14 = r18
            goto L_0x00cd
        L_0x00c0:
            r0 = move-exception
            r14 = r18
            goto L_0x010e
        L_0x00c4:
            r14 = r18
            r13 = r19
            goto L_0x00cd
        L_0x00c9:
            r14 = r18
            r13 = r19
        L_0x00cd:
            if (r3 == 0) goto L_0x00ea
            int r4 = r3.size()     // Catch:{ all -> 0x0110 }
            int r4 = r4 - r1
        L_0x00d4:
            if (r4 < 0) goto L_0x00ea
            java.lang.Object r1 = r3.get(r4)     // Catch:{ all -> 0x0110 }
            com.android.server.pm.PreferredActivity r1 = (com.android.server.pm.PreferredActivity) r1     // Catch:{ all -> 0x0110 }
            r0.removeFilter(r1)     // Catch:{ all -> 0x0110 }
            int r4 = r4 + -1
            goto L_0x00d4
        L_0x00e2:
            r0 = move-exception
            goto L_0x0100
        L_0x00e4:
            r12 = r16
            r14 = r18
            r13 = r19
        L_0x00ea:
            monitor-exit(r2)     // Catch:{ all -> 0x0110 }
            r6 = 1
            java.lang.String r8 = "Replacing preferred"
            r1 = r15
            r2 = r16
            r3 = r17
            r4 = r18
            r5 = r19
            r7 = r20
            r1.addPreferredActivityInternal(r2, r3, r4, r5, r6, r7, r8)
            return
        L_0x00fd:
            r0 = move-exception
            r12 = r16
        L_0x0100:
            r14 = r18
            r13 = r19
            goto L_0x010e
        L_0x0105:
            r0 = move-exception
            r12 = r16
            r14 = r18
            r13 = r19
            r11 = r20
        L_0x010e:
            monitor-exit(r2)     // Catch:{ all -> 0x0110 }
            throw r0
        L_0x0110:
            r0 = move-exception
            goto L_0x010e
        L_0x0112:
            r12 = r16
            r14 = r18
            r13 = r19
            r11 = r20
            goto L_0x0135
        L_0x011b:
            r12 = r16
            r14 = r18
            r13 = r19
            r11 = r20
            goto L_0x0135
        L_0x0124:
            r12 = r16
            r14 = r18
            r13 = r19
            r11 = r20
            goto L_0x0135
        L_0x012d:
            r12 = r16
            r14 = r18
            r13 = r19
            r11 = r20
        L_0x0135:
            java.lang.IllegalArgumentException r0 = new java.lang.IllegalArgumentException
            java.lang.String r1 = "replacePreferredActivity expects filter to have no data authorities, paths, or types; and at most one scheme."
            r0.<init>(r1)
            throw r0
        L_0x013e:
            r12 = r16
            r14 = r18
            r13 = r19
            r11 = r20
            java.lang.IllegalArgumentException r0 = new java.lang.IllegalArgumentException
            java.lang.String r1 = "replacePreferredActivity expects filter to have only 1 action."
            r0.<init>(r1)
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.replacePreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName, int):void");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:25:0x0065, code lost:
        r1 = android.os.UserHandle.getCallingUserId();
        r2 = new android.util.SparseBooleanArray();
        clearPackagePreferredActivitiesLPw(r7, r2, r1);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x0075, code lost:
        if (r2.size() <= 0) goto L_?;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x0077, code lost:
        updateDefaultHomeNotLocked(r2);
        postPreferredActivityChangedBroadcast(r1);
        r3 = r6.mPackages;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:0x007f, code lost:
        monitor-enter(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:30:?, code lost:
        scheduleWritePackageRestrictionsLocked(r1);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x0083, code lost:
        monitor-exit(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:?, code lost:
        return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void clearPackagePreferredActivities(java.lang.String r7) {
        /*
            r6 = this;
            int r0 = android.os.Binder.getCallingUid()
            java.lang.String r1 = r6.getInstantAppPackageName(r0)
            if (r1 == 0) goto L_0x000b
            return
        L_0x000b:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r6.mPackages
            monitor-enter(r1)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r6.mPackages     // Catch:{ all -> 0x0089 }
            java.lang.Object r2 = r2.get(r7)     // Catch:{ all -> 0x0089 }
            android.content.pm.PackageParser$Package r2 = (android.content.pm.PackageParser.Package) r2     // Catch:{ all -> 0x0089 }
            if (r2 == 0) goto L_0x001e
            boolean r3 = r6.isCallerSameApp(r7, r0)     // Catch:{ all -> 0x0089 }
            if (r3 != 0) goto L_0x0050
        L_0x001e:
            android.content.Context r3 = r6.mContext     // Catch:{ all -> 0x0089 }
            java.lang.String r4 = "android.permission.SET_PREFERRED_APPLICATIONS"
            int r3 = r3.checkCallingOrSelfPermission(r4)     // Catch:{ all -> 0x0089 }
            if (r3 == 0) goto L_0x0050
            int r3 = r6.getUidTargetSdkVersionLockedLPr(r0)     // Catch:{ all -> 0x0089 }
            r4 = 8
            if (r3 >= r4) goto L_0x0048
            java.lang.String r3 = "PackageManager"
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x0089 }
            r4.<init>()     // Catch:{ all -> 0x0089 }
            java.lang.String r5 = "Ignoring clearPackagePreferredActivities() from uid "
            r4.append(r5)     // Catch:{ all -> 0x0089 }
            r4.append(r0)     // Catch:{ all -> 0x0089 }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x0089 }
            android.util.Slog.w(r3, r4)     // Catch:{ all -> 0x0089 }
            monitor-exit(r1)     // Catch:{ all -> 0x0089 }
            return
        L_0x0048:
            android.content.Context r3 = r6.mContext     // Catch:{ all -> 0x0089 }
            java.lang.String r4 = "android.permission.SET_PREFERRED_APPLICATIONS"
            r5 = 0
            r3.enforceCallingOrSelfPermission(r4, r5)     // Catch:{ all -> 0x0089 }
        L_0x0050:
            com.android.server.pm.Settings r3 = r6.mSettings     // Catch:{ all -> 0x0089 }
            com.android.server.pm.PackageSetting r3 = r3.getPackageLPr(r7)     // Catch:{ all -> 0x0089 }
            if (r3 == 0) goto L_0x0064
            int r4 = android.os.UserHandle.getUserId(r0)     // Catch:{ all -> 0x0089 }
            boolean r4 = r6.filterAppAccessLPr(r3, r0, r4)     // Catch:{ all -> 0x0089 }
            if (r4 == 0) goto L_0x0064
            monitor-exit(r1)     // Catch:{ all -> 0x0089 }
            return
        L_0x0064:
            monitor-exit(r1)     // Catch:{ all -> 0x0089 }
            int r1 = android.os.UserHandle.getCallingUserId()
            android.util.SparseBooleanArray r2 = new android.util.SparseBooleanArray
            r2.<init>()
            r6.clearPackagePreferredActivitiesLPw(r7, r2, r1)
            int r3 = r2.size()
            if (r3 <= 0) goto L_0x0088
            r6.updateDefaultHomeNotLocked((android.util.SparseBooleanArray) r2)
            r6.postPreferredActivityChangedBroadcast(r1)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r6.mPackages
            monitor-enter(r3)
            r6.scheduleWritePackageRestrictionsLocked((int) r1)     // Catch:{ all -> 0x0085 }
            monitor-exit(r3)     // Catch:{ all -> 0x0085 }
            goto L_0x0088
        L_0x0085:
            r4 = move-exception
            monitor-exit(r3)     // Catch:{ all -> 0x0085 }
            throw r4
        L_0x0088:
            return
        L_0x0089:
            r2 = move-exception
            monitor-exit(r1)     // Catch:{ all -> 0x0089 }
            throw r2
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.clearPackagePreferredActivities(java.lang.String):void");
    }

    @GuardedBy({"mPackages"})
    private void clearPackagePreferredActivitiesLPw(String packageName, SparseBooleanArray outUserChanged, int userId) {
        ArrayList<PreferredActivity> removed = null;
        for (int i = 0; i < this.mSettings.mPreferredActivities.size(); i++) {
            int thisUserId = this.mSettings.mPreferredActivities.keyAt(i);
            PreferredIntentResolver pir = this.mSettings.mPreferredActivities.valueAt(i);
            if (userId == -1 || userId == thisUserId) {
                Iterator<PreferredActivity> it = pir.filterIterator();
                while (it.hasNext()) {
                    PreferredActivity pa = it.next();
                    if (packageName == null || (pa.mPref.mComponent.getPackageName().equals(packageName) && pa.mPref.mAlways)) {
                        if (removed == null) {
                            removed = new ArrayList<>();
                        }
                        removed.add(pa);
                    }
                }
                if (removed != null) {
                    for (int j = 0; j < removed.size(); j++) {
                        pir.removeFilter(removed.get(j));
                    }
                    outUserChanged.put(thisUserId, true);
                }
            }
        }
    }

    @GuardedBy({"mPackages"})
    private void clearIntentFilterVerificationsLPw(int userId) {
        int packageCount = this.mPackages.size();
        for (int i = 0; i < packageCount; i++) {
            clearIntentFilterVerificationsLPw(this.mPackages.valueAt(i).packageName, userId);
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"mPackages"})
    public void clearIntentFilterVerificationsLPw(String packageName, int userId) {
        if (userId == -1) {
            if (this.mSettings.removeIntentFilterVerificationLPw(packageName, sUserManager.getUserIds())) {
                for (int oneUserId : sUserManager.getUserIds()) {
                    scheduleWritePackageRestrictionsLocked(oneUserId);
                }
            }
        } else if (this.mSettings.removeIntentFilterVerificationLPw(packageName, userId)) {
            scheduleWritePackageRestrictionsLocked(userId);
        }
    }

    /* access modifiers changed from: package-private */
    public void clearDefaultBrowserIfNeeded(String packageName) {
        for (int oneUserId : sUserManager.getUserIds()) {
            clearDefaultBrowserIfNeededForUser(packageName, oneUserId);
        }
    }

    private void clearDefaultBrowserIfNeededForUser(String packageName, int userId) {
        String defaultBrowserPackageName = getDefaultBrowserPackageName(userId);
        if (!TextUtils.isEmpty(defaultBrowserPackageName) && packageName.equals(defaultBrowserPackageName)) {
            setDefaultBrowserPackageName((String) null, userId);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 6 */
    public void resetApplicationPreferences(int userId) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS", (String) null);
        long identity = Binder.clearCallingIdentity();
        try {
            SparseBooleanArray changedUsers = new SparseBooleanArray();
            clearPackagePreferredActivitiesLPw((String) null, changedUsers, userId);
            if (changedUsers.size() > 0) {
                postPreferredActivityChangedBroadcast(userId);
            }
            synchronized (this.mPackages) {
                this.mSettings.applyDefaultPreferredAppsLPw(userId);
                clearIntentFilterVerificationsLPw(userId);
                primeDomainVerificationsLPw(userId);
                resetUserChangesToRuntimePermissionsAndFlagsLPw(userId);
            }
            updateDefaultHomeNotLocked(userId);
            setDefaultBrowserPackageName((String) null, userId);
            resetNetworkPolicies(userId);
            synchronized (this.mPackages) {
                scheduleWritePackageRestrictionsLocked(userId);
            }
            Binder.restoreCallingIdentity(identity);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(identity);
            throw th;
        }
    }

    public int getPreferredActivities(List<IntentFilter> outFilters, List<ComponentName> outActivities, String packageName) {
        if (getInstantAppPackageName(Binder.getCallingUid()) != null) {
            return 0;
        }
        int userId = UserHandle.getCallingUserId();
        synchronized (this.mPackages) {
            PreferredIntentResolver pir = this.mSettings.mPreferredActivities.get(userId);
            if (pir != null) {
                Iterator<PreferredActivity> it = pir.filterIterator();
                while (it.hasNext()) {
                    PreferredActivity pa = it.next();
                    if (packageName == null || (pa.mPref.mComponent.getPackageName().equals(packageName) && pa.mPref.mAlways)) {
                        if (outFilters != null) {
                            outFilters.add(new IntentFilter(pa));
                        }
                        if (outActivities != null) {
                            outActivities.add(pa.mPref.mComponent);
                        }
                    }
                }
            }
        }
        return 0;
    }

    public void addPersistentPreferredActivity(IntentFilter filter, ComponentName activity, int userId) {
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("addPersistentPreferredActivity can only be run by the system");
        } else if (filter.countActions() == 0) {
            Slog.w(TAG, "Cannot set a preferred activity with no filter actions");
        } else {
            synchronized (this.mPackages) {
                this.mSettings.editPersistentPreferredActivitiesLPw(userId).addFilter(new PersistentPreferredActivity(filter, activity));
                scheduleWritePackageRestrictionsLocked(userId);
            }
            updateDefaultHomeNotLocked(userId);
            postPreferredActivityChangedBroadcast(userId);
        }
    }

    public void clearPackagePersistentPreferredActivities(String packageName, int userId) {
        if (Binder.getCallingUid() == 1000) {
            ArrayList<PersistentPreferredActivity> removed = null;
            boolean changed = false;
            synchronized (this.mPackages) {
                for (int i = 0; i < this.mSettings.mPersistentPreferredActivities.size(); i++) {
                    int thisUserId = this.mSettings.mPersistentPreferredActivities.keyAt(i);
                    PersistentPreferredIntentResolver ppir = this.mSettings.mPersistentPreferredActivities.valueAt(i);
                    if (userId == thisUserId) {
                        Iterator<PersistentPreferredActivity> it = ppir.filterIterator();
                        while (it.hasNext()) {
                            PersistentPreferredActivity ppa = it.next();
                            if (ppa.mComponent.getPackageName().equals(packageName)) {
                                if (removed == null) {
                                    removed = new ArrayList<>();
                                }
                                removed.add(ppa);
                            }
                        }
                        if (removed != null) {
                            for (int j = 0; j < removed.size(); j++) {
                                ppir.removeFilter(removed.get(j));
                            }
                            changed = true;
                        }
                    }
                }
            }
            if (changed) {
                updateDefaultHomeNotLocked(userId);
                postPreferredActivityChangedBroadcast(userId);
                synchronized (this.mPackages) {
                    scheduleWritePackageRestrictionsLocked(userId);
                }
                return;
            }
            return;
        }
        throw new SecurityException("clearPackagePersistentPreferredActivities can only be run by the system");
    }

    /* JADX WARNING: Removed duplicated region for block: B:0:0x0000 A[LOOP_START, MTH_ENTER_BLOCK] */
    /* JADX WARNING: Removed duplicated region for block: B:8:0x0019 A[RETURN] */
    /* JADX WARNING: Removed duplicated region for block: B:9:0x001a A[LOOP:1: B:9:0x001a->B:10:0x0020, LOOP_START] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void restoreFromXml(org.xmlpull.v1.XmlPullParser r4, int r5, java.lang.String r6, com.android.server.pm.PackageManagerService.BlobXmlRestorer r7) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException {
        /*
            r3 = this;
        L_0x0000:
            int r0 = r4.next()
            r1 = r0
            r2 = 2
            if (r0 == r2) goto L_0x000c
            r0 = 1
            if (r1 == r0) goto L_0x000c
            goto L_0x0000
        L_0x000c:
            if (r1 == r2) goto L_0x000f
            return
        L_0x000f:
            java.lang.String r0 = r4.getName()
            boolean r0 = r6.equals(r0)
            if (r0 != 0) goto L_0x001a
            return
        L_0x001a:
            int r0 = r4.next()
            r1 = r0
            r2 = 4
            if (r0 != r2) goto L_0x0023
            goto L_0x001a
        L_0x0023:
            r7.apply(r4, r5)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.restoreFromXml(org.xmlpull.v1.XmlPullParser, int, java.lang.String, com.android.server.pm.PackageManagerService$BlobXmlRestorer):void");
    }

    /* Debug info: failed to restart local var, previous not found, register: 6 */
    public byte[] getPreferredActivityBackup(int userId) {
        if (Binder.getCallingUid() == 1000) {
            ByteArrayOutputStream dataStream = new ByteArrayOutputStream();
            try {
                XmlSerializer serializer = new FastXmlSerializer();
                serializer.setOutput(dataStream, StandardCharsets.UTF_8.name());
                serializer.startDocument((String) null, true);
                serializer.startTag((String) null, TAG_PREFERRED_BACKUP);
                synchronized (this.mPackages) {
                    this.mSettings.writePreferredActivitiesLPr(serializer, userId, true);
                }
                serializer.endTag((String) null, TAG_PREFERRED_BACKUP);
                serializer.endDocument();
                serializer.flush();
                return dataStream.toByteArray();
            } catch (Exception e) {
                return null;
            }
        } else {
            throw new SecurityException("Only the system may call getPreferredActivityBackup()");
        }
    }

    public void restorePreferredActivities(byte[] backup, int userId) {
        if (Binder.getCallingUid() == 1000) {
            try {
                XmlPullParser parser = Xml.newPullParser();
                parser.setInput(new ByteArrayInputStream(backup), StandardCharsets.UTF_8.name());
                restoreFromXml(parser, userId, TAG_PREFERRED_BACKUP, new BlobXmlRestorer() {
                    public final void apply(XmlPullParser xmlPullParser, int i) {
                        PackageManagerService.this.lambda$restorePreferredActivities$24$PackageManagerService(xmlPullParser, i);
                    }
                });
            } catch (Exception e) {
            }
        } else {
            throw new SecurityException("Only the system may call restorePreferredActivities()");
        }
    }

    public /* synthetic */ void lambda$restorePreferredActivities$24$PackageManagerService(XmlPullParser readParser, int readUserId) throws IOException, XmlPullParserException {
        synchronized (this.mPackages) {
            this.mSettings.readPreferredActivitiesLPw(readParser, readUserId);
        }
        updateDefaultHomeNotLocked(readUserId);
    }

    /* Debug info: failed to restart local var, previous not found, register: 5 */
    public byte[] getDefaultAppsBackup(int userId) {
        if (Binder.getCallingUid() == 1000) {
            ByteArrayOutputStream dataStream = new ByteArrayOutputStream();
            try {
                XmlSerializer serializer = new FastXmlSerializer();
                serializer.setOutput(dataStream, StandardCharsets.UTF_8.name());
                serializer.startDocument((String) null, true);
                serializer.startTag((String) null, TAG_DEFAULT_APPS);
                synchronized (this.mPackages) {
                    this.mSettings.writeDefaultAppsLPr(serializer, userId);
                }
                serializer.endTag((String) null, TAG_DEFAULT_APPS);
                serializer.endDocument();
                serializer.flush();
                return dataStream.toByteArray();
            } catch (Exception e) {
                return null;
            }
        } else {
            throw new SecurityException("Only the system may call getDefaultAppsBackup()");
        }
    }

    public void restoreDefaultApps(byte[] backup, int userId) {
        if (Binder.getCallingUid() == 1000) {
            try {
                XmlPullParser parser = Xml.newPullParser();
                parser.setInput(new ByteArrayInputStream(backup), StandardCharsets.UTF_8.name());
                restoreFromXml(parser, userId, TAG_DEFAULT_APPS, new BlobXmlRestorer() {
                    public final void apply(XmlPullParser xmlPullParser, int i) {
                        PackageManagerService.this.lambda$restoreDefaultApps$25$PackageManagerService(xmlPullParser, i);
                    }
                });
            } catch (Exception e) {
            }
        } else {
            throw new SecurityException("Only the system may call restoreDefaultApps()");
        }
    }

    public /* synthetic */ void lambda$restoreDefaultApps$25$PackageManagerService(XmlPullParser parser1, int userId1) throws IOException, XmlPullParserException {
        String defaultBrowser;
        PackageManagerInternal.DefaultBrowserProvider provider;
        synchronized (this.mPackages) {
            this.mSettings.readDefaultAppsLPw(parser1, userId1);
            defaultBrowser = this.mSettings.removeDefaultBrowserPackageNameLPw(userId1);
        }
        if (defaultBrowser != null) {
            synchronized (this.mPackages) {
                provider = this.mDefaultBrowserProvider;
            }
            provider.setDefaultBrowser(defaultBrowser, userId1);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 5 */
    public byte[] getIntentFilterVerificationBackup(int userId) {
        if (Binder.getCallingUid() == 1000) {
            ByteArrayOutputStream dataStream = new ByteArrayOutputStream();
            try {
                XmlSerializer serializer = new FastXmlSerializer();
                serializer.setOutput(dataStream, StandardCharsets.UTF_8.name());
                serializer.startDocument((String) null, true);
                serializer.startTag((String) null, TAG_INTENT_FILTER_VERIFICATION);
                synchronized (this.mPackages) {
                    this.mSettings.writeAllDomainVerificationsLPr(serializer, userId);
                }
                serializer.endTag((String) null, TAG_INTENT_FILTER_VERIFICATION);
                serializer.endDocument();
                serializer.flush();
                return dataStream.toByteArray();
            } catch (Exception e) {
                return null;
            }
        } else {
            throw new SecurityException("Only the system may call getIntentFilterVerificationBackup()");
        }
    }

    public void restoreIntentFilterVerification(byte[] backup, int userId) {
        if (Binder.getCallingUid() == 1000) {
            try {
                XmlPullParser parser = Xml.newPullParser();
                parser.setInput(new ByteArrayInputStream(backup), StandardCharsets.UTF_8.name());
                restoreFromXml(parser, userId, TAG_INTENT_FILTER_VERIFICATION, new BlobXmlRestorer() {
                    public final void apply(XmlPullParser xmlPullParser, int i) {
                        PackageManagerService.this.lambda$restoreIntentFilterVerification$26$PackageManagerService(xmlPullParser, i);
                    }
                });
            } catch (Exception e) {
            }
        } else {
            throw new SecurityException("Only the system may call restorePreferredActivities()");
        }
    }

    public /* synthetic */ void lambda$restoreIntentFilterVerification$26$PackageManagerService(XmlPullParser parser1, int userId1) throws IOException, XmlPullParserException {
        synchronized (this.mPackages) {
            this.mSettings.readAllDomainVerificationsLPr(parser1, userId1);
            this.mSettings.writeLPr();
        }
    }

    public void addCrossProfileIntentFilter(IntentFilter intentFilter, String ownerPackage, int sourceUserId, int targetUserId, int flags) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", (String) null);
        int callingUid = Binder.getCallingUid();
        enforceOwnerRights(ownerPackage, callingUid);
        PackageManagerServiceUtils.enforceShellRestriction("no_debugging_features", callingUid, sourceUserId);
        if (intentFilter.countActions() == 0) {
            Slog.w(TAG, "Cannot set a crossProfile intent filter with no filter actions");
            return;
        }
        synchronized (this.mPackages) {
            CrossProfileIntentFilter newFilter = new CrossProfileIntentFilter(intentFilter, ownerPackage, targetUserId, flags);
            CrossProfileIntentResolver resolver = this.mSettings.editCrossProfileIntentResolverLPw(sourceUserId);
            ArrayList<CrossProfileIntentFilter> existing = resolver.findFilters(intentFilter);
            if (existing != null) {
                int size = existing.size();
                int i = 0;
                while (i < size) {
                    if (!newFilter.equalsIgnoreFilter(existing.get(i))) {
                        i++;
                    } else {
                        return;
                    }
                }
            }
            resolver.addFilter(newFilter);
            scheduleWritePackageRestrictionsLocked(sourceUserId);
        }
    }

    public void clearCrossProfileIntentFilters(int sourceUserId, String ownerPackage) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", (String) null);
        int callingUid = Binder.getCallingUid();
        enforceOwnerRights(ownerPackage, callingUid);
        PackageManagerServiceUtils.enforceShellRestriction("no_debugging_features", callingUid, sourceUserId);
        synchronized (this.mPackages) {
            CrossProfileIntentResolver resolver = this.mSettings.editCrossProfileIntentResolverLPw(sourceUserId);
            Iterator<CrossProfileIntentFilter> it = new ArraySet<>(resolver.filterSet()).iterator();
            while (it.hasNext()) {
                CrossProfileIntentFilter filter = it.next();
                if (filter.getOwnerPackage().equals(ownerPackage)) {
                    resolver.removeFilter(filter);
                }
            }
            scheduleWritePackageRestrictionsLocked(sourceUserId);
        }
    }

    private void enforceOwnerRights(String pkg, int callingUid) {
        if (UserHandle.getAppId(callingUid) != 1000) {
            int callingUserId = UserHandle.getUserId(callingUid);
            PackageInfo pi = getPackageInfo(pkg, 0, callingUserId);
            if (pi == null) {
                throw new IllegalArgumentException("Unknown package " + pkg + " on user " + callingUserId);
            } else if (!UserHandle.isSameApp(pi.applicationInfo.uid, callingUid)) {
                throw new SecurityException("Calling uid " + callingUid + " does not own package " + pkg);
            }
        }
    }

    public ComponentName getHomeActivities(List<ResolveInfo> allHomeCandidates) {
        if (getInstantAppPackageName(Binder.getCallingUid()) != null) {
            return null;
        }
        return getHomeActivitiesAsUser(allHomeCandidates, UserHandle.getCallingUserId());
    }

    public void sendSessionUpdatedBroadcast(PackageInstaller.SessionInfo sessionInfo, int userId) {
        if (!TextUtils.isEmpty(sessionInfo.installerPackageName)) {
            this.mContext.sendBroadcastAsUser(new Intent("android.content.pm.action.SESSION_UPDATED").putExtra("android.content.pm.extra.SESSION", sessionInfo).setPackage(sessionInfo.installerPackageName), UserHandle.of(userId));
        }
    }

    public void sendSessionCommitBroadcast(PackageInstaller.SessionInfo sessionInfo, int userId) {
        UserManagerService ums = UserManagerService.getInstance();
        if (ums != null) {
            UserInfo parent = ums.getProfileParent(userId);
            int launcherUid = parent != null ? parent.id : userId;
            ComponentName launcherComponent = getDefaultHomeActivity(launcherUid);
            if (launcherComponent != null) {
                this.mContext.sendBroadcastAsUser(new Intent("android.content.pm.action.SESSION_COMMITTED").putExtra("android.content.pm.extra.SESSION", sessionInfo).putExtra("android.intent.extra.USER", UserHandle.of(userId)).setPackage(launcherComponent.getPackageName()), UserHandle.of(launcherUid));
            }
            if (this.mAppPredictionServicePackage != null) {
                this.mContext.sendBroadcastAsUser(new Intent("android.content.pm.action.SESSION_COMMITTED").putExtra("android.content.pm.extra.SESSION", sessionInfo).putExtra("android.intent.extra.USER", UserHandle.of(userId)).setPackage(this.mAppPredictionServicePackage), UserHandle.of(launcherUid));
            }
        }
    }

    /* access modifiers changed from: private */
    public ComponentName getDefaultHomeActivity(int userId) {
        List<ResolveInfo> allHomeCandidates = new ArrayList<>();
        ComponentName cn = getHomeActivitiesAsUser(allHomeCandidates, userId);
        if (cn != null) {
            return cn;
        }
        int lastPriority = Integer.MIN_VALUE;
        ComponentName lastComponent = null;
        int size = allHomeCandidates.size();
        for (int i = 0; i < size; i++) {
            ResolveInfo ri = allHomeCandidates.get(i);
            if (ri.priority > lastPriority) {
                lastComponent = ri.activityInfo.getComponentName();
                lastPriority = ri.priority;
            } else if (ri.priority == lastPriority) {
                lastComponent = null;
            }
        }
        return lastComponent;
    }

    private Intent getHomeIntent() {
        Intent intent = new Intent("android.intent.action.MAIN");
        intent.addCategory("android.intent.category.HOME");
        intent.addCategory("android.intent.category.DEFAULT");
        return intent;
    }

    private IntentFilter getHomeFilter() {
        IntentFilter filter = new IntentFilter("android.intent.action.MAIN");
        filter.addCategory("android.intent.category.HOME");
        filter.addCategory("android.intent.category.DEFAULT");
        return filter;
    }

    /* access modifiers changed from: package-private */
    public ComponentName getHomeActivitiesAsUser(List<ResolveInfo> allHomeCandidates, int userId) {
        PackageManagerInternal.DefaultHomeProvider provider;
        List<ResolveInfo> resolveInfos = queryIntentActivitiesInternal(getHomeIntent(), (String) null, 128, userId);
        allHomeCandidates.clear();
        if (resolveInfos == null) {
            return null;
        }
        allHomeCandidates.addAll(resolveInfos);
        synchronized (this.mPackages) {
            provider = this.mDefaultHomeProvider;
        }
        if (provider == null) {
            Slog.e(TAG, "mDefaultHomeProvider is null");
            return null;
        }
        String packageName = provider.getDefaultHome(userId);
        if (packageName == null) {
            return null;
        }
        int resolveInfosSize = resolveInfos.size();
        for (int i = 0; i < resolveInfosSize; i++) {
            ResolveInfo resolveInfo = resolveInfos.get(i);
            if (resolveInfo.activityInfo != null && TextUtils.equals(resolveInfo.activityInfo.packageName, packageName)) {
                return new ComponentName(resolveInfo.activityInfo.packageName, resolveInfo.activityInfo.name);
            }
        }
        return null;
    }

    private void updateDefaultHomeNotLocked(SparseBooleanArray userIds) {
        if (Thread.holdsLock(this.mPackages)) {
            Slog.wtf(TAG, "Calling thread " + Thread.currentThread().getName() + " is holding mPackages", new Throwable());
        }
        for (int i = userIds.size() - 1; i >= 0; i--) {
            updateDefaultHomeNotLocked(userIds.keyAt(i));
        }
    }

    private boolean updateDefaultHomeNotLocked(int userId) {
        PackageManagerInternal.DefaultHomeProvider provider;
        if (Thread.holdsLock(this.mPackages)) {
            Slog.wtf(TAG, "Calling thread " + Thread.currentThread().getName() + " is holding mPackages", new Throwable());
        }
        if (!this.mSystemReady) {
            return false;
        }
        Intent intent = getHomeIntent();
        String str = null;
        ResolveInfo preferredResolveInfo = findPreferredActivityNotLocked(intent, (String) null, 0, queryIntentActivitiesInternal(intent, (String) null, 128, userId), 0, true, false, false, userId);
        if (!(preferredResolveInfo == null || preferredResolveInfo.activityInfo == null)) {
            str = preferredResolveInfo.activityInfo.packageName;
        }
        String packageName = str;
        synchronized (this.mPackages) {
            provider = this.mDefaultHomeProvider;
        }
        if (provider == null) {
            Slog.e(TAG, "Default home provider has not been set");
            return false;
        } else if (TextUtils.equals(provider.getDefaultHome(userId), packageName)) {
            return false;
        } else {
            String[] callingPackages = getPackagesForUid(Binder.getCallingUid());
            if (callingPackages != null && ArrayUtils.contains(callingPackages, this.mRequiredPermissionControllerPackage)) {
                return false;
            }
            provider.setDefaultHomeAsync(packageName, userId, new Consumer(userId, packageName) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ String f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void accept(Object obj) {
                    PackageManagerService.this.lambda$updateDefaultHomeNotLocked$27$PackageManagerService(this.f$1, this.f$2, (Boolean) obj);
                }
            });
            return true;
        }
    }

    public /* synthetic */ void lambda$updateDefaultHomeNotLocked$27$PackageManagerService(int userId, String packageName, Boolean successful) {
        if (successful.booleanValue()) {
            PackageManagerServiceInjector.setDefaultHome(userId, packageName);
            postPreferredActivityChangedBroadcast(userId);
        }
    }

    public void setHomeActivity(ComponentName comp, int userId) {
        if (getInstantAppPackageName(Binder.getCallingUid()) == null) {
            ArrayList<ResolveInfo> homeActivities = new ArrayList<>();
            getHomeActivitiesAsUser(homeActivities, userId);
            boolean found = false;
            int size = homeActivities.size();
            ComponentName[] set = new ComponentName[size];
            for (int i = 0; i < size; i++) {
                ActivityInfo info = homeActivities.get(i).activityInfo;
                ComponentName activityName = new ComponentName(info.packageName, info.name);
                set[i] = activityName;
                if (!found && activityName.equals(comp)) {
                    found = true;
                }
            }
            if (found) {
                replacePreferredActivity(getHomeFilter(), 1048576, set, comp, userId);
                return;
            }
            throw new IllegalArgumentException("Component " + comp + " cannot be home on user " + userId);
        }
    }

    private String getSetupWizardPackageName() {
        Intent intent = new Intent("android.intent.action.MAIN");
        intent.addCategory("android.intent.category.SETUP_WIZARD");
        List<ResolveInfo> matches = queryIntentActivitiesInternal(intent, (String) null, 1835520, UserHandle.myUserId());
        if (matches.size() == 1) {
            return matches.get(0).getComponentInfo().packageName;
        }
        Slog.e(TAG, "There should probably be exactly one setup wizard; found " + matches.size() + ": matches=" + matches);
        return null;
    }

    private String getStorageManagerPackageName() {
        List<ResolveInfo> matches = queryIntentActivitiesInternal(new Intent("android.os.storage.action.MANAGE_STORAGE"), (String) null, 1835520, UserHandle.myUserId());
        if (matches.size() == 1) {
            return matches.get(0).getComponentInfo().packageName;
        }
        Slog.e(TAG, "There should probably be exactly one storage manager; found " + matches.size() + ": matches=" + matches);
        return null;
    }

    public String getSystemTextClassifierPackageName() {
        return this.mContext.getString(17039736);
    }

    public String getAttentionServicePackageName() {
        ComponentName componentName;
        String flattenedComponentName = this.mContext.getString(17039722);
        if (flattenedComponentName == null || (componentName = ComponentName.unflattenFromString(flattenedComponentName)) == null || componentName.getPackageName() == null) {
            return null;
        }
        return componentName.getPackageName();
    }

    private String getDocumenterPackageName() {
        Intent intent = new Intent("android.intent.action.OPEN_DOCUMENT");
        intent.addCategory("android.intent.category.OPENABLE");
        intent.setType("*/*");
        List<ResolveInfo> matches = queryIntentActivitiesInternal(intent, intent.resolveTypeIfNeeded(this.mContext.getContentResolver()), 1835520, UserHandle.myUserId());
        if (matches.size() == 1) {
            return matches.get(0).getComponentInfo().packageName;
        }
        Slog.e(TAG, "There should probably be exactly one documenter; found " + matches.size() + ": matches=" + matches);
        return null;
    }

    public String getWellbeingPackageName() {
        return this.mContext.getString(17039738);
    }

    public String getAppPredictionServicePackageName() {
        ComponentName appPredictionServiceComponentName;
        String flattenedAppPredictionServiceComponentName = this.mContext.getString(17039720);
        if (flattenedAppPredictionServiceComponentName == null || (appPredictionServiceComponentName = ComponentName.unflattenFromString(flattenedAppPredictionServiceComponentName)) == null) {
            return null;
        }
        return appPredictionServiceComponentName.getPackageName();
    }

    public String getSystemCaptionsServicePackageName() {
        ComponentName systemCaptionsServiceComponentName;
        String flattenedSystemCaptionsServiceComponentName = this.mContext.getString(17039735);
        if (!TextUtils.isEmpty(flattenedSystemCaptionsServiceComponentName) && (systemCaptionsServiceComponentName = ComponentName.unflattenFromString(flattenedSystemCaptionsServiceComponentName)) != null) {
            return systemCaptionsServiceComponentName.getPackageName();
        }
        return null;
    }

    public String getIncidentReportApproverPackageName() {
        return this.mContext.getString(17039768);
    }

    public void setApplicationEnabledSetting(String appPackageName, int newState, int flags, int userId, String callingPackage) {
        if (sUserManager.exists(userId)) {
            if (callingPackage == null) {
                callingPackage = Integer.toString(Binder.getCallingUid());
            }
            setEnabledSetting(appPackageName, (String) null, newState, flags, userId, callingPackage);
        }
    }

    public void setUpdateAvailable(String packageName, boolean updateAvailable) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.INSTALL_PACKAGES", (String) null);
        synchronized (this.mPackages) {
            PackageSetting pkgSetting = this.mSettings.mPackages.get(packageName);
            if (pkgSetting != null) {
                pkgSetting.setUpdateAvailable(updateAvailable);
            }
        }
    }

    public void setComponentEnabledSetting(ComponentName componentName, int newState, int flags, int userId) {
        if (sUserManager.exists(userId)) {
            setEnabledSetting(componentName.getPackageName(), componentName.getClassName(), newState, flags, userId, (String) null);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 24 */
    /* JADX WARNING: Code restructure failed: missing block: B:100:0x01e4, code lost:
        if (r4 == 0) goto L_0x01e9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:102:0x01e7, code lost:
        if (r4 != 1) goto L_0x01ea;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:105:0x0210, code lost:
        throw new java.lang.SecurityException("Shell cannot change component state for " + r2 + com.android.server.slice.SliceClientPermissions.SliceAuthority.DELIMITER + r3 + " to " + r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:106:0x0211, code lost:
        monitor-exit(r7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:107:0x0212, code lost:
        if (r3 != null) goto L_0x0258;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:108:0x0214, code lost:
        r5 = r1.mPackages;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:109:0x0216, code lost:
        monitor-enter(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:112:0x021b, code lost:
        if (r13.getEnabled(r11) != r4) goto L_0x021f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:113:0x021d, code lost:
        monitor-exit(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:114:0x021e, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:115:0x021f, code lost:
        monitor-exit(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:116:0x0220, code lost:
        r7 = r13.pkg;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:117:0x0224, code lost:
        if (r7.isStub == false) goto L_0x022e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:119:0x022a, code lost:
        if (r7.isSystem() == false) goto L_0x022e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:120:0x022c, code lost:
        r5 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:121:0x022e, code lost:
        r5 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:123:0x0230, code lost:
        if (r5 == false) goto L_0x023e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:124:0x0232, code lost:
        if (r4 == 0) goto L_0x0237;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:126:0x0235, code lost:
        if (r4 != 1) goto L_0x023e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:128:0x023b, code lost:
        if (enableCompressedPackage(r7) != false) goto L_0x023e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:129:0x023d, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:130:0x023e, code lost:
        if (r4 == 0) goto L_0x0247;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:132:0x0241, code lost:
        if (r4 != 1) goto L_0x0244;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:133:0x0244, code lost:
        r12 = r30;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:134:0x0247, code lost:
        r12 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:135:0x0249, code lost:
        r5 = r1.mPackages;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:136:0x024b, code lost:
        monitor-enter(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:138:?, code lost:
        r13.setEnabled(r4, r11, r12);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:139:0x024f, code lost:
        monitor-exit(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:148:0x0258, code lost:
        r5 = r1.mPackages;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:149:0x025a, code lost:
        monitor-enter(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:151:?, code lost:
        r7 = r13.pkg;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:152:0x025d, code lost:
        if (r7 == null) goto L_0x0265;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:154:0x0263, code lost:
        if (r7.hasComponentClassName(r3) != false) goto L_0x02ad;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:155:0x0265, code lost:
        if (r7 == null) goto L_0x028f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:157:0x026d, code lost:
        if (r7.applicationInfo.targetSdkVersion >= 16) goto L_0x0270;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:160:0x028e, code lost:
        throw new java.lang.IllegalArgumentException("Component class " + r3 + " does not exist in " + r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:161:0x028f, code lost:
        android.util.Slog.w(TAG, "Failed setComponentEnabledSetting: component class " + r3 + " does not exist in " + r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:162:0x02ad, code lost:
        if (r4 == 0) goto L_0x02dd;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:164:0x02b0, code lost:
        if (r4 == 1) goto L_0x02d5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:166:0x02b3, code lost:
        if (r4 == 2) goto L_0x02cd;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:167:0x02b5, code lost:
        android.util.Slog.e(TAG, "Invalid new component state: " + r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:168:0x02cb, code lost:
        monitor-exit(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:169:0x02cc, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:171:0x02d1, code lost:
        if (r13.disableComponentLPw(r3, r11) != false) goto L_0x02e5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:172:0x02d3, code lost:
        monitor-exit(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:173:0x02d4, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:175:0x02d9, code lost:
        if (r13.enableComponentLPw(r3, r11) != false) goto L_0x02e5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:176:0x02db, code lost:
        monitor-exit(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:177:0x02dc, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:179:0x02e1, code lost:
        if (r13.restoreComponentLPw(r3, r11) != false) goto L_0x02e5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:180:0x02e3, code lost:
        monitor-exit(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:181:0x02e4, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:182:0x02e5, code lost:
        monitor-exit(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:183:0x02e6, code lost:
        r12 = r30;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:184:0x02e8, code lost:
        r7 = r1.mPackages;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:185:0x02ea, code lost:
        monitor-enter(r7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:187:?, code lost:
        scheduleWritePackageRestrictionsLocked(r11);
        updateSequenceNumberLP(r13, new int[]{r11});
        r16 = android.os.Binder.clearCallingIdentity();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:189:?, code lost:
        updateInstantAppInstallerLocked(r25);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:191:?, code lost:
        android.os.Binder.restoreCallingIdentity(r16);
        r5 = r1.mPendingBroadcasts.get(r11, r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:192:0x0308, code lost:
        if (r5 != null) goto L_0x030d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:193:0x030a, code lost:
        r20 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:194:0x030d, code lost:
        r20 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:195:0x030f, code lost:
        if (r20 == false) goto L_0x0318;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:196:0x0311, code lost:
        r5 = new java.util.ArrayList<>();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:198:0x031c, code lost:
        if (r5.contains(r10) != false) goto L_0x0321;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:199:0x031e, code lost:
        r5.add(r10);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:201:0x0323, code lost:
        if ((r28 & 1) != 0) goto L_0x032e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:202:0x0325, code lost:
        r18 = true;
        r1.mPendingBroadcasts.remove(r11, r2);
        r0 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:203:0x032e, code lost:
        if (r20 == false) goto L_0x0335;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:204:0x0330, code lost:
        r1.mPendingBroadcasts.put(r11, r2, r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:206:0x033c, code lost:
        if (r1.mHandler.hasMessages(1) != false) goto L_0x0355;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:208:0x0346, code lost:
        if (android.os.SystemClock.uptimeMillis() <= r1.mServiceStartWithDelay) goto L_0x034b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:209:0x0348, code lost:
        r3 = 1000;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:210:0x034b, code lost:
        r3 = com.android.server.job.controllers.JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:211:0x034d, code lost:
        r0 = true;
        r1.mHandler.sendEmptyMessageDelayed(1, r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:212:0x0355, code lost:
        r0 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:213:0x0356, code lost:
        monitor-exit(r7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:214:0x0357, code lost:
        r3 = android.os.Binder.clearCallingIdentity();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:215:0x035b, code lost:
        if (r18 == false) goto L_0x0372;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:217:?, code lost:
        r7 = android.os.UserHandle.getUid(r11, r13.appId);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:218:0x0365, code lost:
        if ((r28 & 1) == 0) goto L_0x0368;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:220:0x0368, code lost:
        r0 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:221:0x0369, code lost:
        sendPackageChangedBroadcast(r2, r0, r5, r7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:222:0x036d, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:223:0x036e, code lost:
        android.os.Binder.restoreCallingIdentity(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:224:0x0371, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:225:0x0372, code lost:
        android.os.Binder.restoreCallingIdentity(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:226:0x0376, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:227:0x0377, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:228:0x0378, code lost:
        r3 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:230:?, code lost:
        android.os.Binder.restoreCallingIdentity(r16);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:231:0x037c, code lost:
        throw r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:67:0x0137, code lost:
        if (android.os.UserHandle.isSameApp(r14, r13.appId) != false) goto L_0x01b5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:68:0x0139, code lost:
        if (r6 == false) goto L_0x0162;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:70:0x013f, code lost:
        if (filterAppAccessLPr(r13, r14, r11) == false) goto L_0x0142;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:72:0x0148, code lost:
        if (r1.mProtectedPackages.isPackageStateProtected(r11, r2) != false) goto L_0x014b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:74:0x0161, code lost:
        throw new java.lang.SecurityException("Cannot disable a protected package: " + r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:75:0x0162, code lost:
        r5 = new java.lang.StringBuilder();
        r5.append("Attempt to change component state; pid=");
        r5.append(android.os.Binder.getCallingPid());
        r5.append(", uid=");
        r5.append(r14);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:76:0x017d, code lost:
        if (r3 != null) goto L_0x0191;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:77:0x017f, code lost:
        r7 = ", package=" + r2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:78:0x0191, code lost:
        r7 = ", component=" + r2 + com.android.server.slice.SliceClientPermissions.SliceAuthority.DELIMITER + r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:79:0x01aa, code lost:
        r5.append(r7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:80:0x01b4, code lost:
        throw new java.lang.SecurityException(r5.toString());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:82:0x01bb, code lost:
        if (android.content.pm.PackageManager.APP_DETAILS_ACTIVITY_CLASS_NAME.equals(r3) == false) goto L_0x01c8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:83:0x01bd, code lost:
        if (r6 == false) goto L_0x01c0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:85:0x01c7, code lost:
        throw new java.lang.SecurityException("Cannot disable a system-generated component");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:86:0x01c8, code lost:
        r7 = r1.mPackages;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:87:0x01ca, code lost:
        monitor-enter(r7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:89:0x01cd, code lost:
        if (r14 != SHELL_UID) goto L_0x0211;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:92:0x01d3, code lost:
        if ((r13.pkgFlags & 256) != 0) goto L_0x0211;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:93:0x01d5, code lost:
        r5 = r13.getEnabled(r11);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:94:0x01d9, code lost:
        if (r3 != null) goto L_0x01ea;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:95:0x01db, code lost:
        if (r5 == 3) goto L_0x01e2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x01dd, code lost:
        if (r5 == 0) goto L_0x01e2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:98:0x01e0, code lost:
        if (r5 != 1) goto L_0x01ea;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:99:0x01e2, code lost:
        if (r4 == 3) goto L_0x01e9;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void setEnabledSetting(java.lang.String r25, java.lang.String r26, int r27, int r28, int r29, java.lang.String r30) {
        /*
            r24 = this;
            r1 = r24
            r2 = r25
            r3 = r26
            r4 = r27
            r11 = r29
            r0 = 2
            r12 = 3
            r13 = 1
            if (r4 == 0) goto L_0x0030
            if (r4 == r13) goto L_0x0030
            if (r4 == r0) goto L_0x0030
            if (r4 == r12) goto L_0x0030
            r5 = 4
            if (r4 != r5) goto L_0x0019
            goto L_0x0030
        L_0x0019:
            java.lang.IllegalArgumentException r0 = new java.lang.IllegalArgumentException
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r6 = "Invalid new component state: "
            r5.append(r6)
            r5.append(r4)
            java.lang.String r5 = r5.toString()
            r0.<init>(r5)
            throw r0
        L_0x0030:
            int r14 = android.os.Binder.getCallingUid()
            r5 = 1000(0x3e8, float:1.401E-42)
            if (r14 != r5) goto L_0x003b
            r5 = 0
            r15 = r5
            goto L_0x0044
        L_0x003b:
            android.content.Context r5 = r1.mContext
            java.lang.String r6 = "android.permission.CHANGE_COMPONENT_ENABLED_STATE"
            int r5 = r5.checkCallingOrSelfPermission(r6)
            r15 = r5
        L_0x0044:
            com.android.server.pm.permission.PermissionManagerServiceInternal r5 = r1.mPermissionManager
            r8 = 0
            r9 = 1
            java.lang.String r10 = "set enabled"
            r6 = r14
            r7 = r29
            r5.enforceCrossUserPermission(r6, r7, r8, r9, r10)
            if (r15 != 0) goto L_0x0055
            r6 = r13
            goto L_0x0056
        L_0x0055:
            r6 = 0
        L_0x0056:
            r7 = 0
            if (r3 != 0) goto L_0x005b
            r8 = r13
            goto L_0x005c
        L_0x005b:
            r8 = 0
        L_0x005c:
            java.lang.String r9 = r1.getInstantAppPackageName(r14)
            if (r9 == 0) goto L_0x0064
            r9 = r13
            goto L_0x0065
        L_0x0064:
            r9 = 0
        L_0x0065:
            if (r8 == 0) goto L_0x0069
            r10 = r2
            goto L_0x006a
        L_0x0069:
            r10 = r3
        L_0x006a:
            boolean r16 = com.android.server.pm.PackageManagerServiceInjector.isAllowedDisable(r2, r4)
            if (r16 != 0) goto L_0x0071
            return
        L_0x0071:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r5 = r1.mPackages
            monitor-enter(r5)
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0386 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r0 = r0.mPackages     // Catch:{ all -> 0x0386 }
            java.lang.Object r0 = r0.get(r2)     // Catch:{ all -> 0x0386 }
            com.android.server.pm.PackageSetting r0 = (com.android.server.pm.PackageSetting) r0     // Catch:{ all -> 0x0386 }
            r18 = r0
            r13 = r18
            if (r13 != 0) goto L_0x012c
            if (r9 != 0) goto L_0x00ce
            if (r3 != 0) goto L_0x00a8
            java.lang.IllegalArgumentException r0 = new java.lang.IllegalArgumentException     // Catch:{ all -> 0x00a1 }
            java.lang.StringBuilder r12 = new java.lang.StringBuilder     // Catch:{ all -> 0x00a1 }
            r12.<init>()     // Catch:{ all -> 0x00a1 }
            r18 = r7
            java.lang.String r7 = "Unknown package: "
            r12.append(r7)     // Catch:{ all -> 0x00c9 }
            r12.append(r2)     // Catch:{ all -> 0x00c9 }
            java.lang.String r7 = r12.toString()     // Catch:{ all -> 0x00c9 }
            r0.<init>(r7)     // Catch:{ all -> 0x00c9 }
            throw r0     // Catch:{ all -> 0x00c9 }
        L_0x00a1:
            r0 = move-exception
            r18 = r7
            r19 = r8
            goto L_0x038b
        L_0x00a8:
            r18 = r7
            java.lang.IllegalArgumentException r0 = new java.lang.IllegalArgumentException     // Catch:{ all -> 0x00c9 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x00c9 }
            r7.<init>()     // Catch:{ all -> 0x00c9 }
            java.lang.String r12 = "Unknown component: "
            r7.append(r12)     // Catch:{ all -> 0x00c9 }
            r7.append(r2)     // Catch:{ all -> 0x00c9 }
            java.lang.String r12 = "/"
            r7.append(r12)     // Catch:{ all -> 0x00c9 }
            r7.append(r3)     // Catch:{ all -> 0x00c9 }
            java.lang.String r7 = r7.toString()     // Catch:{ all -> 0x00c9 }
            r0.<init>(r7)     // Catch:{ all -> 0x00c9 }
            throw r0     // Catch:{ all -> 0x00c9 }
        L_0x00c9:
            r0 = move-exception
            r19 = r8
            goto L_0x038b
        L_0x00ce:
            r18 = r7
            java.lang.SecurityException r0 = new java.lang.SecurityException     // Catch:{ all -> 0x0127 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x0127 }
            r7.<init>()     // Catch:{ all -> 0x0127 }
            java.lang.String r12 = "Attempt to change component state; pid="
            r7.append(r12)     // Catch:{ all -> 0x0127 }
            int r12 = android.os.Binder.getCallingPid()     // Catch:{ all -> 0x0127 }
            r7.append(r12)     // Catch:{ all -> 0x0127 }
            java.lang.String r12 = ", uid="
            r7.append(r12)     // Catch:{ all -> 0x0127 }
            r7.append(r14)     // Catch:{ all -> 0x0127 }
            if (r3 != 0) goto L_0x0101
            java.lang.StringBuilder r12 = new java.lang.StringBuilder     // Catch:{ all -> 0x0127 }
            r12.<init>()     // Catch:{ all -> 0x0127 }
            r19 = r8
            java.lang.String r8 = ", package="
            r12.append(r8)     // Catch:{ all -> 0x038d }
            r12.append(r2)     // Catch:{ all -> 0x038d }
            java.lang.String r8 = r12.toString()     // Catch:{ all -> 0x038d }
            goto L_0x011c
        L_0x0101:
            r19 = r8
            java.lang.StringBuilder r8 = new java.lang.StringBuilder     // Catch:{ all -> 0x038d }
            r8.<init>()     // Catch:{ all -> 0x038d }
            java.lang.String r12 = ", component="
            r8.append(r12)     // Catch:{ all -> 0x038d }
            r8.append(r2)     // Catch:{ all -> 0x038d }
            java.lang.String r12 = "/"
            r8.append(r12)     // Catch:{ all -> 0x038d }
            r8.append(r3)     // Catch:{ all -> 0x038d }
            java.lang.String r8 = r8.toString()     // Catch:{ all -> 0x038d }
        L_0x011c:
            r7.append(r8)     // Catch:{ all -> 0x038d }
            java.lang.String r7 = r7.toString()     // Catch:{ all -> 0x038d }
            r0.<init>(r7)     // Catch:{ all -> 0x038d }
            throw r0     // Catch:{ all -> 0x038d }
        L_0x0127:
            r0 = move-exception
            r19 = r8
            goto L_0x038b
        L_0x012c:
            r18 = r7
            r19 = r8
            monitor-exit(r5)     // Catch:{ all -> 0x038d }
            int r5 = r13.appId
            boolean r5 = android.os.UserHandle.isSameApp(r14, r5)
            if (r5 != 0) goto L_0x01b5
            if (r6 == 0) goto L_0x0162
            boolean r5 = r1.filterAppAccessLPr(r13, r14, r11)
            if (r5 == 0) goto L_0x0142
            goto L_0x0162
        L_0x0142:
            com.android.server.pm.ProtectedPackages r5 = r1.mProtectedPackages
            boolean r5 = r5.isPackageStateProtected(r11, r2)
            if (r5 != 0) goto L_0x014b
            goto L_0x01b5
        L_0x014b:
            java.lang.SecurityException r0 = new java.lang.SecurityException
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r7 = "Cannot disable a protected package: "
            r5.append(r7)
            r5.append(r2)
            java.lang.String r5 = r5.toString()
            r0.<init>(r5)
            throw r0
        L_0x0162:
            java.lang.SecurityException r0 = new java.lang.SecurityException
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r7 = "Attempt to change component state; pid="
            r5.append(r7)
            int r7 = android.os.Binder.getCallingPid()
            r5.append(r7)
            java.lang.String r7 = ", uid="
            r5.append(r7)
            r5.append(r14)
            if (r3 != 0) goto L_0x0191
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            java.lang.String r8 = ", package="
            r7.append(r8)
            r7.append(r2)
            java.lang.String r7 = r7.toString()
            goto L_0x01aa
        L_0x0191:
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            java.lang.String r8 = ", component="
            r7.append(r8)
            r7.append(r2)
            java.lang.String r8 = "/"
            r7.append(r8)
            r7.append(r3)
            java.lang.String r7 = r7.toString()
        L_0x01aa:
            r5.append(r7)
            java.lang.String r5 = r5.toString()
            r0.<init>(r5)
            throw r0
        L_0x01b5:
            java.lang.String r5 = android.content.pm.PackageManager.APP_DETAILS_ACTIVITY_CLASS_NAME
            boolean r5 = r5.equals(r3)
            if (r5 == 0) goto L_0x01c8
            if (r6 == 0) goto L_0x01c0
            goto L_0x01c8
        L_0x01c0:
            java.lang.SecurityException r0 = new java.lang.SecurityException
            java.lang.String r5 = "Cannot disable a system-generated component"
            r0.<init>(r5)
            throw r0
        L_0x01c8:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r7 = r1.mPackages
            monitor-enter(r7)
            r5 = 2000(0x7d0, float:2.803E-42)
            if (r14 != r5) goto L_0x0211
            int r5 = r13.pkgFlags     // Catch:{ all -> 0x0383 }
            r5 = r5 & 256(0x100, float:3.59E-43)
            if (r5 != 0) goto L_0x0211
            int r5 = r13.getEnabled(r11)     // Catch:{ all -> 0x0383 }
            if (r3 != 0) goto L_0x01ea
            if (r5 == r12) goto L_0x01e2
            if (r5 == 0) goto L_0x01e2
            r0 = 1
            if (r5 != r0) goto L_0x01ea
        L_0x01e2:
            if (r4 == r12) goto L_0x01e9
            if (r4 == 0) goto L_0x01e9
            r0 = 1
            if (r4 != r0) goto L_0x01ea
        L_0x01e9:
            goto L_0x0211
        L_0x01ea:
            java.lang.SecurityException r0 = new java.lang.SecurityException     // Catch:{ all -> 0x0383 }
            java.lang.StringBuilder r8 = new java.lang.StringBuilder     // Catch:{ all -> 0x0383 }
            r8.<init>()     // Catch:{ all -> 0x0383 }
            java.lang.String r12 = "Shell cannot change component state for "
            r8.append(r12)     // Catch:{ all -> 0x0383 }
            r8.append(r2)     // Catch:{ all -> 0x0383 }
            java.lang.String r12 = "/"
            r8.append(r12)     // Catch:{ all -> 0x0383 }
            r8.append(r3)     // Catch:{ all -> 0x0383 }
            java.lang.String r12 = " to "
            r8.append(r12)     // Catch:{ all -> 0x0383 }
            r8.append(r4)     // Catch:{ all -> 0x0383 }
            java.lang.String r8 = r8.toString()     // Catch:{ all -> 0x0383 }
            r0.<init>(r8)     // Catch:{ all -> 0x0383 }
            throw r0     // Catch:{ all -> 0x0383 }
        L_0x0211:
            monitor-exit(r7)     // Catch:{ all -> 0x0383 }
            if (r3 != 0) goto L_0x0258
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r5 = r1.mPackages
            monitor-enter(r5)
            int r7 = r13.getEnabled(r11)     // Catch:{ all -> 0x0255 }
            if (r7 != r4) goto L_0x021f
            monitor-exit(r5)     // Catch:{ all -> 0x0255 }
            return
        L_0x021f:
            monitor-exit(r5)     // Catch:{ all -> 0x0255 }
            android.content.pm.PackageParser$Package r7 = r13.pkg
            boolean r5 = r7.isStub
            if (r5 == 0) goto L_0x022e
            boolean r5 = r7.isSystem()
            if (r5 == 0) goto L_0x022e
            r5 = 1
            goto L_0x022f
        L_0x022e:
            r5 = 0
        L_0x022f:
            r8 = r5
            if (r8 == 0) goto L_0x023e
            if (r4 == 0) goto L_0x0237
            r0 = 1
            if (r4 != r0) goto L_0x023e
        L_0x0237:
            boolean r5 = r1.enableCompressedPackage(r7)
            if (r5 != 0) goto L_0x023e
            return
        L_0x023e:
            if (r4 == 0) goto L_0x0247
            r0 = 1
            if (r4 != r0) goto L_0x0244
            goto L_0x0247
        L_0x0244:
            r12 = r30
            goto L_0x0249
        L_0x0247:
            r5 = 0
            r12 = r5
        L_0x0249:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r5 = r1.mPackages
            monitor-enter(r5)
            r13.setEnabled(r4, r11, r12)     // Catch:{ all -> 0x0252 }
            monitor-exit(r5)     // Catch:{ all -> 0x0252 }
            goto L_0x02e8
        L_0x0252:
            r0 = move-exception
            monitor-exit(r5)     // Catch:{ all -> 0x0252 }
            throw r0
        L_0x0255:
            r0 = move-exception
            monitor-exit(r5)     // Catch:{ all -> 0x0255 }
            throw r0
        L_0x0258:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r5 = r1.mPackages
            monitor-enter(r5)
            android.content.pm.PackageParser$Package r7 = r13.pkg     // Catch:{ all -> 0x0380 }
            if (r7 == 0) goto L_0x0265
            boolean r8 = r7.hasComponentClassName(r3)     // Catch:{ all -> 0x0380 }
            if (r8 != 0) goto L_0x02ad
        L_0x0265:
            if (r7 == 0) goto L_0x028f
            android.content.pm.ApplicationInfo r8 = r7.applicationInfo     // Catch:{ all -> 0x0380 }
            int r8 = r8.targetSdkVersion     // Catch:{ all -> 0x0380 }
            r12 = 16
            if (r8 >= r12) goto L_0x0270
            goto L_0x028f
        L_0x0270:
            java.lang.IllegalArgumentException r0 = new java.lang.IllegalArgumentException     // Catch:{ all -> 0x0380 }
            java.lang.StringBuilder r8 = new java.lang.StringBuilder     // Catch:{ all -> 0x0380 }
            r8.<init>()     // Catch:{ all -> 0x0380 }
            java.lang.String r12 = "Component class "
            r8.append(r12)     // Catch:{ all -> 0x0380 }
            r8.append(r3)     // Catch:{ all -> 0x0380 }
            java.lang.String r12 = " does not exist in "
            r8.append(r12)     // Catch:{ all -> 0x0380 }
            r8.append(r2)     // Catch:{ all -> 0x0380 }
            java.lang.String r8 = r8.toString()     // Catch:{ all -> 0x0380 }
            r0.<init>(r8)     // Catch:{ all -> 0x0380 }
            throw r0     // Catch:{ all -> 0x0380 }
        L_0x028f:
            java.lang.String r8 = "PackageManager"
            java.lang.StringBuilder r12 = new java.lang.StringBuilder     // Catch:{ all -> 0x0380 }
            r12.<init>()     // Catch:{ all -> 0x0380 }
            java.lang.String r0 = "Failed setComponentEnabledSetting: component class "
            r12.append(r0)     // Catch:{ all -> 0x0380 }
            r12.append(r3)     // Catch:{ all -> 0x0380 }
            java.lang.String r0 = " does not exist in "
            r12.append(r0)     // Catch:{ all -> 0x0380 }
            r12.append(r2)     // Catch:{ all -> 0x0380 }
            java.lang.String r0 = r12.toString()     // Catch:{ all -> 0x0380 }
            android.util.Slog.w(r8, r0)     // Catch:{ all -> 0x0380 }
        L_0x02ad:
            if (r4 == 0) goto L_0x02dd
            r0 = 1
            if (r4 == r0) goto L_0x02d5
            r8 = 2
            if (r4 == r8) goto L_0x02cd
            java.lang.String r0 = "PackageManager"
            java.lang.StringBuilder r8 = new java.lang.StringBuilder     // Catch:{ all -> 0x0380 }
            r8.<init>()     // Catch:{ all -> 0x0380 }
            java.lang.String r12 = "Invalid new component state: "
            r8.append(r12)     // Catch:{ all -> 0x0380 }
            r8.append(r4)     // Catch:{ all -> 0x0380 }
            java.lang.String r8 = r8.toString()     // Catch:{ all -> 0x0380 }
            android.util.Slog.e(r0, r8)     // Catch:{ all -> 0x0380 }
            monitor-exit(r5)     // Catch:{ all -> 0x0380 }
            return
        L_0x02cd:
            boolean r8 = r13.disableComponentLPw(r3, r11)     // Catch:{ all -> 0x0380 }
            if (r8 != 0) goto L_0x02e5
            monitor-exit(r5)     // Catch:{ all -> 0x0380 }
            return
        L_0x02d5:
            boolean r8 = r13.enableComponentLPw(r3, r11)     // Catch:{ all -> 0x0380 }
            if (r8 != 0) goto L_0x02e5
            monitor-exit(r5)     // Catch:{ all -> 0x0380 }
            return
        L_0x02dd:
            boolean r8 = r13.restoreComponentLPw(r3, r11)     // Catch:{ all -> 0x0380 }
            if (r8 != 0) goto L_0x02e5
            monitor-exit(r5)     // Catch:{ all -> 0x0380 }
            return
        L_0x02e5:
            monitor-exit(r5)     // Catch:{ all -> 0x0380 }
            r12 = r30
        L_0x02e8:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r7 = r1.mPackages
            monitor-enter(r7)
            r1.scheduleWritePackageRestrictionsLocked((int) r11)     // Catch:{ all -> 0x037d }
            r0 = 1
            int[] r5 = new int[r0]     // Catch:{ all -> 0x037d }
            r8 = 0
            r5[r8] = r11     // Catch:{ all -> 0x037d }
            r1.updateSequenceNumberLP(r13, r5)     // Catch:{ all -> 0x037d }
            long r16 = android.os.Binder.clearCallingIdentity()     // Catch:{ all -> 0x037d }
            r24.updateInstantAppInstallerLocked(r25)     // Catch:{ all -> 0x0377 }
            android.os.Binder.restoreCallingIdentity(r16)     // Catch:{ all -> 0x037d }
            com.android.server.pm.PackageManagerService$PendingPackageBroadcasts r5 = r1.mPendingBroadcasts     // Catch:{ all -> 0x037d }
            java.util.ArrayList r5 = r5.get(r11, r2)     // Catch:{ all -> 0x037d }
            if (r5 != 0) goto L_0x030d
            r20 = 1
            goto L_0x030f
        L_0x030d:
            r20 = r8
        L_0x030f:
            if (r20 == 0) goto L_0x0318
            java.util.ArrayList r21 = new java.util.ArrayList     // Catch:{ all -> 0x037d }
            r21.<init>()     // Catch:{ all -> 0x037d }
            r5 = r21
        L_0x0318:
            boolean r21 = r5.contains(r10)     // Catch:{ all -> 0x037d }
            if (r21 != 0) goto L_0x0321
            r5.add(r10)     // Catch:{ all -> 0x037d }
        L_0x0321:
            r21 = r28 & 1
            if (r21 != 0) goto L_0x032e
            r18 = 1
            com.android.server.pm.PackageManagerService$PendingPackageBroadcasts r0 = r1.mPendingBroadcasts     // Catch:{ all -> 0x037d }
            r0.remove(r11, r2)     // Catch:{ all -> 0x037d }
            r0 = 1
            goto L_0x0356
        L_0x032e:
            if (r20 == 0) goto L_0x0335
            com.android.server.pm.PackageManagerService$PendingPackageBroadcasts r0 = r1.mPendingBroadcasts     // Catch:{ all -> 0x037d }
            r0.put(r11, r2, r5)     // Catch:{ all -> 0x037d }
        L_0x0335:
            com.android.server.pm.PackageManagerService$PackageHandler r0 = r1.mHandler     // Catch:{ all -> 0x037d }
            r8 = 1
            boolean r22 = r0.hasMessages(r8)     // Catch:{ all -> 0x037d }
            if (r22 != 0) goto L_0x0355
            long r22 = android.os.SystemClock.uptimeMillis()     // Catch:{ all -> 0x037d }
            long r3 = r1.mServiceStartWithDelay     // Catch:{ all -> 0x037d }
            int r3 = (r22 > r3 ? 1 : (r22 == r3 ? 0 : -1))
            if (r3 <= 0) goto L_0x034b
            r3 = 1000(0x3e8, double:4.94E-321)
            goto L_0x034d
        L_0x034b:
            r3 = 10000(0x2710, double:4.9407E-320)
        L_0x034d:
            com.android.server.pm.PackageManagerService$PackageHandler r8 = r1.mHandler     // Catch:{ all -> 0x037d }
            r0 = 1
            r8.sendEmptyMessageDelayed(r0, r3)     // Catch:{ all -> 0x037d }
            goto L_0x0356
        L_0x0355:
            r0 = 1
        L_0x0356:
            monitor-exit(r7)     // Catch:{ all -> 0x037d }
            long r3 = android.os.Binder.clearCallingIdentity()
            if (r18 == 0) goto L_0x0372
            int r7 = r13.appId     // Catch:{ all -> 0x036d }
            int r7 = android.os.UserHandle.getUid(r11, r7)     // Catch:{ all -> 0x036d }
            r8 = r28 & 1
            if (r8 == 0) goto L_0x0368
            goto L_0x0369
        L_0x0368:
            r0 = 0
        L_0x0369:
            r1.sendPackageChangedBroadcast(r2, r0, r5, r7)     // Catch:{ all -> 0x036d }
            goto L_0x0372
        L_0x036d:
            r0 = move-exception
            android.os.Binder.restoreCallingIdentity(r3)
            throw r0
        L_0x0372:
            android.os.Binder.restoreCallingIdentity(r3)
            return
        L_0x0377:
            r0 = move-exception
            r3 = r0
            android.os.Binder.restoreCallingIdentity(r16)     // Catch:{ all -> 0x037d }
            throw r3     // Catch:{ all -> 0x037d }
        L_0x037d:
            r0 = move-exception
            monitor-exit(r7)     // Catch:{ all -> 0x037d }
            throw r0
        L_0x0380:
            r0 = move-exception
            monitor-exit(r5)     // Catch:{ all -> 0x0380 }
            throw r0
        L_0x0383:
            r0 = move-exception
            monitor-exit(r7)     // Catch:{ all -> 0x0383 }
            throw r0
        L_0x0386:
            r0 = move-exception
            r18 = r7
            r19 = r8
        L_0x038b:
            monitor-exit(r5)     // Catch:{ all -> 0x038d }
            throw r0
        L_0x038d:
            r0 = move-exception
            goto L_0x038b
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.setEnabledSetting(java.lang.String, java.lang.String, int, int, int, java.lang.String):void");
    }

    public void flushPackageRestrictionsAsUser(int userId) {
        if (getInstantAppPackageName(Binder.getCallingUid()) == null && sUserManager.exists(userId)) {
            this.mPermissionManager.enforceCrossUserPermission(Binder.getCallingUid(), userId, false, false, "flushPackageRestrictions");
            synchronized (this.mPackages) {
                this.mSettings.writePackageRestrictionsLPr(userId);
                this.mDirtyUsers.remove(Integer.valueOf(userId));
                if (this.mDirtyUsers.isEmpty()) {
                    this.mHandler.removeMessages(14);
                }
            }
        }
    }

    /* access modifiers changed from: private */
    public void sendPackageChangedBroadcast(String packageName, boolean killFlag, ArrayList<String> componentNames, int packageUid) {
        String str = packageName;
        ArrayList<String> arrayList = componentNames;
        Bundle extras = new Bundle(4);
        extras.putString("android.intent.extra.changed_component_name", arrayList.get(0));
        String[] nameList = new String[componentNames.size()];
        arrayList.toArray(nameList);
        extras.putStringArray("android.intent.extra.changed_component_name_list", nameList);
        extras.putBoolean("android.intent.extra.DONT_KILL_APP", killFlag);
        extras.putInt("android.intent.extra.UID", packageUid);
        int flags = !arrayList.contains(str) ? 1073741824 : 0;
        int userId = UserHandle.getUserId(packageUid);
        boolean isInstantApp = isInstantApp(str, userId);
        sendPackageBroadcast("android.intent.action.PACKAGE_CHANGED", packageName, extras, flags, (String) null, (IIntentReceiver) null, isInstantApp ? EMPTY_INT_ARRAY : new int[]{userId}, isInstantApp ? new int[]{userId} : EMPTY_INT_ARRAY);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:26:0x0060, code lost:
        return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void setPackageStoppedState(java.lang.String r18, boolean r19, int r20) {
        /*
            r17 = this;
            r8 = r17
            r15 = r20
            com.android.server.pm.UserManagerService r0 = sUserManager
            boolean r0 = r0.exists(r15)
            if (r0 != 0) goto L_0x000d
            return
        L_0x000d:
            int r7 = android.os.Binder.getCallingUid()
            java.lang.String r0 = r8.getInstantAppPackageName(r7)
            if (r0 == 0) goto L_0x0018
            return
        L_0x0018:
            android.content.Context r0 = r8.mContext
            java.lang.String r1 = "android.permission.CHANGE_COMPONENT_ENABLED_STATE"
            int r16 = r0.checkCallingOrSelfPermission(r1)
            if (r16 != 0) goto L_0x0024
            r0 = 1
            goto L_0x0025
        L_0x0024:
            r0 = 0
        L_0x0025:
            r5 = r0
            com.android.server.pm.permission.PermissionManagerServiceInternal r9 = r8.mPermissionManager
            r12 = 1
            r13 = 1
            java.lang.String r14 = "stop package"
            r10 = r7
            r11 = r20
            r9.enforceCrossUserPermission(r10, r11, r12, r13, r14)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r9 = r8.mPackages
            monitor-enter(r9)
            com.android.server.pm.Settings r0 = r8.mSettings     // Catch:{ all -> 0x0063 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r0 = r0.mPackages     // Catch:{ all -> 0x0063 }
            r10 = r18
            java.lang.Object r0 = r0.get(r10)     // Catch:{ all -> 0x0061 }
            com.android.server.pm.PackageSetting r0 = (com.android.server.pm.PackageSetting) r0     // Catch:{ all -> 0x0061 }
            boolean r1 = r8.filterAppAccessLPr(r0, r7, r15)     // Catch:{ all -> 0x0061 }
            if (r1 != 0) goto L_0x005e
            com.android.server.pm.Settings r1 = r8.mSettings     // Catch:{ all -> 0x0061 }
            r2 = r17
            r3 = r18
            r4 = r19
            r6 = r7
            r11 = r7
            r7 = r20
            boolean r1 = r1.setPackageStoppedStateLPw(r2, r3, r4, r5, r6, r7)     // Catch:{ all -> 0x0069 }
            if (r1 == 0) goto L_0x005f
            r8.scheduleWritePackageRestrictionsLocked((int) r15)     // Catch:{ all -> 0x0069 }
            goto L_0x005f
        L_0x005e:
            r11 = r7
        L_0x005f:
            monitor-exit(r9)     // Catch:{ all -> 0x0069 }
            return
        L_0x0061:
            r0 = move-exception
            goto L_0x0066
        L_0x0063:
            r0 = move-exception
            r10 = r18
        L_0x0066:
            r11 = r7
        L_0x0067:
            monitor-exit(r9)     // Catch:{ all -> 0x0069 }
            throw r0
        L_0x0069:
            r0 = move-exception
            goto L_0x0067
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.setPackageStoppedState(java.lang.String, boolean, int):void");
    }

    public String getInstallerPackageName(String packageName) {
        int callingUid = Binder.getCallingUid();
        synchronized (this.mPackages) {
            PackageSetting ps = this.mSettings.mPackages.get(packageName);
            if (filterAppAccessLPr(ps, callingUid, UserHandle.getUserId(callingUid))) {
                return null;
            }
            if (ps == null && this.mApexManager.isApexPackage(packageName)) {
                return null;
            }
            String installerPackageName = PackageManagerServiceInjector.getInstallerPackageName(packageName, this.mSettings.getInstallerPackageNameLPr(packageName));
            return installerPackageName;
        }
    }

    public boolean isOrphaned(String packageName) {
        synchronized (this.mPackages) {
            if (!this.mPackages.containsKey(packageName)) {
                return false;
            }
            boolean isOrphaned = this.mSettings.isOrphaned(packageName);
            return isOrphaned;
        }
    }

    public int getApplicationEnabledSetting(String packageName, int userId) {
        if (!sUserManager.exists(userId)) {
            return 2;
        }
        int callingUid = Binder.getCallingUid();
        this.mPermissionManager.enforceCrossUserPermission(callingUid, userId, false, false, "get enabled");
        synchronized (this.mPackages) {
            if (filterAppAccessLPr(this.mSettings.getPackageLPr(packageName), callingUid, userId)) {
                return 2;
            }
            int applicationEnabledSettingLPr = this.mSettings.getApplicationEnabledSettingLPr(packageName, userId);
            return applicationEnabledSettingLPr;
        }
    }

    public int getComponentEnabledSetting(ComponentName component, int userId) {
        if (component == null) {
            return 0;
        }
        if (!sUserManager.exists(userId)) {
            return 2;
        }
        int callingUid = Binder.getCallingUid();
        this.mPermissionManager.enforceCrossUserPermission(callingUid, userId, false, false, "getComponentEnabled");
        synchronized (this.mPackages) {
            if (filterAppAccessLPr(this.mSettings.getPackageLPr(component.getPackageName()), callingUid, component, 0, userId)) {
                return 2;
            }
            int componentEnabledSettingLPr = this.mSettings.getComponentEnabledSettingLPr(component, userId);
            return componentEnabledSettingLPr;
        }
    }

    public void enterSafeMode() {
        enforceSystemOrRoot("Only the system can request entering safe mode");
        if (!this.mSystemReady) {
            this.mSafeMode = true;
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:33:0x010c, code lost:
        sUserManager.systemReady();
        r3 = r9.length;
        r4 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x0113, code lost:
        if (r4 >= r3) goto L_0x011f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x0115, code lost:
        r14.mDefaultPermissionPolicy.grantDefaultPermissions(r9[r4]);
        r4 = r4 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:36:0x011f, code lost:
        r3 = com.android.server.pm.UserManagerService.getInstance().getUserIds();
        r4 = r3.length;
        r5 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:37:0x0129, code lost:
        if (r5 >= r4) goto L_0x0133;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x012b, code lost:
        com.android.server.pm.DefaultPermissionGrantPolicyInjector.grantDefaultPermissions(r14, r3[r5]);
        r5 = r5 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x0135, code lost:
        if (r9 != EMPTY_INT_ARRAY) goto L_0x013c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x0137, code lost:
        r14.mDefaultPermissionPolicy.scheduleReadDefaultPermissionExceptions();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x013c, code lost:
        r3 = r14.mPackages;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:0x013e, code lost:
        monitor-enter(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:?, code lost:
        r14.mPermissionManager.updateAllPermissions(android.os.storage.StorageManager.UUID_PRIVATE_INTERNAL, false, r14.mPackages.values(), r14.mPermissionCallback);
        ((com.android.server.policy.PermissionPolicyInternal) com.android.server.LocalServices.getService(com.android.server.policy.PermissionPolicyInternal.class)).setOnInitializedCallback(new com.android.server.pm.$$Lambda$PackageManagerService$jnotawFD1AlXlGEGCjX25xsyMtg(r14));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:46:0x015e, code lost:
        monitor-exit(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:0x015f, code lost:
        ((android.os.storage.StorageManager) r14.mContext.getSystemService(android.os.storage.StorageManager.class)).registerListener(r14.mStorageListener);
        r14.mInstallerService.systemReady();
        r14.mApexManager.systemReady();
        r14.mPackageDexOptimizer.systemReady();
        getStorageManagerInternal().addExternalStoragePolicy(new com.android.server.pm.PackageManagerService.AnonymousClass9(r14));
        sUserManager.reconcileUsers(android.os.storage.StorageManager.UUID_PRIVATE_INTERNAL);
        reconcileApps(android.os.storage.StorageManager.UUID_PRIVATE_INTERNAL);
        r14.mPermissionManager.systemReady();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:48:0x019c, code lost:
        if (r14.mInstantAppResolverConnection == null) goto L_0x01af;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x019e, code lost:
        r14.mContext.registerReceiver(new com.android.server.pm.PackageManagerService.AnonymousClass10(r14), new android.content.IntentFilter("android.intent.action.BOOT_COMPLETED"));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:50:0x01af, code lost:
        r14.mModuleInfoProvider.systemReady();
        r14.mInstallerService.restoreAndApplyStagedSessionIfNeeded();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:51:0x01b9, code lost:
        return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void systemReady() {
        /*
            r14 = this;
            java.lang.String r0 = "Only the system can claim the system is ready"
            enforceSystemOrRoot(r0)
            android.content.Context r0 = r14.mContext
            com.android.server.pm.PackageManagerServiceInjector.beforeSystemReady(r0)
            r0 = 1
            r14.mSystemReady = r0
            android.content.Context r1 = r14.mContext
            android.content.ContentResolver r1 = r1.getContentResolver()
            com.android.server.pm.PackageManagerService$8 r2 = new com.android.server.pm.PackageManagerService$8
            com.android.server.pm.PackageManagerService$PackageHandler r3 = r14.mHandler
            r2.<init>(r3, r1)
            android.content.Context r3 = r14.mContext
            android.content.ContentResolver r3 = r3.getContentResolver()
            java.lang.String r4 = "enable_ephemeral_feature"
            android.net.Uri r4 = android.provider.Settings.Global.getUriFor(r4)
            r5 = -1
            r6 = 0
            r3.registerContentObserver(r4, r6, r2, r5)
            android.content.Context r3 = r14.mContext
            android.content.ContentResolver r3 = r3.getContentResolver()
            java.lang.String r4 = "instant_apps_enabled"
            android.net.Uri r4 = android.provider.Settings.Secure.getUriFor(r4)
            r3.registerContentObserver(r4, r6, r2, r5)
            r2.onChange(r0)
            android.content.Context r3 = r14.mContext
            java.lang.String r3 = r3.getOpPackageName()
            android.content.Context r4 = r14.mContext
            android.content.ContentResolver r4 = r4.getContentResolver()
            com.android.internal.telephony.CarrierAppUtils.disableCarrierAppsUntilPrivileged(r3, r14, r4, r6)
            r14.disableSkuSpecificApps()
            android.content.Context r3 = r14.mContext
            android.content.ContentResolver r3 = r3.getContentResolver()
            java.lang.String r4 = "compatibility_mode"
            int r3 = android.provider.Settings.Global.getInt(r3, r4, r0)
            if (r3 != r0) goto L_0x005f
            goto L_0x0060
        L_0x005f:
            r0 = r6
        L_0x0060:
            android.content.pm.PackageParser.setCompatibilityModeEnabled(r0)
            int[] r3 = EMPTY_INT_ARRAY
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r4 = r14.mPackages
            monitor-enter(r4)
            java.util.ArrayList r5 = new java.util.ArrayList     // Catch:{ all -> 0x01c0 }
            r5.<init>()     // Catch:{ all -> 0x01c0 }
            r7 = r6
        L_0x006e:
            com.android.server.pm.Settings r8 = r14.mSettings     // Catch:{ all -> 0x01c0 }
            android.util.SparseArray<com.android.server.pm.PreferredIntentResolver> r8 = r8.mPreferredActivities     // Catch:{ all -> 0x01c0 }
            int r8 = r8.size()     // Catch:{ all -> 0x01c0 }
            if (r7 >= r8) goto L_0x00ec
            com.android.server.pm.Settings r8 = r14.mSettings     // Catch:{ all -> 0x01c0 }
            android.util.SparseArray<com.android.server.pm.PreferredIntentResolver> r8 = r8.mPreferredActivities     // Catch:{ all -> 0x01c0 }
            java.lang.Object r8 = r8.valueAt(r7)     // Catch:{ all -> 0x01c0 }
            com.android.server.pm.PreferredIntentResolver r8 = (com.android.server.pm.PreferredIntentResolver) r8     // Catch:{ all -> 0x01c0 }
            r5.clear()     // Catch:{ all -> 0x01c0 }
            java.util.Set r9 = r8.filterSet()     // Catch:{ all -> 0x01c0 }
            java.util.Iterator r9 = r9.iterator()     // Catch:{ all -> 0x01c0 }
        L_0x008d:
            boolean r10 = r9.hasNext()     // Catch:{ all -> 0x01c0 }
            if (r10 == 0) goto L_0x00a9
            java.lang.Object r10 = r9.next()     // Catch:{ all -> 0x01c0 }
            com.android.server.pm.PreferredActivity r10 = (com.android.server.pm.PreferredActivity) r10     // Catch:{ all -> 0x01c0 }
            com.android.server.pm.ComponentResolver r11 = r14.mComponentResolver     // Catch:{ all -> 0x01c0 }
            com.android.server.pm.PreferredComponent r12 = r10.mPref     // Catch:{ all -> 0x01c0 }
            android.content.ComponentName r12 = r12.mComponent     // Catch:{ all -> 0x01c0 }
            boolean r11 = r11.isActivityDefined(r12)     // Catch:{ all -> 0x01c0 }
            if (r11 != 0) goto L_0x00a8
            r5.add(r10)     // Catch:{ all -> 0x01c0 }
        L_0x00a8:
            goto L_0x008d
        L_0x00a9:
            int r9 = r5.size()     // Catch:{ all -> 0x01c0 }
            if (r9 <= 0) goto L_0x00e9
            r9 = r6
        L_0x00b0:
            int r10 = r5.size()     // Catch:{ all -> 0x01c0 }
            if (r9 >= r10) goto L_0x00dc
            java.lang.Object r10 = r5.get(r9)     // Catch:{ all -> 0x01c0 }
            com.android.server.pm.PreferredActivity r10 = (com.android.server.pm.PreferredActivity) r10     // Catch:{ all -> 0x01c0 }
            java.lang.String r11 = "PackageManager"
            java.lang.StringBuilder r12 = new java.lang.StringBuilder     // Catch:{ all -> 0x01c0 }
            r12.<init>()     // Catch:{ all -> 0x01c0 }
            java.lang.String r13 = "Removing dangling preferred activity: "
            r12.append(r13)     // Catch:{ all -> 0x01c0 }
            com.android.server.pm.PreferredComponent r13 = r10.mPref     // Catch:{ all -> 0x01c0 }
            android.content.ComponentName r13 = r13.mComponent     // Catch:{ all -> 0x01c0 }
            r12.append(r13)     // Catch:{ all -> 0x01c0 }
            java.lang.String r12 = r12.toString()     // Catch:{ all -> 0x01c0 }
            android.util.Slog.w(r11, r12)     // Catch:{ all -> 0x01c0 }
            r8.removeFilter(r10)     // Catch:{ all -> 0x01c0 }
            int r9 = r9 + 1
            goto L_0x00b0
        L_0x00dc:
            com.android.server.pm.Settings r9 = r14.mSettings     // Catch:{ all -> 0x01c0 }
            com.android.server.pm.Settings r10 = r14.mSettings     // Catch:{ all -> 0x01c0 }
            android.util.SparseArray<com.android.server.pm.PreferredIntentResolver> r10 = r10.mPreferredActivities     // Catch:{ all -> 0x01c0 }
            int r10 = r10.keyAt(r7)     // Catch:{ all -> 0x01c0 }
            r9.writePackageRestrictionsLPr(r10)     // Catch:{ all -> 0x01c0 }
        L_0x00e9:
            int r7 = r7 + 1
            goto L_0x006e
        L_0x00ec:
            com.android.server.pm.UserManagerService r7 = com.android.server.pm.UserManagerService.getInstance()     // Catch:{ all -> 0x01c0 }
            int[] r7 = r7.getUserIds()     // Catch:{ all -> 0x01c0 }
            int r8 = r7.length     // Catch:{ all -> 0x01c0 }
            r9 = r3
            r3 = r6
        L_0x00f7:
            if (r3 >= r8) goto L_0x010b
            r10 = r7[r3]     // Catch:{ all -> 0x01bd }
            com.android.server.pm.Settings r11 = r14.mSettings     // Catch:{ all -> 0x01bd }
            boolean r11 = r11.areDefaultRuntimePermissionsGrantedLPr(r10)     // Catch:{ all -> 0x01bd }
            if (r11 != 0) goto L_0x0108
            int[] r11 = com.android.internal.util.ArrayUtils.appendInt(r9, r10)     // Catch:{ all -> 0x01bd }
            r9 = r11
        L_0x0108:
            int r3 = r3 + 1
            goto L_0x00f7
        L_0x010b:
            monitor-exit(r4)     // Catch:{ all -> 0x01bd }
            com.android.server.pm.UserManagerService r3 = sUserManager
            r3.systemReady()
            int r3 = r9.length
            r4 = r6
        L_0x0113:
            if (r4 >= r3) goto L_0x011f
            r5 = r9[r4]
            com.android.server.pm.permission.DefaultPermissionGrantPolicy r7 = r14.mDefaultPermissionPolicy
            r7.grantDefaultPermissions(r5)
            int r4 = r4 + 1
            goto L_0x0113
        L_0x011f:
            com.android.server.pm.UserManagerService r3 = com.android.server.pm.UserManagerService.getInstance()
            int[] r3 = r3.getUserIds()
            int r4 = r3.length
            r5 = r6
        L_0x0129:
            if (r5 >= r4) goto L_0x0133
            r7 = r3[r5]
            com.android.server.pm.DefaultPermissionGrantPolicyInjector.grantDefaultPermissions(r14, r7)
            int r5 = r5 + 1
            goto L_0x0129
        L_0x0133:
            int[] r3 = EMPTY_INT_ARRAY
            if (r9 != r3) goto L_0x013c
            com.android.server.pm.permission.DefaultPermissionGrantPolicy r3 = r14.mDefaultPermissionPolicy
            r3.scheduleReadDefaultPermissionExceptions()
        L_0x013c:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r14.mPackages
            monitor-enter(r3)
            com.android.server.pm.permission.PermissionManagerServiceInternal r4 = r14.mPermissionManager     // Catch:{ all -> 0x01ba }
            java.lang.String r5 = android.os.storage.StorageManager.UUID_PRIVATE_INTERNAL     // Catch:{ all -> 0x01ba }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r7 = r14.mPackages     // Catch:{ all -> 0x01ba }
            java.util.Collection r7 = r7.values()     // Catch:{ all -> 0x01ba }
            com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r8 = r14.mPermissionCallback     // Catch:{ all -> 0x01ba }
            r4.updateAllPermissions(r5, r6, r7, r8)     // Catch:{ all -> 0x01ba }
            java.lang.Class<com.android.server.policy.PermissionPolicyInternal> r4 = com.android.server.policy.PermissionPolicyInternal.class
            java.lang.Object r4 = com.android.server.LocalServices.getService(r4)     // Catch:{ all -> 0x01ba }
            com.android.server.policy.PermissionPolicyInternal r4 = (com.android.server.policy.PermissionPolicyInternal) r4     // Catch:{ all -> 0x01ba }
            com.android.server.pm.-$$Lambda$PackageManagerService$jnotawFD1AlXlGEGCjX25xsyMtg r5 = new com.android.server.pm.-$$Lambda$PackageManagerService$jnotawFD1AlXlGEGCjX25xsyMtg     // Catch:{ all -> 0x01ba }
            r5.<init>()     // Catch:{ all -> 0x01ba }
            r4.setOnInitializedCallback(r5)     // Catch:{ all -> 0x01ba }
            monitor-exit(r3)     // Catch:{ all -> 0x01ba }
            android.content.Context r3 = r14.mContext
            java.lang.Class<android.os.storage.StorageManager> r4 = android.os.storage.StorageManager.class
            java.lang.Object r3 = r3.getSystemService(r4)
            android.os.storage.StorageManager r3 = (android.os.storage.StorageManager) r3
            android.os.storage.StorageEventListener r4 = r14.mStorageListener
            r3.registerListener(r4)
            com.android.server.pm.PackageInstallerService r4 = r14.mInstallerService
            r4.systemReady()
            com.android.server.pm.ApexManager r4 = r14.mApexManager
            r4.systemReady()
            com.android.server.pm.PackageDexOptimizer r4 = r14.mPackageDexOptimizer
            r4.systemReady()
            android.os.storage.StorageManagerInternal r4 = r14.getStorageManagerInternal()
            com.android.server.pm.PackageManagerService$9 r5 = new com.android.server.pm.PackageManagerService$9
            r5.<init>()
            r4.addExternalStoragePolicy(r5)
            com.android.server.pm.UserManagerService r4 = sUserManager
            java.lang.String r5 = android.os.storage.StorageManager.UUID_PRIVATE_INTERNAL
            r4.reconcileUsers(r5)
            java.lang.String r4 = android.os.storage.StorageManager.UUID_PRIVATE_INTERNAL
            r14.reconcileApps(r4)
            com.android.server.pm.permission.PermissionManagerServiceInternal r4 = r14.mPermissionManager
            r4.systemReady()
            com.android.server.pm.InstantAppResolverConnection r4 = r14.mInstantAppResolverConnection
            if (r4 == 0) goto L_0x01af
            android.content.Context r4 = r14.mContext
            com.android.server.pm.PackageManagerService$10 r5 = new com.android.server.pm.PackageManagerService$10
            r5.<init>()
            android.content.IntentFilter r6 = new android.content.IntentFilter
            java.lang.String r7 = "android.intent.action.BOOT_COMPLETED"
            r6.<init>(r7)
            r4.registerReceiver(r5, r6)
        L_0x01af:
            com.android.server.pm.ModuleInfoProvider r4 = r14.mModuleInfoProvider
            r4.systemReady()
            com.android.server.pm.PackageInstallerService r4 = r14.mInstallerService
            r4.restoreAndApplyStagedSessionIfNeeded()
            return
        L_0x01ba:
            r4 = move-exception
            monitor-exit(r3)     // Catch:{ all -> 0x01ba }
            throw r4
        L_0x01bd:
            r5 = move-exception
            r3 = r9
            goto L_0x01c1
        L_0x01c0:
            r5 = move-exception
        L_0x01c1:
            monitor-exit(r4)     // Catch:{ all -> 0x01c0 }
            throw r5
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.systemReady():void");
    }

    public /* synthetic */ void lambda$systemReady$28$PackageManagerService(int userId) {
        synchronized (this.mPackages) {
            this.mPermissionManager.updateAllPermissions(StorageManager.UUID_PRIVATE_INTERNAL, false, this.mPackages.values(), this.mPermissionCallback);
        }
    }

    public void waitForAppDataPrepared() {
        Future<?> future = this.mPrepareAppDataFuture;
        if (future != null) {
            ConcurrentUtils.waitForFutureNoInterrupt(future, "wait for prepareAppData");
            this.mPrepareAppDataFuture = null;
        }
    }

    public boolean isSafeMode() {
        return this.mSafeMode;
    }

    public boolean hasSystemUidErrors() {
        return this.mHasSystemUidErrors;
    }

    static String arrayToString(int[] array) {
        StringBuilder stringBuilder = new StringBuilder(128);
        stringBuilder.append('[');
        if (array != null) {
            for (int i = 0; i < array.length; i++) {
                if (i > 0) {
                    stringBuilder.append(", ");
                }
                stringBuilder.append(array[i]);
            }
        }
        stringBuilder.append(']');
        return stringBuilder.toString();
    }

    /* JADX WARNING: type inference failed for: r1v0, types: [android.os.Binder] */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void onShellCommand(java.io.FileDescriptor r9, java.io.FileDescriptor r10, java.io.FileDescriptor r11, java.lang.String[] r12, android.os.ShellCallback r13, android.os.ResultReceiver r14) {
        /*
            r8 = this;
            com.android.server.pm.PackageManagerShellCommand r0 = new com.android.server.pm.PackageManagerShellCommand
            r0.<init>(r8)
            r1 = r8
            r2 = r9
            r3 = r10
            r4 = r11
            r5 = r12
            r6 = r13
            r7 = r14
            r0.exec(r1, r2, r3, r4, r5, r6, r7)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver):void");
    }

    /* Debug info: failed to restart local var, previous not found, register: 29 */
    /* access modifiers changed from: protected */
    /* JADX WARNING: Removed duplicated region for block: B:378:0x07a5 A[Catch:{ all -> 0x0823 }] */
    /* JADX WARNING: Removed duplicated region for block: B:395:0x0828 A[Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1, all -> 0x0be0 }] */
    /* JADX WARNING: Removed duplicated region for block: B:402:0x0843 A[Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1, all -> 0x0be0 }] */
    /* JADX WARNING: Removed duplicated region for block: B:403:0x084d A[Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1, all -> 0x0be0 }] */
    /* JADX WARNING: Removed duplicated region for block: B:448:0x09ea A[Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1, all -> 0x0be0 }] */
    /* JADX WARNING: Removed duplicated region for block: B:451:0x09fd A[Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1, all -> 0x0be0 }] */
    /* JADX WARNING: Removed duplicated region for block: B:454:0x0a10 A[Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1, all -> 0x0be0 }] */
    /* JADX WARNING: Removed duplicated region for block: B:475:0x0aa6 A[Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1, all -> 0x0be0 }] */
    /* JADX WARNING: Removed duplicated region for block: B:478:0x0ac3 A[Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1, all -> 0x0be0 }] */
    /* JADX WARNING: Removed duplicated region for block: B:479:0x0ac9 A[Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1, all -> 0x0be0 }] */
    /* JADX WARNING: Removed duplicated region for block: B:490:0x0af6 A[Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1, all -> 0x0be0 }] */
    /* JADX WARNING: Removed duplicated region for block: B:493:0x0b13 A[Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1, all -> 0x0be0 }] */
    /* JADX WARNING: Removed duplicated region for block: B:494:0x0b19 A[Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1, all -> 0x0be0 }] */
    /* JADX WARNING: Removed duplicated region for block: B:509:0x0b54 A[Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1, all -> 0x0be0 }] */
    /* JADX WARNING: Removed duplicated region for block: B:516:0x0b6a A[Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1, all -> 0x0be0 }] */
    /* JADX WARNING: Removed duplicated region for block: B:524:0x0b82 A[Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1, all -> 0x0be0 }] */
    /* JADX WARNING: Removed duplicated region for block: B:537:0x0bb9  */
    /* JADX WARNING: Removed duplicated region for block: B:542:0x0bd2  */
    /* JADX WARNING: Removed duplicated region for block: B:598:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void dump(java.io.FileDescriptor r30, java.io.PrintWriter r31, java.lang.String[] r32) {
        /*
            r29 = this;
            r1 = r29
            r9 = r31
            r10 = r32
            android.content.Context r0 = r1.mContext
            java.lang.String r2 = "PackageManager"
            boolean r0 = com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(r0, r2, r9)
            if (r0 != 0) goto L_0x0011
            return
        L_0x0011:
            com.android.server.pm.DumpState r0 = new com.android.server.pm.DumpState
            r0.<init>()
            r11 = r0
            r2 = 0
            r0 = 0
            r3 = 0
            r4 = 0
            r5 = 0
            r12 = r0
        L_0x001d:
            int r0 = r10.length
            r6 = 2
            r13 = 0
            r14 = 1
            if (r5 >= r0) goto L_0x0130
            r0 = r10[r5]
            if (r0 == 0) goto L_0x0130
            int r7 = r0.length()
            if (r7 <= 0) goto L_0x0130
            char r7 = r0.charAt(r13)
            r8 = 45
            if (r7 == r8) goto L_0x0037
            goto L_0x0130
        L_0x0037:
            int r5 = r5 + 1
            java.lang.String r7 = "-a"
            boolean r7 = r7.equals(r0)
            if (r7 == 0) goto L_0x0043
            goto L_0x012e
        L_0x0043:
            java.lang.String r7 = "-h"
            boolean r7 = r7.equals(r0)
            if (r7 == 0) goto L_0x00e7
            java.lang.String r6 = "Package manager dump options:"
            r9.println(r6)
            java.lang.String r6 = "  [-h] [-f] [--checkin] [--all-components] [cmd] ..."
            r9.println(r6)
            java.lang.String r6 = "    --checkin: dump for a checkin"
            r9.println(r6)
            java.lang.String r6 = "    -f: print details of intent filters"
            r9.println(r6)
            java.lang.String r6 = "    -h: print this help"
            r9.println(r6)
            java.lang.String r6 = "    --all-components: include all component names in package dump"
            r9.println(r6)
            java.lang.String r6 = "  cmd may be one of:"
            r9.println(r6)
            java.lang.String r6 = "    apex: list active APEXes and APEX session state"
            r9.println(r6)
            java.lang.String r6 = "    l[ibraries]: list known shared libraries"
            r9.println(r6)
            java.lang.String r6 = "    f[eatures]: list device features"
            r9.println(r6)
            java.lang.String r6 = "    k[eysets]: print known keysets"
            r9.println(r6)
            java.lang.String r6 = "    r[esolvers] [activity|service|receiver|content]: dump intent resolvers"
            r9.println(r6)
            java.lang.String r6 = "    perm[issions]: dump permissions"
            r9.println(r6)
            java.lang.String r6 = "    permission [name ...]: dump declaration and use of given permission"
            r9.println(r6)
            java.lang.String r6 = "    pref[erred]: print preferred package settings"
            r9.println(r6)
            java.lang.String r6 = "    preferred-xml [--full]: print preferred package settings as xml"
            r9.println(r6)
            java.lang.String r6 = "    prov[iders]: dump content providers"
            r9.println(r6)
            java.lang.String r6 = "    p[ackages]: dump installed packages"
            r9.println(r6)
            java.lang.String r6 = "    s[hared-users]: dump shared user IDs"
            r9.println(r6)
            java.lang.String r6 = "    m[essages]: print collected runtime messages"
            r9.println(r6)
            java.lang.String r6 = "    v[erifiers]: print package verifier info"
            r9.println(r6)
            java.lang.String r6 = "    d[omain-preferred-apps]: print domains preferred apps"
            r9.println(r6)
            java.lang.String r6 = "    i[ntent-filter-verifiers]|ifv: print intent filter verifier info"
            r9.println(r6)
            java.lang.String r6 = "    version: print database version info"
            r9.println(r6)
            java.lang.String r6 = "    write: write current settings now"
            r9.println(r6)
            java.lang.String r6 = "    installs: details about install sessions"
            r9.println(r6)
            java.lang.String r6 = "    check-permission <permission> <package> [<user>]: does pkg hold perm?"
            r9.println(r6)
            java.lang.String r6 = "    dexopt: dump dexopt state"
            r9.println(r6)
            java.lang.String r6 = "    compiler-stats: dump compiler statistics"
            r9.println(r6)
            java.lang.String r6 = "    service-permissions: dump permissions required by services"
            r9.println(r6)
            java.lang.String r6 = "    <package.name>: info about given package"
            r9.println(r6)
            return
        L_0x00e7:
            java.lang.String r7 = "--checkin"
            boolean r7 = r7.equals(r0)
            if (r7 == 0) goto L_0x00f1
            r12 = 1
            goto L_0x012e
        L_0x00f1:
            java.lang.String r7 = "--all-components"
            boolean r7 = r7.equals(r0)
            if (r7 == 0) goto L_0x00fd
            r11.setOptionEnabled(r6)
            goto L_0x012e
        L_0x00fd:
            java.lang.String r6 = "-f"
            boolean r6 = r6.equals(r0)
            if (r6 == 0) goto L_0x0109
            r11.setOptionEnabled(r14)
            goto L_0x012e
        L_0x0109:
            java.lang.String r6 = "--proto"
            boolean r6 = r6.equals(r0)
            if (r6 == 0) goto L_0x0115
            r29.dumpProto(r30)
            return
        L_0x0115:
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            java.lang.String r7 = "Unknown argument: "
            r6.append(r7)
            r6.append(r0)
            java.lang.String r7 = "; use -h for help"
            r6.append(r7)
            java.lang.String r6 = r6.toString()
            r9.println(r6)
        L_0x012e:
            goto L_0x001d
        L_0x0130:
            int r0 = r10.length
            r6 = 131072(0x20000, float:1.83671E-40)
            r15 = 2048(0x800, float:2.87E-42)
            r7 = 32768(0x8000, float:4.5918E-41)
            r13 = 512(0x200, float:7.175E-43)
            if (r5 >= r0) goto L_0x04b4
            r8 = r10[r5]
            int r5 = r5 + 1
            java.lang.String r0 = "android"
            boolean r0 = r0.equals(r8)
            if (r0 != 0) goto L_0x04a9
            java.lang.String r0 = "."
            boolean r0 = r8.contains(r0)
            if (r0 == 0) goto L_0x0153
            r13 = r14
            goto L_0x04aa
        L_0x0153:
            java.lang.String r0 = "check-permission"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x01ac
            int r0 = r10.length
            if (r5 < r0) goto L_0x0164
            java.lang.String r0 = "Error: check-permission missing permission argument"
            r9.println(r0)
            return
        L_0x0164:
            r6 = r10[r5]
            int r5 = r5 + r14
            int r0 = r10.length
            if (r5 < r0) goto L_0x0170
            java.lang.String r0 = "Error: check-permission missing package argument"
            r9.println(r0)
            return
        L_0x0170:
            r7 = r10[r5]
            int r5 = r5 + r14
            int r0 = android.os.Binder.getCallingUid()
            int r13 = android.os.UserHandle.getUserId(r0)
            int r0 = r10.length
            if (r5 >= r0) goto L_0x019e
            r0 = r10[r5]     // Catch:{ NumberFormatException -> 0x0186 }
            int r0 = java.lang.Integer.parseInt(r0)     // Catch:{ NumberFormatException -> 0x0186 }
            r13 = r0
            goto L_0x019e
        L_0x0186:
            r0 = move-exception
            java.lang.StringBuilder r14 = new java.lang.StringBuilder
            r14.<init>()
            java.lang.String r15 = "Error: check-permission user argument is not a number: "
            r14.append(r15)
            r15 = r10[r5]
            r14.append(r15)
            java.lang.String r14 = r14.toString()
            r9.println(r14)
            return
        L_0x019e:
            r14 = -1
            java.lang.String r0 = r1.resolveInternalPackageNameLPr(r7, r14)
            int r7 = r1.checkPermission(r6, r0, r13)
            r9.println(r7)
            return
        L_0x01ac:
            java.lang.String r0 = "l"
            boolean r0 = r0.equals(r8)
            if (r0 != 0) goto L_0x049f
            java.lang.String r0 = "libraries"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x01c0
            goto L_0x049f
        L_0x01c0:
            java.lang.String r0 = "f"
            boolean r0 = r0.equals(r8)
            if (r0 != 0) goto L_0x0499
            java.lang.String r0 = "features"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x01d2
            goto L_0x0499
        L_0x01d2:
            java.lang.String r0 = "r"
            boolean r0 = r0.equals(r8)
            if (r0 != 0) goto L_0x040a
            java.lang.String r0 = "resolvers"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x01e6
            goto L_0x040a
        L_0x01e6:
            java.lang.String r0 = "perm"
            boolean r0 = r0.equals(r8)
            if (r0 != 0) goto L_0x0402
            java.lang.String r0 = "permissions"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x01fa
            goto L_0x0402
        L_0x01fa:
            java.lang.String r0 = "permission"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x0228
            int r0 = r10.length
            if (r5 < r0) goto L_0x020c
            java.lang.String r0 = "Error: permission requires permission name"
            r9.println(r0)
            return
        L_0x020c:
            android.util.ArraySet r0 = new android.util.ArraySet
            r0.<init>()
        L_0x0211:
            int r4 = r10.length
            if (r5 >= r4) goto L_0x021c
            r4 = r10[r5]
            r0.add(r4)
            int r5 = r5 + 1
            goto L_0x0211
        L_0x021c:
            r4 = 448(0x1c0, float:6.28E-43)
            r11.setDump(r4)
            r8 = r0
            r14 = r2
            r13 = r3
            r21 = r5
            goto L_0x04b9
        L_0x0228:
            java.lang.String r0 = "pref"
            boolean r0 = r0.equals(r8)
            if (r0 != 0) goto L_0x03fa
            java.lang.String r0 = "preferred"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x023c
            goto L_0x03fa
        L_0x023c:
            java.lang.String r0 = "preferred-xml"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x0264
            r0 = 8192(0x2000, float:1.14794E-41)
            r11.setDump(r0)
            int r0 = r10.length
            if (r5 >= r0) goto L_0x0261
            r0 = r10[r5]
            java.lang.String r14 = "--full"
            boolean r0 = r14.equals(r0)
            if (r0 == 0) goto L_0x0261
            r2 = 1
            int r5 = r5 + 1
            r14 = r2
            r13 = r3
            r8 = r4
            r21 = r5
            goto L_0x04b9
        L_0x0261:
            r13 = 1
            goto L_0x04a3
        L_0x0264:
            java.lang.String r0 = "d"
            boolean r0 = r0.equals(r8)
            if (r0 != 0) goto L_0x03f2
            java.lang.String r0 = "domain-preferred-apps"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x0276
            goto L_0x03f2
        L_0x0276:
            java.lang.String r0 = "p"
            boolean r0 = r0.equals(r8)
            if (r0 != 0) goto L_0x03ea
            java.lang.String r0 = "packages"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x028a
            goto L_0x03ea
        L_0x028a:
            java.lang.String r0 = "s"
            boolean r0 = r0.equals(r8)
            if (r0 != 0) goto L_0x03cd
            java.lang.String r0 = "shared-users"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x029e
            goto L_0x03cd
        L_0x029e:
            java.lang.String r0 = "prov"
            boolean r0 = r0.equals(r8)
            if (r0 != 0) goto L_0x03c5
            java.lang.String r0 = "providers"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x02b2
            goto L_0x03c5
        L_0x02b2:
            java.lang.String r0 = "m"
            boolean r0 = r0.equals(r8)
            if (r0 != 0) goto L_0x03bf
            java.lang.String r0 = "messages"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x02c6
            goto L_0x03bf
        L_0x02c6:
            java.lang.String r0 = "v"
            boolean r0 = r0.equals(r8)
            if (r0 != 0) goto L_0x03b9
            java.lang.String r0 = "verifiers"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x02da
            goto L_0x03b9
        L_0x02da:
            java.lang.String r0 = "i"
            boolean r0 = r0.equals(r8)
            if (r0 != 0) goto L_0x03b3
            java.lang.String r0 = "ifv"
            boolean r0 = r0.equals(r8)
            if (r0 != 0) goto L_0x03b3
            java.lang.String r0 = "intent-filter-verifiers"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x02f7
            goto L_0x03b3
        L_0x02f7:
            java.lang.String r0 = "version"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x0306
            r11.setDump(r7)
            r13 = 1
            goto L_0x04a3
        L_0x0306:
            java.lang.String r0 = "k"
            boolean r0 = r0.equals(r8)
            if (r0 != 0) goto L_0x03ab
            java.lang.String r0 = "keysets"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x031a
            goto L_0x03ab
        L_0x031a:
            java.lang.String r0 = "installs"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x032b
            r0 = 65536(0x10000, float:9.18355E-41)
            r11.setDump(r0)
            r13 = 1
            goto L_0x04a3
        L_0x032b:
            java.lang.String r0 = "frozen"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x033b
            r0 = 524288(0x80000, float:7.34684E-40)
            r11.setDump(r0)
            r13 = 1
            goto L_0x04a3
        L_0x033b:
            java.lang.String r0 = "volumes"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x034c
            r0 = 8388608(0x800000, float:1.17549435E-38)
            r11.setDump(r0)
            r13 = 1
            goto L_0x04a3
        L_0x034c:
            java.lang.String r0 = "dexopt"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x035c
            r0 = 1048576(0x100000, float:1.469368E-39)
            r11.setDump(r0)
            r13 = 1
            goto L_0x04a3
        L_0x035c:
            java.lang.String r0 = "compiler-stats"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x036c
            r0 = 2097152(0x200000, float:2.938736E-39)
            r11.setDump(r0)
            r13 = 1
            goto L_0x04a3
        L_0x036c:
            java.lang.String r0 = "changes"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x037c
            r0 = 4194304(0x400000, float:5.877472E-39)
            r11.setDump(r0)
            r13 = 1
            goto L_0x04a3
        L_0x037c:
            java.lang.String r0 = "service-permissions"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x038d
            r0 = 16777216(0x1000000, float:2.3509887E-38)
            r11.setDump(r0)
            r13 = 1
            goto L_0x04a3
        L_0x038d:
            java.lang.String r0 = "write"
            boolean r0 = r0.equals(r8)
            if (r0 == 0) goto L_0x03a8
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r14 = r1.mPackages
            monitor-enter(r14)
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x03a5 }
            r0.writeLPr()     // Catch:{ all -> 0x03a5 }
            java.lang.String r0 = "Settings written."
            r9.println(r0)     // Catch:{ all -> 0x03a5 }
            monitor-exit(r14)     // Catch:{ all -> 0x03a5 }
            return
        L_0x03a5:
            r0 = move-exception
            monitor-exit(r14)     // Catch:{ all -> 0x03a5 }
            throw r0
        L_0x03a8:
            r13 = 1
            goto L_0x04a3
        L_0x03ab:
            r0 = 16384(0x4000, float:2.2959E-41)
            r11.setDump(r0)
            r13 = 1
            goto L_0x04a3
        L_0x03b3:
            r11.setDump(r6)
            r13 = 1
            goto L_0x04a3
        L_0x03b9:
            r11.setDump(r15)
            r13 = 1
            goto L_0x04a3
        L_0x03bf:
            r11.setDump(r13)
            r13 = 1
            goto L_0x04a3
        L_0x03c5:
            r0 = 1024(0x400, float:1.435E-42)
            r11.setDump(r0)
            r13 = 1
            goto L_0x04a3
        L_0x03cd:
            r0 = 256(0x100, float:3.59E-43)
            r11.setDump(r0)
            int r0 = r10.length
            if (r5 >= r0) goto L_0x03e7
            r0 = r10[r5]
            java.lang.String r14 = "noperm"
            boolean r0 = r14.equals(r0)
            if (r0 == 0) goto L_0x03e7
            r0 = 4
            r11.setOptionEnabled(r0)
            r13 = 1
            goto L_0x04a3
        L_0x03e7:
            r13 = 1
            goto L_0x04a3
        L_0x03ea:
            r14 = 128(0x80, float:1.794E-43)
            r11.setDump(r14)
            r13 = 1
            goto L_0x04a3
        L_0x03f2:
            r14 = 262144(0x40000, float:3.67342E-40)
            r11.setDump(r14)
            r13 = 1
            goto L_0x04a3
        L_0x03fa:
            r14 = 4096(0x1000, float:5.74E-42)
            r11.setDump(r14)
            r13 = 1
            goto L_0x04a3
        L_0x0402:
            r14 = 64
            r11.setDump(r14)
            r13 = 1
            goto L_0x04a3
        L_0x040a:
            int r14 = r10.length
            if (r5 < r14) goto L_0x0415
            r14 = 60
            r11.setDump(r14)
            r13 = 1
            goto L_0x04a3
        L_0x0415:
            int r14 = r10.length
            if (r5 >= r14) goto L_0x0493
            r14 = r10[r5]
            java.lang.String r0 = "a"
            boolean r0 = r0.equals(r14)
            if (r0 != 0) goto L_0x0489
            java.lang.String r0 = "activity"
            boolean r0 = r0.equals(r14)
            if (r0 == 0) goto L_0x042b
            goto L_0x0489
        L_0x042b:
            java.lang.String r0 = "s"
            boolean r0 = r0.equals(r14)
            if (r0 != 0) goto L_0x0483
            java.lang.String r0 = "service"
            boolean r0 = r0.equals(r14)
            if (r0 == 0) goto L_0x043e
            goto L_0x0483
        L_0x043e:
            java.lang.String r0 = "r"
            boolean r0 = r0.equals(r14)
            if (r0 != 0) goto L_0x047d
            java.lang.String r0 = "receiver"
            boolean r0 = r0.equals(r14)
            if (r0 == 0) goto L_0x0451
            goto L_0x047d
        L_0x0451:
            java.lang.String r0 = "c"
            boolean r0 = r0.equals(r14)
            if (r0 != 0) goto L_0x0477
            java.lang.String r0 = "content"
            boolean r0 = r0.equals(r14)
            if (r0 == 0) goto L_0x0462
            goto L_0x0477
        L_0x0462:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r6 = "Error: unknown resolver table type: "
            r0.append(r6)
            r0.append(r14)
            java.lang.String r0 = r0.toString()
            r9.println(r0)
            return
        L_0x0477:
            r13 = 32
            r11.setDump(r13)
            goto L_0x048d
        L_0x047d:
            r0 = 16
            r11.setDump(r0)
            goto L_0x048d
        L_0x0483:
            r0 = 8
            r11.setDump(r0)
            goto L_0x048d
        L_0x0489:
            r0 = 4
            r11.setDump(r0)
        L_0x048d:
            int r5 = r5 + 1
            r13 = 512(0x200, float:7.175E-43)
            goto L_0x0415
        L_0x0493:
            r14 = r2
            r13 = r3
            r8 = r4
            r21 = r5
            goto L_0x04b9
        L_0x0499:
            r13 = 2
            r11.setDump(r13)
            r13 = 1
            goto L_0x04a3
        L_0x049f:
            r13 = 1
            r11.setDump(r13)
        L_0x04a3:
            r14 = r2
            r13 = r3
            r8 = r4
            r21 = r5
            goto L_0x04b9
        L_0x04a9:
            r13 = r14
        L_0x04aa:
            r3 = r8
            r11.setOptionEnabled(r13)
            r14 = r2
            r13 = r3
            r8 = r4
            r21 = r5
            goto L_0x04b9
        L_0x04b4:
            r14 = r2
            r13 = r3
            r8 = r4
            r21 = r5
        L_0x04b9:
            if (r12 == 0) goto L_0x04c1
            java.lang.String r2 = "vers,1"
            r9.println(r2)
        L_0x04c1:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r5 = r1.mPackages
            monitor-enter(r5)
            boolean r2 = r11.isDumping(r7)     // Catch:{ all -> 0x0bd8 }
            if (r2 == 0) goto L_0x04f1
            if (r13 != 0) goto L_0x04f1
            if (r12 != 0) goto L_0x04f1
            boolean r2 = r11.onTitlePrinted()     // Catch:{ all -> 0x04e9 }
            if (r2 == 0) goto L_0x04d7
            r31.println()     // Catch:{ all -> 0x04e9 }
        L_0x04d7:
            java.lang.String r2 = "Database versions:"
            r9.println(r2)     // Catch:{ all -> 0x04e9 }
            com.android.server.pm.Settings r2 = r1.mSettings     // Catch:{ all -> 0x04e9 }
            com.android.internal.util.IndentingPrintWriter r3 = new com.android.internal.util.IndentingPrintWriter     // Catch:{ all -> 0x04e9 }
            java.lang.String r4 = "  "
            r3.<init>(r9, r4)     // Catch:{ all -> 0x04e9 }
            r2.dumpVersionLPr(r3)     // Catch:{ all -> 0x04e9 }
            goto L_0x04f1
        L_0x04e9:
            r0 = move-exception
            r18 = r5
            r15 = r8
            r8 = r30
            goto L_0x0bde
        L_0x04f1:
            boolean r2 = r11.isDumping(r15)     // Catch:{ all -> 0x0bd8 }
            r3 = 268435456(0x10000000, float:2.5243549E-29)
            if (r2 == 0) goto L_0x0548
            if (r13 != 0) goto L_0x0548
            if (r12 != 0) goto L_0x052a
            boolean r2 = r11.onTitlePrinted()     // Catch:{ all -> 0x04e9 }
            if (r2 == 0) goto L_0x0506
            r31.println()     // Catch:{ all -> 0x04e9 }
        L_0x0506:
            java.lang.String r2 = "Verifiers:"
            r9.println(r2)     // Catch:{ all -> 0x04e9 }
            java.lang.String r2 = "  Required: "
            r9.print(r2)     // Catch:{ all -> 0x04e9 }
            java.lang.String r2 = r1.mRequiredVerifierPackage     // Catch:{ all -> 0x04e9 }
            r9.print(r2)     // Catch:{ all -> 0x04e9 }
            java.lang.String r2 = " (uid="
            r9.print(r2)     // Catch:{ all -> 0x04e9 }
            java.lang.String r2 = r1.mRequiredVerifierPackage     // Catch:{ all -> 0x04e9 }
            r4 = 0
            int r2 = r1.getPackageUid(r2, r3, r4)     // Catch:{ all -> 0x04e9 }
            r9.print(r2)     // Catch:{ all -> 0x04e9 }
            java.lang.String r2 = ")"
            r9.println(r2)     // Catch:{ all -> 0x04e9 }
            goto L_0x0548
        L_0x052a:
            java.lang.String r2 = r1.mRequiredVerifierPackage     // Catch:{ all -> 0x04e9 }
            if (r2 == 0) goto L_0x0548
            java.lang.String r2 = "vrfy,"
            r9.print(r2)     // Catch:{ all -> 0x04e9 }
            java.lang.String r2 = r1.mRequiredVerifierPackage     // Catch:{ all -> 0x04e9 }
            r9.print(r2)     // Catch:{ all -> 0x04e9 }
            java.lang.String r2 = ","
            r9.print(r2)     // Catch:{ all -> 0x04e9 }
            java.lang.String r2 = r1.mRequiredVerifierPackage     // Catch:{ all -> 0x04e9 }
            r4 = 0
            int r2 = r1.getPackageUid(r2, r3, r4)     // Catch:{ all -> 0x04e9 }
            r9.println(r2)     // Catch:{ all -> 0x04e9 }
        L_0x0548:
            boolean r2 = r11.isDumping(r6)     // Catch:{ all -> 0x0bd8 }
            if (r2 == 0) goto L_0x05a6
            if (r13 != 0) goto L_0x05a6
            android.content.ComponentName r2 = r1.mIntentFilterVerifierComponent     // Catch:{ all -> 0x04e9 }
            if (r2 == 0) goto L_0x059e
            android.content.ComponentName r2 = r1.mIntentFilterVerifierComponent     // Catch:{ all -> 0x04e9 }
            java.lang.String r2 = r2.getPackageName()     // Catch:{ all -> 0x04e9 }
            if (r12 != 0) goto L_0x0585
            boolean r4 = r11.onTitlePrinted()     // Catch:{ all -> 0x04e9 }
            if (r4 == 0) goto L_0x0565
            r31.println()     // Catch:{ all -> 0x04e9 }
        L_0x0565:
            java.lang.String r4 = "Intent Filter Verifier:"
            r9.println(r4)     // Catch:{ all -> 0x04e9 }
            java.lang.String r4 = "  Using: "
            r9.print(r4)     // Catch:{ all -> 0x04e9 }
            r9.print(r2)     // Catch:{ all -> 0x04e9 }
            java.lang.String r4 = " (uid="
            r9.print(r4)     // Catch:{ all -> 0x04e9 }
            r4 = 0
            int r3 = r1.getPackageUid(r2, r3, r4)     // Catch:{ all -> 0x04e9 }
            r9.print(r3)     // Catch:{ all -> 0x04e9 }
            java.lang.String r3 = ")"
            r9.println(r3)     // Catch:{ all -> 0x04e9 }
            goto L_0x059d
        L_0x0585:
            if (r2 == 0) goto L_0x059d
            java.lang.String r4 = "ifv,"
            r9.print(r4)     // Catch:{ all -> 0x04e9 }
            r9.print(r2)     // Catch:{ all -> 0x04e9 }
            java.lang.String r4 = ","
            r9.print(r4)     // Catch:{ all -> 0x04e9 }
            r4 = 0
            int r3 = r1.getPackageUid(r2, r3, r4)     // Catch:{ all -> 0x04e9 }
            r9.println(r3)     // Catch:{ all -> 0x04e9 }
        L_0x059d:
            goto L_0x05a6
        L_0x059e:
            r31.println()     // Catch:{ all -> 0x04e9 }
            java.lang.String r2 = "No Intent Filter Verifier available!"
            r9.println(r2)     // Catch:{ all -> 0x04e9 }
        L_0x05a6:
            r2 = 1
            boolean r3 = r11.isDumping(r2)     // Catch:{ all -> 0x0bd8 }
            if (r3 == 0) goto L_0x0662
            if (r13 != 0) goto L_0x0662
            r2 = 0
            android.util.ArrayMap<java.lang.String, android.util.LongSparseArray<android.content.pm.SharedLibraryInfo>> r3 = r1.mSharedLibraries     // Catch:{ all -> 0x04e9 }
            java.util.Set r3 = r3.keySet()     // Catch:{ all -> 0x04e9 }
            java.util.Iterator r3 = r3.iterator()     // Catch:{ all -> 0x04e9 }
        L_0x05ba:
            boolean r4 = r3.hasNext()     // Catch:{ all -> 0x04e9 }
            if (r4 == 0) goto L_0x0660
            java.lang.Object r4 = r3.next()     // Catch:{ all -> 0x04e9 }
            java.lang.String r4 = (java.lang.String) r4     // Catch:{ all -> 0x04e9 }
            android.util.ArrayMap<java.lang.String, android.util.LongSparseArray<android.content.pm.SharedLibraryInfo>> r6 = r1.mSharedLibraries     // Catch:{ all -> 0x04e9 }
            java.lang.Object r6 = r6.get(r4)     // Catch:{ all -> 0x04e9 }
            android.util.LongSparseArray r6 = (android.util.LongSparseArray) r6     // Catch:{ all -> 0x04e9 }
            if (r6 != 0) goto L_0x05d1
            goto L_0x05ba
        L_0x05d1:
            int r7 = r6.size()     // Catch:{ all -> 0x04e9 }
            r15 = 0
        L_0x05d6:
            if (r15 >= r7) goto L_0x065c
            java.lang.Object r23 = r6.valueAt(r15)     // Catch:{ all -> 0x04e9 }
            android.content.pm.SharedLibraryInfo r23 = (android.content.pm.SharedLibraryInfo) r23     // Catch:{ all -> 0x04e9 }
            if (r12 != 0) goto L_0x05f7
            if (r2 != 0) goto L_0x05f1
            boolean r24 = r11.onTitlePrinted()     // Catch:{ all -> 0x04e9 }
            if (r24 == 0) goto L_0x05eb
            r31.println()     // Catch:{ all -> 0x04e9 }
        L_0x05eb:
            java.lang.String r0 = "Libraries:"
            r9.println(r0)     // Catch:{ all -> 0x04e9 }
            r2 = 1
        L_0x05f1:
            java.lang.String r0 = "  "
            r9.print(r0)     // Catch:{ all -> 0x04e9 }
            goto L_0x05fd
        L_0x05f7:
            java.lang.String r0 = "lib,"
            r9.print(r0)     // Catch:{ all -> 0x04e9 }
        L_0x05fd:
            java.lang.String r0 = r23.getName()     // Catch:{ all -> 0x04e9 }
            r9.print(r0)     // Catch:{ all -> 0x04e9 }
            boolean r0 = r23.isStatic()     // Catch:{ all -> 0x04e9 }
            if (r0 == 0) goto L_0x0627
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ all -> 0x04e9 }
            r0.<init>()     // Catch:{ all -> 0x04e9 }
            r25 = r2
            java.lang.String r2 = " version="
            r0.append(r2)     // Catch:{ all -> 0x04e9 }
            r26 = r3
            long r2 = r23.getLongVersion()     // Catch:{ all -> 0x04e9 }
            r0.append(r2)     // Catch:{ all -> 0x04e9 }
            java.lang.String r0 = r0.toString()     // Catch:{ all -> 0x04e9 }
            r9.print(r0)     // Catch:{ all -> 0x04e9 }
            goto L_0x062b
        L_0x0627:
            r25 = r2
            r26 = r3
        L_0x062b:
            if (r12 != 0) goto L_0x0632
            java.lang.String r0 = " -> "
            r9.print(r0)     // Catch:{ all -> 0x04e9 }
        L_0x0632:
            java.lang.String r0 = r23.getPath()     // Catch:{ all -> 0x04e9 }
            if (r0 == 0) goto L_0x0645
            java.lang.String r0 = " (jar) "
            r9.print(r0)     // Catch:{ all -> 0x04e9 }
            java.lang.String r0 = r23.getPath()     // Catch:{ all -> 0x04e9 }
            r9.print(r0)     // Catch:{ all -> 0x04e9 }
            goto L_0x0651
        L_0x0645:
            java.lang.String r0 = " (apk) "
            r9.print(r0)     // Catch:{ all -> 0x04e9 }
            java.lang.String r0 = r23.getPackageName()     // Catch:{ all -> 0x04e9 }
            r9.print(r0)     // Catch:{ all -> 0x04e9 }
        L_0x0651:
            r31.println()     // Catch:{ all -> 0x04e9 }
            int r15 = r15 + 1
            r2 = r25
            r3 = r26
            goto L_0x05d6
        L_0x065c:
            r26 = r3
            goto L_0x05ba
        L_0x0660:
            r26 = r3
        L_0x0662:
            r0 = 2
            boolean r0 = r11.isDumping(r0)     // Catch:{ all -> 0x0bd8 }
            if (r0 == 0) goto L_0x06cc
            if (r13 != 0) goto L_0x06cc
            boolean r0 = r11.onTitlePrinted()     // Catch:{ all -> 0x04e9 }
            if (r0 == 0) goto L_0x0674
            r31.println()     // Catch:{ all -> 0x04e9 }
        L_0x0674:
            if (r12 != 0) goto L_0x067b
            java.lang.String r0 = "Features:"
            r9.println(r0)     // Catch:{ all -> 0x04e9 }
        L_0x067b:
            android.util.ArrayMap<java.lang.String, android.content.pm.FeatureInfo> r2 = r1.mAvailableFeatures     // Catch:{ all -> 0x04e9 }
            monitor-enter(r2)     // Catch:{ all -> 0x04e9 }
            android.util.ArrayMap<java.lang.String, android.content.pm.FeatureInfo> r0 = r1.mAvailableFeatures     // Catch:{ all -> 0x06c9 }
            java.util.Collection r0 = r0.values()     // Catch:{ all -> 0x06c9 }
            java.util.Iterator r0 = r0.iterator()     // Catch:{ all -> 0x06c9 }
        L_0x0688:
            boolean r3 = r0.hasNext()     // Catch:{ all -> 0x06c9 }
            if (r3 == 0) goto L_0x06c7
            java.lang.Object r3 = r0.next()     // Catch:{ all -> 0x06c9 }
            android.content.pm.FeatureInfo r3 = (android.content.pm.FeatureInfo) r3     // Catch:{ all -> 0x06c9 }
            if (r12 == 0) goto L_0x06ab
            java.lang.String r4 = "feat,"
            r9.print(r4)     // Catch:{ all -> 0x06c9 }
            java.lang.String r4 = r3.name     // Catch:{ all -> 0x06c9 }
            r9.print(r4)     // Catch:{ all -> 0x06c9 }
            java.lang.String r4 = ","
            r9.print(r4)     // Catch:{ all -> 0x06c9 }
            int r4 = r3.version     // Catch:{ all -> 0x06c9 }
            r9.println(r4)     // Catch:{ all -> 0x06c9 }
            goto L_0x06c6
        L_0x06ab:
            java.lang.String r4 = "  "
            r9.print(r4)     // Catch:{ all -> 0x06c9 }
            java.lang.String r4 = r3.name     // Catch:{ all -> 0x06c9 }
            r9.print(r4)     // Catch:{ all -> 0x06c9 }
            int r4 = r3.version     // Catch:{ all -> 0x06c9 }
            if (r4 <= 0) goto L_0x06c3
            java.lang.String r4 = " version="
            r9.print(r4)     // Catch:{ all -> 0x06c9 }
            int r4 = r3.version     // Catch:{ all -> 0x06c9 }
            r9.print(r4)     // Catch:{ all -> 0x06c9 }
        L_0x06c3:
            r31.println()     // Catch:{ all -> 0x06c9 }
        L_0x06c6:
            goto L_0x0688
        L_0x06c7:
            monitor-exit(r2)     // Catch:{ all -> 0x06c9 }
            goto L_0x06cc
        L_0x06c9:
            r0 = move-exception
            monitor-exit(r2)     // Catch:{ all -> 0x06c9 }
            throw r0     // Catch:{ all -> 0x04e9 }
        L_0x06cc:
            if (r12 != 0) goto L_0x06da
            r0 = 4
            boolean r0 = r11.isDumping(r0)     // Catch:{ all -> 0x04e9 }
            if (r0 == 0) goto L_0x06da
            com.android.server.pm.ComponentResolver r0 = r1.mComponentResolver     // Catch:{ all -> 0x04e9 }
            r0.dumpActivityResolvers(r9, r11, r13)     // Catch:{ all -> 0x04e9 }
        L_0x06da:
            if (r12 != 0) goto L_0x06e9
            r0 = 16
            boolean r0 = r11.isDumping(r0)     // Catch:{ all -> 0x04e9 }
            if (r0 == 0) goto L_0x06e9
            com.android.server.pm.ComponentResolver r0 = r1.mComponentResolver     // Catch:{ all -> 0x04e9 }
            r0.dumpReceiverResolvers(r9, r11, r13)     // Catch:{ all -> 0x04e9 }
        L_0x06e9:
            if (r12 != 0) goto L_0x06f8
            r0 = 8
            boolean r0 = r11.isDumping(r0)     // Catch:{ all -> 0x04e9 }
            if (r0 == 0) goto L_0x06f8
            com.android.server.pm.ComponentResolver r0 = r1.mComponentResolver     // Catch:{ all -> 0x04e9 }
            r0.dumpServiceResolvers(r9, r11, r13)     // Catch:{ all -> 0x04e9 }
        L_0x06f8:
            if (r12 != 0) goto L_0x0708
            r15 = 32
            boolean r0 = r11.isDumping(r15)     // Catch:{ all -> 0x04e9 }
            if (r0 == 0) goto L_0x070a
            com.android.server.pm.ComponentResolver r0 = r1.mComponentResolver     // Catch:{ all -> 0x04e9 }
            r0.dumpProviderResolvers(r9, r11, r13)     // Catch:{ all -> 0x04e9 }
            goto L_0x070a
        L_0x0708:
            r15 = 32
        L_0x070a:
            if (r12 != 0) goto L_0x0796
            r0 = 4096(0x1000, float:5.74E-42)
            boolean r0 = r11.isDumping(r0)     // Catch:{ all -> 0x0bd8 }
            if (r0 == 0) goto L_0x0796
            r2 = 0
            r0 = r2
        L_0x0716:
            com.android.server.pm.Settings r2 = r1.mSettings     // Catch:{ all -> 0x0bd8 }
            android.util.SparseArray<com.android.server.pm.PreferredIntentResolver> r2 = r2.mPreferredActivities     // Catch:{ all -> 0x0bd8 }
            int r2 = r2.size()     // Catch:{ all -> 0x0bd8 }
            if (r0 >= r2) goto L_0x0790
            com.android.server.pm.Settings r2 = r1.mSettings     // Catch:{ all -> 0x0bd8 }
            android.util.SparseArray<com.android.server.pm.PreferredIntentResolver> r2 = r2.mPreferredActivities     // Catch:{ all -> 0x0bd8 }
            java.lang.Object r2 = r2.valueAt(r0)     // Catch:{ all -> 0x0bd8 }
            com.android.server.pm.PreferredIntentResolver r2 = (com.android.server.pm.PreferredIntentResolver) r2     // Catch:{ all -> 0x0bd8 }
            com.android.server.pm.Settings r3 = r1.mSettings     // Catch:{ all -> 0x0bd8 }
            android.util.SparseArray<com.android.server.pm.PreferredIntentResolver> r3 = r3.mPreferredActivities     // Catch:{ all -> 0x0bd8 }
            int r3 = r3.keyAt(r0)     // Catch:{ all -> 0x0bd8 }
            r7 = r3
            boolean r3 = r11.getTitlePrinted()     // Catch:{ all -> 0x0bd8 }
            if (r3 == 0) goto L_0x0752
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x04e9 }
            r3.<init>()     // Catch:{ all -> 0x04e9 }
            java.lang.String r4 = "\nPreferred Activities User "
            r3.append(r4)     // Catch:{ all -> 0x04e9 }
            r3.append(r7)     // Catch:{ all -> 0x04e9 }
            java.lang.String r4 = ":"
            r3.append(r4)     // Catch:{ all -> 0x04e9 }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x04e9 }
            r4 = r3
            goto L_0x0769
        L_0x0752:
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x0bd8 }
            r3.<init>()     // Catch:{ all -> 0x0bd8 }
            java.lang.String r4 = "Preferred Activities User "
            r3.append(r4)     // Catch:{ all -> 0x0bd8 }
            r3.append(r7)     // Catch:{ all -> 0x0bd8 }
            java.lang.String r4 = ":"
            r3.append(r4)     // Catch:{ all -> 0x0bd8 }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x0bd8 }
            r4 = r3
        L_0x0769:
            java.lang.String r6 = "  "
            r16 = 1
            r17 = 0
            r3 = r31
            r18 = r5
            r5 = r6
            r6 = r13
            r19 = r7
            r7 = r16
            r16 = r15
            r15 = r8
            r8 = r17
            boolean r3 = r2.dump(r3, r4, r5, r6, r7, r8)     // Catch:{ all -> 0x0823 }
            if (r3 == 0) goto L_0x0788
            r3 = 1
            r11.setTitlePrinted(r3)     // Catch:{ all -> 0x0823 }
        L_0x0788:
            int r0 = r0 + 1
            r8 = r15
            r15 = r16
            r5 = r18
            goto L_0x0716
        L_0x0790:
            r18 = r5
            r16 = r15
            r15 = r8
            goto L_0x079b
        L_0x0796:
            r18 = r5
            r16 = r15
            r15 = r8
        L_0x079b:
            if (r12 != 0) goto L_0x0828
            r0 = 8192(0x2000, float:1.14794E-41)
            boolean r0 = r11.isDumping(r0)     // Catch:{ all -> 0x0823 }
            if (r0 == 0) goto L_0x0828
            r31.flush()     // Catch:{ all -> 0x0823 }
            java.io.FileOutputStream r0 = new java.io.FileOutputStream     // Catch:{ all -> 0x0823 }
            r8 = r30
            r0.<init>(r8)     // Catch:{ all -> 0x0be0 }
            r2 = r0
            java.io.BufferedOutputStream r0 = new java.io.BufferedOutputStream     // Catch:{ all -> 0x0be0 }
            r0.<init>(r2)     // Catch:{ all -> 0x0be0 }
            r3 = r0
            com.android.internal.util.FastXmlSerializer r0 = new com.android.internal.util.FastXmlSerializer     // Catch:{ all -> 0x0be0 }
            r0.<init>()     // Catch:{ all -> 0x0be0 }
            r4 = r0
            java.nio.charset.Charset r0 = java.nio.charset.StandardCharsets.UTF_8     // Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1 }
            java.lang.String r0 = r0.name()     // Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1 }
            r4.setOutput(r3, r0)     // Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1 }
            r0 = 0
            r5 = 1
            java.lang.Boolean r6 = java.lang.Boolean.valueOf(r5)     // Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1 }
            r4.startDocument(r0, r6)     // Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1 }
            java.lang.String r0 = "http://xmlpull.org/v1/doc/features.html#indent-output"
            r4.setFeature(r0, r5)     // Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1 }
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1 }
            r5 = 0
            r0.writePreferredActivitiesLPr(r4, r5, r14)     // Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1 }
            r4.endDocument()     // Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1 }
            r4.flush()     // Catch:{ IllegalArgumentException -> 0x080d, IllegalStateException -> 0x07f7, IOException -> 0x07e1 }
            goto L_0x0822
        L_0x07e1:
            r0 = move-exception
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ all -> 0x0be0 }
            r5.<init>()     // Catch:{ all -> 0x0be0 }
            java.lang.String r6 = "Failed writing: "
            r5.append(r6)     // Catch:{ all -> 0x0be0 }
            r5.append(r0)     // Catch:{ all -> 0x0be0 }
            java.lang.String r5 = r5.toString()     // Catch:{ all -> 0x0be0 }
            r9.println(r5)     // Catch:{ all -> 0x0be0 }
            goto L_0x082a
        L_0x07f7:
            r0 = move-exception
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ all -> 0x0be0 }
            r5.<init>()     // Catch:{ all -> 0x0be0 }
            java.lang.String r6 = "Failed writing: "
            r5.append(r6)     // Catch:{ all -> 0x0be0 }
            r5.append(r0)     // Catch:{ all -> 0x0be0 }
            java.lang.String r5 = r5.toString()     // Catch:{ all -> 0x0be0 }
            r9.println(r5)     // Catch:{ all -> 0x0be0 }
            goto L_0x0822
        L_0x080d:
            r0 = move-exception
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ all -> 0x0be0 }
            r5.<init>()     // Catch:{ all -> 0x0be0 }
            java.lang.String r6 = "Failed writing: "
            r5.append(r6)     // Catch:{ all -> 0x0be0 }
            r5.append(r0)     // Catch:{ all -> 0x0be0 }
            java.lang.String r5 = r5.toString()     // Catch:{ all -> 0x0be0 }
            r9.println(r5)     // Catch:{ all -> 0x0be0 }
        L_0x0822:
            goto L_0x082a
        L_0x0823:
            r0 = move-exception
            r8 = r30
            goto L_0x0bde
        L_0x0828:
            r8 = r30
        L_0x082a:
            if (r12 != 0) goto L_0x09b3
            r0 = 262144(0x40000, float:3.67342E-40)
            boolean r0 = r11.isDumping(r0)     // Catch:{ all -> 0x0be0 }
            if (r0 == 0) goto L_0x09b3
            if (r13 != 0) goto L_0x09b3
            r31.println()     // Catch:{ all -> 0x0be0 }
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0be0 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r0 = r0.mPackages     // Catch:{ all -> 0x0be0 }
            int r0 = r0.size()     // Catch:{ all -> 0x0be0 }
            if (r0 != 0) goto L_0x084d
            java.lang.String r2 = "No applications!"
            r9.println(r2)     // Catch:{ all -> 0x0be0 }
            r31.println()     // Catch:{ all -> 0x0be0 }
            goto L_0x09b3
        L_0x084d:
            java.lang.String r2 = "  "
            com.android.server.pm.Settings r3 = r1.mSettings     // Catch:{ all -> 0x0be0 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r3 = r3.mPackages     // Catch:{ all -> 0x0be0 }
            java.util.Collection r3 = r3.values()     // Catch:{ all -> 0x0be0 }
            int r4 = r3.size()     // Catch:{ all -> 0x0be0 }
            if (r4 != 0) goto L_0x0867
            java.lang.String r4 = "No domain preferred apps!"
            r9.println(r4)     // Catch:{ all -> 0x0be0 }
            r31.println()     // Catch:{ all -> 0x0be0 }
            goto L_0x09b3
        L_0x0867:
            java.lang.String r4 = "App verification status:"
            r9.println(r4)     // Catch:{ all -> 0x0be0 }
            r31.println()     // Catch:{ all -> 0x0be0 }
            r0 = 0
            java.util.Iterator r4 = r3.iterator()     // Catch:{ all -> 0x0be0 }
        L_0x0874:
            boolean r5 = r4.hasNext()     // Catch:{ all -> 0x0be0 }
            if (r5 == 0) goto L_0x08e7
            java.lang.Object r5 = r4.next()     // Catch:{ all -> 0x0be0 }
            com.android.server.pm.PackageSetting r5 = (com.android.server.pm.PackageSetting) r5     // Catch:{ all -> 0x0be0 }
            android.content.pm.IntentFilterVerificationInfo r6 = r5.getIntentFilterVerificationInfo()     // Catch:{ all -> 0x0be0 }
            if (r6 == 0) goto L_0x08e2
            java.lang.String r7 = r6.getPackageName()     // Catch:{ all -> 0x0be0 }
            if (r7 != 0) goto L_0x088f
            r17 = r2
            goto L_0x08e4
        L_0x088f:
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x0be0 }
            r7.<init>()     // Catch:{ all -> 0x0be0 }
            r17 = r2
            java.lang.String r2 = "  Package: "
            r7.append(r2)     // Catch:{ all -> 0x0be0 }
            java.lang.String r2 = r6.getPackageName()     // Catch:{ all -> 0x0be0 }
            r7.append(r2)     // Catch:{ all -> 0x0be0 }
            java.lang.String r2 = r7.toString()     // Catch:{ all -> 0x0be0 }
            r9.println(r2)     // Catch:{ all -> 0x0be0 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x0be0 }
            r2.<init>()     // Catch:{ all -> 0x0be0 }
            java.lang.String r7 = "  Domains: "
            r2.append(r7)     // Catch:{ all -> 0x0be0 }
            java.lang.String r7 = r6.getDomainsString()     // Catch:{ all -> 0x0be0 }
            r2.append(r7)     // Catch:{ all -> 0x0be0 }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x0be0 }
            r9.println(r2)     // Catch:{ all -> 0x0be0 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x0be0 }
            r2.<init>()     // Catch:{ all -> 0x0be0 }
            java.lang.String r7 = "  Status:  "
            r2.append(r7)     // Catch:{ all -> 0x0be0 }
            java.lang.String r7 = r6.getStatusString()     // Catch:{ all -> 0x0be0 }
            r2.append(r7)     // Catch:{ all -> 0x0be0 }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x0be0 }
            r9.println(r2)     // Catch:{ all -> 0x0be0 }
            r31.println()     // Catch:{ all -> 0x0be0 }
            int r0 = r0 + 1
            r2 = r17
            goto L_0x0874
        L_0x08e2:
            r17 = r2
        L_0x08e4:
            r2 = r17
            goto L_0x0874
        L_0x08e7:
            r17 = r2
            if (r0 != 0) goto L_0x08f3
            java.lang.String r2 = "  No app verification established."
            r9.println(r2)     // Catch:{ all -> 0x0be0 }
            r31.println()     // Catch:{ all -> 0x0be0 }
        L_0x08f3:
            com.android.server.pm.UserManagerService r2 = sUserManager     // Catch:{ all -> 0x0be0 }
            int[] r2 = r2.getUserIds()     // Catch:{ all -> 0x0be0 }
            int r4 = r2.length     // Catch:{ all -> 0x0be0 }
            r5 = r0
            r0 = 0
        L_0x08fc:
            if (r0 >= r4) goto L_0x09b1
            r6 = r2[r0]     // Catch:{ all -> 0x0be0 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x0be0 }
            r7.<init>()     // Catch:{ all -> 0x0be0 }
            r19 = r2
            java.lang.String r2 = "App linkages for user "
            r7.append(r2)     // Catch:{ all -> 0x0be0 }
            r7.append(r6)     // Catch:{ all -> 0x0be0 }
            java.lang.String r2 = ":"
            r7.append(r2)     // Catch:{ all -> 0x0be0 }
            java.lang.String r2 = r7.toString()     // Catch:{ all -> 0x0be0 }
            r9.println(r2)     // Catch:{ all -> 0x0be0 }
            r31.println()     // Catch:{ all -> 0x0be0 }
            r2 = 0
            java.util.Iterator r5 = r3.iterator()     // Catch:{ all -> 0x0be0 }
        L_0x0923:
            boolean r7 = r5.hasNext()     // Catch:{ all -> 0x0be0 }
            if (r7 == 0) goto L_0x0998
            java.lang.Object r7 = r5.next()     // Catch:{ all -> 0x0be0 }
            com.android.server.pm.PackageSetting r7 = (com.android.server.pm.PackageSetting) r7     // Catch:{ all -> 0x0be0 }
            long r23 = r7.getDomainVerificationStatusForUser(r6)     // Catch:{ all -> 0x0be0 }
            long r25 = r23 >> r16
            r27 = 0
            int r20 = (r25 > r27 ? 1 : (r25 == r27 ? 0 : -1))
            if (r20 != 0) goto L_0x093c
            goto L_0x0923
        L_0x093c:
            r20 = r3
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x0be0 }
            r3.<init>()     // Catch:{ all -> 0x0be0 }
            r22 = r4
            java.lang.String r4 = "  Package: "
            r3.append(r4)     // Catch:{ all -> 0x0be0 }
            java.lang.String r4 = r7.name     // Catch:{ all -> 0x0be0 }
            r3.append(r4)     // Catch:{ all -> 0x0be0 }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x0be0 }
            r9.println(r3)     // Catch:{ all -> 0x0be0 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ all -> 0x0be0 }
            r3.<init>()     // Catch:{ all -> 0x0be0 }
            java.lang.String r4 = "  Domains: "
            r3.append(r4)     // Catch:{ all -> 0x0be0 }
            java.lang.String r4 = r7.name     // Catch:{ all -> 0x0be0 }
            java.lang.String r4 = r1.dumpDomainString(r4)     // Catch:{ all -> 0x0be0 }
            r3.append(r4)     // Catch:{ all -> 0x0be0 }
            java.lang.String r3 = r3.toString()     // Catch:{ all -> 0x0be0 }
            r9.println(r3)     // Catch:{ all -> 0x0be0 }
            java.lang.String r3 = android.content.pm.IntentFilterVerificationInfo.getStatusStringFromValue(r23)     // Catch:{ all -> 0x0be0 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x0be0 }
            r4.<init>()     // Catch:{ all -> 0x0be0 }
            r25 = r5
            java.lang.String r5 = "  Status:  "
            r4.append(r5)     // Catch:{ all -> 0x0be0 }
            r4.append(r3)     // Catch:{ all -> 0x0be0 }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x0be0 }
            r9.println(r4)     // Catch:{ all -> 0x0be0 }
            r31.println()     // Catch:{ all -> 0x0be0 }
            int r2 = r2 + 1
            r3 = r20
            r4 = r22
            r5 = r25
            goto L_0x0923
        L_0x0998:
            r20 = r3
            r22 = r4
            if (r2 != 0) goto L_0x09a6
            java.lang.String r3 = "  No configured app linkages."
            r9.println(r3)     // Catch:{ all -> 0x0be0 }
            r31.println()     // Catch:{ all -> 0x0be0 }
        L_0x09a6:
            int r0 = r0 + 1
            r5 = r2
            r2 = r19
            r3 = r20
            r4 = r22
            goto L_0x08fc
        L_0x09b1:
            r20 = r3
        L_0x09b3:
            if (r12 != 0) goto L_0x09c2
            r2 = 64
            boolean r0 = r11.isDumping(r2)     // Catch:{ all -> 0x0be0 }
            if (r0 == 0) goto L_0x09c2
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0be0 }
            r0.dumpPermissionsLPr(r9, r13, r15, r11)     // Catch:{ all -> 0x0be0 }
        L_0x09c2:
            if (r12 != 0) goto L_0x09d1
            r0 = 1024(0x400, float:1.435E-42)
            boolean r0 = r11.isDumping(r0)     // Catch:{ all -> 0x0be0 }
            if (r0 == 0) goto L_0x09d1
            com.android.server.pm.ComponentResolver r0 = r1.mComponentResolver     // Catch:{ all -> 0x0be0 }
            r0.dumpContentProviders(r9, r11, r13)     // Catch:{ all -> 0x0be0 }
        L_0x09d1:
            if (r12 != 0) goto L_0x09e2
            r0 = 16384(0x4000, float:2.2959E-41)
            boolean r0 = r11.isDumping(r0)     // Catch:{ all -> 0x0be0 }
            if (r0 == 0) goto L_0x09e2
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0be0 }
            com.android.server.pm.KeySetManagerService r0 = r0.mKeySetManagerService     // Catch:{ all -> 0x0be0 }
            r0.dumpLPr(r9, r13, r11)     // Catch:{ all -> 0x0be0 }
        L_0x09e2:
            r0 = 128(0x80, float:1.794E-43)
            boolean r0 = r11.isDumping(r0)     // Catch:{ all -> 0x0be0 }
            if (r0 == 0) goto L_0x09f5
            com.android.server.pm.Settings r2 = r1.mSettings     // Catch:{ all -> 0x0be0 }
            r3 = r31
            r4 = r13
            r5 = r15
            r6 = r11
            r7 = r12
            r2.dumpPackagesLPr(r3, r4, r5, r6, r7)     // Catch:{ all -> 0x0be0 }
        L_0x09f5:
            r0 = 256(0x100, float:3.59E-43)
            boolean r0 = r11.isDumping(r0)     // Catch:{ all -> 0x0be0 }
            if (r0 == 0) goto L_0x0a08
            com.android.server.pm.Settings r2 = r1.mSettings     // Catch:{ all -> 0x0be0 }
            r3 = r31
            r4 = r13
            r5 = r15
            r6 = r11
            r7 = r12
            r2.dumpSharedUsersLPr(r3, r4, r5, r6, r7)     // Catch:{ all -> 0x0be0 }
        L_0x0a08:
            r0 = 4194304(0x400000, float:5.877472E-39)
            boolean r0 = r11.isDumping(r0)     // Catch:{ all -> 0x0be0 }
            if (r0 == 0) goto L_0x0a92
            boolean r0 = r11.onTitlePrinted()     // Catch:{ all -> 0x0be0 }
            if (r0 == 0) goto L_0x0a19
            r31.println()     // Catch:{ all -> 0x0be0 }
        L_0x0a19:
            java.lang.String r0 = "Package Changes:"
            r9.println(r0)     // Catch:{ all -> 0x0be0 }
            java.lang.String r0 = "  Sequence number="
            r9.print(r0)     // Catch:{ all -> 0x0be0 }
            int r0 = r1.mChangedPackagesSequenceNumber     // Catch:{ all -> 0x0be0 }
            r9.println(r0)     // Catch:{ all -> 0x0be0 }
            android.util.SparseArray<android.util.SparseArray<java.lang.String>> r0 = r1.mChangedPackages     // Catch:{ all -> 0x0be0 }
            int r0 = r0.size()     // Catch:{ all -> 0x0be0 }
            r2 = 0
        L_0x0a2f:
            if (r2 >= r0) goto L_0x0a90
            android.util.SparseArray<android.util.SparseArray<java.lang.String>> r3 = r1.mChangedPackages     // Catch:{ all -> 0x0be0 }
            java.lang.Object r3 = r3.valueAt(r2)     // Catch:{ all -> 0x0be0 }
            android.util.SparseArray r3 = (android.util.SparseArray) r3     // Catch:{ all -> 0x0be0 }
            java.lang.String r4 = "  User "
            r9.print(r4)     // Catch:{ all -> 0x0be0 }
            android.util.SparseArray<android.util.SparseArray<java.lang.String>> r4 = r1.mChangedPackages     // Catch:{ all -> 0x0be0 }
            int r4 = r4.keyAt(r2)     // Catch:{ all -> 0x0be0 }
            r9.print(r4)     // Catch:{ all -> 0x0be0 }
            java.lang.String r4 = ":"
            r9.println(r4)     // Catch:{ all -> 0x0be0 }
            int r4 = r3.size()     // Catch:{ all -> 0x0be0 }
            if (r4 != 0) goto L_0x0a5f
            java.lang.String r5 = "    "
            r9.print(r5)     // Catch:{ all -> 0x0be0 }
            java.lang.String r5 = "No packages changed"
            r9.println(r5)     // Catch:{ all -> 0x0be0 }
            r16 = r0
            goto L_0x0a8b
        L_0x0a5f:
            r5 = 0
        L_0x0a60:
            if (r5 >= r4) goto L_0x0a89
            java.lang.Object r6 = r3.valueAt(r5)     // Catch:{ all -> 0x0be0 }
            java.lang.String r6 = (java.lang.String) r6     // Catch:{ all -> 0x0be0 }
            int r7 = r3.keyAt(r5)     // Catch:{ all -> 0x0be0 }
            r16 = r0
            java.lang.String r0 = "    "
            r9.print(r0)     // Catch:{ all -> 0x0be0 }
            java.lang.String r0 = "seq="
            r9.print(r0)     // Catch:{ all -> 0x0be0 }
            r9.print(r7)     // Catch:{ all -> 0x0be0 }
            java.lang.String r0 = ", package="
            r9.print(r0)     // Catch:{ all -> 0x0be0 }
            r9.println(r6)     // Catch:{ all -> 0x0be0 }
            int r5 = r5 + 1
            r0 = r16
            goto L_0x0a60
        L_0x0a89:
            r16 = r0
        L_0x0a8b:
            int r2 = r2 + 1
            r0 = r16
            goto L_0x0a2f
        L_0x0a90:
            r16 = r0
        L_0x0a92:
            r0 = 120(0x78, float:1.68E-43)
            if (r12 != 0) goto L_0x0ae4
            r2 = 524288(0x80000, float:7.34684E-40)
            boolean r2 = r11.isDumping(r2)     // Catch:{ all -> 0x0be0 }
            if (r2 == 0) goto L_0x0ae4
            if (r13 != 0) goto L_0x0ae4
            boolean r2 = r11.onTitlePrinted()     // Catch:{ all -> 0x0be0 }
            if (r2 == 0) goto L_0x0aa9
            r31.println()     // Catch:{ all -> 0x0be0 }
        L_0x0aa9:
            com.android.internal.util.IndentingPrintWriter r2 = new com.android.internal.util.IndentingPrintWriter     // Catch:{ all -> 0x0be0 }
            java.lang.String r3 = "  "
            r2.<init>(r9, r3, r0)     // Catch:{ all -> 0x0be0 }
            r2.println()     // Catch:{ all -> 0x0be0 }
            java.lang.String r3 = "Frozen packages:"
            r2.println(r3)     // Catch:{ all -> 0x0be0 }
            r2.increaseIndent()     // Catch:{ all -> 0x0be0 }
            android.util.ArraySet<java.lang.String> r3 = r1.mFrozenPackages     // Catch:{ all -> 0x0be0 }
            int r3 = r3.size()     // Catch:{ all -> 0x0be0 }
            if (r3 != 0) goto L_0x0ac9
            java.lang.String r3 = "(none)"
            r2.println(r3)     // Catch:{ all -> 0x0be0 }
            goto L_0x0ae1
        L_0x0ac9:
            r3 = 0
            r4 = r3
        L_0x0acb:
            android.util.ArraySet<java.lang.String> r3 = r1.mFrozenPackages     // Catch:{ all -> 0x0be0 }
            int r3 = r3.size()     // Catch:{ all -> 0x0be0 }
            if (r4 >= r3) goto L_0x0ae1
            android.util.ArraySet<java.lang.String> r3 = r1.mFrozenPackages     // Catch:{ all -> 0x0be0 }
            java.lang.Object r3 = r3.valueAt(r4)     // Catch:{ all -> 0x0be0 }
            java.lang.String r3 = (java.lang.String) r3     // Catch:{ all -> 0x0be0 }
            r2.println(r3)     // Catch:{ all -> 0x0be0 }
            int r4 = r4 + 1
            goto L_0x0acb
        L_0x0ae1:
            r2.decreaseIndent()     // Catch:{ all -> 0x0be0 }
        L_0x0ae4:
            if (r12 != 0) goto L_0x0b33
            r2 = 8388608(0x800000, float:1.17549435E-38)
            boolean r2 = r11.isDumping(r2)     // Catch:{ all -> 0x0be0 }
            if (r2 == 0) goto L_0x0b33
            if (r13 != 0) goto L_0x0b33
            boolean r2 = r11.onTitlePrinted()     // Catch:{ all -> 0x0be0 }
            if (r2 == 0) goto L_0x0af9
            r31.println()     // Catch:{ all -> 0x0be0 }
        L_0x0af9:
            com.android.internal.util.IndentingPrintWriter r2 = new com.android.internal.util.IndentingPrintWriter     // Catch:{ all -> 0x0be0 }
            java.lang.String r3 = "  "
            r2.<init>(r9, r3, r0)     // Catch:{ all -> 0x0be0 }
            r2.println()     // Catch:{ all -> 0x0be0 }
            java.lang.String r3 = "Loaded volumes:"
            r2.println(r3)     // Catch:{ all -> 0x0be0 }
            r2.increaseIndent()     // Catch:{ all -> 0x0be0 }
            android.util.ArraySet<java.lang.String> r3 = r1.mLoadedVolumes     // Catch:{ all -> 0x0be0 }
            int r3 = r3.size()     // Catch:{ all -> 0x0be0 }
            if (r3 != 0) goto L_0x0b19
            java.lang.String r3 = "(none)"
            r2.println(r3)     // Catch:{ all -> 0x0be0 }
            goto L_0x0b30
        L_0x0b19:
            r3 = 0
        L_0x0b1a:
            android.util.ArraySet<java.lang.String> r4 = r1.mLoadedVolumes     // Catch:{ all -> 0x0be0 }
            int r4 = r4.size()     // Catch:{ all -> 0x0be0 }
            if (r3 >= r4) goto L_0x0b30
            android.util.ArraySet<java.lang.String> r4 = r1.mLoadedVolumes     // Catch:{ all -> 0x0be0 }
            java.lang.Object r4 = r4.valueAt(r3)     // Catch:{ all -> 0x0be0 }
            java.lang.String r4 = (java.lang.String) r4     // Catch:{ all -> 0x0be0 }
            r2.println(r4)     // Catch:{ all -> 0x0be0 }
            int r3 = r3 + 1
            goto L_0x0b1a
        L_0x0b30:
            r2.decreaseIndent()     // Catch:{ all -> 0x0be0 }
        L_0x0b33:
            if (r12 != 0) goto L_0x0b44
            r2 = 16777216(0x1000000, float:2.3509887E-38)
            boolean r2 = r11.isDumping(r2)     // Catch:{ all -> 0x0be0 }
            if (r2 == 0) goto L_0x0b44
            if (r13 != 0) goto L_0x0b44
            com.android.server.pm.ComponentResolver r2 = r1.mComponentResolver     // Catch:{ all -> 0x0be0 }
            r2.dumpServicePermissions(r9, r11, r13)     // Catch:{ all -> 0x0be0 }
        L_0x0b44:
            if (r12 != 0) goto L_0x0b5a
            r2 = 1048576(0x100000, float:1.469368E-39)
            boolean r2 = r11.isDumping(r2)     // Catch:{ all -> 0x0be0 }
            if (r2 == 0) goto L_0x0b5a
            boolean r2 = r11.onTitlePrinted()     // Catch:{ all -> 0x0be0 }
            if (r2 == 0) goto L_0x0b57
            r31.println()     // Catch:{ all -> 0x0be0 }
        L_0x0b57:
            r1.dumpDexoptStateLPr(r9, r13)     // Catch:{ all -> 0x0be0 }
        L_0x0b5a:
            if (r12 != 0) goto L_0x0b70
            r2 = 2097152(0x200000, float:2.938736E-39)
            boolean r2 = r11.isDumping(r2)     // Catch:{ all -> 0x0be0 }
            if (r2 == 0) goto L_0x0b70
            boolean r2 = r11.onTitlePrinted()     // Catch:{ all -> 0x0be0 }
            if (r2 == 0) goto L_0x0b6d
            r31.println()     // Catch:{ all -> 0x0be0 }
        L_0x0b6d:
            r1.dumpCompilerStatsLPr(r9, r13)     // Catch:{ all -> 0x0be0 }
        L_0x0b70:
            if (r12 != 0) goto L_0x0b96
            r2 = 512(0x200, float:7.175E-43)
            boolean r3 = r11.isDumping(r2)     // Catch:{ all -> 0x0be0 }
            if (r3 == 0) goto L_0x0b96
            if (r13 != 0) goto L_0x0b96
            boolean r2 = r11.onTitlePrinted()     // Catch:{ all -> 0x0be0 }
            if (r2 == 0) goto L_0x0b85
            r31.println()     // Catch:{ all -> 0x0be0 }
        L_0x0b85:
            com.android.server.pm.Settings r2 = r1.mSettings     // Catch:{ all -> 0x0be0 }
            r2.dumpReadMessagesLPr(r9, r11)     // Catch:{ all -> 0x0be0 }
            r31.println()     // Catch:{ all -> 0x0be0 }
            java.lang.String r2 = "Package warning messages:"
            r9.println(r2)     // Catch:{ all -> 0x0be0 }
            r2 = 0
            com.android.server.pm.PackageManagerServiceUtils.dumpCriticalInfo(r9, r2)     // Catch:{ all -> 0x0be0 }
        L_0x0b96:
            if (r12 == 0) goto L_0x0ba6
            r2 = 512(0x200, float:7.175E-43)
            boolean r2 = r11.isDumping(r2)     // Catch:{ all -> 0x0be0 }
            if (r2 == 0) goto L_0x0ba6
            java.lang.String r2 = "msg,"
            com.android.server.pm.PackageManagerServiceUtils.dumpCriticalInfo(r9, r2)     // Catch:{ all -> 0x0be0 }
        L_0x0ba6:
            monitor-exit(r18)     // Catch:{ all -> 0x0be0 }
            if (r12 != 0) goto L_0x0bc8
            r2 = 65536(0x10000, float:9.18355E-41)
            boolean r2 = r11.isDumping(r2)
            if (r2 == 0) goto L_0x0bc8
            if (r13 != 0) goto L_0x0bc8
            boolean r2 = r11.onTitlePrinted()
            if (r2 == 0) goto L_0x0bbc
            r31.println()
        L_0x0bbc:
            com.android.server.pm.PackageInstallerService r2 = r1.mInstallerService
            com.android.internal.util.IndentingPrintWriter r3 = new com.android.internal.util.IndentingPrintWriter
            java.lang.String r4 = "  "
            r3.<init>(r9, r4, r0)
            r2.dump(r3)
        L_0x0bc8:
            if (r12 != 0) goto L_0x0bd7
            r0 = 33554432(0x2000000, float:9.403955E-38)
            boolean r0 = r11.isDumping(r0)
            if (r0 == 0) goto L_0x0bd7
            com.android.server.pm.ApexManager r0 = r1.mApexManager
            r0.dump(r9, r13)
        L_0x0bd7:
            return
        L_0x0bd8:
            r0 = move-exception
            r18 = r5
            r15 = r8
            r8 = r30
        L_0x0bde:
            monitor-exit(r18)     // Catch:{ all -> 0x0be0 }
            throw r0
        L_0x0be0:
            r0 = move-exception
            goto L_0x0bde
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]):void");
    }

    private void disableSkuSpecificApps() {
        String[] apkList = this.mContext.getResources().getStringArray(17236011);
        String[] skuArray = this.mContext.getResources().getStringArray(17236010);
        if (!ArrayUtils.isEmpty(apkList)) {
            String sku = SystemProperties.get("ro.boot.hardware.sku");
            if (TextUtils.isEmpty(sku) || !ArrayUtils.contains(skuArray, sku)) {
                for (String packageName : apkList) {
                    setSystemAppHiddenUntilInstalled(packageName, true);
                    for (UserInfo user : sUserManager.getUsers(false)) {
                        setSystemAppInstallState(packageName, false, user.id);
                    }
                }
            }
        }
    }

    private void dumpProto(FileDescriptor fd) {
        ProtoOutputStream proto = new ProtoOutputStream(fd);
        synchronized (this.mPackages) {
            long requiredVerifierPackageToken = proto.start(1146756268033L);
            proto.write(1138166333441L, this.mRequiredVerifierPackage);
            proto.write(1120986464258L, getPackageUid(this.mRequiredVerifierPackage, 268435456, 0));
            proto.end(requiredVerifierPackageToken);
            if (this.mIntentFilterVerifierComponent != null) {
                String verifierPackageName = this.mIntentFilterVerifierComponent.getPackageName();
                long verifierPackageToken = proto.start(1146756268034L);
                proto.write(1138166333441L, verifierPackageName);
                proto.write(1120986464258L, getPackageUid(verifierPackageName, 268435456, 0));
                proto.end(verifierPackageToken);
            }
            dumpSharedLibrariesProto(proto);
            dumpFeaturesProto(proto);
            this.mSettings.dumpPackagesProto(proto);
            this.mSettings.dumpSharedUsersProto(proto);
            PackageManagerServiceUtils.dumpCriticalInfo(proto);
        }
        proto.flush();
    }

    private void dumpFeaturesProto(ProtoOutputStream proto) {
        synchronized (this.mAvailableFeatures) {
            int count = this.mAvailableFeatures.size();
            for (int i = 0; i < count; i++) {
                this.mAvailableFeatures.valueAt(i).writeToProto(proto, 2246267895812L);
            }
        }
    }

    private void dumpSharedLibrariesProto(ProtoOutputStream proto) {
        int count = this.mSharedLibraries.size();
        for (int i = 0; i < count; i++) {
            LongSparseArray<SharedLibraryInfo> versionedLib = this.mSharedLibraries.get(this.mSharedLibraries.keyAt(i));
            if (versionedLib != null) {
                int versionCount = versionedLib.size();
                for (int j = 0; j < versionCount; j++) {
                    SharedLibraryInfo libraryInfo = versionedLib.valueAt(j);
                    long sharedLibraryToken = proto.start(2246267895811L);
                    proto.write(1138166333441L, libraryInfo.getName());
                    boolean isJar = libraryInfo.getPath() != null;
                    proto.write(1133871366146L, isJar);
                    if (isJar) {
                        proto.write(1138166333443L, libraryInfo.getPath());
                    } else {
                        proto.write(1138166333444L, libraryInfo.getPackageName());
                    }
                    proto.end(sharedLibraryToken);
                }
            }
        }
    }

    @GuardedBy({"mPackages"})
    private void dumpDexoptStateLPr(PrintWriter pw, String packageName) {
        Collection<PackageParser.Package> packages;
        IndentingPrintWriter ipw = new IndentingPrintWriter(pw, "  ");
        ipw.println();
        ipw.println("Dexopt state:");
        ipw.increaseIndent();
        if (packageName != null) {
            PackageParser.Package targetPackage = this.mPackages.get(packageName);
            if (targetPackage != null) {
                packages = Collections.singletonList(targetPackage);
            } else {
                ipw.println("Unable to find package: " + packageName);
                return;
            }
        } else {
            packages = this.mPackages.values();
        }
        for (PackageParser.Package pkg : packages) {
            ipw.println("[" + pkg.packageName + "]");
            ipw.increaseIndent();
            this.mPackageDexOptimizer.dumpDexoptState(ipw, pkg, this.mDexManager.getPackageUseInfoOrDefault(pkg.packageName));
            ipw.decreaseIndent();
        }
    }

    @GuardedBy({"mPackages"})
    private void dumpCompilerStatsLPr(PrintWriter pw, String packageName) {
        Collection<PackageParser.Package> packages;
        IndentingPrintWriter ipw = new IndentingPrintWriter(pw, "  ");
        ipw.println();
        ipw.println("Compiler stats:");
        ipw.increaseIndent();
        if (packageName != null) {
            PackageParser.Package targetPackage = this.mPackages.get(packageName);
            if (targetPackage != null) {
                packages = Collections.singletonList(targetPackage);
            } else {
                ipw.println("Unable to find package: " + packageName);
                return;
            }
        } else {
            packages = this.mPackages.values();
        }
        for (PackageParser.Package pkg : packages) {
            ipw.println("[" + pkg.packageName + "]");
            ipw.increaseIndent();
            CompilerStats.PackageStats stats = getCompilerPackageStats(pkg.packageName);
            if (stats == null) {
                ipw.println("(No recorded stats)");
            } else {
                stats.dump(ipw);
            }
            ipw.decreaseIndent();
        }
    }

    private String dumpDomainString(String packageName) {
        List<IntentFilterVerificationInfo> iviList = getIntentFilterVerifications(packageName).getList();
        List<IntentFilter> filters = getAllIntentFilters(packageName).getList();
        ArraySet<String> result = new ArraySet<>();
        if (iviList.size() > 0) {
            for (IntentFilterVerificationInfo ivi : iviList) {
                result.addAll(ivi.getDomains());
            }
        }
        if (filters != null && filters.size() > 0) {
            for (IntentFilter filter : filters) {
                if (filter.hasCategory("android.intent.category.BROWSABLE") && (filter.hasDataScheme("http") || filter.hasDataScheme("https"))) {
                    result.addAll(filter.getHostsList());
                }
            }
        }
        StringBuilder sb = new StringBuilder(result.size() * 16);
        Iterator<String> it = result.iterator();
        while (it.hasNext()) {
            String domain = it.next();
            if (sb.length() > 0) {
                sb.append(" ");
            }
            sb.append(domain);
        }
        return sb.toString();
    }

    static String getEncryptKey() {
        try {
            String sdEncKey = SystemKeyStore.getInstance().retrieveKeyHexString(SD_ENCRYPTION_KEYSTORE_NAME);
            if (sdEncKey != null || (sdEncKey = SystemKeyStore.getInstance().generateNewKeyHexString(128, SD_ENCRYPTION_ALGORITHM, SD_ENCRYPTION_KEYSTORE_NAME)) != null) {
                return sdEncKey;
            }
            Slog.e(TAG, "Failed to create encryption keys");
            return null;
        } catch (NoSuchAlgorithmException nsae) {
            Slog.e(TAG, "Failed to create encryption keys with exception: " + nsae);
            return null;
        } catch (IOException ioe) {
            Slog.e(TAG, "Failed to retrieve encryption keys with exception: " + ioe);
            return null;
        }
    }

    private void sendResourcesChangedBroadcast(boolean mediaStatus, boolean replacing, ArrayList<ApplicationInfo> infos, IIntentReceiver finishedReceiver) {
        int size = infos.size();
        String[] packageNames = new String[size];
        int[] packageUids = new int[size];
        for (int i = 0; i < size; i++) {
            ApplicationInfo info = infos.get(i);
            packageNames[i] = info.packageName;
            packageUids[i] = info.uid;
        }
        sendResourcesChangedBroadcast(mediaStatus, replacing, packageNames, packageUids, finishedReceiver);
    }

    private void sendResourcesChangedBroadcast(boolean mediaStatus, boolean replacing, ArrayList<String> pkgList, int[] uidArr, IIntentReceiver finishedReceiver) {
        sendResourcesChangedBroadcast(mediaStatus, replacing, (String[]) pkgList.toArray(new String[pkgList.size()]), uidArr, finishedReceiver);
    }

    private void sendResourcesChangedBroadcast(boolean mediaStatus, boolean replacing, String[] pkgList, int[] uidArr, IIntentReceiver finishedReceiver) {
        String action;
        boolean z = replacing;
        String[] strArr = pkgList;
        int[] iArr = uidArr;
        if (strArr.length > 0) {
            Bundle extras = new Bundle();
            extras.putStringArray("android.intent.extra.changed_package_list", strArr);
            if (iArr != null) {
                extras.putIntArray("android.intent.extra.changed_uid_list", iArr);
            }
            if (z) {
                extras.putBoolean("android.intent.extra.REPLACING", z);
            }
            if (mediaStatus) {
                action = "android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE";
            } else {
                action = "android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE";
            }
            sendPackageBroadcast(action, (String) null, extras, 0, (String) null, finishedReceiver, (int[]) null, (int[]) null);
        }
    }

    /* access modifiers changed from: private */
    public void loadPrivatePackages(VolumeInfo vol) {
        this.mHandler.post(new Runnable(vol) {
            private final /* synthetic */ VolumeInfo f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                PackageManagerService.this.lambda$loadPrivatePackages$29$PackageManagerService(this.f$1);
            }
        });
    }

    /* Debug info: failed to restart local var, previous not found, register: 20 */
    /* JADX INFO: finally extract failed */
    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:98:0x01ca, code lost:
        r0 = th;
     */
    /* JADX WARNING: Removed duplicated region for block: B:30:0x00b1 A[Catch:{ all -> 0x0072 }] */
    /* renamed from: loadPrivatePackagesInner */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void lambda$loadPrivatePackages$29$PackageManagerService(android.os.storage.VolumeInfo r21) {
        /*
            r20 = this;
            r8 = r20
            r9 = r21
            java.lang.String r10 = r9.fsUuid
            boolean r0 = android.text.TextUtils.isEmpty(r10)
            if (r0 == 0) goto L_0x0014
            java.lang.String r0 = "PackageManager"
            java.lang.String r1 = "Loading internal storage is probably a mistake; ignoring"
            android.util.Slog.e(r0, r1)
            return
        L_0x0014:
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r11 = r0
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r12 = r0
            int r0 = r8.mDefParseFlags
            r13 = r0 | 8
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r8.mPackages
            monitor-enter(r1)
            com.android.server.pm.Settings r0 = r8.mSettings     // Catch:{ all -> 0x01c5 }
            com.android.server.pm.Settings$VersionInfo r0 = r0.findOrCreateVersion(r10)     // Catch:{ all -> 0x01c5 }
            r14 = r0
            com.android.server.pm.Settings r0 = r8.mSettings     // Catch:{ all -> 0x01c5 }
            java.util.List r0 = r0.getVolumePackagesLPr(r10)     // Catch:{ all -> 0x01c5 }
            r15 = r0
            monitor-exit(r1)     // Catch:{ all -> 0x01c5 }
            java.util.Iterator r16 = r15.iterator()
        L_0x003a:
            boolean r0 = r16.hasNext()
            if (r0 == 0) goto L_0x00c1
            java.lang.Object r0 = r16.next()
            r7 = r0
            com.android.server.pm.PackageSetting r7 = (com.android.server.pm.PackageSetting) r7
            java.lang.String r0 = r7.name
            java.lang.String r1 = "loadPrivatePackagesInner"
            com.android.server.pm.PackageManagerService$PackageFreezer r0 = r8.freezePackage(r0, r1)
            r11.add(r0)
            java.lang.Object r5 = r8.mInstallLock
            monitor-enter(r5)
            java.io.File r2 = r7.codePath     // Catch:{ PackageManagerException -> 0x007d, all -> 0x0076 }
            r4 = 512(0x200, float:7.175E-43)
            r17 = 0
            r0 = 0
            r1 = r20
            r3 = r13
            r19 = r5
            r5 = r17
            r17 = r13
            r13 = r7
            r7 = r0
            android.content.pm.PackageParser$Package r0 = r1.scanPackageTracedLI((java.io.File) r2, (int) r3, (int) r4, (long) r5, (android.os.UserHandle) r7)     // Catch:{ PackageManagerException -> 0x0074 }
            android.content.pm.ApplicationInfo r1 = r0.applicationInfo     // Catch:{ PackageManagerException -> 0x0074 }
            r12.add(r1)     // Catch:{ PackageManagerException -> 0x0074 }
            goto L_0x00a7
        L_0x0072:
            r0 = move-exception
            goto L_0x00bf
        L_0x0074:
            r0 = move-exception
            goto L_0x0083
        L_0x0076:
            r0 = move-exception
            r19 = r5
            r17 = r13
            r13 = r7
            goto L_0x00bf
        L_0x007d:
            r0 = move-exception
            r19 = r5
            r17 = r13
            r13 = r7
        L_0x0083:
            java.lang.String r1 = "PackageManager"
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x0072 }
            r2.<init>()     // Catch:{ all -> 0x0072 }
            java.lang.String r3 = "Failed to scan "
            r2.append(r3)     // Catch:{ all -> 0x0072 }
            java.io.File r3 = r13.codePath     // Catch:{ all -> 0x0072 }
            r2.append(r3)     // Catch:{ all -> 0x0072 }
            java.lang.String r3 = ": "
            r2.append(r3)     // Catch:{ all -> 0x0072 }
            java.lang.String r3 = r0.getMessage()     // Catch:{ all -> 0x0072 }
            r2.append(r3)     // Catch:{ all -> 0x0072 }
            java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x0072 }
            android.util.Slog.w(r1, r2)     // Catch:{ all -> 0x0072 }
        L_0x00a7:
            java.lang.String r0 = android.os.Build.FINGERPRINT     // Catch:{ all -> 0x0072 }
            java.lang.String r1 = r14.fingerprint     // Catch:{ all -> 0x0072 }
            boolean r0 = r0.equals(r1)     // Catch:{ all -> 0x0072 }
            if (r0 != 0) goto L_0x00ba
            android.content.pm.PackageParser$Package r0 = r13.pkg     // Catch:{ all -> 0x0072 }
            r1 = -1
            r2 = 131111(0x20027, float:1.83726E-40)
            r8.clearAppDataLIF(r0, r1, r2)     // Catch:{ all -> 0x0072 }
        L_0x00ba:
            monitor-exit(r19)     // Catch:{ all -> 0x0072 }
            r13 = r17
            goto L_0x003a
        L_0x00bf:
            monitor-exit(r19)     // Catch:{ all -> 0x0072 }
            throw r0
        L_0x00c1:
            r17 = r13
            android.content.Context r0 = r8.mContext
            java.lang.Class<android.os.storage.StorageManager> r1 = android.os.storage.StorageManager.class
            java.lang.Object r0 = r0.getSystemService(r1)
            r2 = r0
            android.os.storage.StorageManager r2 = (android.os.storage.StorageManager) r2
            android.content.Context r0 = r8.mContext
            java.lang.Class<android.os.UserManager> r1 = android.os.UserManager.class
            java.lang.Object r0 = r0.getSystemService(r1)
            r3 = r0
            android.os.UserManager r3 = (android.os.UserManager) r3
            android.os.UserManagerInternal r4 = r20.getUserManagerInternal()
            java.util.List r0 = r3.getUsers()
            java.util.Iterator r1 = r0.iterator()
        L_0x00e5:
            boolean r0 = r1.hasNext()
            if (r0 == 0) goto L_0x0151
            java.lang.Object r0 = r1.next()
            r6 = r0
            android.content.pm.UserInfo r6 = (android.content.pm.UserInfo) r6
            r0 = 0
            int r7 = r6.id
            boolean r7 = r4.isUserUnlockingOrUnlocked(r7)
            if (r7 == 0) goto L_0x00fd
            r0 = 3
            goto L_0x0106
        L_0x00fd:
            int r7 = r6.id
            boolean r7 = r4.isUserRunning(r7)
            if (r7 == 0) goto L_0x014e
            r0 = 1
        L_0x0106:
            android.os.storage.DiskInfo r7 = r9.disk
            int r7 = r7.flags
            r13 = 32
            r7 = r7 & r13
            if (r7 != r13) goto L_0x0113
            r0 = r0 | 32
            r7 = r0
            goto L_0x0114
        L_0x0113:
            r7 = r0
        L_0x0114:
            r13 = r7
            int r0 = r6.id     // Catch:{ IllegalStateException -> 0x0132 }
            int r5 = r6.serialNumber     // Catch:{ IllegalStateException -> 0x0132 }
            r2.prepareUserStorage(r10, r0, r5, r13)     // Catch:{ IllegalStateException -> 0x0132 }
            java.lang.Object r5 = r8.mInstallLock     // Catch:{ IllegalStateException -> 0x0132 }
            monitor-enter(r5)     // Catch:{ IllegalStateException -> 0x0132 }
            int r0 = r6.id     // Catch:{ all -> 0x012b }
            r18 = r1
            r1 = 1
            r8.reconcileAppsDataLI(r10, r0, r7, r1)     // Catch:{ all -> 0x0129 }
            monitor-exit(r5)     // Catch:{ all -> 0x0129 }
            goto L_0x014b
        L_0x0129:
            r0 = move-exception
            goto L_0x012e
        L_0x012b:
            r0 = move-exception
            r18 = r1
        L_0x012e:
            monitor-exit(r5)     // Catch:{ all -> 0x0129 }
            throw r0     // Catch:{ IllegalStateException -> 0x0130 }
        L_0x0130:
            r0 = move-exception
            goto L_0x0135
        L_0x0132:
            r0 = move-exception
            r18 = r1
        L_0x0135:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r5 = "Failed to prepare storage: "
            r1.append(r5)
            r1.append(r0)
            java.lang.String r1 = r1.toString()
            java.lang.String r5 = "PackageManager"
            android.util.Slog.w(r5, r1)
        L_0x014b:
            r1 = r18
            goto L_0x00e5
        L_0x014e:
            r18 = r1
            goto L_0x00e5
        L_0x0151:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r5 = r8.mPackages
            monitor-enter(r5)
            int r0 = r14.sdkVersion     // Catch:{ all -> 0x01c2 }
            int r1 = r8.mSdkVersion     // Catch:{ all -> 0x01c2 }
            r6 = 0
            if (r0 == r1) goto L_0x015d
            r0 = 1
            goto L_0x015e
        L_0x015d:
            r0 = r6
        L_0x015e:
            if (r0 == 0) goto L_0x0189
            r1 = 4
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ all -> 0x01c2 }
            r7.<init>()     // Catch:{ all -> 0x01c2 }
            java.lang.String r13 = "Platform changed from "
            r7.append(r13)     // Catch:{ all -> 0x01c2 }
            int r13 = r14.sdkVersion     // Catch:{ all -> 0x01c2 }
            r7.append(r13)     // Catch:{ all -> 0x01c2 }
            java.lang.String r13 = " to "
            r7.append(r13)     // Catch:{ all -> 0x01c2 }
            int r13 = r8.mSdkVersion     // Catch:{ all -> 0x01c2 }
            r7.append(r13)     // Catch:{ all -> 0x01c2 }
            java.lang.String r13 = "; regranting permissions for "
            r7.append(r13)     // Catch:{ all -> 0x01c2 }
            r7.append(r10)     // Catch:{ all -> 0x01c2 }
            java.lang.String r7 = r7.toString()     // Catch:{ all -> 0x01c2 }
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r1, r7)     // Catch:{ all -> 0x01c2 }
        L_0x0189:
            com.android.server.pm.permission.PermissionManagerServiceInternal r1 = r8.mPermissionManager     // Catch:{ all -> 0x01c2 }
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r7 = r8.mPackages     // Catch:{ all -> 0x01c2 }
            java.util.Collection r7 = r7.values()     // Catch:{ all -> 0x01c2 }
            com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r13 = r8.mPermissionCallback     // Catch:{ all -> 0x01c2 }
            r1.updateAllPermissions(r10, r0, r7, r13)     // Catch:{ all -> 0x01c2 }
            r14.forceCurrent()     // Catch:{ all -> 0x01c2 }
            com.android.server.pm.Settings r1 = r8.mSettings     // Catch:{ all -> 0x01c2 }
            r1.writeLPr()     // Catch:{ all -> 0x01c2 }
            monitor-exit(r5)     // Catch:{ all -> 0x01c2 }
            java.util.Iterator r0 = r11.iterator()
        L_0x01a3:
            boolean r1 = r0.hasNext()
            if (r1 == 0) goto L_0x01b3
            java.lang.Object r1 = r0.next()
            com.android.server.pm.PackageManagerService$PackageFreezer r1 = (com.android.server.pm.PackageManagerService.PackageFreezer) r1
            r1.close()
            goto L_0x01a3
        L_0x01b3:
            r0 = 0
            r1 = 1
            r8.sendResourcesChangedBroadcast(r1, r6, r12, r0)
            android.util.ArraySet<java.lang.String> r0 = r8.mLoadedVolumes
            java.lang.String r1 = r21.getId()
            r0.add(r1)
            return
        L_0x01c2:
            r0 = move-exception
            monitor-exit(r5)     // Catch:{ all -> 0x01c2 }
            throw r0
        L_0x01c5:
            r0 = move-exception
            r17 = r13
        L_0x01c8:
            monitor-exit(r1)     // Catch:{ all -> 0x01ca }
            throw r0
        L_0x01ca:
            r0 = move-exception
            goto L_0x01c8
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.lambda$loadPrivatePackages$29$PackageManagerService(android.os.storage.VolumeInfo):void");
    }

    /* access modifiers changed from: private */
    public void unloadPrivatePackages(VolumeInfo vol) {
        this.mHandler.post(new Runnable(vol) {
            private final /* synthetic */ VolumeInfo f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                PackageManagerService.this.lambda$unloadPrivatePackages$30$PackageManagerService(this.f$1);
            }
        });
    }

    /* Debug info: failed to restart local var, previous not found, register: 25 */
    /* access modifiers changed from: private */
    /* renamed from: unloadPrivatePackagesInner */
    public void lambda$unloadPrivatePackages$30$PackageManagerService(VolumeInfo vol) {
        Throwable th;
        PackageFreezer freezer;
        PackageSetting ps;
        StringBuilder sb;
        String volumeUuid = vol.fsUuid;
        if (TextUtils.isEmpty(volumeUuid)) {
            Slog.e(TAG, "Unloading internal storage is probably a mistake; ignoring");
            return;
        }
        ArrayList arrayList = new ArrayList();
        synchronized (this.mInstallLock) {
            synchronized (this.mPackages) {
                Iterator<PackageSetting> it = this.mSettings.getVolumePackagesLPr(volumeUuid).iterator();
                while (it.hasNext()) {
                    PackageSetting ps2 = it.next();
                    if (ps2.pkg != null) {
                        ApplicationInfo info = ps2.pkg.applicationInfo;
                        PackageRemovedInfo outInfo = new PackageRemovedInfo(this);
                        PackageFreezer freezer2 = freezePackageForDelete(ps2.name, 1, "unloadPrivatePackagesInner");
                        try {
                            PackageFreezer freezer3 = freezer2;
                            ApplicationInfo info2 = info;
                            PackageSetting ps3 = ps2;
                            Iterator<PackageSetting> it2 = it;
                            try {
                                if (deletePackageLIF(ps2.name, (UserHandle) null, false, (int[]) null, 1, outInfo, false, (PackageParser.Package) null)) {
                                    try {
                                        arrayList.add(info2);
                                        ps = ps3;
                                    } catch (Throwable th2) {
                                        th = th2;
                                        freezer = freezer3;
                                        PackageSetting packageSetting = ps3;
                                        try {
                                            throw th;
                                        } catch (Throwable th3) {
                                            Throwable th4 = th3;
                                            if (freezer != null) {
                                                $closeResource(th, freezer);
                                            }
                                            throw th4;
                                        }
                                    }
                                } else {
                                    try {
                                        sb = new StringBuilder();
                                        sb.append("Failed to unload ");
                                        ps = ps3;
                                    } catch (Throwable th5) {
                                        freezer = freezer3;
                                        PackageSetting packageSetting2 = ps3;
                                        th = th5;
                                        throw th;
                                    }
                                    try {
                                        sb.append(ps.codePath);
                                        Slog.w(TAG, sb.toString());
                                    } catch (Throwable th6) {
                                        freezer = freezer3;
                                        th = th6;
                                        throw th;
                                    }
                                }
                                PackageFreezer freezer4 = freezer3;
                                if (freezer4 != null) {
                                    $closeResource((Throwable) null, freezer4);
                                }
                                AttributeCache.instance().removePackage(ps.name);
                                it = it2;
                            } catch (Throwable th7) {
                                freezer = freezer3;
                                ApplicationInfo applicationInfo = info2;
                                PackageSetting packageSetting3 = ps3;
                                th = th7;
                                throw th;
                            }
                        } catch (Throwable th8) {
                            freezer = freezer2;
                            ApplicationInfo applicationInfo2 = info;
                            PackageSetting packageSetting4 = ps2;
                            th = th8;
                            throw th;
                        }
                    }
                }
                this.mSettings.writeLPr();
            }
        }
        sendResourcesChangedBroadcast(false, false, arrayList, (IIntentReceiver) null);
        this.mLoadedVolumes.remove(vol.getId());
        ResourcesManager.getInstance().invalidatePath(vol.getPath().getAbsolutePath());
        for (int i = 0; i < 3; i++) {
            System.gc();
            System.runFinalization();
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 5 */
    private void assertPackageKnownAndInstalled(String volumeUuid, String packageName, int userId) throws PackageManagerException {
        synchronized (this.mPackages) {
            String packageName2 = normalizePackageNameLPr(packageName);
            PackageSetting ps = this.mSettings.mPackages.get(packageName2);
            if (ps == null) {
                throw new PackageManagerException("Package " + packageName2 + " is unknown");
            } else if (!TextUtils.equals(volumeUuid, ps.volumeUuid)) {
                throw new PackageManagerException("Package " + packageName2 + " found on unknown volume " + volumeUuid + "; expected volume " + ps.volumeUuid);
            } else if (!ps.getInstalled(userId)) {
                throw new PackageManagerException("Package " + packageName2 + " not installed for user " + userId);
            }
        }
    }

    private List<String> collectAbsoluteCodePaths() {
        List<String> codePaths;
        synchronized (this.mPackages) {
            codePaths = new ArrayList<>();
            int packageCount = this.mSettings.mPackages.size();
            for (int i = 0; i < packageCount; i++) {
                codePaths.add(this.mSettings.mPackages.valueAt(i).codePath.getAbsolutePath());
            }
        }
        return codePaths;
    }

    /* access modifiers changed from: private */
    public void reconcileApps(String volumeUuid) {
        List<String> absoluteCodePaths = collectAbsoluteCodePaths();
        List<File> filesToDelete = null;
        for (File file : FileUtils.listFilesOrEmpty(Environment.getDataAppDirectory(volumeUuid))) {
            if ((PackageParser.isApkFile(file) || file.isDirectory()) && !PackageInstallerService.isStageName(file.getName())) {
                String absolutePath = file.getAbsolutePath();
                boolean pathValid = false;
                int absoluteCodePathCount = absoluteCodePaths.size();
                int i = 0;
                while (true) {
                    if (i >= absoluteCodePathCount) {
                        break;
                    } else if (absolutePath.startsWith(absoluteCodePaths.get(i))) {
                        pathValid = true;
                        break;
                    } else {
                        i++;
                    }
                }
                if (!pathValid) {
                    if (filesToDelete == null) {
                        filesToDelete = new ArrayList<>();
                    }
                    filesToDelete.add(file);
                }
            }
        }
        if (filesToDelete != null) {
            int fileToDeleteCount = filesToDelete.size();
            for (int i2 = 0; i2 < fileToDeleteCount; i2++) {
                File fileToDelete = filesToDelete.get(i2);
                PackageManagerServiceUtils.logCriticalInfo(5, "Destroying orphaned" + fileToDelete);
                synchronized (this.mInstallLock) {
                    removeCodePathLI(fileToDelete);
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void reconcileAppsData(int userId, int flags, boolean migrateAppsData) {
        for (VolumeInfo vol : ((StorageManager) this.mContext.getSystemService(StorageManager.class)).getWritablePrivateVolumes()) {
            String volumeUuid = vol.getFsUuid();
            synchronized (this.mInstallLock) {
                reconcileAppsDataLI(volumeUuid, userId, flags, migrateAppsData);
            }
        }
    }

    @GuardedBy({"mInstallLock"})
    private void reconcileAppsDataLI(String volumeUuid, int userId, int flags, boolean migrateAppData) {
        reconcileAppsDataLI(volumeUuid, userId, flags, migrateAppData, false);
    }

    @GuardedBy({"mInstallLock"})
    private List<String> reconcileAppsDataLI(String volumeUuid, int userId, int flags, boolean migrateAppData, boolean onlyCoreApps) {
        int i;
        List<PackageSetting> packages;
        int i2;
        File[] files;
        int i3;
        File ceDir;
        int i4;
        int i5;
        File[] files2;
        int i6;
        String str = volumeUuid;
        int i7 = userId;
        int i8 = flags;
        boolean z = migrateAppData;
        Slog.v(TAG, "reconcileAppsData for " + str + " u" + i7 + " 0x" + Integer.toHexString(flags) + " migrateAppData=" + z);
        List<String> result = onlyCoreApps ? new ArrayList<>() : null;
        File ceDir2 = Environment.getDataUserCeDirectory(volumeUuid, userId);
        File deDir = Environment.getDataUserDeDirectory(volumeUuid, userId);
        if ((i8 & 2) == 0) {
            i = 5;
        } else if (!StorageManager.isFileEncryptedNativeOrEmulated() || StorageManager.isUserKeyUnlocked(userId)) {
            File[] files3 = FileUtils.listFilesOrEmpty(ceDir2);
            int length = files3.length;
            int i9 = 0;
            while (i9 < length) {
                File file = files3[i9];
                String packageName = file.getName();
                try {
                    assertPackageKnownAndInstalled(str, packageName, i7);
                    i5 = i9;
                    i4 = length;
                    files2 = files3;
                    ceDir = ceDir2;
                } catch (PackageManagerException e) {
                    PackageManagerException e2 = e;
                    PackageManagerServiceUtils.logCriticalInfo(5, "Destroying " + file + " due to: " + e2);
                    try {
                        PackageManagerException packageManagerException = e2;
                        File file2 = file;
                        i5 = i9;
                        i4 = length;
                        files2 = files3;
                        ceDir = ceDir2;
                        i6 = 5;
                        try {
                            this.mInstaller.destroyAppData(volumeUuid, packageName, userId, 2, 0);
                        } catch (Installer.InstallerException e3) {
                            e2 = e3;
                        }
                    } catch (Installer.InstallerException e4) {
                        e2 = e4;
                        PackageManagerException packageManagerException2 = e2;
                        String str2 = packageName;
                        File file3 = file;
                        i5 = i9;
                        i4 = length;
                        files2 = files3;
                        ceDir = ceDir2;
                        i6 = 5;
                        PackageManagerServiceUtils.logCriticalInfo(i6, "Failed to destroy: " + e2);
                        i9 = i5 + 1;
                        files3 = files2;
                        length = i4;
                        ceDir2 = ceDir;
                    }
                }
                i9 = i5 + 1;
                files3 = files2;
                length = i4;
                ceDir2 = ceDir;
            }
            File file4 = ceDir2;
            i = 5;
        } else {
            throw new RuntimeException("Yikes, someone asked us to reconcile CE storage while " + i7 + " was still locked; this would have caused massive data loss!");
        }
        if ((i8 & 1) != 0) {
            File[] files4 = FileUtils.listFilesOrEmpty(deDir);
            int length2 = files4.length;
            int i10 = 0;
            while (i10 < length2) {
                File file5 = files4[i10];
                String packageName2 = file5.getName();
                if (KEYGUARD_PACKAGE_NAME.equals(packageName2)) {
                    Slog.d(TAG, "KeyGuard no longer exists, but give systemUI a chance to save the data");
                    i3 = i10;
                    files = files4;
                    i2 = length2;
                } else {
                    try {
                        assertPackageKnownAndInstalled(str, packageName2, i7);
                        i3 = i10;
                        files = files4;
                        i2 = length2;
                    } catch (PackageManagerException e5) {
                        PackageManagerException e6 = e5;
                        PackageManagerServiceUtils.logCriticalInfo(i, "Destroying " + file5 + " due to: " + e6);
                        try {
                            PackageManagerException packageManagerException3 = e6;
                            String str3 = packageName2;
                            File file6 = file5;
                            i3 = i10;
                            files = files4;
                            i2 = length2;
                            try {
                                this.mInstaller.destroyAppData(volumeUuid, packageName2, userId, 1, 0);
                            } catch (Installer.InstallerException e7) {
                                e2 = e7;
                            }
                        } catch (Installer.InstallerException e8) {
                            e2 = e8;
                            PackageManagerException packageManagerException4 = e6;
                            String str4 = packageName2;
                            File file7 = file5;
                            i3 = i10;
                            files = files4;
                            i2 = length2;
                            PackageManagerServiceUtils.logCriticalInfo(i, "Failed to destroy: " + e2);
                            i10 = i3 + 1;
                            files4 = files;
                            length2 = i2;
                        }
                    }
                }
                i10 = i3 + 1;
                files4 = files;
                length2 = i2;
            }
        }
        synchronized (this.mPackages) {
            packages = this.mSettings.getVolumePackagesLPr(str);
        }
        int preparedCount = 0;
        for (PackageSetting ps : packages) {
            String packageName3 = ps.name;
            if (ps.pkg == null) {
                Slog.w(TAG, "Odd, missing scanned package " + packageName3);
            } else if (onlyCoreApps && !ps.pkg.coreApp) {
                result.add(packageName3);
            } else if (ps.getInstalled(i7)) {
                prepareAppDataAndMigrateLIF(ps.pkg, i7, i8, z);
                preparedCount++;
            }
        }
        Slog.v(TAG, "reconcileAppsData finished " + preparedCount + " packages");
        return result;
    }

    private void prepareAppDataAfterInstallLIF(PackageParser.Package pkg) {
        PackageSetting ps;
        int flags;
        synchronized (this.mPackages) {
            ps = this.mSettings.mPackages.get(pkg.packageName);
            this.mSettings.writeKernelMappingLPr(ps);
        }
        UserManagerService um = sUserManager;
        UserManagerInternal umInternal = getUserManagerInternal();
        for (UserInfo user : um.getUsers(false)) {
            if (umInternal.isUserUnlockingOrUnlocked(user.id)) {
                flags = 3;
            } else if (umInternal.isUserRunning(user.id)) {
                flags = 1;
            }
            if (ps.getInstalled(user.id)) {
                prepareAppDataLIF(pkg, user.id, flags);
            }
        }
    }

    private void prepareAppDataLIF(PackageParser.Package pkg, int userId, int flags) {
        if (pkg == null) {
            Slog.wtf(TAG, "Package was null!", new Throwable());
            return;
        }
        prepareAppDataLeafLIF(pkg, userId, flags);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            prepareAppDataLeafLIF((PackageParser.Package) pkg.childPackages.get(i), userId, flags);
        }
    }

    private void prepareAppDataAndMigrateLIF(PackageParser.Package pkg, int userId, int flags, boolean maybeMigrateAppData) {
        prepareAppDataLIF(pkg, userId, flags);
        if (maybeMigrateAppData && maybeMigrateAppDataLIF(pkg, userId)) {
            prepareAppDataLIF(pkg, userId, flags);
        }
    }

    /*  JADX ERROR: IndexOutOfBoundsException in pass: RegionMakerVisitor
        java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
        	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
        	at java.util.ArrayList.get(ArrayList.java:433)
        	at jadx.core.dex.nodes.InsnNode.getArg(InsnNode.java:101)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:611)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
        	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:561)
        	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
        	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
        	at jadx.core.dex.visitors.regions.RegionMaker.processExcHandler(RegionMaker.java:1043)
        	at jadx.core.dex.visitors.regions.RegionMaker.processTryCatchBlocks(RegionMaker.java:975)
        	at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:52)
        */
    private void prepareAppDataLeafLIF(android.content.pm.PackageParser.Package r23, int r24, int r25) {
        /*
            r22 = this;
            r1 = r22
            r2 = r23
            r11 = r24
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r3 = r1.mPackages
            monitor-enter(r3)
            com.android.server.pm.Settings r0 = r1.mSettings     // Catch:{ all -> 0x0137 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r0 = r0.mPackages     // Catch:{ all -> 0x0137 }
            java.lang.String r4 = r2.packageName     // Catch:{ all -> 0x0137 }
            java.lang.Object r0 = r0.get(r4)     // Catch:{ all -> 0x0137 }
            com.android.server.pm.PackageSetting r0 = (com.android.server.pm.PackageSetting) r0     // Catch:{ all -> 0x0137 }
            r12 = r0
            monitor-exit(r3)     // Catch:{ all -> 0x0137 }
            java.lang.String r13 = r2.volumeUuid
            java.lang.String r14 = r2.packageName
            r15 = 0
            if (r12 != 0) goto L_0x0021
            android.content.pm.ApplicationInfo r0 = r2.applicationInfo
            goto L_0x0029
        L_0x0021:
            android.content.pm.PackageUserState r0 = r12.readUserState(r11)
            android.content.pm.ApplicationInfo r0 = android.content.pm.PackageParser.generateApplicationInfo(r2, r15, r0, r11)
        L_0x0029:
            if (r0 != 0) goto L_0x0030
            android.content.pm.ApplicationInfo r0 = r2.applicationInfo
            r10 = r0
            goto L_0x0031
        L_0x0030:
            r10 = r0
        L_0x0031:
            int r0 = r10.uid
            int r16 = android.os.UserHandle.getAppId(r0)
            java.lang.String r0 = r10.seInfo
            com.android.internal.util.Preconditions.checkNotNull(r0)
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r3 = r10.seInfo
            r0.append(r3)
            java.lang.String r3 = r10.seInfoUser
            if (r3 == 0) goto L_0x004d
            java.lang.String r3 = r10.seInfoUser
            goto L_0x004f
        L_0x004d:
            java.lang.String r3 = ""
        L_0x004f:
            r0.append(r3)
            java.lang.String r17 = r0.toString()
            r18 = -1
            com.android.server.pm.Installer r3 = r1.mInstaller     // Catch:{ InstallerException -> 0x0073 }
            int r0 = r10.targetSdkVersion     // Catch:{ InstallerException -> 0x0073 }
            r4 = r13
            r5 = r14
            r6 = r24
            r7 = r25
            r8 = r16
            r9 = r17
            r20 = r10
            r10 = r0
            long r3 = r3.createAppData(r4, r5, r6, r7, r8, r9, r10)     // Catch:{ InstallerException -> 0x0071 }
            r18 = r3
            goto L_0x010c
        L_0x0071:
            r0 = move-exception
            goto L_0x0076
        L_0x0073:
            r0 = move-exception
            r20 = r10
        L_0x0076:
            r10 = r0
            boolean r0 = r20.isSystemApp()
            if (r0 != 0) goto L_0x00a6
            boolean r0 = com.android.server.pm.PackageManagerServiceInjector.isRecoverAppDataAllowed(r1, r12)
            if (r0 == 0) goto L_0x0084
            goto L_0x00a6
        L_0x0084:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r3 = "Failed to create app data for "
            r0.append(r3)
            r0.append(r14)
            java.lang.String r3 = ": "
            r0.append(r3)
            r0.append(r10)
            java.lang.String r0 = r0.toString()
            java.lang.String r3 = "PackageManager"
            android.util.Slog.e(r3, r0)
            r3 = r18
            goto L_0x010c
        L_0x00a6:
            r0 = 6
            java.lang.StringBuilder r3 = new java.lang.StringBuilder
            r3.<init>()
            java.lang.String r4 = "Failed to create app data for "
            r3.append(r4)
            r3.append(r14)
            java.lang.String r4 = ", but trying to recover: "
            r3.append(r4)
            r3.append(r10)
            java.lang.String r3 = r3.toString()
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r0, r3)
            r22.destroyAppDataLeafLIF(r23, r24, r25)
            r9 = 3
            com.android.server.pm.Installer r3 = r1.mInstaller     // Catch:{ InstallerException -> 0x00f2 }
            r8 = r20
            int r0 = r8.targetSdkVersion     // Catch:{ InstallerException -> 0x00eb }
            r4 = r13
            r5 = r14
            r6 = r24
            r7 = r25
            r20 = r8
            r8 = r16
            r15 = r9
            r9 = r17
            r21 = r10
            r10 = r0
            long r3 = r3.createAppData(r4, r5, r6, r7, r8, r9, r10)     // Catch:{ InstallerException -> 0x00e9 }
            r18 = r3
            java.lang.String r0 = "Recovery succeeded!"
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r15, r0)     // Catch:{ InstallerException -> 0x00e9 }
            goto L_0x010a
        L_0x00e9:
            r0 = move-exception
            goto L_0x00f6
        L_0x00eb:
            r0 = move-exception
            r20 = r8
            r15 = r9
            r21 = r10
            goto L_0x00f6
        L_0x00f2:
            r0 = move-exception
            r15 = r9
            r21 = r10
        L_0x00f6:
            java.lang.StringBuilder r3 = new java.lang.StringBuilder
            r3.<init>()
            java.lang.String r4 = "Recovery failed: "
            r3.append(r4)
            r3.append(r0)
            java.lang.String r3 = r3.toString()
            com.android.server.pm.PackageManagerServiceUtils.logCriticalInfo(r15, r3)
        L_0x010a:
            r3 = r18
        L_0x010c:
            boolean r0 = r1.mIsUpgrade
            if (r0 != 0) goto L_0x0116
            boolean r0 = r1.mFirstBoot
            if (r0 != 0) goto L_0x0116
            if (r11 == 0) goto L_0x011c
        L_0x0116:
            com.android.server.pm.dex.ArtManagerService r0 = r1.mArtManagerService
            r5 = 0
            r0.prepareAppProfiles((android.content.pm.PackageParser.Package) r2, (int) r11, (boolean) r5)
        L_0x011c:
            r0 = r25 & 2
            if (r0 == 0) goto L_0x0133
            r5 = -1
            int r0 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1))
            if (r0 == 0) goto L_0x0133
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r5 = r1.mPackages
            monitor-enter(r5)
            if (r12 == 0) goto L_0x012e
            r12.setCeDataInode(r3, r11)     // Catch:{ all -> 0x0130 }
        L_0x012e:
            monitor-exit(r5)     // Catch:{ all -> 0x0130 }
            goto L_0x0133
        L_0x0130:
            r0 = move-exception
            monitor-exit(r5)     // Catch:{ all -> 0x0130 }
            throw r0
        L_0x0133:
            r22.prepareAppDataContentsLeafLIF(r23, r24, r25)
            return
        L_0x0137:
            r0 = move-exception
            monitor-exit(r3)     // Catch:{ all -> 0x0137 }
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.prepareAppDataLeafLIF(android.content.pm.PackageParser$Package, int, int):void");
    }

    private void prepareAppDataContentsLIF(PackageParser.Package pkg, int userId, int flags) {
        if (pkg == null) {
            Slog.wtf(TAG, "Package was null!", new Throwable());
            return;
        }
        prepareAppDataContentsLeafLIF(pkg, userId, flags);
        int childCount = pkg.childPackages != null ? pkg.childPackages.size() : 0;
        for (int i = 0; i < childCount; i++) {
            prepareAppDataContentsLeafLIF((PackageParser.Package) pkg.childPackages.get(i), userId, flags);
        }
    }

    private void prepareAppDataContentsLeafLIF(PackageParser.Package pkg, int userId, int flags) {
        String volumeUuid = pkg.volumeUuid;
        String packageName = pkg.packageName;
        ApplicationInfo app = pkg.applicationInfo;
        if ((flags & 2) != 0 && app.primaryCpuAbi != null && !VMRuntime.is64BitAbi(app.primaryCpuAbi)) {
            try {
                this.mInstaller.linkNativeLibraryDirectory(volumeUuid, packageName, app.nativeLibraryDir, userId);
            } catch (Installer.InstallerException e) {
                Slog.e(TAG, "Failed to link native for " + packageName + ": " + e);
            }
        }
    }

    private boolean maybeMigrateAppDataLIF(PackageParser.Package pkg, int userId) {
        if (!pkg.isSystem() || StorageManager.isFileEncryptedNativeOrEmulated()) {
            return false;
        }
        try {
            this.mInstaller.migrateAppData(pkg.volumeUuid, pkg.packageName, userId, pkg.applicationInfo.isDefaultToDeviceProtectedStorage() ? 1 : 2);
        } catch (Installer.InstallerException e) {
            PackageManagerServiceUtils.logCriticalInfo(5, "Failed to migrate " + pkg.packageName + ": " + e.getMessage());
        }
        return true;
    }

    public PackageFreezer freezePackage(String packageName, String killReason) {
        return freezePackage(packageName, -1, killReason);
    }

    public PackageFreezer freezePackage(String packageName, int userId, String killReason) {
        return new PackageFreezer(packageName, userId, killReason);
    }

    public PackageFreezer freezePackageForInstall(String packageName, int installFlags, String killReason) {
        return freezePackageForInstall(packageName, -1, installFlags, killReason);
    }

    public PackageFreezer freezePackageForInstall(String packageName, int userId, int installFlags, String killReason) {
        if ((installFlags & 4096) != 0) {
            return new PackageFreezer();
        }
        return freezePackage(packageName, userId, killReason);
    }

    public PackageFreezer freezePackageForDelete(String packageName, int deleteFlags, String killReason) {
        return freezePackageForDelete(packageName, -1, deleteFlags, killReason);
    }

    public PackageFreezer freezePackageForDelete(String packageName, int userId, int deleteFlags, String killReason) {
        if ((deleteFlags & 8) != 0) {
            return new PackageFreezer();
        }
        return freezePackage(packageName, userId, killReason);
    }

    private class PackageFreezer implements AutoCloseable {
        private final PackageFreezer[] mChildren;
        private final CloseGuard mCloseGuard;
        private final AtomicBoolean mClosed;
        private final String mPackageName;
        private final boolean mWeFroze;

        public PackageFreezer() {
            this.mClosed = new AtomicBoolean();
            this.mCloseGuard = CloseGuard.get();
            this.mPackageName = null;
            this.mChildren = null;
            this.mWeFroze = false;
            this.mCloseGuard.open("close");
        }

        public PackageFreezer(String packageName, int userId, String killReason) {
            this.mClosed = new AtomicBoolean();
            this.mCloseGuard = CloseGuard.get();
            synchronized (PackageManagerService.this.mPackages) {
                this.mPackageName = packageName;
                this.mWeFroze = PackageManagerService.this.mFrozenPackages.add(this.mPackageName);
                PackageSetting ps = PackageManagerService.this.mSettings.mPackages.get(this.mPackageName);
                if (ps != null) {
                    PackageManagerService.this.killApplication(ps.name, ps.appId, userId, killReason);
                }
                PackageParser.Package p = PackageManagerService.this.mPackages.get(packageName);
                if (p == null || p.childPackages == null) {
                    this.mChildren = null;
                } else {
                    int N = p.childPackages.size();
                    this.mChildren = new PackageFreezer[N];
                    for (int i = 0; i < N; i++) {
                        this.mChildren[i] = new PackageFreezer(((PackageParser.Package) p.childPackages.get(i)).packageName, userId, killReason);
                    }
                }
            }
            this.mCloseGuard.open("close");
        }

        /* access modifiers changed from: protected */
        public void finalize() throws Throwable {
            try {
                this.mCloseGuard.warnIfOpen();
                close();
            } finally {
                super.finalize();
            }
        }

        public void close() {
            this.mCloseGuard.close();
            if (this.mClosed.compareAndSet(false, true)) {
                synchronized (PackageManagerService.this.mPackages) {
                    if (this.mWeFroze) {
                        PackageManagerService.this.mFrozenPackages.remove(this.mPackageName);
                    }
                    if (this.mChildren != null) {
                        for (PackageFreezer freezer : this.mChildren) {
                            freezer.close();
                        }
                    }
                }
            }
        }
    }

    private void checkPackageFrozen(String packageName) {
        synchronized (this.mPackages) {
            if (!this.mFrozenPackages.contains(packageName)) {
                Slog.wtf(TAG, "Expected " + packageName + " to be frozen!", new Throwable());
            }
        }
    }

    public int movePackage(String packageName, String volumeUuid) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.MOVE_PACKAGE", (String) null);
        int callingUid = Binder.getCallingUid();
        UserHandle user = new UserHandle(UserHandle.getUserId(callingUid));
        int moveId = this.mNextMoveId.getAndIncrement();
        this.mHandler.post(new Runnable(packageName, volumeUuid, moveId, callingUid, user) {
            private final /* synthetic */ String f$1;
            private final /* synthetic */ String f$2;
            private final /* synthetic */ int f$3;
            private final /* synthetic */ int f$4;
            private final /* synthetic */ UserHandle f$5;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
            }

            public final void run() {
                PackageManagerService.this.lambda$movePackage$31$PackageManagerService(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
            }
        });
        return moveId;
    }

    public /* synthetic */ void lambda$movePackage$31$PackageManagerService(String packageName, String volumeUuid, int moveId, int callingUid, UserHandle user) {
        try {
            movePackageInternal(packageName, volumeUuid, moveId, callingUid, user);
        } catch (PackageManagerException e) {
            Slog.w(TAG, "Failed to move " + packageName, e);
            this.mMoveCallbacks.notifyStatusChanged(moveId, e.error);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 56 */
    /* JADX WARNING: Code restructure failed: missing block: B:100:0x0301, code lost:
        throw new com.android.server.pm.PackageManagerException(-6, "Not enough free space to move");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:101:0x0302, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:102:0x0303, code lost:
        r50 = r1;
        r52 = r5;
        r5 = r8;
        r54 = r10;
        r55 = r12;
        r6 = r13;
        r53 = r18;
        r51 = r19;
        r49 = r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:103:0x0314, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:104:0x0315, code lost:
        r50 = r1;
        r52 = r5;
        r53 = r6;
        r5 = r8;
        r54 = r10;
        r55 = r12;
        r6 = r13;
        r51 = r19;
        r49 = r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:106:?, code lost:
        monitor-exit(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:107:0x0326, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:108:0x0327, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:109:0x0329, code lost:
        r51 = r2;
        r49 = r3;
        r53 = r6;
        r5 = r8;
        r54 = r10;
        r55 = r12;
        r6 = r13;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:110:0x0336, code lost:
        r51 = r2;
        r49 = r3;
        r53 = r6;
        r5 = r8;
        r54 = r10;
        r55 = r12;
        r6 = r13;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:111:0x0342, code lost:
        r4.close();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:112:0x034d, code lost:
        throw new com.android.server.pm.PackageManagerException(-6, "Move location not mounted private volume");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x010e, code lost:
        r2 = new android.os.Bundle();
        r2.putString("android.intent.extra.PACKAGE_NAME", r15);
        r2.putString("android.intent.extra.TITLE", r3);
        com.android.server.pm.PackageManagerService.MoveCallbacks.access$5000(r14.mMoveCallbacks, r11, r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x012b, code lost:
        if (java.util.Objects.equals(android.os.storage.StorageManager.UUID_PRIVATE_INTERNAL, r13) == false) goto L_0x0135;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x012d, code lost:
        r1 = android.os.Environment.getDataAppDirectory(r58);
        r44 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:0x013c, code lost:
        if (java.util.Objects.equals("primary_physical", r13) == false) goto L_0x014a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:0x013e, code lost:
        r1 = r12.getPrimaryPhysicalVolume().getPath();
        r44 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:46:0x014a, code lost:
        r0 = r12.findVolumeByUuid(r13);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:0x014e, code lost:
        if (r0 == null) goto L_0x0336;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x0154, code lost:
        if (r0.getType() != 1) goto L_0x0336;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:51:0x015a, code lost:
        if (r0.isMountedWritable() == false) goto L_0x0329;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:52:0x015c, code lost:
        r44 = true;
        r1 = android.os.Environment.getDataAppDirectory(r58);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:53:0x0164, code lost:
        if (r44 == false) goto L_0x01b3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:54:0x0166, code lost:
        r0 = r6.length;
        r5 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:55:0x0168, code lost:
        if (r5 >= r0) goto L_0x01ae;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:56:0x016a, code lost:
        r18 = r0;
        r0 = r6[r5];
     */
    /* JADX WARNING: Code restructure failed: missing block: B:57:0x0172, code lost:
        if (android.os.storage.StorageManager.isFileEncryptedNativeOrEmulated() == false) goto L_0x01a5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:59:0x0178, code lost:
        if (android.os.storage.StorageManager.isUserKeyUnlocked(r0) == false) goto L_0x017f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:60:0x017f, code lost:
        r19 = r2;
        r2 = new java.lang.StringBuilder();
        r22 = r3;
        r2.append("User ");
        r2.append(r0);
        r2.append(" must be unlocked");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:61:0x01a0, code lost:
        throw new com.android.server.pm.PackageManagerException(-10, r2.toString());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:62:0x01a5, code lost:
        r5 = r5 + 1;
        r0 = r18;
        r2 = r2;
        r3 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:63:0x01ae, code lost:
        r19 = r2;
        r22 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:64:0x01b3, code lost:
        r19 = r2;
        r22 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:65:0x01b7, code lost:
        r5 = new android.content.pm.PackageStats((java.lang.String) null, -1);
        r2 = r14.mInstaller;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:66:0x01c1, code lost:
        monitor-enter(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:68:?, code lost:
        r0 = r6.length;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:69:0x01c3, code lost:
        r3 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:70:0x01c4, code lost:
        if (r3 >= r0) goto L_0x020f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:72:?, code lost:
        r16 = r0;
        r0 = r6[r3];
     */
    /* JADX WARNING: Code restructure failed: missing block: B:73:0x01d2, code lost:
        if (getPackageSizeInfoLI(r15, r0, r5) == 0) goto L_0x01d9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:74:0x01d4, code lost:
        r3 = r3 + 1;
        r0 = r16;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:75:0x01d9, code lost:
        r4.close();
        r16 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:76:0x01e2, code lost:
        r18 = r6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:79:0x01e8, code lost:
        throw new com.android.server.pm.PackageManagerException(-6, "Failed to measure package size");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:80:0x01e9, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:81:0x01ea, code lost:
        r50 = r1;
        r52 = r5;
        r5 = r8;
        r54 = r10;
        r55 = r12;
        r6 = r13;
        r53 = r18;
        r51 = r19;
        r49 = r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:82:0x01fc, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:83:0x01fd, code lost:
        r50 = r1;
        r52 = r5;
        r53 = r6;
        r5 = r8;
        r54 = r10;
        r55 = r12;
        r6 = r13;
        r51 = r19;
        r49 = r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:84:0x020f, code lost:
        r18 = r6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:86:?, code lost:
        monitor-exit(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:87:0x0212, code lost:
        r45 = r1.getUsableSpace();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:88:0x0216, code lost:
        if (r44 == false) goto L_0x0222;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:89:0x0218, code lost:
        r24 = r8;
        r47 = r5.codeSize + r5.dataSize;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:90:0x0222, code lost:
        r24 = r8;
        r47 = r5.codeSize;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:92:0x022e, code lost:
        if (r47 > r12.getStorageBytesUntilLow(r1)) goto L_0x02f4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:93:0x0230, code lost:
        com.android.server.pm.PackageManagerService.MoveCallbacks.access$5100(r14.mMoveCallbacks, r11, 10);
        r3 = new java.util.concurrent.CountDownLatch(1);
        r49 = r22;
        r50 = r1;
        r51 = r19;
        r52 = r5;
        r5 = r59;
        r53 = r18;
        r6 = r57;
        r1 = new com.android.server.pm.PackageManagerService.AnonymousClass11(r56);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:94:0x0254, code lost:
        if (r44 == false) goto L_0x028e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:95:0x0256, code lost:
        r54 = r10;
        r55 = r12;
        r6 = r13;
        r2 = r14;
        new java.lang.Thread(new com.android.server.pm.$$Lambda$PackageManagerService$WblJAunSpYKR0Z6fpIOICX2tVkM(r56, r3, r45, r50, r47, r59)).start();
        r0 = new com.android.server.pm.PackageManagerService.MoveInfo(r59, r24, r58, r57, r43.getName(), r40, r41, r42);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x028e, code lost:
        r54 = r10;
        r55 = r12;
        r6 = r13;
        r2 = r14;
        r5 = r24;
        r0 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:97:0x0297, code lost:
        r8 = r2.mHandler.obtainMessage(5);
        r17 = new com.android.server.pm.PackageManagerService.InstallParams(r56, com.android.server.pm.PackageManagerService.OriginInfo.fromExistingFile(r43), r0, r1, 16 | 2, r23, r58, (com.android.server.pm.PackageManagerService.VerificationInfo) null, r61, r27, (java.lang.String[]) null, (java.util.List<java.lang.String>) null, android.content.pm.PackageParser.SigningDetails.UNKNOWN, 0, -1);
        r17.setTraceMethod("movePackage").setTraceCookie(java.lang.System.identityHashCode(r17));
        r8.obj = r17;
        android.os.Trace.asyncTraceBegin(262144, "movePackage", java.lang.System.identityHashCode(r8.obj));
        android.os.Trace.asyncTraceBegin(262144, "queueInstall", java.lang.System.identityHashCode(r8.obj));
        r2.mHandler.sendMessage(r8);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:98:0x02f3, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:99:0x02f4, code lost:
        r50 = r1;
        r4.close();
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void movePackageInternal(java.lang.String r57, java.lang.String r58, int r59, int r60, android.os.UserHandle r61) throws com.android.server.pm.PackageManagerException {
        /*
            r56 = this;
            r14 = r56
            r15 = r57
            r13 = r58
            r11 = r59
            android.content.Context r0 = r14.mContext
            java.lang.Class<android.os.storage.StorageManager> r1 = android.os.storage.StorageManager.class
            java.lang.Object r0 = r0.getSystemService(r1)
            r12 = r0
            android.os.storage.StorageManager r12 = (android.os.storage.StorageManager) r12
            android.content.Context r0 = r14.mContext
            android.content.pm.PackageManager r10 = r0.getPackageManager()
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r1 = r14.mPackages
            monitor-enter(r1)
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r0 = r14.mPackages     // Catch:{ all -> 0x03c2 }
            java.lang.Object r0 = r0.get(r15)     // Catch:{ all -> 0x03c2 }
            android.content.pm.PackageParser$Package r0 = (android.content.pm.PackageParser.Package) r0     // Catch:{ all -> 0x03c2 }
            com.android.server.pm.Settings r2 = r14.mSettings     // Catch:{ all -> 0x03c2 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r2 = r2.mPackages     // Catch:{ all -> 0x03c2 }
            java.lang.Object r2 = r2.get(r15)     // Catch:{ all -> 0x03c2 }
            com.android.server.pm.PackageSetting r2 = (com.android.server.pm.PackageSetting) r2     // Catch:{ all -> 0x03c2 }
            if (r0 == 0) goto L_0x03b2
            if (r2 == 0) goto L_0x03b2
            int r3 = r61.getIdentifier()     // Catch:{ all -> 0x03c2 }
            r9 = r60
            boolean r3 = r14.filterAppAccessLPr(r2, r9, r3)     // Catch:{ all -> 0x03c2 }
            if (r3 != 0) goto L_0x03aa
            android.content.pm.ApplicationInfo r3 = r0.applicationInfo     // Catch:{ all -> 0x03c2 }
            boolean r3 = r3.isSystemApp()     // Catch:{ all -> 0x03c2 }
            if (r3 != 0) goto L_0x039a
            java.lang.String r3 = "private"
            boolean r3 = r3.equals(r13)     // Catch:{ all -> 0x03c2 }
            android.content.Context r4 = r14.mContext     // Catch:{ all -> 0x03c2 }
            android.content.res.Resources r4 = r4.getResources()     // Catch:{ all -> 0x03c2 }
            r5 = 17891339(0x111000b, float:2.6632325E-38)
            boolean r4 = r4.getBoolean(r5)     // Catch:{ all -> 0x03c2 }
            r5 = r4
            if (r3 == 0) goto L_0x0072
            if (r5 == 0) goto L_0x0060
            goto L_0x0072
        L_0x0060:
            com.android.server.pm.PackageManagerException r4 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x006a }
            r6 = -9
            java.lang.String r7 = "3rd party apps are not allowed on internal storage"
            r4.<init>(r6, r7)     // Catch:{ all -> 0x006a }
            throw r4     // Catch:{ all -> 0x006a }
        L_0x006a:
            r0 = move-exception
            r54 = r10
            r55 = r12
            r3 = r13
            goto L_0x03c8
        L_0x0072:
            java.lang.String r4 = r2.volumeUuid     // Catch:{ all -> 0x03c2 }
            r8 = r4
            java.io.File r4 = new java.io.File     // Catch:{ all -> 0x03c2 }
            java.lang.String r6 = r0.codePath     // Catch:{ all -> 0x03c2 }
            r4.<init>(r6)     // Catch:{ all -> 0x03c2 }
            r6 = r4
            java.io.File r4 = new java.io.File     // Catch:{ all -> 0x03c2 }
            java.lang.String r7 = "oat"
            r4.<init>(r6, r7)     // Catch:{ all -> 0x03c2 }
            r16 = r4
            boolean r4 = r6.isDirectory()     // Catch:{ all -> 0x03c2 }
            r7 = -6
            if (r4 == 0) goto L_0x0385
            boolean r4 = r16.isDirectory()     // Catch:{ all -> 0x03c2 }
            if (r4 == 0) goto L_0x0385
            boolean r4 = java.util.Objects.equals(r8, r13)     // Catch:{ all -> 0x03c2 }
            if (r4 != 0) goto L_0x0361
            android.content.pm.ApplicationInfo r4 = r0.applicationInfo     // Catch:{ all -> 0x03c2 }
            boolean r4 = r4.isInternal()     // Catch:{ all -> 0x03c2 }
            if (r4 == 0) goto L_0x00b6
            boolean r4 = r56.isPackageDeviceAdminOnAnyUser(r57)     // Catch:{ all -> 0x006a }
            if (r4 != 0) goto L_0x00ab
            r18 = r3
            goto L_0x00b8
        L_0x00ab:
            com.android.server.pm.PackageManagerException r4 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x006a }
            java.lang.String r7 = "Device admin cannot be moved"
            r18 = r3
            r3 = -8
            r4.<init>(r3, r7)     // Catch:{ all -> 0x006a }
            throw r4     // Catch:{ all -> 0x006a }
        L_0x00b6:
            r18 = r3
        L_0x00b8:
            android.util.ArraySet<java.lang.String> r3 = r14.mFrozenPackages     // Catch:{ all -> 0x03c2 }
            boolean r3 = r3.contains(r15)     // Catch:{ all -> 0x03c2 }
            if (r3 != 0) goto L_0x034e
            boolean r3 = isExternal((android.content.pm.PackageParser.Package) r0)     // Catch:{ all -> 0x03c2 }
            r4 = r7
            r7 = r3
            java.io.File r3 = new java.io.File     // Catch:{ all -> 0x03c2 }
            java.lang.String r4 = r0.codePath     // Catch:{ all -> 0x03c2 }
            r3.<init>(r4)     // Catch:{ all -> 0x03c2 }
            r43 = r3
            java.lang.String r3 = r2.installerPackageName     // Catch:{ all -> 0x03c2 }
            r23 = r3
            java.lang.String r3 = r2.cpuAbiOverrideString     // Catch:{ all -> 0x03c2 }
            r27 = r3
            android.content.pm.ApplicationInfo r3 = r0.applicationInfo     // Catch:{ all -> 0x03c2 }
            int r3 = r3.uid     // Catch:{ all -> 0x03c2 }
            int r40 = android.os.UserHandle.getAppId(r3)     // Catch:{ all -> 0x03c2 }
            android.content.pm.ApplicationInfo r3 = r0.applicationInfo     // Catch:{ all -> 0x03c2 }
            java.lang.String r3 = r3.seInfo     // Catch:{ all -> 0x03c2 }
            r41 = r3
            android.content.pm.ApplicationInfo r3 = r0.applicationInfo     // Catch:{ all -> 0x03c2 }
            java.lang.CharSequence r3 = r10.getApplicationLabel(r3)     // Catch:{ all -> 0x03c2 }
            java.lang.String r3 = java.lang.String.valueOf(r3)     // Catch:{ all -> 0x03c2 }
            android.content.pm.ApplicationInfo r4 = r0.applicationInfo     // Catch:{ all -> 0x03c2 }
            int r4 = r4.targetSdkVersion     // Catch:{ all -> 0x03c2 }
            r42 = r4
            java.lang.String r4 = "movePackageInternal"
            com.android.server.pm.PackageManagerService$PackageFreezer r4 = r14.freezePackage(r15, r4)     // Catch:{ all -> 0x03c2 }
            r19 = r0
            r0 = -6
            com.android.server.pm.UserManagerService r17 = sUserManager     // Catch:{ all -> 0x03c2 }
            int[] r0 = r17.getUserIds()     // Catch:{ all -> 0x03c2 }
            r17 = r5
            r5 = 1
            int[] r0 = r2.queryInstalledUsers(r0, r5)     // Catch:{ all -> 0x03c2 }
            r6 = r0
            monitor-exit(r1)     // Catch:{ all -> 0x03c2 }
            android.os.Bundle r0 = new android.os.Bundle
            r0.<init>()
            r2 = r0
            java.lang.String r0 = "android.intent.extra.PACKAGE_NAME"
            r2.putString(r0, r15)
            java.lang.String r0 = "android.intent.extra.TITLE"
            r2.putString(r0, r3)
            com.android.server.pm.PackageManagerService$MoveCallbacks r0 = r14.mMoveCallbacks
            r0.notifyCreated(r11, r2)
            r17 = 16
            java.lang.String r0 = android.os.storage.StorageManager.UUID_PRIVATE_INTERNAL
            boolean r0 = java.util.Objects.equals(r0, r13)
            if (r0 == 0) goto L_0x0135
            r0 = 1
            java.io.File r1 = android.os.Environment.getDataAppDirectory(r58)
            r44 = r0
            goto L_0x0164
        L_0x0135:
            java.lang.String r0 = "primary_physical"
            boolean r0 = java.util.Objects.equals(r0, r13)
            if (r0 == 0) goto L_0x014a
            r0 = 0
            android.os.storage.VolumeInfo r1 = r12.getPrimaryPhysicalVolume()
            java.io.File r1 = r1.getPath()
            r44 = r0
            goto L_0x0164
        L_0x014a:
            android.os.storage.VolumeInfo r0 = r12.findVolumeByUuid(r13)
            if (r0 == 0) goto L_0x0336
            int r1 = r0.getType()
            if (r1 != r5) goto L_0x0336
            boolean r1 = r0.isMountedWritable()
            if (r1 == 0) goto L_0x0329
            r1 = 1
            java.io.File r0 = android.os.Environment.getDataAppDirectory(r58)
            r44 = r1
            r1 = r0
        L_0x0164:
            if (r44 == 0) goto L_0x01b3
            int r0 = r6.length
            r5 = 0
        L_0x0168:
            if (r5 >= r0) goto L_0x01ae
            r18 = r0
            r0 = r6[r5]
            boolean r19 = android.os.storage.StorageManager.isFileEncryptedNativeOrEmulated()
            if (r19 == 0) goto L_0x01a1
            boolean r19 = android.os.storage.StorageManager.isUserKeyUnlocked(r0)
            if (r19 == 0) goto L_0x017f
            r19 = r2
            r22 = r3
            goto L_0x01a5
        L_0x017f:
            com.android.server.pm.PackageManagerException r5 = new com.android.server.pm.PackageManagerException
            r19 = r2
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            r22 = r3
            java.lang.String r3 = "User "
            r2.append(r3)
            r2.append(r0)
            java.lang.String r3 = " must be unlocked"
            r2.append(r3)
            java.lang.String r2 = r2.toString()
            r3 = -10
            r5.<init>(r3, r2)
            throw r5
        L_0x01a1:
            r19 = r2
            r22 = r3
        L_0x01a5:
            int r5 = r5 + 1
            r0 = r18
            r2 = r19
            r3 = r22
            goto L_0x0168
        L_0x01ae:
            r19 = r2
            r22 = r3
            goto L_0x01b7
        L_0x01b3:
            r19 = r2
            r22 = r3
        L_0x01b7:
            android.content.pm.PackageStats r0 = new android.content.pm.PackageStats
            r2 = 0
            r3 = -1
            r0.<init>(r2, r3)
            r5 = r0
            com.android.server.pm.Installer r2 = r14.mInstaller
            monitor-enter(r2)
            int r0 = r6.length     // Catch:{ all -> 0x0314 }
            r3 = 0
        L_0x01c4:
            if (r3 >= r0) goto L_0x020f
            r16 = r6[r3]     // Catch:{ all -> 0x01fc }
            r18 = r16
            r16 = r0
            r0 = r18
            boolean r18 = r14.getPackageSizeInfoLI(r15, r0, r5)     // Catch:{ all -> 0x01fc }
            if (r18 == 0) goto L_0x01d9
            int r3 = r3 + 1
            r0 = r16
            goto L_0x01c4
        L_0x01d9:
            r4.close()     // Catch:{ all -> 0x01fc }
            com.android.server.pm.PackageManagerException r3 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x01fc }
            r16 = r0
            java.lang.String r0 = "Failed to measure package size"
            r18 = r6
            r6 = -6
            r3.<init>(r6, r0)     // Catch:{ all -> 0x01e9 }
            throw r3     // Catch:{ all -> 0x01e9 }
        L_0x01e9:
            r0 = move-exception
            r50 = r1
            r52 = r5
            r5 = r8
            r54 = r10
            r55 = r12
            r6 = r13
            r53 = r18
            r51 = r19
            r49 = r22
            goto L_0x0325
        L_0x01fc:
            r0 = move-exception
            r50 = r1
            r52 = r5
            r53 = r6
            r5 = r8
            r54 = r10
            r55 = r12
            r6 = r13
            r51 = r19
            r49 = r22
            goto L_0x0325
        L_0x020f:
            r18 = r6
            monitor-exit(r2)     // Catch:{ all -> 0x0302 }
            long r45 = r1.getUsableSpace()
            if (r44 == 0) goto L_0x0222
            long r2 = r5.codeSize
            r24 = r8
            long r8 = r5.dataSize
            long r2 = r2 + r8
            r47 = r2
            goto L_0x0228
        L_0x0222:
            r24 = r8
            long r2 = r5.codeSize
            r47 = r2
        L_0x0228:
            long r2 = r12.getStorageBytesUntilLow(r1)
            int r0 = (r47 > r2 ? 1 : (r47 == r2 ? 0 : -1))
            if (r0 > 0) goto L_0x02f4
            com.android.server.pm.PackageManagerService$MoveCallbacks r0 = r14.mMoveCallbacks
            r2 = 10
            r0.notifyStatusChanged(r11, r2)
            java.util.concurrent.CountDownLatch r3 = new java.util.concurrent.CountDownLatch
            r0 = 1
            r3.<init>(r0)
            r49 = r22
            com.android.server.pm.PackageManagerService$11 r21 = new com.android.server.pm.PackageManagerService$11
            r50 = r1
            r1 = r21
            r51 = r19
            r2 = r56
            r52 = r5
            r5 = r59
            r53 = r18
            r6 = r57
            r1.<init>(r3, r4, r5, r6, r7)
            if (r44 == 0) goto L_0x028e
            java.lang.Thread r0 = new java.lang.Thread
            com.android.server.pm.-$$Lambda$PackageManagerService$WblJAunSpYKR0Z6fpIOICX2tVkM r1 = new com.android.server.pm.-$$Lambda$PackageManagerService$WblJAunSpYKR0Z6fpIOICX2tVkM
            r5 = r24
            r8 = r1
            r9 = r56
            r54 = r10
            r10 = r3
            r55 = r12
            r11 = r45
            r6 = r13
            r13 = r50
            r2 = r14
            r14 = r47
            r16 = r59
            r8.<init>(r10, r11, r13, r14, r16)
            r0.<init>(r1)
            r0.start()
            java.lang.String r0 = r43.getName()
            com.android.server.pm.PackageManagerService$MoveInfo r1 = new com.android.server.pm.PackageManagerService$MoveInfo
            r34 = r1
            r35 = r59
            r36 = r5
            r37 = r58
            r38 = r57
            r39 = r0
            r34.<init>(r35, r36, r37, r38, r39, r40, r41, r42)
            r0 = r1
            goto L_0x0297
        L_0x028e:
            r54 = r10
            r55 = r12
            r6 = r13
            r2 = r14
            r5 = r24
            r0 = 0
        L_0x0297:
            r1 = r17 | 2
            r22 = r1
            com.android.server.pm.PackageManagerService$PackageHandler r8 = r2.mHandler
            r9 = 5
            android.os.Message r8 = r8.obtainMessage(r9)
            com.android.server.pm.PackageManagerService$OriginInfo r9 = com.android.server.pm.PackageManagerService.OriginInfo.fromExistingFile(r43)
            r19 = r9
            com.android.server.pm.PackageManagerService$InstallParams r10 = new com.android.server.pm.PackageManagerService$InstallParams
            r17 = r10
            r25 = 0
            r28 = 0
            r29 = 0
            android.content.pm.PackageParser$SigningDetails r30 = android.content.pm.PackageParser.SigningDetails.UNKNOWN
            r31 = 0
            r32 = -1
            r18 = r56
            r20 = r0
            r24 = r58
            r26 = r61
            r17.<init>(r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32)
            java.lang.String r11 = "movePackage"
            com.android.server.pm.PackageManagerService$HandlerParams r11 = r10.setTraceMethod(r11)
            int r12 = java.lang.System.identityHashCode(r10)
            r11.setTraceCookie(r12)
            r8.obj = r10
            java.lang.Object r11 = r8.obj
            int r11 = java.lang.System.identityHashCode(r11)
            r12 = 262144(0x40000, double:1.295163E-318)
            java.lang.String r14 = "movePackage"
            android.os.Trace.asyncTraceBegin(r12, r14, r11)
            java.lang.Object r11 = r8.obj
            int r11 = java.lang.System.identityHashCode(r11)
            java.lang.String r14 = "queueInstall"
            android.os.Trace.asyncTraceBegin(r12, r14, r11)
            com.android.server.pm.PackageManagerService$PackageHandler r11 = r2.mHandler
            r11.sendMessage(r8)
            return
        L_0x02f4:
            r50 = r1
            r4.close()
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException
            java.lang.String r1 = "Not enough free space to move"
            r3 = -6
            r0.<init>(r3, r1)
            throw r0
        L_0x0302:
            r0 = move-exception
            r50 = r1
            r52 = r5
            r5 = r8
            r54 = r10
            r55 = r12
            r6 = r13
            r53 = r18
            r51 = r19
            r49 = r22
            goto L_0x0325
        L_0x0314:
            r0 = move-exception
            r50 = r1
            r52 = r5
            r53 = r6
            r5 = r8
            r54 = r10
            r55 = r12
            r6 = r13
            r51 = r19
            r49 = r22
        L_0x0325:
            monitor-exit(r2)     // Catch:{ all -> 0x0327 }
            throw r0
        L_0x0327:
            r0 = move-exception
            goto L_0x0325
        L_0x0329:
            r51 = r2
            r49 = r3
            r53 = r6
            r5 = r8
            r54 = r10
            r55 = r12
            r6 = r13
            goto L_0x0342
        L_0x0336:
            r51 = r2
            r49 = r3
            r53 = r6
            r5 = r8
            r54 = r10
            r55 = r12
            r6 = r13
        L_0x0342:
            r4.close()
            com.android.server.pm.PackageManagerException r1 = new com.android.server.pm.PackageManagerException
            java.lang.String r2 = "Move location not mounted private volume"
            r3 = -6
            r1.<init>(r3, r2)
            throw r1
        L_0x034e:
            r19 = r0
            r17 = r5
            r5 = r8
            r54 = r10
            r55 = r12
            r3 = r13
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x03ca }
            r4 = -7
            java.lang.String r7 = "Failed to move already frozen package"
            r0.<init>(r4, r7)     // Catch:{ all -> 0x03ca }
            throw r0     // Catch:{ all -> 0x03ca }
        L_0x0361:
            r19 = r0
            r18 = r3
            r17 = r5
            r5 = r8
            r54 = r10
            r55 = r12
            r3 = r13
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x03ca }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ all -> 0x03ca }
            r4.<init>()     // Catch:{ all -> 0x03ca }
            java.lang.String r7 = "Package already moved to "
            r4.append(r7)     // Catch:{ all -> 0x03ca }
            r4.append(r3)     // Catch:{ all -> 0x03ca }
            java.lang.String r4 = r4.toString()     // Catch:{ all -> 0x03ca }
            r7 = -6
            r0.<init>(r7, r4)     // Catch:{ all -> 0x03ca }
            throw r0     // Catch:{ all -> 0x03ca }
        L_0x0385:
            r19 = r0
            r18 = r3
            r17 = r5
            r5 = r8
            r54 = r10
            r55 = r12
            r3 = r13
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x03ca }
            java.lang.String r4 = "Move only supported for modern cluster style installs"
            r7 = -6
            r0.<init>(r7, r4)     // Catch:{ all -> 0x03ca }
            throw r0     // Catch:{ all -> 0x03ca }
        L_0x039a:
            r19 = r0
            r54 = r10
            r55 = r12
            r3 = r13
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x03ca }
            r4 = -3
            java.lang.String r5 = "Cannot move system application"
            r0.<init>(r4, r5)     // Catch:{ all -> 0x03ca }
            throw r0     // Catch:{ all -> 0x03ca }
        L_0x03aa:
            r19 = r0
            r54 = r10
            r55 = r12
            r3 = r13
            goto L_0x03b9
        L_0x03b2:
            r19 = r0
            r54 = r10
            r55 = r12
            r3 = r13
        L_0x03b9:
            com.android.server.pm.PackageManagerException r0 = new com.android.server.pm.PackageManagerException     // Catch:{ all -> 0x03ca }
            r4 = -2
            java.lang.String r5 = "Missing package"
            r0.<init>(r4, r5)     // Catch:{ all -> 0x03ca }
            throw r0     // Catch:{ all -> 0x03ca }
        L_0x03c2:
            r0 = move-exception
            r54 = r10
            r55 = r12
            r3 = r13
        L_0x03c8:
            monitor-exit(r1)     // Catch:{ all -> 0x03ca }
            throw r0
        L_0x03ca:
            r0 = move-exception
            goto L_0x03c8
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.movePackageInternal(java.lang.String, java.lang.String, int, int, android.os.UserHandle):void");
    }

    public /* synthetic */ void lambda$movePackageInternal$32$PackageManagerService(CountDownLatch installedLatch, long startFreeBytes, File measurePath, long sizeBytes, int moveId) {
        while (true) {
            try {
                CountDownLatch countDownLatch = installedLatch;
                try {
                    if (!installedLatch.await(1, TimeUnit.SECONDS)) {
                        this.mMoveCallbacks.notifyStatusChanged(moveId, ((int) MathUtils.constrain((80 * (startFreeBytes - measurePath.getUsableSpace())) / sizeBytes, 0, 80)) + 10);
                    } else {
                        return;
                    }
                } catch (InterruptedException e) {
                }
            } catch (InterruptedException e2) {
                CountDownLatch countDownLatch2 = installedLatch;
            }
        }
    }

    /* access modifiers changed from: private */
    public void logAppMovedStorage(String packageName, boolean isPreviousLocationExternal) {
        PackageParser.Package pkg;
        synchronized (this.mPackages) {
            pkg = this.mPackages.get(packageName);
        }
        if (pkg != null) {
            int packageExternalStorageType = getPackageExternalStorageType(((StorageManager) this.mContext.getSystemService(StorageManager.class)).findVolumeByUuid(pkg.applicationInfo.storageUuid.toString()), isExternal(pkg));
            if (!isPreviousLocationExternal && isExternal(pkg)) {
                StatsLog.write(183, packageExternalStorageType, 1, packageName);
            } else if (isPreviousLocationExternal && !isExternal(pkg)) {
                StatsLog.write(183, packageExternalStorageType, 2, packageName);
            }
        }
    }

    public int movePrimaryStorage(String volumeUuid) throws RemoteException {
        this.mContext.enforceCallingOrSelfPermission("android.permission.MOVE_PACKAGE", (String) null);
        final int realMoveId = this.mNextMoveId.getAndIncrement();
        Bundle extras = new Bundle();
        extras.putString("android.os.storage.extra.FS_UUID", volumeUuid);
        this.mMoveCallbacks.notifyCreated(realMoveId, extras);
        ((StorageManager) this.mContext.getSystemService(StorageManager.class)).setPrimaryStorageUuid(volumeUuid, new IPackageMoveObserver.Stub() {
            public void onCreated(int moveId, Bundle extras) {
            }

            public void onStatusChanged(int moveId, int status, long estMillis) {
                PackageManagerService.this.mMoveCallbacks.notifyStatusChanged(realMoveId, status, estMillis);
            }
        });
        return realMoveId;
    }

    public int getMoveStatus(int moveId) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.MOUNT_UNMOUNT_FILESYSTEMS", (String) null);
        return this.mMoveCallbacks.mLastStatus.get(moveId);
    }

    public void registerMoveCallback(IPackageMoveObserver callback) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.MOUNT_UNMOUNT_FILESYSTEMS", (String) null);
        this.mMoveCallbacks.register(callback);
    }

    public void unregisterMoveCallback(IPackageMoveObserver callback) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.MOUNT_UNMOUNT_FILESYSTEMS", (String) null);
        this.mMoveCallbacks.unregister(callback);
    }

    public boolean setInstallLocation(int loc) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.WRITE_SECURE_SETTINGS", (String) null);
        if (getInstallLocation() == loc) {
            return true;
        }
        if (loc != 0 && loc != 1 && loc != 2) {
            return false;
        }
        Settings.Global.putInt(this.mContext.getContentResolver(), "default_install_location", loc);
        return true;
    }

    public int getInstallLocation() {
        return Settings.Global.getInt(this.mContext.getContentResolver(), "default_install_location", 0);
    }

    /* access modifiers changed from: package-private */
    public void cleanUpUser(UserManagerService userManager, int userHandle) {
        synchronized (this.mPackages) {
            this.mDirtyUsers.remove(Integer.valueOf(userHandle));
            this.mUserNeedsBadging.delete(userHandle);
            this.mSettings.removeUserLPw(userHandle);
            this.mPendingBroadcasts.remove(userHandle);
            this.mInstantAppRegistry.onUserRemovedLPw(userHandle);
            removeUnusedPackagesLPw(userManager, userHandle);
        }
    }

    @GuardedBy({"mPackages"})
    private void removeUnusedPackagesLPw(UserManagerService userManager, int userHandle) {
        int[] users = userManager.getUserIds();
        for (PackageSetting ps : this.mSettings.mPackages.values()) {
            if (ps.pkg != null) {
                String packageName = ps.pkg.packageName;
                if ((ps.pkgFlags & 1) == 0 && TextUtils.isEmpty(ps.pkg.staticSharedLibName)) {
                    boolean keep = shouldKeepUninstalledPackageLPr(packageName);
                    if (!keep) {
                        int i = 0;
                        while (true) {
                            if (i < users.length) {
                                if (users[i] != userHandle && ps.getInstalled(users[i])) {
                                    keep = true;
                                    break;
                                }
                                i++;
                            } else {
                                break;
                            }
                        }
                    }
                    if (!keep) {
                        this.mHandler.post(new Runnable(packageName, userHandle) {
                            private final /* synthetic */ String f$1;
                            private final /* synthetic */ int f$2;

                            {
                                this.f$1 = r2;
                                this.f$2 = r3;
                            }

                            public final void run() {
                                PackageManagerService.this.lambda$removeUnusedPackagesLPw$33$PackageManagerService(this.f$1, this.f$2);
                            }
                        });
                    }
                }
            }
        }
    }

    public /* synthetic */ void lambda$removeUnusedPackagesLPw$33$PackageManagerService(String packageName, int userHandle) {
        deletePackageX(packageName, -1, userHandle, 0);
    }

    /* access modifiers changed from: package-private */
    public void createNewUser(int userId, String[] disallowedPackages) {
        synchronized (this.mInstallLock) {
            this.mSettings.createNewUserLI(this, this.mInstaller, userId, disallowedPackages);
        }
        synchronized (this.mPackages) {
            scheduleWritePackageRestrictionsLocked(userId);
            scheduleWritePackageListLocked(userId);
            primeDomainVerificationsLPw(userId);
        }
    }

    /* access modifiers changed from: package-private */
    public void onNewUserCreated(int userId) {
        this.mDefaultPermissionPolicy.grantDefaultPermissions(userId);
        DefaultPermissionGrantPolicyInjector.grantDefaultPermissions(this, userId);
        synchronized (this.mPackages) {
            this.mPermissionManager.updateAllPermissions(StorageManager.UUID_PRIVATE_INTERNAL, true, this.mPackages.values(), this.mPermissionCallback);
        }
    }

    public VerifierDeviceIdentity getVerifierDeviceIdentity() throws RemoteException {
        VerifierDeviceIdentity verifierDeviceIdentityLPw;
        this.mContext.enforceCallingOrSelfPermission("android.permission.PACKAGE_VERIFICATION_AGENT", "Only package verification agents can read the verifier device identity");
        synchronized (this.mPackages) {
            verifierDeviceIdentityLPw = this.mSettings.getVerifierDeviceIdentityLPw();
        }
        return verifierDeviceIdentityLPw;
    }

    public void setPermissionEnforced(String permission, boolean enforced) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.GRANT_RUNTIME_PERMISSIONS", "setPermissionEnforced");
        if ("android.permission.READ_EXTERNAL_STORAGE".equals(permission)) {
            synchronized (this.mPackages) {
                if (this.mSettings.mReadExternalStorageEnforced == null || this.mSettings.mReadExternalStorageEnforced.booleanValue() != enforced) {
                    this.mSettings.mReadExternalStorageEnforced = enforced ? Boolean.TRUE : Boolean.FALSE;
                    this.mSettings.writeLPr();
                }
            }
            IActivityManager am = ActivityManager.getService();
            if (am != null) {
                long token = Binder.clearCallingIdentity();
                try {
                    am.killProcessesBelowForeground("setPermissionEnforcement");
                } catch (RemoteException e) {
                } catch (Throwable th) {
                    Binder.restoreCallingIdentity(token);
                    throw th;
                }
                Binder.restoreCallingIdentity(token);
                return;
            }
            return;
        }
        throw new IllegalArgumentException("No selective enforcement for " + permission);
    }

    @Deprecated
    public boolean isPermissionEnforced(String permission) {
        return true;
    }

    public boolean isStorageLow() {
        long token = Binder.clearCallingIdentity();
        try {
            DeviceStorageMonitorInternal dsm = (DeviceStorageMonitorInternal) LocalServices.getService(DeviceStorageMonitorInternal.class);
            if (dsm != null) {
                return dsm.isMemoryLow();
            }
            Binder.restoreCallingIdentity(token);
            return false;
        } finally {
            Binder.restoreCallingIdentity(token);
        }
    }

    public IPackageInstaller getPackageInstaller() {
        if (getInstantAppPackageName(Binder.getCallingUid()) != null) {
            return null;
        }
        return this.mInstallerService;
    }

    public IArtManager getArtManager() {
        return this.mArtManagerService;
    }

    /* access modifiers changed from: private */
    public boolean userNeedsBadging(int userId) {
        boolean b;
        int index = this.mUserNeedsBadging.indexOfKey(userId);
        if (index >= 0) {
            return this.mUserNeedsBadging.valueAt(index);
        }
        long token = Binder.clearCallingIdentity();
        try {
            UserInfo userInfo = sUserManager.getUserInfo(userId);
            if (userInfo == null || !userInfo.isManagedProfile()) {
                b = false;
            } else {
                b = true;
            }
            this.mUserNeedsBadging.put(userId, b);
            return b;
        } finally {
            Binder.restoreCallingIdentity(token);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 6 */
    public KeySet getKeySetByAlias(String packageName, String alias) {
        KeySet keySet;
        if (packageName == null || alias == null) {
            return null;
        }
        synchronized (this.mPackages) {
            PackageParser.Package pkg = this.mPackages.get(packageName);
            if (pkg == null) {
                Slog.w(TAG, "KeySet requested for unknown package: " + packageName);
                throw new IllegalArgumentException("Unknown package: " + packageName);
            } else if (!filterAppAccessLPr((PackageSetting) pkg.mExtras, Binder.getCallingUid(), UserHandle.getCallingUserId())) {
                keySet = new KeySet(this.mSettings.mKeySetManagerService.getKeySetByAliasAndPackageNameLPr(packageName, alias));
            } else {
                Slog.w(TAG, "KeySet requested for filtered package: " + packageName);
                throw new IllegalArgumentException("Unknown package: " + packageName);
            }
        }
        return keySet;
    }

    /* Debug info: failed to restart local var, previous not found, register: 8 */
    public KeySet getSigningKeySet(String packageName) {
        KeySet keySet;
        if (packageName == null) {
            return null;
        }
        synchronized (this.mPackages) {
            int callingUid = Binder.getCallingUid();
            int callingUserId = UserHandle.getUserId(callingUid);
            PackageParser.Package pkg = this.mPackages.get(packageName);
            if (pkg == null) {
                Slog.w(TAG, "KeySet requested for unknown package: " + packageName);
                throw new IllegalArgumentException("Unknown package: " + packageName);
            } else if (!filterAppAccessLPr((PackageSetting) pkg.mExtras, callingUid, callingUserId)) {
                if (pkg.applicationInfo.uid != callingUid) {
                    if (1000 != callingUid) {
                        throw new SecurityException("May not access signing KeySet of other apps.");
                    }
                }
                keySet = new KeySet(this.mSettings.mKeySetManagerService.getSigningKeySetByPackageNameLPr(packageName));
            } else {
                Slog.w(TAG, "KeySet requested for filtered package: " + packageName + ", uid:" + callingUid);
                throw new IllegalArgumentException("Unknown package: " + packageName);
            }
        }
        return keySet;
    }

    /* Debug info: failed to restart local var, previous not found, register: 6 */
    public boolean isPackageSignedByKeySet(String packageName, KeySet ks) {
        int callingUid = Binder.getCallingUid();
        if (getInstantAppPackageName(callingUid) != null || packageName == null || ks == null) {
            return false;
        }
        synchronized (this.mPackages) {
            PackageParser.Package pkg = this.mPackages.get(packageName);
            if (pkg == null || filterAppAccessLPr((PackageSetting) pkg.mExtras, callingUid, UserHandle.getUserId(callingUid))) {
                Slog.w(TAG, "KeySet requested for unknown package: " + packageName);
                throw new IllegalArgumentException("Unknown package: " + packageName);
            }
            IBinder ksh = ks.getToken();
            if (!(ksh instanceof KeySetHandle)) {
                return false;
            }
            boolean packageIsSignedByLPr = this.mSettings.mKeySetManagerService.packageIsSignedByLPr(packageName, (KeySetHandle) ksh);
            return packageIsSignedByLPr;
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 6 */
    public boolean isPackageSignedByKeySetExactly(String packageName, KeySet ks) {
        int callingUid = Binder.getCallingUid();
        if (getInstantAppPackageName(callingUid) != null || packageName == null || ks == null) {
            return false;
        }
        synchronized (this.mPackages) {
            PackageParser.Package pkg = this.mPackages.get(packageName);
            if (pkg == null || filterAppAccessLPr((PackageSetting) pkg.mExtras, callingUid, UserHandle.getUserId(callingUid))) {
                Slog.w(TAG, "KeySet requested for unknown package: " + packageName);
                throw new IllegalArgumentException("Unknown package: " + packageName);
            }
            IBinder ksh = ks.getToken();
            if (!(ksh instanceof KeySetHandle)) {
                return false;
            }
            boolean packageIsSignedByExactlyLPr = this.mSettings.mKeySetManagerService.packageIsSignedByExactlyLPr(packageName, (KeySetHandle) ksh);
            return packageIsSignedByExactlyLPr;
        }
    }

    /* access modifiers changed from: private */
    @GuardedBy({"mPackages"})
    public void deletePackageIfUnusedLPr(String packageName) {
        PackageSetting ps = this.mSettings.mPackages.get(packageName);
        if (ps != null && !ps.isAnyInstalled(sUserManager.getUserIds())) {
            this.mHandler.post(new Runnable(packageName) {
                private final /* synthetic */ String f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    PackageManagerService.this.lambda$deletePackageIfUnusedLPr$34$PackageManagerService(this.f$1);
                }
            });
        }
    }

    public /* synthetic */ void lambda$deletePackageIfUnusedLPr$34$PackageManagerService(String packageName) {
        deletePackageX(packageName, -1, 0, 2);
    }

    /* access modifiers changed from: private */
    public static void checkDowngrade(PackageParser.Package before, PackageInfoLite after) throws PackageManagerException {
        if (after.getLongVersionCode() < before.getLongVersionCode()) {
            throw new PackageManagerException(-25, "Update version code " + after.versionCode + " is older than current " + before.getLongVersionCode());
        } else if (after.getLongVersionCode() != before.getLongVersionCode()) {
        } else {
            if (after.baseRevisionCode < before.baseRevisionCode) {
                throw new PackageManagerException(-25, "Update base revision code " + after.baseRevisionCode + " is older than current " + before.baseRevisionCode);
            } else if (!ArrayUtils.isEmpty(after.splitNames)) {
                int i = 0;
                while (i < after.splitNames.length) {
                    String splitName = after.splitNames[i];
                    int j = ArrayUtils.indexOf(before.splitNames, splitName);
                    if (j == -1 || after.splitRevisionCodes[i] >= before.splitRevisionCodes[j]) {
                        i++;
                    } else {
                        throw new PackageManagerException(-25, "Update split " + splitName + " revision code " + after.splitRevisionCodes[i] + " is older than current " + before.splitRevisionCodes[j]);
                    }
                }
            }
        }
    }

    private static class MoveCallbacks extends Handler {
        private static final int MSG_CREATED = 1;
        private static final int MSG_STATUS_CHANGED = 2;
        private final RemoteCallbackList<IPackageMoveObserver> mCallbacks = new RemoteCallbackList<>();
        /* access modifiers changed from: private */
        public final SparseIntArray mLastStatus = new SparseIntArray();

        public MoveCallbacks(Looper looper) {
            super(looper);
        }

        public void register(IPackageMoveObserver callback) {
            this.mCallbacks.register(callback);
        }

        public void unregister(IPackageMoveObserver callback) {
            this.mCallbacks.unregister(callback);
        }

        public void handleMessage(Message msg) {
            SomeArgs args = (SomeArgs) msg.obj;
            int n = this.mCallbacks.beginBroadcast();
            for (int i = 0; i < n; i++) {
                try {
                    invokeCallback(this.mCallbacks.getBroadcastItem(i), msg.what, args);
                } catch (RemoteException e) {
                }
            }
            this.mCallbacks.finishBroadcast();
            args.recycle();
        }

        private void invokeCallback(IPackageMoveObserver callback, int what, SomeArgs args) throws RemoteException {
            if (what == 1) {
                callback.onCreated(args.argi1, (Bundle) args.arg2);
            } else if (what == 2) {
                callback.onStatusChanged(args.argi1, args.argi2, ((Long) args.arg3).longValue());
            }
        }

        /* access modifiers changed from: private */
        public void notifyCreated(int moveId, Bundle extras) {
            Slog.v(PackageManagerService.TAG, "Move " + moveId + " created " + extras.toString());
            SomeArgs args = SomeArgs.obtain();
            args.argi1 = moveId;
            args.arg2 = extras;
            obtainMessage(1, args).sendToTarget();
        }

        /* access modifiers changed from: private */
        public void notifyStatusChanged(int moveId, int status) {
            notifyStatusChanged(moveId, status, -1);
        }

        /* access modifiers changed from: private */
        public void notifyStatusChanged(int moveId, int status, long estMillis) {
            Slog.v(PackageManagerService.TAG, "Move " + moveId + " status " + status);
            SomeArgs args = SomeArgs.obtain();
            args.argi1 = moveId;
            args.argi2 = status;
            args.arg3 = Long.valueOf(estMillis);
            obtainMessage(2, args).sendToTarget();
            synchronized (this.mLastStatus) {
                this.mLastStatus.put(moveId, status);
            }
        }
    }

    private static final class OnPermissionChangeListeners extends Handler {
        private static final int MSG_ON_PERMISSIONS_CHANGED = 1;
        private final RemoteCallbackList<IOnPermissionsChangeListener> mPermissionListeners = new RemoteCallbackList<>();

        public OnPermissionChangeListeners(Looper looper) {
            super(looper);
        }

        public void handleMessage(Message msg) {
            if (msg.what == 1) {
                handleOnPermissionsChanged(msg.arg1);
            }
        }

        public void addListenerLocked(IOnPermissionsChangeListener listener) {
            this.mPermissionListeners.register(listener);
        }

        public void removeListenerLocked(IOnPermissionsChangeListener listener) {
            this.mPermissionListeners.unregister(listener);
        }

        public void onPermissionsChanged(int uid) {
            if (this.mPermissionListeners.getRegisteredCallbackCount() > 0) {
                obtainMessage(1, uid, 0).sendToTarget();
            }
        }

        private void handleOnPermissionsChanged(int uid) {
            int count = this.mPermissionListeners.beginBroadcast();
            for (int i = 0; i < count; i++) {
                try {
                    this.mPermissionListeners.getBroadcastItem(i).onPermissionsChanged(uid);
                } catch (RemoteException e) {
                    Log.e(PackageManagerService.TAG, "Permission listener is dead", e);
                } catch (Throwable th) {
                    this.mPermissionListeners.finishBroadcast();
                    throw th;
                }
            }
            this.mPermissionListeners.finishBroadcast();
        }
    }

    private class PackageManagerNative extends IPackageManagerNative.Stub {
        private PackageManagerNative() {
        }

        public String[] getNamesForUids(int[] uids) throws RemoteException {
            String[] results = PackageManagerService.this.getNamesForUids(uids);
            for (int i = results.length - 1; i >= 0; i--) {
                if (results[i] == null) {
                    results[i] = "";
                }
            }
            return results;
        }

        public String getInstallerForPackage(String packageName) throws RemoteException {
            String installerName = PackageManagerService.this.getInstallerPackageName(packageName);
            if (!TextUtils.isEmpty(installerName)) {
                return installerName;
            }
            ApplicationInfo appInfo = PackageManagerService.this.getApplicationInfo(packageName, 0, UserHandle.getUserId(Binder.getCallingUid()));
            if (appInfo == null || (appInfo.flags & 1) == 0) {
                return "";
            }
            return "preload";
        }

        public long getVersionCodeForPackage(String packageName) throws RemoteException {
            try {
                PackageInfo pInfo = PackageManagerService.this.getPackageInfo(packageName, 0, UserHandle.getUserId(Binder.getCallingUid()));
                if (pInfo != null) {
                    return pInfo.getLongVersionCode();
                }
                return 0;
            } catch (Exception e) {
                return 0;
            }
        }

        public int getTargetSdkVersionForPackage(String packageName) throws RemoteException {
            ApplicationInfo info = PackageManagerService.this.getApplicationInfo(packageName, 0, UserHandle.getUserId(Binder.getCallingUid()));
            if (info != null) {
                return info.targetSdkVersion;
            }
            throw new RemoteException("Couldn't get ApplicationInfo for package " + packageName);
        }

        public boolean[] isAudioPlaybackCaptureAllowed(String[] packageNames) throws RemoteException {
            int callingUser = UserHandle.getUserId(Binder.getCallingUid());
            boolean[] results = new boolean[packageNames.length];
            for (int i = results.length - 1; i >= 0; i--) {
                boolean z = false;
                ApplicationInfo appInfo = PackageManagerService.this.getApplicationInfo(packageNames[i], 0, callingUser);
                if (appInfo != null) {
                    z = appInfo.isAudioPlaybackCaptureAllowed();
                }
                results[i] = z;
            }
            return results;
        }

        public int getLocationFlags(String packageName) throws RemoteException {
            char c = 0;
            ApplicationInfo appInfo = PackageManagerService.this.getApplicationInfo(packageName, 0, UserHandle.getUserId(Binder.getCallingUid()));
            if (appInfo != null) {
                boolean isSystemApp = appInfo.isSystemApp() | (appInfo.isVendor() ? (char) 2 : 0);
                if (appInfo.isProduct()) {
                    c = 4;
                }
                return c | isSystemApp ? 1 : 0;
            }
            throw new RemoteException("Couldn't get ApplicationInfo for package " + packageName);
        }

        public String getModuleMetadataPackageName() throws RemoteException {
            return PackageManagerService.this.mModuleInfoProvider.getPackageName();
        }
    }

    private class PackageManagerInternalImpl extends PackageManagerInternal {
        private PackageManagerInternalImpl() {
        }

        public void updatePermissionFlagsTEMP(String permName, String packageName, int flagMask, int flagValues, int userId) {
            PackageManagerService.this.updatePermissionFlags(permName, packageName, flagMask, flagValues, true, userId);
        }

        public List<ApplicationInfo> getInstalledApplications(int flags, int userId, int callingUid) {
            return PackageManagerService.this.getInstalledApplicationsListInternal(flags, userId, callingUid);
        }

        public boolean isPlatformSigned(String packageName) {
            PackageParser.Package pkg;
            PackageSetting packageSetting = PackageManagerService.this.mSettings.mPackages.get(packageName);
            if (packageSetting == null || (pkg = packageSetting.pkg) == null) {
                return false;
            }
            if (pkg.mSigningDetails.hasAncestorOrSelf(PackageManagerService.this.mPlatformPackage.mSigningDetails) || PackageManagerService.this.mPlatformPackage.mSigningDetails.checkCapability(pkg.mSigningDetails, 4)) {
                return true;
            }
            return false;
        }

        public boolean isDataRestoreSafe(byte[] restoringFromSigHash, String packageName) {
            PackageParser.SigningDetails sd = getSigningDetails(packageName);
            if (sd == null) {
                return false;
            }
            return sd.hasSha256Certificate(restoringFromSigHash, 1);
        }

        public boolean isDataRestoreSafe(Signature restoringFromSig, String packageName) {
            PackageParser.SigningDetails sd = getSigningDetails(packageName);
            if (sd == null) {
                return false;
            }
            return sd.hasCertificate(restoringFromSig, 1);
        }

        public boolean hasSignatureCapability(int serverUid, int clientUid, @PackageParser.SigningDetails.CertCapabilities int capability) {
            PackageParser.SigningDetails serverSigningDetails = getSigningDetails(serverUid);
            PackageParser.SigningDetails clientSigningDetails = getSigningDetails(clientUid);
            return serverSigningDetails.checkCapability(clientSigningDetails, capability) || clientSigningDetails.hasAncestorOrSelf(serverSigningDetails);
        }

        private PackageParser.SigningDetails getSigningDetails(String packageName) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageParser.Package p = PackageManagerService.this.mPackages.get(packageName);
                if (p == null) {
                    return null;
                }
                PackageParser.SigningDetails signingDetails = p.mSigningDetails;
                return signingDetails;
            }
        }

        private PackageParser.SigningDetails getSigningDetails(int uid) {
            synchronized (PackageManagerService.this.mPackages) {
                Object obj = PackageManagerService.this.mSettings.getSettingLPr(UserHandle.getAppId(uid));
                if (obj != null) {
                    if (obj instanceof SharedUserSetting) {
                        PackageParser.SigningDetails signingDetails = ((SharedUserSetting) obj).signatures.mSigningDetails;
                        return signingDetails;
                    } else if (obj instanceof PackageSetting) {
                        PackageParser.SigningDetails signingDetails2 = ((PackageSetting) obj).signatures.mSigningDetails;
                        return signingDetails2;
                    }
                }
                PackageSetting ps = PackageParser.SigningDetails.UNKNOWN;
                return ps;
            }
        }

        public int getPermissionFlagsTEMP(String permName, String packageName, int userId) {
            return PackageManagerService.this.getPermissionFlags(permName, packageName, userId);
        }

        public boolean isInstantApp(String packageName, int userId) {
            return PackageManagerService.this.isInstantApp(packageName, userId);
        }

        public String getInstantAppPackageName(int uid) {
            return PackageManagerService.this.getInstantAppPackageName(uid);
        }

        public boolean filterAppAccess(PackageParser.Package pkg, int callingUid, int userId) {
            boolean access$5900;
            synchronized (PackageManagerService.this.mPackages) {
                access$5900 = PackageManagerService.this.filterAppAccessLPr((PackageSetting) pkg.mExtras, callingUid, userId);
            }
            return access$5900;
        }

        public PackageParser.Package getPackage(String packageName) {
            PackageParser.Package packageR;
            synchronized (PackageManagerService.this.mPackages) {
                packageR = PackageManagerService.this.mPackages.get(PackageManagerService.this.resolveInternalPackageNameLPr(packageName, -1));
            }
            return packageR;
        }

        public PackageList getPackageList(PackageManagerInternal.PackageListObserver observer) {
            PackageList packageList;
            synchronized (PackageManagerService.this.mPackages) {
                int N = PackageManagerService.this.mPackages.size();
                ArrayList<String> list = new ArrayList<>(N);
                for (int i = 0; i < N; i++) {
                    list.add(PackageManagerService.this.mPackages.keyAt(i));
                }
                packageList = new PackageList(list, observer);
                if (observer != null) {
                    PackageManagerService.this.mPackageListObservers.add(packageList);
                }
            }
            return packageList;
        }

        public void removePackageListObserver(PackageManagerInternal.PackageListObserver observer) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mPackageListObservers.remove(observer);
            }
        }

        public PackageParser.Package getDisabledSystemPackage(String packageName) {
            PackageParser.Package packageR;
            synchronized (PackageManagerService.this.mPackages) {
                PackageSetting ps = PackageManagerService.this.mSettings.getDisabledSystemPkgLPr(packageName);
                packageR = ps != null ? ps.pkg : null;
            }
            return packageR;
        }

        public String getDisabledSystemPackageName(String packageName) {
            PackageParser.Package pkg = getDisabledSystemPackage(packageName);
            if (pkg == null) {
                return null;
            }
            return pkg.packageName;
        }

        public String getKnownPackageName(int knownPackage, int userId) {
            switch (knownPackage) {
                case 0:
                    return PackageManagerService.PLATFORM_PACKAGE_NAME;
                case 1:
                    return PackageManagerService.this.mSetupWizardPackage;
                case 2:
                    return PackageManagerService.this.mRequiredInstallerPackage;
                case 3:
                    return PackageManagerService.this.mRequiredVerifierPackage;
                case 4:
                    return PackageManagerService.this.getDefaultBrowserPackageName(userId);
                case 5:
                    return PackageManagerService.this.mSystemTextClassifierPackage;
                case 6:
                    return PackageManagerService.this.mRequiredPermissionControllerPackage;
                case 7:
                    return PackageManagerService.this.mWellbeingPackage;
                case 8:
                    return PackageManagerService.this.mDocumenterPackage;
                case 9:
                    return PackageManagerService.this.mConfiguratorPackage;
                case 10:
                    return PackageManagerService.this.mIncidentReportApproverPackage;
                case 11:
                    return PackageManagerService.this.mAppPredictionServicePackage;
                default:
                    return null;
            }
        }

        public boolean isResolveActivityComponent(ComponentInfo component) {
            return PackageManagerService.this.mResolveActivity.packageName.equals(component.packageName) && PackageManagerService.this.mResolveActivity.name.equals(component.name);
        }

        public void setLocationPackagesProvider(PackageManagerInternal.PackagesProvider provider) {
            PackageManagerService.this.mDefaultPermissionPolicy.setLocationPackagesProvider(provider);
        }

        public void setLocationExtraPackagesProvider(PackageManagerInternal.PackagesProvider provider) {
            PackageManagerService.this.mDefaultPermissionPolicy.setLocationExtraPackagesProvider(provider);
        }

        public void setVoiceInteractionPackagesProvider(PackageManagerInternal.PackagesProvider provider) {
            PackageManagerService.this.mDefaultPermissionPolicy.setVoiceInteractionPackagesProvider(provider);
        }

        public void setUseOpenWifiAppPackagesProvider(PackageManagerInternal.PackagesProvider provider) {
            PackageManagerService.this.mDefaultPermissionPolicy.setUseOpenWifiAppPackagesProvider(provider);
        }

        public void setSyncAdapterPackagesprovider(PackageManagerInternal.SyncAdapterPackagesProvider provider) {
            PackageManagerService.this.mDefaultPermissionPolicy.setSyncAdapterPackagesProvider(provider);
        }

        public void grantDefaultPermissionsToDefaultUseOpenWifiApp(String packageName, int userId) {
            PackageManagerService.this.mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultUseOpenWifiApp(packageName, userId);
        }

        public void setKeepUninstalledPackages(List<String> packageList) {
            Preconditions.checkNotNull(packageList);
            List<String> removedFromList = null;
            synchronized (PackageManagerService.this.mPackages) {
                if (PackageManagerService.this.mKeepUninstalledPackages != null) {
                    int packagesCount = PackageManagerService.this.mKeepUninstalledPackages.size();
                    for (int i = 0; i < packagesCount; i++) {
                        String oldPackage = (String) PackageManagerService.this.mKeepUninstalledPackages.get(i);
                        if (packageList == null || !packageList.contains(oldPackage)) {
                            if (removedFromList == null) {
                                removedFromList = new ArrayList<>();
                            }
                            removedFromList.add(oldPackage);
                        }
                    }
                }
                List unused = PackageManagerService.this.mKeepUninstalledPackages = new ArrayList(packageList);
                if (removedFromList != null) {
                    int removedCount = removedFromList.size();
                    for (int i2 = 0; i2 < removedCount; i2++) {
                        PackageManagerService.this.deletePackageIfUnusedLPr(removedFromList.get(i2));
                    }
                }
            }
        }

        public boolean isPermissionsReviewRequired(String packageName, int userId) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageParser.Package pkg = PackageManagerService.this.mPackages.get(packageName);
                if (pkg == null) {
                    return false;
                }
                boolean isPermissionsReviewRequired = PackageManagerService.this.mPermissionManager.isPermissionsReviewRequired(pkg, userId);
                return isPermissionsReviewRequired;
            }
        }

        public PackageInfo getPackageInfo(String packageName, int flags, int filterCallingUid, int userId) {
            return PackageManagerService.this.getPackageInfoInternal(packageName, -1, flags, filterCallingUid, userId);
        }

        public Bundle getSuspendedPackageLauncherExtras(String packageName, int userId) {
            Bundle bundle;
            synchronized (PackageManagerService.this.mPackages) {
                PackageSetting ps = PackageManagerService.this.mSettings.mPackages.get(packageName);
                PersistableBundle launcherExtras = null;
                if (ps != null) {
                    launcherExtras = ps.readUserState(userId).suspendedLauncherExtras;
                }
                bundle = launcherExtras != null ? new Bundle(launcherExtras.deepCopy()) : null;
            }
            return bundle;
        }

        public boolean isPackageSuspended(String packageName, int userId) {
            boolean suspended;
            synchronized (PackageManagerService.this.mPackages) {
                PackageSetting ps = PackageManagerService.this.mSettings.mPackages.get(packageName);
                suspended = ps != null ? ps.getSuspended(userId) : false;
            }
            return suspended;
        }

        public String getSuspendingPackage(String suspendedPackage, int userId) {
            String str;
            synchronized (PackageManagerService.this.mPackages) {
                PackageSetting ps = PackageManagerService.this.mSettings.mPackages.get(suspendedPackage);
                str = ps != null ? ps.readUserState(userId).suspendingPackage : null;
            }
            return str;
        }

        public SuspendDialogInfo getSuspendedDialogInfo(String suspendedPackage, int userId) {
            SuspendDialogInfo suspendDialogInfo;
            synchronized (PackageManagerService.this.mPackages) {
                PackageSetting ps = PackageManagerService.this.mSettings.mPackages.get(suspendedPackage);
                suspendDialogInfo = ps != null ? ps.readUserState(userId).dialogInfo : null;
            }
            return suspendDialogInfo;
        }

        public int getDistractingPackageRestrictions(String packageName, int userId) {
            int distractionFlags;
            synchronized (PackageManagerService.this.mPackages) {
                PackageSetting ps = PackageManagerService.this.mSettings.mPackages.get(packageName);
                distractionFlags = ps != null ? ps.getDistractionFlags(userId) : 0;
            }
            return distractionFlags;
        }

        public int getPackageUid(String packageName, int flags, int userId) {
            return PackageManagerService.this.getPackageUid(packageName, flags, userId);
        }

        public ApplicationInfo getApplicationInfo(String packageName, int flags, int filterCallingUid, int userId) {
            return PackageManagerService.this.getApplicationInfoInternal(packageName, flags, filterCallingUid, userId);
        }

        public ActivityInfo getActivityInfo(ComponentName component, int flags, int filterCallingUid, int userId) {
            return PackageManagerService.this.getActivityInfoInternal(component, flags, filterCallingUid, userId);
        }

        public List<ResolveInfo> queryIntentActivities(Intent intent, int flags, int filterCallingUid, int userId) {
            return PackageManagerService.this.queryIntentActivitiesInternal(intent, intent.resolveTypeIfNeeded(PackageManagerService.this.mContext.getContentResolver()), flags, filterCallingUid, userId, false, true);
        }

        public List<ResolveInfo> queryIntentServices(Intent intent, int flags, int callingUid, int userId) {
            return PackageManagerService.this.queryIntentServicesInternal(intent, intent.resolveTypeIfNeeded(PackageManagerService.this.mContext.getContentResolver()), flags, userId, callingUid, false);
        }

        public ComponentName getHomeActivitiesAsUser(List<ResolveInfo> allHomeCandidates, int userId) {
            return PackageManagerService.this.getHomeActivitiesAsUser(allHomeCandidates, userId);
        }

        public ComponentName getDefaultHomeActivity(int userId) {
            return PackageManagerService.this.getDefaultHomeActivity(userId);
        }

        public void setDeviceAndProfileOwnerPackages(int deviceOwnerUserId, String deviceOwnerPackage, SparseArray<String> profileOwnerPackages) {
            PackageManagerService.this.mProtectedPackages.setDeviceAndProfileOwnerPackages(deviceOwnerUserId, deviceOwnerPackage, profileOwnerPackages);
            ArraySet<Integer> usersWithPoOrDo = new ArraySet<>();
            if (deviceOwnerPackage != null) {
                usersWithPoOrDo.add(Integer.valueOf(deviceOwnerUserId));
            }
            int sz = profileOwnerPackages.size();
            for (int i = 0; i < sz; i++) {
                if (profileOwnerPackages.valueAt(i) != null) {
                    usersWithPoOrDo.add(Integer.valueOf(profileOwnerPackages.keyAt(i)));
                }
            }
            PackageManagerService.this.unsuspendForNonSystemSuspendingPackages(usersWithPoOrDo);
        }

        public boolean isPackageDataProtected(int userId, String packageName) {
            return PackageManagerService.this.mProtectedPackages.isPackageDataProtected(userId, packageName);
        }

        public boolean isPackageStateProtected(String packageName, int userId) {
            return PackageManagerService.this.mProtectedPackages.isPackageStateProtected(userId, packageName);
        }

        public boolean isPackageEphemeral(int userId, String packageName) {
            boolean instantApp;
            synchronized (PackageManagerService.this.mPackages) {
                PackageSetting ps = PackageManagerService.this.mSettings.mPackages.get(packageName);
                instantApp = ps != null ? ps.getInstantApp(userId) : false;
            }
            return instantApp;
        }

        public boolean wasPackageEverLaunched(String packageName, int userId) {
            boolean wasPackageEverLaunchedLPr;
            synchronized (PackageManagerService.this.mPackages) {
                wasPackageEverLaunchedLPr = PackageManagerService.this.mSettings.wasPackageEverLaunchedLPr(packageName, userId);
            }
            return wasPackageEverLaunchedLPr;
        }

        public boolean isEnabledAndMatches(ComponentInfo info, int flags, int userId) {
            boolean isEnabledAndMatchLPr;
            synchronized (PackageManagerService.this.mPackages) {
                isEnabledAndMatchLPr = PackageManagerService.this.mSettings.isEnabledAndMatchLPr(info, flags, userId);
            }
            return isEnabledAndMatchLPr;
        }

        public boolean userNeedsBadging(int userId) {
            boolean access$7100;
            synchronized (PackageManagerService.this.mPackages) {
                access$7100 = PackageManagerService.this.userNeedsBadging(userId);
            }
            return access$7100;
        }

        public void grantRuntimePermission(String packageName, String permName, int userId, boolean overridePolicy) {
            PackageManagerService.this.mPermissionManager.grantRuntimePermission(permName, packageName, overridePolicy, Binder.getCallingUid(), userId, PackageManagerService.this.mPermissionCallback);
        }

        public void revokeRuntimePermission(String packageName, String permName, int userId, boolean overridePolicy) {
            PackageManagerService.this.mPermissionManager.revokeRuntimePermission(permName, packageName, overridePolicy, userId, PackageManagerService.this.mPermissionCallback);
        }

        public String getNameForUid(int uid) {
            return PackageManagerService.this.getNameForUid(uid);
        }

        public void requestInstantAppResolutionPhaseTwo(AuxiliaryResolveInfo responseObj, Intent origIntent, String resolvedType, String callingPackage, Bundle verificationBundle, int userId) {
            PackageManagerService.this.requestInstantAppResolutionPhaseTwo(responseObj, origIntent, resolvedType, callingPackage, verificationBundle, userId);
        }

        public void grantEphemeralAccess(int userId, Intent intent, int targetAppId, int ephemeralAppId) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mInstantAppRegistry.grantInstantAccessLPw(userId, intent, targetAppId, ephemeralAppId);
            }
        }

        public boolean isInstantAppInstallerComponent(ComponentName component) {
            boolean z;
            synchronized (PackageManagerService.this.mPackages) {
                z = PackageManagerService.this.mInstantAppInstallerActivity != null && PackageManagerService.this.mInstantAppInstallerActivity.getComponentName().equals(component);
            }
            return z;
        }

        public void pruneInstantApps() {
            PackageManagerService.this.mInstantAppRegistry.pruneInstantApps();
        }

        public String getSetupWizardPackageName() {
            return PackageManagerService.this.mSetupWizardPackage;
        }

        public void setExternalSourcesPolicy(PackageManagerInternal.ExternalSourcesPolicy policy) {
            if (policy != null) {
                PackageManagerService.this.mExternalSourcesPolicy = policy;
            }
        }

        public boolean isPackagePersistent(String packageName) {
            boolean z;
            synchronized (PackageManagerService.this.mPackages) {
                PackageParser.Package pkg = PackageManagerService.this.mPackages.get(packageName);
                z = false;
                if (pkg != null && (pkg.applicationInfo.flags & 9) == 9) {
                    z = true;
                }
            }
            return z;
        }

        public boolean isLegacySystemApp(PackageParser.Package pkg) {
            boolean z;
            synchronized (PackageManagerService.this.mPackages) {
                PackageSetting ps = (PackageSetting) pkg.mExtras;
                z = PackageManagerService.this.mPromoteSystemApps && ps.isSystem() && PackageManagerService.this.mExistingSystemPackages.contains(ps.name);
            }
            return z;
        }

        public List<PackageInfo> getOverlayPackages(int userId) {
            PackageInfo pkg;
            ArrayList<PackageInfo> overlayPackages = new ArrayList<>();
            synchronized (PackageManagerService.this.mPackages) {
                for (PackageParser.Package p : PackageManagerService.this.mPackages.values()) {
                    if (!(p.mOverlayTarget == null || (pkg = PackageManagerService.this.generatePackageInfo((PackageSetting) p.mExtras, 0, userId)) == null)) {
                        overlayPackages.add(pkg);
                    }
                }
            }
            return overlayPackages;
        }

        public List<String> getTargetPackageNames(int userId) {
            List<String> targetPackages = new ArrayList<>();
            synchronized (PackageManagerService.this.mPackages) {
                for (PackageParser.Package p : PackageManagerService.this.mPackages.values()) {
                    if (p.mOverlayTarget == null) {
                        targetPackages.add(p.packageName);
                    }
                }
            }
            return targetPackages;
        }

        public boolean setEnabledOverlayPackages(int userId, String targetPackageName, List<String> overlayPackageNames) {
            synchronized (PackageManagerService.this.mPackages) {
                if (targetPackageName != null) {
                    if (PackageManagerService.this.mPackages.get(targetPackageName) != null) {
                        ArrayList<String> overlayPaths = null;
                        if (overlayPackageNames != null && overlayPackageNames.size() > 0) {
                            int N = overlayPackageNames.size();
                            overlayPaths = new ArrayList<>(N);
                            for (int i = 0; i < N; i++) {
                                String packageName = overlayPackageNames.get(i);
                                PackageParser.Package pkg = PackageManagerService.this.mPackages.get(packageName);
                                if (pkg == null) {
                                    Slog.e(PackageManagerService.TAG, "failed to find package " + packageName);
                                    return false;
                                }
                                overlayPaths.add(pkg.baseCodePath);
                            }
                        }
                        PackageManagerService.this.mSettings.mPackages.get(targetPackageName).setOverlayPaths(overlayPaths, userId);
                        return true;
                    }
                }
                Slog.e(PackageManagerService.TAG, "failed to find package " + targetPackageName);
                return false;
            }
        }

        public ResolveInfo resolveIntent(Intent intent, String resolvedType, int flags, int userId, boolean resolveForStart, int filterCallingUid) {
            return PackageManagerService.this.resolveIntentInternal(intent, resolvedType, flags, userId, resolveForStart, filterCallingUid);
        }

        public ResolveInfo resolveService(Intent intent, String resolvedType, int flags, int userId, int callingUid) {
            return PackageManagerService.this.resolveServiceInternal(intent, resolvedType, flags, userId, callingUid);
        }

        public ProviderInfo resolveContentProvider(String name, int flags, int userId) {
            return PackageManagerService.this.resolveContentProviderInternal(name, flags, userId);
        }

        public void addIsolatedUid(int isolatedUid, int ownerUid) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mIsolatedOwners.put(isolatedUid, ownerUid);
            }
        }

        public void removeIsolatedUid(int isolatedUid) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mIsolatedOwners.delete(isolatedUid);
            }
        }

        public int getUidTargetSdkVersion(int uid) {
            int access$7800;
            synchronized (PackageManagerService.this.mPackages) {
                access$7800 = PackageManagerService.this.getUidTargetSdkVersionLockedLPr(uid);
            }
            return access$7800;
        }

        public int getPackageTargetSdkVersion(String packageName) {
            int access$7900;
            synchronized (PackageManagerService.this.mPackages) {
                access$7900 = PackageManagerService.this.getPackageTargetSdkVersionLockedLPr(packageName);
            }
            return access$7900;
        }

        public boolean canAccessInstantApps(int callingUid, int userId) {
            return PackageManagerService.this.canViewInstantApps(callingUid, userId);
        }

        public boolean canAccessComponent(int callingUid, ComponentName component, int userId) {
            boolean z;
            synchronized (PackageManagerService.this.mPackages) {
                PackageSetting ps = PackageManagerService.this.mSettings.mPackages.get(component.getPackageName());
                z = ps != null && !PackageManagerService.this.filterAppAccessLPr(ps, callingUid, component, 0, userId);
            }
            return z;
        }

        public boolean hasInstantApplicationMetadata(String packageName, int userId) {
            boolean hasInstantApplicationMetadataLPr;
            synchronized (PackageManagerService.this.mPackages) {
                hasInstantApplicationMetadataLPr = PackageManagerService.this.mInstantAppRegistry.hasInstantApplicationMetadataLPr(packageName, userId);
            }
            return hasInstantApplicationMetadataLPr;
        }

        public void notifyPackageUse(String packageName, int reason) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.notifyPackageUseLocked(packageName, reason);
            }
        }

        public PackageManagerInternal.CheckPermissionDelegate getCheckPermissionDelegate() {
            PackageManagerInternal.CheckPermissionDelegate checkPermissionDelegateLocked;
            synchronized (PackageManagerService.this.mPackages) {
                checkPermissionDelegateLocked = PackageManagerService.this.getCheckPermissionDelegateLocked();
            }
            return checkPermissionDelegateLocked;
        }

        public void setCheckPermissionDelegate(PackageManagerInternal.CheckPermissionDelegate delegate) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.setCheckPermissionDelegateLocked(delegate);
            }
        }

        public SparseArray<String> getAppsWithSharedUserIds() {
            SparseArray<String> access$8300;
            synchronized (PackageManagerService.this.mPackages) {
                access$8300 = PackageManagerService.this.getAppsWithSharedUserIdsLocked();
            }
            return access$8300;
        }

        public String getSharedUserIdForPackage(String packageName) {
            String access$8400;
            synchronized (PackageManagerService.this.mPackages) {
                access$8400 = PackageManagerService.this.getSharedUserIdForPackageLocked(packageName);
            }
            return access$8400;
        }

        public String[] getPackagesForSharedUserId(String sharedUserId, int userId) {
            String[] access$8500;
            synchronized (PackageManagerService.this.mPackages) {
                access$8500 = PackageManagerService.this.getPackagesForSharedUserIdLocked(sharedUserId, userId);
            }
            return access$8500;
        }

        public boolean isOnlyCoreApps() {
            return PackageManagerService.this.isOnlyCoreApps();
        }

        public void freeStorage(String volumeUuid, long bytes, int storageFlags) throws IOException {
            PackageManagerService.this.freeStorage(volumeUuid, bytes, storageFlags);
        }

        public void forEachPackage(Consumer<PackageParser.Package> actionLocked) {
            PackageManagerService.this.forEachPackage(actionLocked);
        }

        public void forEachInstalledPackage(Consumer<PackageParser.Package> actionLocked, int userId) {
            PackageManagerService.this.forEachInstalledPackage(actionLocked, userId);
        }

        public ArraySet<String> getEnabledComponents(String packageName, int userId) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageSetting setting = PackageManagerService.this.mSettings.getPackageLPr(packageName);
                if (setting == null) {
                    ArraySet<String> arraySet = new ArraySet<>();
                    return arraySet;
                }
                ArraySet<String> enabledComponents = setting.getEnabledComponents(userId);
                return enabledComponents;
            }
        }

        public ArraySet<String> getDisabledComponents(String packageName, int userId) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageSetting setting = PackageManagerService.this.mSettings.getPackageLPr(packageName);
                if (setting == null) {
                    ArraySet<String> arraySet = new ArraySet<>();
                    return arraySet;
                }
                ArraySet<String> disabledComponents = setting.getDisabledComponents(userId);
                return disabledComponents;
            }
        }

        public int getApplicationEnabledState(String packageName, int userId) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageSetting setting = PackageManagerService.this.mSettings.getPackageLPr(packageName);
                if (setting == null) {
                    return 0;
                }
                int enabled = setting.getEnabled(userId);
                return enabled;
            }
        }

        public void setEnableRollbackCode(int token, int enableRollbackCode) {
            PackageManagerService.this.setEnableRollbackCode(token, enableRollbackCode);
        }

        public boolean compileLayouts(String packageName) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageParser.Package pkg = PackageManagerService.this.mPackages.get(packageName);
                if (pkg == null) {
                    return false;
                }
                return PackageManagerService.this.mArtManagerService.compileLayouts(pkg);
            }
        }

        public void finishPackageInstall(int token, boolean didLaunch) {
            PackageManagerService.this.finishPackageInstall(token, didLaunch);
        }

        public String removeLegacyDefaultBrowserPackageName(int userId) {
            String removeDefaultBrowserPackageNameLPw;
            synchronized (PackageManagerService.this.mPackages) {
                removeDefaultBrowserPackageNameLPw = PackageManagerService.this.mSettings.removeDefaultBrowserPackageNameLPw(userId);
            }
            return removeDefaultBrowserPackageNameLPw;
        }

        public void setDefaultBrowserProvider(PackageManagerInternal.DefaultBrowserProvider provider) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerInternal.DefaultBrowserProvider unused = PackageManagerService.this.mDefaultBrowserProvider = provider;
            }
        }

        public void setDefaultDialerProvider(PackageManagerInternal.DefaultDialerProvider provider) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerInternal.DefaultDialerProvider unused = PackageManagerService.this.mDefaultDialerProvider = provider;
            }
        }

        public void setDefaultHomeProvider(PackageManagerInternal.DefaultHomeProvider provider) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerInternal.DefaultHomeProvider unused = PackageManagerService.this.mDefaultHomeProvider = provider;
            }
        }

        public boolean isApexPackage(String packageName) {
            return PackageManagerService.this.mApexManager.isApexPackage(packageName);
        }

        public void uninstallApex(String packageName, long versionCode, int userId, IntentSender intentSender) {
            int callerUid = Binder.getCallingUid();
            if (callerUid == 0 || callerUid == PackageManagerService.SHELL_UID) {
                PackageInstallerService.PackageDeleteObserverAdapter packageDeleteObserverAdapter = new PackageInstallerService.PackageDeleteObserverAdapter(PackageManagerService.this.mContext, intentSender, packageName, false, userId);
                if (userId != -1) {
                    packageDeleteObserverAdapter.onPackageDeleted(packageName, -5, "Can't uninstall an apex for a single user");
                    return;
                }
                ApexManager am = PackageManagerService.this.mApexManager;
                PackageInfo activePackage = am.getPackageInfo(packageName, 1);
                if (activePackage == null) {
                    packageDeleteObserverAdapter.onPackageDeleted(packageName, -5, packageName + " is not an apex package");
                } else if (versionCode != -1 && activePackage.getLongVersionCode() != versionCode) {
                    packageDeleteObserverAdapter.onPackageDeleted(packageName, -5, "Active version " + activePackage.getLongVersionCode() + " is not equal to " + versionCode + "]");
                } else if (!am.uninstallApex(activePackage.applicationInfo.sourceDir)) {
                    packageDeleteObserverAdapter.onPackageDeleted(packageName, -5, "Failed to uninstall apex " + packageName);
                } else {
                    packageDeleteObserverAdapter.onPackageDeleted(packageName, 1, (String) null);
                }
            } else {
                throw new SecurityException("Not allowed to uninstall apexes");
            }
        }

        public boolean wereDefaultPermissionsGrantedSinceBoot(int userId) {
            boolean wereDefaultPermissionsGrantedSinceBoot;
            synchronized (PackageManagerService.this.mPackages) {
                wereDefaultPermissionsGrantedSinceBoot = PackageManagerService.this.mDefaultPermissionPolicy.wereDefaultPermissionsGrantedSinceBoot(userId);
            }
            return wereDefaultPermissionsGrantedSinceBoot;
        }

        public void setRuntimePermissionsFingerPrint(String fingerPrint, int userId) {
            synchronized (PackageManagerService.this.mPackages) {
                PackageManagerService.this.mSettings.setRuntimePermissionsFingerPrintLPr(fingerPrint, userId);
            }
        }

        public void migrateLegacyObbData() {
            try {
                PackageManagerService.this.mInstaller.migrateLegacyObbData();
            } catch (Exception e) {
                Slog.wtf(PackageManagerService.TAG, e);
            }
        }
    }

    /* access modifiers changed from: private */
    @GuardedBy({"mPackages"})
    public SparseArray<String> getAppsWithSharedUserIdsLocked() {
        SparseArray<String> sharedUserIds = new SparseArray<>();
        synchronized (this.mPackages) {
            for (SharedUserSetting setting : this.mSettings.getAllSharedUsersLPw()) {
                sharedUserIds.put(UserHandle.getAppId(setting.userId), setting.name);
            }
        }
        return sharedUserIds;
    }

    /* access modifiers changed from: private */
    @GuardedBy({"mPackages"})
    public String getSharedUserIdForPackageLocked(String packageName) {
        PackageSetting ps = this.mSettings.mPackages.get(packageName);
        if (ps == null || !ps.isSharedUser()) {
            return null;
        }
        return ps.sharedUser.name;
    }

    /* access modifiers changed from: private */
    @GuardedBy({"mPackages"})
    public String[] getPackagesForSharedUserIdLocked(String sharedUserId, int userId) {
        try {
            int i = 0;
            SharedUserSetting sus = this.mSettings.getSharedUserLPw(sharedUserId, 0, 0, false);
            if (sus == null) {
                return EmptyArray.STRING;
            }
            String[] res = new String[sus.packages.size()];
            Iterator<PackageSetting> it = sus.packages.iterator();
            while (it.hasNext()) {
                PackageSetting ps = it.next();
                if (ps.getInstalled(userId)) {
                    res[i] = ps.name;
                    i++;
                } else {
                    res = (String[]) ArrayUtils.removeElement(String.class, res, res[i]);
                }
            }
            return res;
        } catch (PackageManagerException e) {
            return EmptyArray.STRING;
        }
    }

    public int getRuntimePermissionsVersion(int userId) {
        int defaultRuntimePermissionsVersionLPr;
        Preconditions.checkArgumentNonnegative(userId);
        this.mContext.enforceCallingOrSelfPermission("android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY", "setRuntimePermissionVersion");
        synchronized (this.mPackages) {
            defaultRuntimePermissionsVersionLPr = this.mSettings.getDefaultRuntimePermissionsVersionLPr(userId);
        }
        return defaultRuntimePermissionsVersionLPr;
    }

    public void setRuntimePermissionsVersion(int version, int userId) {
        Preconditions.checkArgumentNonnegative(version);
        Preconditions.checkArgumentNonnegative(userId);
        this.mContext.enforceCallingOrSelfPermission("android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY", "setRuntimePermissionVersion");
        synchronized (this.mPackages) {
            this.mSettings.setDefaultRuntimePermissionsVersionLPr(version, userId);
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 4 */
    public void grantDefaultPermissionsToEnabledCarrierApps(String[] packageNames, int userId) {
        enforceSystemOrPhoneCaller("grantPermissionsToEnabledCarrierApps");
        synchronized (this.mPackages) {
            long identity = Binder.clearCallingIdentity();
            try {
                this.mDefaultPermissionPolicy.grantDefaultPermissionsToEnabledCarrierApps(packageNames, userId);
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 4 */
    public void grantDefaultPermissionsToEnabledImsServices(String[] packageNames, int userId) {
        enforceSystemOrPhoneCaller("grantDefaultPermissionsToEnabledImsServices");
        synchronized (this.mPackages) {
            long identity = Binder.clearCallingIdentity();
            try {
                this.mDefaultPermissionPolicy.grantDefaultPermissionsToEnabledImsServices(packageNames, userId);
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }
    }

    public void grantDefaultPermissionsToEnabledTelephonyDataServices(String[] packageNames, int userId) {
        enforceSystemOrPhoneCaller("grantDefaultPermissionsToEnabledTelephonyDataServices");
        synchronized (this.mPackages) {
            Binder.withCleanCallingIdentity(new FunctionalUtils.ThrowingRunnable(packageNames, userId) {
                private final /* synthetic */ String[] f$1;
                private final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void runOrThrow() {
                    PackageManagerService.this.lambda$grantDefaultPermissionsToEnabledTelephonyDataServices$35$PackageManagerService(this.f$1, this.f$2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$grantDefaultPermissionsToEnabledTelephonyDataServices$35$PackageManagerService(String[] packageNames, int userId) throws Exception {
        this.mDefaultPermissionPolicy.grantDefaultPermissionsToEnabledTelephonyDataServices(packageNames, userId);
    }

    public void revokeDefaultPermissionsFromDisabledTelephonyDataServices(String[] packageNames, int userId) {
        enforceSystemOrPhoneCaller("revokeDefaultPermissionsFromDisabledTelephonyDataServices");
        synchronized (this.mPackages) {
            Binder.withCleanCallingIdentity(new FunctionalUtils.ThrowingRunnable(packageNames, userId) {
                private final /* synthetic */ String[] f$1;
                private final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void runOrThrow() {
                    PackageManagerService.this.lambda$revokeDefaultPermissionsFromDisabledTelephonyDataServices$36$PackageManagerService(this.f$1, this.f$2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$revokeDefaultPermissionsFromDisabledTelephonyDataServices$36$PackageManagerService(String[] packageNames, int userId) throws Exception {
        this.mDefaultPermissionPolicy.revokeDefaultPermissionsFromDisabledTelephonyDataServices(packageNames, userId);
    }

    /* Debug info: failed to restart local var, previous not found, register: 4 */
    public void grantDefaultPermissionsToActiveLuiApp(String packageName, int userId) {
        enforceSystemOrPhoneCaller("grantDefaultPermissionsToActiveLuiApp");
        synchronized (this.mPackages) {
            long identity = Binder.clearCallingIdentity();
            try {
                this.mDefaultPermissionPolicy.grantDefaultPermissionsToActiveLuiApp(packageName, userId);
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }
    }

    /* Debug info: failed to restart local var, previous not found, register: 4 */
    public void revokeDefaultPermissionsFromLuiApps(String[] packageNames, int userId) {
        enforceSystemOrPhoneCaller("revokeDefaultPermissionsFromLuiApps");
        synchronized (this.mPackages) {
            long identity = Binder.clearCallingIdentity();
            try {
                this.mDefaultPermissionPolicy.revokeDefaultPermissionsFromLuiApps(packageNames, userId);
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void forEachPackage(Consumer<PackageParser.Package> actionLocked) {
        synchronized (this.mPackages) {
            int numPackages = this.mPackages.size();
            for (int i = 0; i < numPackages; i++) {
                actionLocked.accept(this.mPackages.valueAt(i));
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void forEachInstalledPackage(Consumer<PackageParser.Package> actionLocked, int userId) {
        synchronized (this.mPackages) {
            int numPackages = this.mPackages.size();
            for (int i = 0; i < numPackages; i++) {
                PackageParser.Package pkg = this.mPackages.valueAt(i);
                PackageSetting setting = this.mSettings.getPackageLPr(pkg.packageName);
                if (setting != null) {
                    if (setting.getInstalled(userId)) {
                        actionLocked.accept(pkg);
                    }
                }
            }
        }
    }

    private static void enforceSystemOrPhoneCaller(String tag) {
        int callingUid = Binder.getCallingUid();
        if (callingUid != 1001 && callingUid != 1000) {
            throw new SecurityException("Cannot call " + tag + " from UID " + callingUid);
        }
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x0023, code lost:
        if (isSystemApp(r12) != false) goto L_0x0052;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x0025, code lost:
        r13 = new com.android.server.pm.PackageManagerService.PackageRemovedInfo(r10);
        r14 = r10.mInstallLock;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:17:0x002d, code lost:
        monitor-enter(r14);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:19:0x0034, code lost:
        if (r18 == false) goto L_0x0037;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x0036, code lost:
        r1 = 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:?, code lost:
        r0 = deletePackageLIF(r17, (android.os.UserHandle) null, true, (int[]) null, Integer.MIN_VALUE | r1, r13, true, (android.content.pm.PackageParser.Package) null);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x0046, code lost:
        if (r13.args == null) goto L_0x004d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:25:0x0048, code lost:
        r13.args.doPostDeleteLI(true);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x004d, code lost:
        monitor-exit(r14);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x004e, code lost:
        return r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x0052, code lost:
        return false;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean deleteDataPackage(java.lang.String r17, boolean r18) {
        /*
            r16 = this;
            r10 = r16
            boolean r0 = android.text.TextUtils.isEmpty(r17)
            r1 = 0
            if (r0 == 0) goto L_0x000a
            return r1
        L_0x000a:
            android.util.ArrayMap<java.lang.String, android.content.pm.PackageParser$Package> r2 = r10.mPackages
            monitor-enter(r2)
            com.android.server.pm.Settings r0 = r10.mSettings     // Catch:{ all -> 0x0053 }
            android.util.ArrayMap<java.lang.String, com.android.server.pm.PackageSetting> r0 = r0.mPackages     // Catch:{ all -> 0x0053 }
            r11 = r17
            java.lang.Object r0 = r0.get(r11)     // Catch:{ all -> 0x0058 }
            com.android.server.pm.PackageSetting r0 = (com.android.server.pm.PackageSetting) r0     // Catch:{ all -> 0x0058 }
            r12 = r0
            if (r12 != 0) goto L_0x001e
            monitor-exit(r2)     // Catch:{ all -> 0x0058 }
            return r1
        L_0x001e:
            monitor-exit(r2)     // Catch:{ all -> 0x0058 }
            boolean r0 = isSystemApp((com.android.server.pm.PackageSetting) r12)
            if (r0 != 0) goto L_0x0052
            com.android.server.pm.PackageManagerService$PackageRemovedInfo r0 = new com.android.server.pm.PackageManagerService$PackageRemovedInfo
            r0.<init>(r10)
            r13 = r0
            java.lang.Object r14 = r10.mInstallLock
            monitor-enter(r14)
            r3 = 0
            r4 = 1
            r5 = 0
            r0 = -2147483648(0xffffffff80000000, float:-0.0)
            r15 = 1
            if (r18 == 0) goto L_0x0037
            r1 = r15
        L_0x0037:
            r6 = r0 | r1
            r8 = 1
            r9 = 0
            r1 = r16
            r2 = r17
            r7 = r13
            boolean r0 = r1.deletePackageLIF(r2, r3, r4, r5, r6, r7, r8, r9)     // Catch:{ all -> 0x004f }
            com.android.server.pm.PackageManagerService$InstallArgs r1 = r13.args     // Catch:{ all -> 0x004f }
            if (r1 == 0) goto L_0x004d
            com.android.server.pm.PackageManagerService$InstallArgs r1 = r13.args     // Catch:{ all -> 0x004f }
            r1.doPostDeleteLI(r15)     // Catch:{ all -> 0x004f }
        L_0x004d:
            monitor-exit(r14)     // Catch:{ all -> 0x004f }
            return r0
        L_0x004f:
            r0 = move-exception
            monitor-exit(r14)     // Catch:{ all -> 0x004f }
            throw r0
        L_0x0052:
            return r1
        L_0x0053:
            r0 = move-exception
            r11 = r17
        L_0x0056:
            monitor-exit(r2)     // Catch:{ all -> 0x0058 }
            throw r0
        L_0x0058:
            r0 = move-exception
            goto L_0x0056
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.pm.PackageManagerService.deleteDataPackage(java.lang.String, boolean):boolean");
    }

    /* access modifiers changed from: package-private */
    public boolean isHistoricalPackageUsageAvailable() {
        return this.mPackageUsage.isHistoricalPackageUsageAvailable();
    }

    /* access modifiers changed from: package-private */
    public Collection<PackageParser.Package> getPackages() {
        ArrayList arrayList;
        synchronized (this.mPackages) {
            arrayList = new ArrayList(this.mPackages.values());
        }
        return arrayList;
    }

    public void logAppProcessStartIfNeeded(String processName, int uid, String seinfo, String apkFile, int pid) {
        if (getInstantAppPackageName(Binder.getCallingUid()) == null && SecurityLog.isLoggingEnabled()) {
            Bundle data = new Bundle();
            data.putLong("startTimestamp", System.currentTimeMillis());
            data.putString("processName", processName);
            data.putInt(WatchlistLoggingHandler.WatchlistEventKeys.UID, uid);
            data.putString("seinfo", seinfo);
            data.putString("apkFile", apkFile);
            data.putInt("pid", pid);
            Message msg = this.mProcessLoggingHandler.obtainMessage(1);
            msg.setData(data);
            this.mProcessLoggingHandler.sendMessage(msg);
        }
    }

    public CompilerStats.PackageStats getCompilerPackageStats(String pkgName) {
        return this.mCompilerStats.getPackageStats(pkgName);
    }

    public CompilerStats.PackageStats getOrCreateCompilerPackageStats(PackageParser.Package pkg) {
        return getOrCreateCompilerPackageStats(pkg.packageName);
    }

    public CompilerStats.PackageStats getOrCreateCompilerPackageStats(String pkgName) {
        return this.mCompilerStats.getOrCreatePackageStats(pkgName);
    }

    public void deleteCompilerPackageStats(String pkgName) {
        this.mCompilerStats.deletePackageStats(pkgName);
    }

    public int getInstallReason(String packageName, int userId) {
        int callingUid = Binder.getCallingUid();
        this.mPermissionManager.enforceCrossUserPermission(callingUid, userId, true, false, "get install reason");
        synchronized (this.mPackages) {
            PackageSetting ps = this.mSettings.mPackages.get(packageName);
            if (filterAppAccessLPr(ps, callingUid, userId)) {
                return 0;
            }
            if (ps == null) {
                return 0;
            }
            int installReason = ps.getInstallReason(userId);
            return installReason;
        }
    }

    public boolean canRequestPackageInstalls(String packageName, int userId) {
        return canRequestPackageInstallsInternal(packageName, 0, userId, true);
    }

    private boolean canRequestPackageInstallsInternal(String packageName, int flags, int userId, boolean throwIfPermNotDeclared) {
        PackageManagerInternal.ExternalSourcesPolicy externalSourcesPolicy;
        int callingUid = Binder.getCallingUid();
        int uid = getPackageUid(packageName, 0, userId);
        if (callingUid == uid || callingUid == 0 || callingUid == 1000) {
            ApplicationInfo info = getApplicationInfo(packageName, flags, userId);
            if (info == null || info.targetSdkVersion < 26 || isInstantApp(packageName, userId)) {
                return false;
            }
            if (!ArrayUtils.contains(getAppOpPermissionPackages("android.permission.REQUEST_INSTALL_PACKAGES"), packageName)) {
                if (!throwIfPermNotDeclared) {
                    Slog.e(TAG, "Need to declare " + "android.permission.REQUEST_INSTALL_PACKAGES" + " to call this api");
                    return false;
                }
                throw new SecurityException("Need to declare " + "android.permission.REQUEST_INSTALL_PACKAGES" + " to call this api");
            } else if (sUserManager.hasUserRestriction("no_install_unknown_sources", userId) || sUserManager.hasUserRestriction("no_install_unknown_sources_globally", userId) || (externalSourcesPolicy = this.mExternalSourcesPolicy) == null || externalSourcesPolicy.getPackageTrustedToInstallApps(packageName, uid) != 0) {
                return false;
            } else {
                return true;
            }
        } else {
            throw new SecurityException("Caller uid " + callingUid + " does not own package " + packageName);
        }
    }

    public ComponentName getInstantAppResolverSettingsComponent() {
        return this.mInstantAppResolverSettingsComponent;
    }

    public ComponentName getInstantAppInstallerComponent() {
        ActivityInfo activityInfo;
        if (getInstantAppPackageName(Binder.getCallingUid()) == null && (activityInfo = this.mInstantAppInstallerActivity) != null) {
            return activityInfo.getComponentName();
        }
        return null;
    }

    public String getInstantAppAndroidId(String packageName, int userId) {
        String instantAppAndroidIdLPw;
        this.mContext.enforceCallingOrSelfPermission("android.permission.ACCESS_INSTANT_APPS", "getInstantAppAndroidId");
        this.mPermissionManager.enforceCrossUserPermission(Binder.getCallingUid(), userId, true, false, "getInstantAppAndroidId");
        if (!isInstantApp(packageName, userId)) {
            return null;
        }
        synchronized (this.mPackages) {
            instantAppAndroidIdLPw = this.mInstantAppRegistry.getInstantAppAndroidIdLPw(packageName, userId);
        }
        return instantAppAndroidIdLPw;
    }

    /* access modifiers changed from: package-private */
    public boolean canHaveOatDir(String packageName) {
        synchronized (this.mPackages) {
            PackageParser.Package p = this.mPackages.get(packageName);
            if (p == null) {
                return false;
            }
            boolean canHaveOatDir = p.canHaveOatDir();
            return canHaveOatDir;
        }
    }

    private String getOatDir(PackageParser.Package pkg) {
        if (!pkg.canHaveOatDir()) {
            return null;
        }
        File codePath = new File(pkg.codePath);
        if (codePath.isDirectory()) {
            return PackageDexOptimizer.getOatDir(codePath).getAbsolutePath();
        }
        return null;
    }

    /* access modifiers changed from: package-private */
    public void deleteOatArtifactsOfPackage(String packageName) {
        PackageParser.Package pkg;
        synchronized (this.mPackages) {
            pkg = this.mPackages.get(packageName);
        }
        String[] instructionSets = InstructionSets.getAppDexInstructionSets(pkg.applicationInfo);
        List<String> codePaths = pkg.getAllCodePaths();
        String oatDir = getOatDir(pkg);
        for (String codePath : codePaths) {
            for (String isa : instructionSets) {
                try {
                    this.mInstaller.deleteOdex(codePath, isa, oatDir);
                } catch (Installer.InstallerException e) {
                    Log.e(TAG, "Failed deleting oat files for " + codePath, e);
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public Set<String> getUnusedPackages(long downgradeTimeThresholdMillis) {
        ArrayMap<String, PackageParser.Package> arrayMap;
        Set<String> unusedPackages = new HashSet<>();
        long currentTimeInMillis = System.currentTimeMillis();
        ArrayMap<String, PackageParser.Package> arrayMap2 = this.mPackages;
        synchronized (arrayMap2) {
            try {
                Iterator<PackageParser.Package> it = this.mPackages.values().iterator();
                while (it.hasNext()) {
                    PackageParser.Package pkg = it.next();
                    PackageSetting ps = this.mSettings.mPackages.get(pkg.packageName);
                    if (ps != null) {
                        PackageDexUsage.PackageUseInfo packageUseInfo = getDexManager().getPackageUseInfoOrDefault(pkg.packageName);
                        PackageSetting packageSetting = ps;
                        Iterator<PackageParser.Package> it2 = it;
                        arrayMap = arrayMap2;
                        PackageParser.Package pkg2 = pkg;
                        if (PackageManagerServiceUtils.isUnusedSinceTimeInMillis(ps.firstInstallTime, currentTimeInMillis, downgradeTimeThresholdMillis, packageUseInfo, pkg.getLatestPackageUseTimeInMills(), pkg.getLatestForegroundPackageUseTimeInMills())) {
                            unusedPackages.add(pkg2.packageName);
                        }
                        arrayMap2 = arrayMap;
                        it = it2;
                    }
                }
                return unusedPackages;
            } catch (Throwable th) {
                th = th;
                throw th;
            }
        }
    }

    public void setHarmfulAppWarning(String packageName, CharSequence warning, int userId) {
        int callingUid = Binder.getCallingUid();
        int callingAppId = UserHandle.getAppId(callingUid);
        this.mPermissionManager.enforceCrossUserPermission(callingUid, userId, true, true, "setHarmfulAppInfo");
        if (callingAppId == 1000 || callingAppId == 0 || checkUidPermission("android.permission.SET_HARMFUL_APP_WARNINGS", callingUid) == 0) {
            synchronized (this.mPackages) {
                this.mSettings.setHarmfulAppWarningLPw(packageName, warning, userId);
                scheduleWritePackageRestrictionsLocked(userId);
            }
            return;
        }
        throw new SecurityException("Caller must have the android.permission.SET_HARMFUL_APP_WARNINGS permission.");
    }

    public CharSequence getHarmfulAppWarning(String packageName, int userId) {
        String harmfulAppWarningLPr;
        int callingUid = Binder.getCallingUid();
        int callingAppId = UserHandle.getAppId(callingUid);
        this.mPermissionManager.enforceCrossUserPermission(callingUid, userId, true, true, "getHarmfulAppInfo");
        if (callingAppId == 1000 || callingAppId == 0 || checkUidPermission("android.permission.SET_HARMFUL_APP_WARNINGS", callingUid) == 0) {
            synchronized (this.mPackages) {
                harmfulAppWarningLPr = this.mSettings.getHarmfulAppWarningLPr(packageName, userId);
            }
            return harmfulAppWarningLPr;
        }
        throw new SecurityException("Caller must have the android.permission.SET_HARMFUL_APP_WARNINGS permission.");
    }

    public boolean isPackageStateProtected(String packageName, int userId) {
        int callingUid = Binder.getCallingUid();
        int callingAppId = UserHandle.getAppId(callingUid);
        this.mPermissionManager.enforceCrossUserPermission(callingUid, userId, false, true, "isPackageStateProtected");
        if (callingAppId == 1000 || callingAppId == 0 || checkUidPermission("android.permission.MANAGE_DEVICE_ADMINS", callingUid) == 0) {
            return this.mProtectedPackages.isPackageStateProtected(userId, packageName);
        }
        throw new SecurityException("Caller must have the android.permission.MANAGE_DEVICE_ADMINS permission.");
    }

    /* Debug info: failed to restart local var, previous not found, register: 19 */
    public void sendDeviceCustomizationReadyBroadcast() {
        this.mContext.enforceCallingPermission("android.permission.SEND_DEVICE_CUSTOMIZATION_READY", "sendDeviceCustomizationReadyBroadcast");
        long ident = Binder.clearCallingIdentity();
        try {
            Intent intent = new Intent("android.intent.action.DEVICE_CUSTOMIZATION_READY");
            intent.setFlags(DumpState.DUMP_SERVICE_PERMISSIONS);
            ActivityManager.getService().broadcastIntent((IApplicationThread) null, intent, (String) null, (IIntentReceiver) null, 0, (String) null, (Bundle) null, new String[]{"android.permission.RECEIVE_DEVICE_CUSTOMIZATION_READY"}, -1, (Bundle) null, false, false, -1);
            Binder.restoreCallingIdentity(ident);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        } catch (Throwable e2) {
            Binder.restoreCallingIdentity(ident);
            throw e2;
        }
    }

    static class ActiveInstallSession {
        private final InstallationStatistic mInstallationStatistic;
        private final String mInstallerPackageName;
        private final int mInstallerUid;
        private final IPackageInstallObserver2 mObserver;
        private final String mPackageName;
        private final PackageInstaller.SessionParams mSessionParams;
        private final PackageParser.SigningDetails mSigningDetails;
        private final File mStagedDir;
        private final UserHandle mUser;

        ActiveInstallSession(String packageName, File stagedDir, IPackageInstallObserver2 observer, PackageInstaller.SessionParams sessionParams, String installerPackageName, int installerUid, UserHandle user, PackageParser.SigningDetails signingDetails, InstallationStatistic installationStatistic) {
            this.mPackageName = packageName;
            this.mStagedDir = stagedDir;
            this.mObserver = observer;
            this.mSessionParams = sessionParams;
            this.mInstallerPackageName = installerPackageName;
            this.mInstallerUid = installerUid;
            this.mUser = user;
            this.mSigningDetails = signingDetails;
            this.mInstallationStatistic = installationStatistic;
        }

        public String getPackageName() {
            return this.mPackageName;
        }

        public File getStagedDir() {
            return this.mStagedDir;
        }

        public IPackageInstallObserver2 getObserver() {
            return this.mObserver;
        }

        public PackageInstaller.SessionParams getSessionParams() {
            return this.mSessionParams;
        }

        public String getInstallerPackageName() {
            return this.mInstallerPackageName;
        }

        public int getInstallerUid() {
            return this.mInstallerUid;
        }

        public UserHandle getUser() {
            return this.mUser;
        }

        public PackageParser.SigningDetails getSigningDetails() {
            return this.mSigningDetails;
        }

        public InstallationStatistic getInstallationStatistic() {
            return this.mInstallationStatistic;
        }
    }

    public void checkPkgInstallerOptMode() {
        this.mRequiredInstallerPackage = getRequiredInstallerLPr();
        synchronized (this.mPackages) {
            this.mPermissionManager.updatePermissions(this.mRequiredInstallerPackage, this.mPackages.get(this.mRequiredInstallerPackage), true, this.mPackages.values(), this.mPermissionCallback);
        }
    }
}
